
Audio_nios.elf:     file format elf32-littlenios2
Audio_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x050801bc

Program Header:
    LOAD off    0x00001000 vaddr 0x05080000 paddr 0x05080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05080020 paddr 0x05080020 align 2**12
         filesz 0x00015678 memsz 0x00015678 flags r-x
    LOAD off    0x00016698 vaddr 0x05095698 paddr 0x05097194 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x00018c90 vaddr 0x05098c90 paddr 0x05098c90 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05080000  05080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  05080020  05080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001470c  050801bc  050801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd0  050948c8  050948c8  000158c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  05095698  05097194  00016698  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  05098c90  05098c90  00018c90  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00000000  00000000  00018194  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  05098e20  05098e20  00018194  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018194  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e48  00000000  00000000  000181b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00028801  00000000  00000000  00019000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a1b7  00000000  00000000  00041801  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000cf41  00000000  00000000  0004b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002a60  00000000  00000000  000588fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038da  00000000  00000000  0005b35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001b313  00000000  00000000  0005ec36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00079f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000014c8  00000000  00000000  00079fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ef9e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007efa1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007efa4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007efa5  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007efa6  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007efaa  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007efae  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007efb2  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007efbb  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007efc4  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0007efcd  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000010  00000000  00000000  0007efd7  2**0
                  CONTENTS, READONLY
 30 .jdi          00003e1b  00000000  00000000  0007efe7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a2011  00000000  00000000  00082e02  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05080000 l    d  .entry	00000000 .entry
05080020 l    d  .exceptions	00000000 .exceptions
050801bc l    d  .text	00000000 .text
050948c8 l    d  .rodata	00000000 .rodata
05095698 l    d  .rwdata	00000000 .rwdata
05098c90 l    d  .bss	00000000 .bss
00000000 l    d  .sdram	00000000 .sdram
05098e20 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Audio_nios_bsp//obj/HAL/src/crt0.o
05080204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
05080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 AUDIO.c
05098cd0 l     O .bss	00000028 reg_file
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 SEG7.c
05095698 l     O .rwdata	00000010 szMap
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 main.c
05098c90 l     O .bss	00000004 sum.4135
05098c94 l     O .bss	00000002 cnt.4136
00000000 l    df *ABS*	00000000 lib2-divmod.c
050826a4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
050953a6 l     O .rodata	00000010 zeroes.4166
050953b6 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
050953c6 l     O .rodata	00000010 zeroes.4181
050953d6 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
05086c70 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
050887f0 l     F .text	00000008 __fp_lock
050887f8 l     F .text	00000008 __fp_unlock
0508880c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
050956a8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
05095aec l     O .rwdata	00000020 lc_ctype_charset
05095acc l     O .rwdata	00000020 lc_message_charset
05095b0c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
05095408 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0509552c l     O .rodata	00000010 zeroes.4110
0509553c l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
0508ce9c l     F .text	000000fc __sprint_r.part.0
0509555c l     O .rodata	00000010 blanks.4125
0509554c l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
05091db8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
05091ed8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
05091f04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
050921b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
050922a8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0509238c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
05092568 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
05097188 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
050927f4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0509293c l     F .text	00000038 alt_dev_reg
050960f4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
05092c30 l     F .text	00000204 altera_avalon_jtag_uart_irq
05092e34 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
05093454 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0509382c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05093cd8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
05093e10 l     F .text	00000050 alt_get_errno
05093e60 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
05081fa4 g     F .text	00000050 display_time_elapsed
0508b2ac g     F .text	00000074 _mprec_log10
05081030 g     F .text	00000124 I2C_Read
0508b398 g     F .text	0000008c __any_on
0508e7ec g     F .text	00000054 _isatty_r
05095414 g     O .rodata	00000028 __mprec_tinytens
050924b0 g     F .text	00000078 alt_main
05082838 g     F .text	000000b8 _puts_r
05081d38 g     F .text	00000060 button_monitor_isr
05098d20 g     O .bss	00000100 alt_irq
0508e840 g     F .text	0000005c _lseek_r
05097194 g       *ABS*	00000000 __flash_rwdata_start
05090920 g     F .text	00000084 .hidden __eqdf2
05081bdc g     F .text	0000003c ui_is_mic_record
05098e20 g       *ABS*	00000000 __alt_heap_start
05080208 g     F .text	00000188 AUDIO_Init
050827fc g     F .text	0000003c printf
0508ea68 g     F .text	0000009c _wcrtomb_r
05080450 g     F .text	00000078 AUDIO_AdcEnableHighPassFilter
0508bb64 g     F .text	0000005c __sseek
05088b40 g     F .text	00000010 __sinit
0508e8f8 g     F .text	00000154 __swbuf_r
050895b8 g     F .text	0000007c _setlocale_r
050889ac g     F .text	00000064 __sfmoreglue
05092548 g     F .text	00000020 __malloc_unlock
0508a218 g     F .text	0000015c memmove
05088b28 g     F .text	00000018 _cleanup
05080cfc g     F .text	000000f4 aduio_RegWrite
05080f08 g     F .text	0000002c AUDIO_FifoClear
0508a498 g     F .text	000000a8 _Balloc
050816b0 g     F .text	0000002c LED_AllOff
050909a4 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
05080eb4 g     F .text	00000054 AUDIO_AdcFifoGetData
050813c8 g     F .text	00000130 i2c_write
05080000 g     F .entry	0000001c __reset
05081ff4 g     F .text	00000094 show_power
05080020 g       *ABS*	00000000 __flash_exceptions_start
0508e794 g     F .text	00000058 _fstat_r
05098cb4 g     O .bss	00000004 errno
0508bae0 g     F .text	00000008 __seofread
0508be34 g     F .text	00001068 ___svfiprintf_internal_r
05098cc0 g     O .bss	00000004 alt_argv
0509f154 g       *ABS*	00000000 _gp
050927c4 g     F .text	00000030 usleep
050821ec g     F .text	00000060 show_menu
05095f74 g     O .rwdata	00000180 alt_fd_list
05094240 g     F .text	00000090 alt_find_dev
0508a0e0 g     F .text	00000138 memcpy
0508164c g     F .text	00000038 LED_Display
05088800 g     F .text	0000000c _cleanup_r
05091be0 g     F .text	000000d0 .hidden __floatsidf
05081d98 g     F .text	00000084 button_monitor_start
05093d98 g     F .text	00000078 alt_io_redirect
05090a84 g     F .text	000000e0 .hidden __ltdf2
050948c8 g       *ABS*	00000000 __DTOR_END__
050828f0 g     F .text	00000014 puts
0508b9c4 g     F .text	00000074 __fpclassifyd
0508b208 g     F .text	000000a4 __ratio
0508e30c g     F .text	00000024 __vfiprintf_internal
05081e1c g     F .text	00000188 init_audio
05093030 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
050827d0 g     F .text	0000002c _printf_r
050827c0 g     F .text	00000008 .hidden __udivsi3
05092204 g     F .text	000000a4 isatty
05080be4 g     F .text	0000008c AUDIO_EnableByPass
05095464 g     O .rodata	000000c8 __mprec_tens
05089634 g     F .text	0000000c __locale_charset
05086b00 g     F .text	00000040 vsnprintf
05094498 g     F .text	0000008c alt_icache_flush
05081154 g     F .text	00000178 I2C_MultipleRead
05098cb0 g     O .bss	00000004 __malloc_top_pad
050809c4 g     F .text	00000110 AUDIO_SetLineInVol
0509715c g     O .rwdata	00000004 __mb_cur_max
05089664 g     F .text	0000000c _localeconv_r
0508a898 g     F .text	0000003c __i2b
05088fa4 g     F .text	000004a4 __sfvwrite_r
0508174c g     F .text	0000005c SEG7_Clear
0508ba38 g     F .text	00000054 _sbrk_r
05081b4c g     F .text	00000090 myprintf_dword_array
0508e89c g     F .text	0000005c _read_r
0509717c g     O .rwdata	00000004 alt_max_fd
0508e4a4 g     F .text	00000100 _fclose_r
050887c0 g     F .text	00000030 fflush
05080578 g     F .text	000000e0 AUDIO_DacEnableZeroCross
05098cac g     O .bss	00000004 __malloc_max_sbrked_mem
05092004 g     F .text	000001b0 alt_irq_register
0508f7b8 g     F .text	0000089c .hidden __adddf3
0508afb0 g     F .text	0000011c __b2d
0508f228 g     F .text	00000590 .hidden __umoddi3
050923dc g     F .text	000000d4 lseek
05097154 g     O .rwdata	00000004 _global_impure_ptr
0508b424 g     F .text	000005a0 _realloc_r
05098e20 g       *ABS*	00000000 __bss_end
05093be8 g     F .text	000000f0 alt_iic_isr_register
0509411c g     F .text	00000104 alt_tick
0508ec68 g     F .text	000005c0 .hidden __udivdi3
0508e5b8 g     F .text	00000184 _fputwc_r
0509543c g     O .rodata	00000028 __mprec_bigtens
0508a67c g     F .text	00000104 __s2b
05091cb0 g     F .text	000000a4 .hidden __floatunsidf
050803d8 g     F .text	00000078 AUDIO_MicBoost
0508ad58 g     F .text	00000060 __mcmp
05088b60 g     F .text	00000018 __fp_lock_all
05093b9c g     F .text	0000004c alt_ic_irq_enabled
05080f34 g     F .text	000000fc I2C_Write
05081804 g     F .text	00000070 SEG7_Number
05094084 g     F .text	00000098 alt_alarm_stop
05098cb8 g     O .bss	00000004 alt_irq_active
050800ec g     F .exceptions	000000d0 alt_irq_handler
05095f4c g     O .rwdata	00000028 alt_dev_null
050812cc g     F .text	00000088 i2c_start
050937e8 g     F .text	00000044 alt_dcache_flush_all
0508a780 g     F .text	00000068 __hi0bits
05091b58 g     F .text	00000088 .hidden __fixdfsi
05097194 g       *ABS*	00000000 __ram_rwdata_end
05097174 g     O .rwdata	00000008 alt_dev_list
05092844 g     F .text	000000f8 write
05095698 g       *ABS*	00000000 __ram_rodata_end
05091f54 g     F .text	000000b0 fstat
05090a84 g     F .text	000000e0 .hidden __ledf2
05081a58 g     F .text	0000006c myprintf
0508aad0 g     F .text	00000140 __pow5mult
0508cfb0 g     F .text	0000135c ___vfiprintf_internal_r
05098ca4 g     O .bss	00000004 __nlocale_changed
050827c8 g     F .text	00000008 .hidden __umodsi3
05080c70 g     F .text	0000008c AUDIO_EnableSiteTone
05098e20 g       *ABS*	00000000 end
05081684 g     F .text	0000002c LED_AllOn
05092b6c g     F .text	000000c4 altera_avalon_jtag_uart_init
050948c8 g       *ABS*	00000000 __CTOR_LIST__
050ce200 g       *ABS*	00000000 __alt_stack_pointer
050934c8 g     F .text	00000088 alt_avalon_timer_sc_init
05091d54 g     F .text	00000064 .hidden __clzsi2
0509323c g     F .text	00000218 altera_avalon_jtag_uart_write
05088b50 g     F .text	00000004 __sfp_lock_acquire
05089ff8 g     F .text	000000e8 memchr
050849f0 g     F .text	00001ffc ___vfprintf_internal_r
05082904 g     F .text	00000058 _sprintf_r
05088cb4 g     F .text	000002f0 _free_r
05089640 g     F .text	00000010 __locale_mb_cur_max
05094700 g     F .text	00000194 __call_exitprocs
05098ca0 g     O .bss	00000004 __mlocale_changed
05097160 g     O .rwdata	00000004 __malloc_sbrk_base
050801bc g     F .text	0000004c _start
05098cc8 g     O .bss	00000004 _alt_tick_rate
0508ac10 g     F .text	00000148 __lshift
05098ccc g     O .bss	00000004 _alt_nticks
050925b8 g     F .text	000000fc read
050929a8 g     F .text	00000060 alt_sys_init
0508bc6c g     F .text	000001c8 __ssprint_r
050945ec g     F .text	00000114 __register_exitproc
05080658 g     F .text	0000008c AUDIO_DacEnableSoftMute
0508a8d4 g     F .text	000001fc __multiply
05092edc g     F .text	00000068 altera_avalon_jtag_uart_close
05095698 g       *ABS*	00000000 __ram_rwdata_start
050948c8 g       *ABS*	00000000 __ram_rodata_start
05098cf8 g     O .bss	00000028 __malloc_current_mallinfo
0508b0cc g     F .text	0000013c __d2b
05081c54 g     F .text	0000003c ui_is_dac_zero_cross
05092a08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
050943e4 g     F .text	000000b4 alt_get_fd
05093690 g     F .text	00000158 alt_busy_sleep
0508e38c g     F .text	00000054 _close_r
05094570 g     F .text	0000007c memcmp
05092ac8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
05098e20 g       *ABS*	00000000 __alt_stack_base
05092b18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05086b40 g     F .text	00000130 __swsetup_r
05082088 g     F .text	00000058 init
05090054 g     F .text	000008cc .hidden __divdf3
05088a10 g     F .text	00000118 __sfp
0508b320 g     F .text	00000078 __copybits
050804c8 g     F .text	000000b0 AUDIO_DacDeemphasisControl
05095b44 g     O .rwdata	00000408 __malloc_av_
05088b5c g     F .text	00000004 __sinit_lock_release
05086a10 g     F .text	000000f0 _vsnprintf_r
05081354 g     F .text	00000074 i2c_stop
05090b64 g     F .text	00000724 .hidden __muldf3
0508ba8c g     F .text	00000054 __sread
050817a8 g     F .text	0000005c SEG7_Full
050942d0 g     F .text	00000114 alt_find_file
05081940 g     F .text	000000e8 SEG7_Decimal
0509387c g     F .text	000000a4 alt_dev_llist_insert
05092528 g     F .text	00000020 __malloc_lock
05092714 g     F .text	000000b0 sbrk
05082a60 g     F .text	00001f90 ___svfprintf_internal_r
05080850 g     F .text	00000090 AUDIO_SetInputSource
05088598 g     F .text	00000228 _fflush_r
0508e3e0 g     F .text	000000c4 _calloc_r
05080390 g     F .text	00000048 AUDIO_InterfaceActive
05098c90 g       *ABS*	00000000 __bss_start
0508a374 g     F .text	00000124 memset
0508224c g     F .text	00000458 main
05098cc4 g     O .bss	00000004 alt_envp
05098ca8 g     O .bss	00000004 __malloc_max_total_mem
05092a68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
050814f8 g     F .text	00000154 i2c_read
0508ea4c g     F .text	0000001c __swbuf
05098c98 g     O .bss	00000004 record_sample_rate
0508bbc0 g     F .text	00000008 __sclose
050ce200 g       *ABS*	00000000 __alt_heap_limit
0508e5a4 g     F .text	00000014 fclose
05086e70 g     F .text	00001728 _dtoa_r
05089850 g     F .text	000007a8 _malloc_r
0508ebdc g     F .text	00000030 __ascii_wctomb
05097180 g     O .rwdata	00000004 alt_errno
05089448 g     F .text	000000b8 _fwalk
05081c90 g     F .text	000000a8 ui_get_sample_rate
05082710 g     F .text	00000054 .hidden __divsi3
05088b90 g     F .text	00000124 _malloc_trim_r
050948c8 g       *ABS*	00000000 __CTOR_END__
05080770 g     F .text	000000e0 AUDIO_LineInMute
0508bbc8 g     F .text	000000a4 strcmp
050806e4 g     F .text	0000008c AUDIO_MicMute
050948c8 g       *ABS*	00000000 __flash_rodata_start
050948c8 g       *ABS*	00000000 __DTOR_LIST__
05090920 g     F .text	00000084 .hidden __nedf2
05092974 g     F .text	00000034 alt_irq_init
050926b4 g     F .text	00000060 alt_release_fd
0508295c g     F .text	0000006c sprintf
0509556c g     O .rodata	00000100 .hidden __clz_tab
05081874 g     F .text	000000cc SEG7_Hex
05081a28 g     F .text	00000030 debug_output
05098c9c g     O .bss	00000004 _PathLocale
05094524 g     F .text	00000014 atexit
050820e0 g     F .text	0000010c dump_record_data
0508e330 g     F .text	0000005c _write_r
05089670 g     F .text	0000001c setlocale
05097158 g     O .rwdata	00000004 _impure_ptr
05098cbc g     O .bss	00000004 alt_argc
0509397c g     F .text	0000005c _do_dtors
0508965c g     F .text	00000008 __locale_cjk_lang
05080e78 g     F .text	0000003c AUDIO_AdcFifoNotEmpty
05080020 g       .exceptions	00000000 alt_irq_entry
0508af50 g     F .text	00000060 __ulp
05088b78 g     F .text	00000018 __fp_unlock_all
05081c18 g     F .text	0000003c ui_is_mic_boost
05080e2c g     F .text	0000004c AUDIO_DacFifoSetData
0509716c g     O .rwdata	00000008 alt_fs_list
05081ac4 g     F .text	00000088 myprintf_hex_array
05080020 g       *ABS*	00000000 __ram_exceptions_start
050808e0 g     F .text	000000e4 AUDIO_SetSampleRate
0508968c g     F .text	0000000c localeconv
05080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
05093a08 g     F .text	00000050 alt_ic_isr_register
05097194 g       *ABS*	00000000 _edata
05098e20 g       *ABS*	00000000 _end
05080ad4 g     F .text	00000110 AUDIO_SetLineOutVol
050801bc g       *ABS*	00000000 __ram_exceptions_end
05092f44 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
05093af8 g     F .text	000000a4 alt_ic_irq_disable
0508bae8 g     F .text	0000007c __swrite
05097164 g     O .rwdata	00000004 __malloc_trim_threshold
05094220 g     F .text	00000020 altera_nios2_qsys_irq_init
05089650 g     F .text	0000000c __locale_msgcharset
05094538 g     F .text	00000038 exit
050816dc g     F .text	00000070 LED_LightCount
05089500 g     F .text	000000b8 _fwalk_reent
0508adb8 g     F .text	00000198 __mdiff
05082764 g     F .text	0000005c .hidden __modsi3
050ce200 g       *ABS*	00000000 __alt_data_end
05080020 g     F .exceptions	00000000 alt_exception
05088b54 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
05094894 g     F .text	00000034 _exit
05093550 g     F .text	00000140 alt_alarm_start
05089698 g     F .text	000001b8 __smakebuf_r
050829c8 g     F .text	00000098 strlen
05093f2c g     F .text	00000158 open
05080df0 g     F .text	0000003c AUDIO_DacFifoNotFull
050909a4 g     F .text	000000e0 .hidden __gedf2
05097168 g     O .rwdata	00000004 __wctomb
0508cf98 g     F .text	00000018 __sprint_r
050939d8 g     F .text	00000030 alt_icache_flush_all
05097184 g     O .rwdata	00000004 alt_priority_mask
05093a58 g     F .text	000000a0 alt_ic_irq_enable
050869ec g     F .text	00000024 __vfprintf_internal
0508ec0c g     F .text	0000005c _wctomb_r
05091288 g     F .text	000008d0 .hidden __subdf3
0508a7e8 g     F .text	000000b0 __lo0bits
0509718c g     O .rwdata	00000008 alt_alarm_list
05093920 g     F .text	0000005c _do_ctors
0508eb04 g     F .text	000000d8 wcrtomb
05091e08 g     F .text	000000d0 close
0509230c g     F .text	00000080 alt_load
0508e73c g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
05088b58 g     F .text	00000004 __sinit_lock_acquire
0508a568 g     F .text	00000114 __multadd
05094a78 g     O .rodata	00000800 szMenu
0508a540 g     F .text	00000028 _Bfree



Disassembly of section .entry:

05080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 508000c:	00bffd16 	blt	zero,r2,5080004 <__alt_data_end+0xfffb1e04>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5080010:	00414234 	movhi	at,1288
    ori r1, r1, %lo(_start)
 5080014:	08406f14 	ori	at,at,444
    jmp r1
 5080018:	0800683a 	jmp	at
 508001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

05080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 508002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 508003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 508004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 508005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 508006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 508007c:	10000326 	beq	r2,zero,508008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5080080:	20000226 	beq	r4,zero,508008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5080084:	50800ec0 	call	50800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5080088:	00000306 	br	5080098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 508008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 5080090:	e8bfff17 	ldw	r2,-4(ea)

05080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 5080094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 5080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 508009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50800e8:	ef80083a 	eret

050800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50800ec:	defff904 	addi	sp,sp,-28
 50800f0:	dfc00615 	stw	ra,24(sp)
 50800f4:	df000515 	stw	fp,20(sp)
 50800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 50800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5080100:	0005313a 	rdctl	r2,ipending
 5080104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5080108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 508010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5080110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5080114:	00800044 	movi	r2,1
 5080118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 508011c:	e0fffb17 	ldw	r3,-20(fp)
 5080120:	e0bffc17 	ldw	r2,-16(fp)
 5080124:	1884703a 	and	r2,r3,r2
 5080128:	10001426 	beq	r2,zero,508017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 508012c:	008142b4 	movhi	r2,1290
 5080130:	10a34804 	addi	r2,r2,-29408
 5080134:	e0fffd17 	ldw	r3,-12(fp)
 5080138:	180690fa 	slli	r3,r3,3
 508013c:	10c5883a 	add	r2,r2,r3
 5080140:	10c00017 	ldw	r3,0(r2)
 5080144:	008142b4 	movhi	r2,1290
 5080148:	10a34804 	addi	r2,r2,-29408
 508014c:	e13ffd17 	ldw	r4,-12(fp)
 5080150:	200890fa 	slli	r4,r4,3
 5080154:	1105883a 	add	r2,r2,r4
 5080158:	10800104 	addi	r2,r2,4
 508015c:	10800017 	ldw	r2,0(r2)
 5080160:	1009883a 	mov	r4,r2
 5080164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 5080168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 508016c:	0005313a 	rdctl	r2,ipending
 5080170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5080174:	e0bfff17 	ldw	r2,-4(fp)
 5080178:	00000706 	br	5080198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 508017c:	e0bffc17 	ldw	r2,-16(fp)
 5080180:	1085883a 	add	r2,r2,r2
 5080184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 5080188:	e0bffd17 	ldw	r2,-12(fp)
 508018c:	10800044 	addi	r2,r2,1
 5080190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 5080194:	003fe106 	br	508011c <__alt_data_end+0xfffb1f1c>

    active = alt_irq_pending ();
 5080198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 508019c:	e0bffb17 	ldw	r2,-20(fp)
 50801a0:	103fdb1e 	bne	r2,zero,5080110 <__alt_data_end+0xfffb1f10>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50801a4:	0001883a 	nop
}
 50801a8:	e037883a 	mov	sp,fp
 50801ac:	dfc00117 	ldw	ra,4(sp)
 50801b0:	df000017 	ldw	fp,0(sp)
 50801b4:	dec00204 	addi	sp,sp,8
 50801b8:	f800283a 	ret

Disassembly of section .text:

050801bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 50801bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 50801c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 50801c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 50801c8:	00bffd16 	blt	zero,r2,50801c0 <__alt_data_end+0xfffb1fc0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 50801cc:	06c14334 	movhi	sp,1292
    ori sp, sp, %lo(__alt_stack_pointer)
 50801d0:	def88014 	ori	sp,sp,57856
    movhi gp, %hi(_gp)
 50801d4:	06814274 	movhi	gp,1289
    ori gp, gp, %lo(_gp)
 50801d8:	d6bc5514 	ori	gp,gp,61780
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 50801dc:	00814274 	movhi	r2,1289
    ori r2, r2, %lo(__bss_start)
 50801e0:	10a32414 	ori	r2,r2,35984

    movhi r3, %hi(__bss_end)
 50801e4:	00c14274 	movhi	r3,1289
    ori r3, r3, %lo(__bss_end)
 50801e8:	18e38814 	ori	r3,r3,36384

    beq r2, r3, 1f
 50801ec:	10c00326 	beq	r2,r3,50801fc <_start+0x40>

0:
    stw zero, (r2)
 50801f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 50801f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 50801f8:	10fffd36 	bltu	r2,r3,50801f0 <__alt_data_end+0xfffb1ff0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 50801fc:	509230c0 	call	509230c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5080200:	50924b00 	call	50924b0 <alt_main>

05080204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 5080204:	003fff06 	br	5080204 <__alt_data_end+0xfffb2004>

05080208 <AUDIO_Init>:

/////////////////////////////////////////////////////////////////////////
///////////// External function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool AUDIO_Init(void){
 5080208:	defffd04 	addi	sp,sp,-12
 508020c:	dfc00215 	stw	ra,8(sp)
 5080210:	df000115 	stw	fp,4(sp)
 5080214:	df000104 	addi	fp,sp,4
   bool bSuccess = TRUE;
 5080218:	00800044 	movi	r2,1
 508021c:	e0bfff15 	stw	r2,-4(fp)
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init...\r\n"));
 5080220:	01014274 	movhi	r4,1289
 5080224:	21123204 	addi	r4,r4,18632
 5080228:	5081a580 	call	5081a58 <myprintf>

    if (bSuccess)
 508022c:	e0bfff17 	ldw	r2,-4(fp)
 5080230:	10000426 	beq	r2,zero,5080244 <AUDIO_Init+0x3c>
        bSuccess = aduio_RegWrite(15, 0x0000);  // reset
 5080234:	010003c4 	movi	r4,15
 5080238:	000b883a 	mov	r5,zero
 508023c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080240:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080244:	e0bfff17 	ldw	r2,-4(fp)
 5080248:	10000426 	beq	r2,zero,508025c <AUDIO_Init+0x54>
        bSuccess = aduio_RegWrite(9, 0x0000);  // inactive interface         
 508024c:	01000244 	movi	r4,9
 5080250:	000b883a 	mov	r5,zero
 5080254:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080258:	e0bfff15 	stw	r2,-4(fp)
       
    //usleep(20*1000);    
    if (bSuccess)
 508025c:	e0bfff17 	ldw	r2,-4(fp)
 5080260:	10000426 	beq	r2,zero,5080274 <AUDIO_Init+0x6c>
        bSuccess = aduio_RegWrite(0, 0x0017);  // Left Line In: set left line in volume
 5080264:	0009883a 	mov	r4,zero
 5080268:	014005c4 	movi	r5,23
 508026c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080270:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 5080274:	e0bfff17 	ldw	r2,-4(fp)
 5080278:	10000426 	beq	r2,zero,508028c <AUDIO_Init+0x84>
        bSuccess = aduio_RegWrite(1, 0x0017);  // Right Line In: set right line in volume
 508027c:	01000044 	movi	r4,1
 5080280:	014005c4 	movi	r5,23
 5080284:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080288:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 508028c:	e0bfff17 	ldw	r2,-4(fp)
 5080290:	10000426 	beq	r2,zero,50802a4 <AUDIO_Init+0x9c>
        bSuccess = aduio_RegWrite(2, 0x005B);  // Left Headphone Out: set left line out volume
 5080294:	01000084 	movi	r4,2
 5080298:	014016c4 	movi	r5,91
 508029c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802a0:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)
 50802a4:	e0bfff17 	ldw	r2,-4(fp)
 50802a8:	10000426 	beq	r2,zero,50802bc <AUDIO_Init+0xb4>
        bSuccess = aduio_RegWrite(3, 0x005B);  // Right Headphone Out: set right line out volume
 50802ac:	010000c4 	movi	r4,3
 50802b0:	014016c4 	movi	r5,91
 50802b4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802b8:	e0bfff15 	stw	r2,-4(fp)
        
    if (bSuccess)      
 50802bc:	e0bfff17 	ldw	r2,-4(fp)
 50802c0:	10000426 	beq	r2,zero,50802d4 <AUDIO_Init+0xcc>
        bSuccess = aduio_RegWrite(4, 0x0015);  // Analogue Audio Path Control: set mic as input and boost it, and enable dac         
 50802c4:	01000104 	movi	r4,4
 50802c8:	01400544 	movi	r5,21
 50802cc:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802d0:	e0bfff15 	stw	r2,-4(fp)
                
    if (bSuccess)
 50802d4:	e0bfff17 	ldw	r2,-4(fp)
 50802d8:	10000426 	beq	r2,zero,50802ec <AUDIO_Init+0xe4>
        bSuccess = aduio_RegWrite(5, 0x0000);  // Digital Audio Path Control: disable soft mute         
 50802dc:	01000144 	movi	r4,5
 50802e0:	000b883a 	mov	r5,zero
 50802e4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50802e8:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 50802ec:	e0bfff17 	ldw	r2,-4(fp)
 50802f0:	10000426 	beq	r2,zero,5080304 <AUDIO_Init+0xfc>
        bSuccess = aduio_RegWrite(6, 0);  // power down control: power on all         
 50802f4:	01000184 	movi	r4,6
 50802f8:	000b883a 	mov	r5,zero
 50802fc:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080300:	e0bfff15 	stw	r2,-4(fp)

    if (bSuccess)
 5080304:	e0bfff17 	ldw	r2,-4(fp)
 5080308:	10000426 	beq	r2,zero,508031c <AUDIO_Init+0x114>
        bSuccess = aduio_RegWrite(7, 0x0042);  // I2S, iwl=16-bits, Enable Master Mode         
 508030c:	010001c4 	movi	r4,7
 5080310:	01401084 	movi	r5,66
 5080314:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080318:	e0bfff15 	stw	r2,-4(fp)
//        bSuccess = aduio_RegWrite(7, 0x0041);  // MSB-First, left justified, iwl=16-bits, Enable Master Mode         

    if (bSuccess)
 508031c:	e0bfff17 	ldw	r2,-4(fp)
 5080320:	10000426 	beq	r2,zero,5080334 <AUDIO_Init+0x12c>
        bSuccess = aduio_RegWrite(8, 0x0002);  // Normal, Base OVer-Sampleing Rate 384 fs (BOSR=1)         
 5080324:	01000204 	movi	r4,8
 5080328:	01400084 	movi	r5,2
 508032c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080330:	e0bfff15 	stw	r2,-4(fp)


    if (bSuccess)
 5080334:	e0bfff17 	ldw	r2,-4(fp)
 5080338:	10000426 	beq	r2,zero,508034c <AUDIO_Init+0x144>
        bSuccess = aduio_RegWrite(9, 0x0001);  // active interface
 508033c:	01000244 	movi	r4,9
 5080340:	01400044 	movi	r5,1
 5080344:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080348:	e0bfff15 	stw	r2,-4(fp)
        
        
         
    AUDIO_DEBUG(("[AUDIO] AUDIO_Init %s\r\n", bSuccess?"success":"fail"));        
 508034c:	e0bfff17 	ldw	r2,-4(fp)
 5080350:	10000326 	beq	r2,zero,5080360 <AUDIO_Init+0x158>
 5080354:	00814274 	movhi	r2,1289
 5080358:	10923804 	addi	r2,r2,18656
 508035c:	00000206 	br	5080368 <AUDIO_Init+0x160>
 5080360:	00814274 	movhi	r2,1289
 5080364:	10923a04 	addi	r2,r2,18664
 5080368:	01014274 	movhi	r4,1289
 508036c:	21123c04 	addi	r4,r4,18672
 5080370:	100b883a 	mov	r5,r2
 5080374:	5081a580 	call	5081a58 <myprintf>
    
    return bSuccess;        
 5080378:	e0bfff17 	ldw	r2,-4(fp)
         
}
 508037c:	e037883a 	mov	sp,fp
 5080380:	dfc00117 	ldw	ra,4(sp)
 5080384:	df000017 	ldw	fp,0(sp)
 5080388:	dec00204 	addi	sp,sp,8
 508038c:	f800283a 	ret

05080390 <AUDIO_InterfaceActive>:

bool AUDIO_InterfaceActive(bool bActive){
 5080390:	defffc04 	addi	sp,sp,-16
 5080394:	dfc00315 	stw	ra,12(sp)
 5080398:	df000215 	stw	fp,8(sp)
 508039c:	df000204 	addi	fp,sp,8
 50803a0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    bSuccess = aduio_RegWrite(9, bActive?0x0001:0x0000); 
 50803a4:	e0bfff17 	ldw	r2,-4(fp)
 50803a8:	1004c03a 	cmpne	r2,r2,zero
 50803ac:	10803fcc 	andi	r2,r2,255
 50803b0:	01000244 	movi	r4,9
 50803b4:	100b883a 	mov	r5,r2
 50803b8:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50803bc:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 50803c0:	e0bffe17 	ldw	r2,-8(fp)
}
 50803c4:	e037883a 	mov	sp,fp
 50803c8:	dfc00117 	ldw	ra,4(sp)
 50803cc:	df000017 	ldw	fp,0(sp)
 50803d0:	dec00204 	addi	sp,sp,8
 50803d4:	f800283a 	ret

050803d8 <AUDIO_MicBoost>:

bool AUDIO_MicBoost(bool bBoost){
 50803d8:	defffb04 	addi	sp,sp,-20
 50803dc:	dfc00415 	stw	ra,16(sp)
 50803e0:	df000315 	stw	fp,12(sp)
 50803e4:	df000304 	addi	fp,sp,12
 50803e8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[4];
 50803ec:	008142b4 	movhi	r2,1290
 50803f0:	10a33404 	addi	r2,r2,-29488
 50803f4:	1080020b 	ldhu	r2,8(r2)
 50803f8:	e0bffd0d 	sth	r2,-12(fp)
    if (bBoost)
 50803fc:	e0bfff17 	ldw	r2,-4(fp)
 5080400:	10000426 	beq	r2,zero,5080414 <AUDIO_MicBoost+0x3c>
        control |= 0x0001;
 5080404:	e0bffd0b 	ldhu	r2,-12(fp)
 5080408:	10800054 	ori	r2,r2,1
 508040c:	e0bffd0d 	sth	r2,-12(fp)
 5080410:	00000406 	br	5080424 <AUDIO_MicBoost+0x4c>
    else        
        control &= 0xFFFE;
 5080414:	e0fffd0b 	ldhu	r3,-12(fp)
 5080418:	00bfff84 	movi	r2,-2
 508041c:	1884703a 	and	r2,r3,r2
 5080420:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080424:	e0bffd0b 	ldhu	r2,-12(fp)
 5080428:	01000104 	movi	r4,4
 508042c:	100b883a 	mov	r5,r2
 5080430:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080434:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;
 5080438:	e0bffe17 	ldw	r2,-8(fp)
}
 508043c:	e037883a 	mov	sp,fp
 5080440:	dfc00117 	ldw	ra,4(sp)
 5080444:	df000017 	ldw	fp,0(sp)
 5080448:	dec00204 	addi	sp,sp,8
 508044c:	f800283a 	ret

05080450 <AUDIO_AdcEnableHighPassFilter>:

bool AUDIO_AdcEnableHighPassFilter(bool bEnable){
 5080450:	defffb04 	addi	sp,sp,-20
 5080454:	dfc00415 	stw	ra,16(sp)
 5080458:	df000315 	stw	fp,12(sp)
 508045c:	df000304 	addi	fp,sp,12
 5080460:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 5080464:	008142b4 	movhi	r2,1290
 5080468:	10a33404 	addi	r2,r2,-29488
 508046c:	1080028b 	ldhu	r2,10(r2)
 5080470:	e0bffd0d 	sth	r2,-12(fp)
    if (bEnable)
 5080474:	e0bfff17 	ldw	r2,-4(fp)
 5080478:	10000526 	beq	r2,zero,5080490 <AUDIO_AdcEnableHighPassFilter+0x40>
        control &= 0xFFFE;
 508047c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080480:	00bfff84 	movi	r2,-2
 5080484:	1884703a 	and	r2,r3,r2
 5080488:	e0bffd0d 	sth	r2,-12(fp)
 508048c:	00000306 	br	508049c <AUDIO_AdcEnableHighPassFilter+0x4c>
    else        
        control |= 0x0001;
 5080490:	e0bffd0b 	ldhu	r2,-12(fp)
 5080494:	10800054 	ori	r2,r2,1
 5080498:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 508049c:	e0bffd0b 	ldhu	r2,-12(fp)
 50804a0:	01000144 	movi	r4,5
 50804a4:	100b883a 	mov	r5,r2
 50804a8:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50804ac:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;    
 50804b0:	e0bffe17 	ldw	r2,-8(fp)
}
 50804b4:	e037883a 	mov	sp,fp
 50804b8:	dfc00117 	ldw	ra,4(sp)
 50804bc:	df000017 	ldw	fp,0(sp)
 50804c0:	dec00204 	addi	sp,sp,8
 50804c4:	f800283a 	ret

050804c8 <AUDIO_DacDeemphasisControl>:



bool AUDIO_DacDeemphasisControl(alt_u8 deemphasis_type){
 50804c8:	defffb04 	addi	sp,sp,-20
 50804cc:	dfc00415 	stw	ra,16(sp)
 50804d0:	df000315 	stw	fp,12(sp)
 50804d4:	df000304 	addi	fp,sp,12
 50804d8:	2005883a 	mov	r2,r4
 50804dc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = reg_file[5];
 50804e0:	008142b4 	movhi	r2,1290
 50804e4:	10a33404 	addi	r2,r2,-29488
 50804e8:	1080028b 	ldhu	r2,10(r2)
 50804ec:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFF9;
 50804f0:	e0fffd0b 	ldhu	r3,-12(fp)
 50804f4:	00bffe44 	movi	r2,-7
 50804f8:	1884703a 	and	r2,r3,r2
 50804fc:	e0bffd0d 	sth	r2,-12(fp)
    switch(deemphasis_type){
 5080500:	e0bfff03 	ldbu	r2,-4(fp)
 5080504:	10c000a0 	cmpeqi	r3,r2,2
 5080508:	1800081e 	bne	r3,zero,508052c <AUDIO_DacDeemphasisControl+0x64>
 508050c:	10c000e0 	cmpeqi	r3,r2,3
 5080510:	18000a1e 	bne	r3,zero,508053c <AUDIO_DacDeemphasisControl+0x74>
 5080514:	10800060 	cmpeqi	r2,r2,1
 5080518:	10000c26 	beq	r2,zero,508054c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_48K: control |= ((0x03) << 1); break;
 508051c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080520:	10800194 	ori	r2,r2,6
 5080524:	e0bffd0d 	sth	r2,-12(fp)
 5080528:	00000806 	br	508054c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_44K1: control |= ((0x02) << 1); break;
 508052c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080530:	10800114 	ori	r2,r2,4
 5080534:	e0bffd0d 	sth	r2,-12(fp)
 5080538:	00000406 	br	508054c <AUDIO_DacDeemphasisControl+0x84>
        case DEEMPHASIS_32K: control |= ((0x01) << 1); break;
 508053c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080540:	10800094 	ori	r2,r2,2
 5080544:	e0bffd0d 	sth	r2,-12(fp)
 5080548:	0001883a 	nop
    }
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 508054c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080550:	01000144 	movi	r4,5
 5080554:	100b883a 	mov	r5,r2
 5080558:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508055c:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 5080560:	e0bffe17 	ldw	r2,-8(fp)
}
 5080564:	e037883a 	mov	sp,fp
 5080568:	dfc00117 	ldw	ra,4(sp)
 508056c:	df000017 	ldw	fp,0(sp)
 5080570:	dec00204 	addi	sp,sp,8
 5080574:	f800283a 	ret

05080578 <AUDIO_DacEnableZeroCross>:

bool AUDIO_DacEnableZeroCross(bool bEnable){
 5080578:	defffa04 	addi	sp,sp,-24
 508057c:	dfc00515 	stw	ra,20(sp)
 5080580:	df000415 	stw	fp,16(sp)
 5080584:	df000404 	addi	fp,sp,16
 5080588:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[2];
 508058c:	008142b4 	movhi	r2,1290
 5080590:	10a33404 	addi	r2,r2,-29488
 5080594:	1080010b 	ldhu	r2,4(r2)
 5080598:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[3];
 508059c:	008142b4 	movhi	r2,1290
 50805a0:	10a33404 	addi	r2,r2,-29488
 50805a4:	1080018b 	ldhu	r2,6(r2)
 50805a8:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 50805ac:	00802004 	movi	r2,128
 50805b0:	e0bffe0d 	sth	r2,-8(fp)
    if (bEnable){
 50805b4:	e0bfff17 	ldw	r2,-4(fp)
 50805b8:	10000926 	beq	r2,zero,50805e0 <AUDIO_DacEnableZeroCross+0x68>
        control_l |= mask;
 50805bc:	e0fffd0b 	ldhu	r3,-12(fp)
 50805c0:	e0bffe0b 	ldhu	r2,-8(fp)
 50805c4:	1884b03a 	or	r2,r3,r2
 50805c8:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 50805cc:	e0fffd8b 	ldhu	r3,-10(fp)
 50805d0:	e0bffe0b 	ldhu	r2,-8(fp)
 50805d4:	1884b03a 	or	r2,r3,r2
 50805d8:	e0bffd8d 	sth	r2,-10(fp)
 50805dc:	00000c06 	br	5080610 <AUDIO_DacEnableZeroCross+0x98>
    }else{        
        control_l &= ~mask;
 50805e0:	e0bffe0b 	ldhu	r2,-8(fp)
 50805e4:	0084303a 	nor	r2,zero,r2
 50805e8:	1007883a 	mov	r3,r2
 50805ec:	e0bffd0b 	ldhu	r2,-12(fp)
 50805f0:	1884703a 	and	r2,r3,r2
 50805f4:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50805f8:	e0bffe0b 	ldhu	r2,-8(fp)
 50805fc:	0084303a 	nor	r2,zero,r2
 5080600:	1007883a 	mov	r3,r2
 5080604:	e0bffd8b 	ldhu	r2,-10(fp)
 5080608:	1884703a 	and	r2,r3,r2
 508060c:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(2, control_l);  // Left Line In: set left line in volume
 5080610:	e0bffd0b 	ldhu	r2,-12(fp)
 5080614:	01000084 	movi	r4,2
 5080618:	100b883a 	mov	r5,r2
 508061c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080620:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 5080624:	e0bffc17 	ldw	r2,-16(fp)
 5080628:	10000526 	beq	r2,zero,5080640 <AUDIO_DacEnableZeroCross+0xc8>
        bSuccess = aduio_RegWrite(3, control_r);  // Left Line In: set left line in volume
 508062c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080630:	010000c4 	movi	r4,3
 5080634:	100b883a 	mov	r5,r2
 5080638:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 508063c:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;      
 5080640:	e0bffc17 	ldw	r2,-16(fp)
}
 5080644:	e037883a 	mov	sp,fp
 5080648:	dfc00117 	ldw	ra,4(sp)
 508064c:	df000017 	ldw	fp,0(sp)
 5080650:	dec00204 	addi	sp,sp,8
 5080654:	f800283a 	ret

05080658 <AUDIO_DacEnableSoftMute>:

bool AUDIO_DacEnableSoftMute(bool bEnable){
 5080658:	defffb04 	addi	sp,sp,-20
 508065c:	dfc00415 	stw	ra,16(sp)
 5080660:	df000315 	stw	fp,12(sp)
 5080664:	df000304 	addi	fp,sp,12
 5080668:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[5];
 508066c:	008142b4 	movhi	r2,1290
 5080670:	10a33404 	addi	r2,r2,-29488
 5080674:	1080028b 	ldhu	r2,10(r2)
 5080678:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 508067c:	00800204 	movi	r2,8
 5080680:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080684:	e0bfff17 	ldw	r2,-4(fp)
 5080688:	10000526 	beq	r2,zero,50806a0 <AUDIO_DacEnableSoftMute+0x48>
        control |= mask;
 508068c:	e0fffd0b 	ldhu	r3,-12(fp)
 5080690:	e0bffd8b 	ldhu	r2,-10(fp)
 5080694:	1884b03a 	or	r2,r3,r2
 5080698:	e0bffd0d 	sth	r2,-12(fp)
 508069c:	00000606 	br	50806b8 <AUDIO_DacEnableSoftMute+0x60>
    else        
        control &= ~mask;
 50806a0:	e0bffd8b 	ldhu	r2,-10(fp)
 50806a4:	0084303a 	nor	r2,zero,r2
 50806a8:	1007883a 	mov	r3,r2
 50806ac:	e0bffd0b 	ldhu	r2,-12(fp)
 50806b0:	1884703a 	and	r2,r3,r2
 50806b4:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(5, control);  // Left Line In: set left line in volume
 50806b8:	e0bffd0b 	ldhu	r2,-12(fp)
 50806bc:	01000144 	movi	r4,5
 50806c0:	100b883a 	mov	r5,r2
 50806c4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50806c8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 50806cc:	e0bffe17 	ldw	r2,-8(fp)
}
 50806d0:	e037883a 	mov	sp,fp
 50806d4:	dfc00117 	ldw	ra,4(sp)
 50806d8:	df000017 	ldw	fp,0(sp)
 50806dc:	dec00204 	addi	sp,sp,8
 50806e0:	f800283a 	ret

050806e4 <AUDIO_MicMute>:

bool AUDIO_MicMute(bool bMute){
 50806e4:	defffb04 	addi	sp,sp,-20
 50806e8:	dfc00415 	stw	ra,16(sp)
 50806ec:	df000315 	stw	fp,12(sp)
 50806f0:	df000304 	addi	fp,sp,12
 50806f4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 50806f8:	008142b4 	movhi	r2,1290
 50806fc:	10a33404 	addi	r2,r2,-29488
 5080700:	1080020b 	ldhu	r2,8(r2)
 5080704:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 1;
 5080708:	00800084 	movi	r2,2
 508070c:	e0bffd8d 	sth	r2,-10(fp)
    if (bMute)
 5080710:	e0bfff17 	ldw	r2,-4(fp)
 5080714:	10000526 	beq	r2,zero,508072c <AUDIO_MicMute+0x48>
        control |= mask;
 5080718:	e0fffd0b 	ldhu	r3,-12(fp)
 508071c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080720:	1884b03a 	or	r2,r3,r2
 5080724:	e0bffd0d 	sth	r2,-12(fp)
 5080728:	00000606 	br	5080744 <AUDIO_MicMute+0x60>
    else        
        control &= ~mask;
 508072c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080730:	0084303a 	nor	r2,zero,r2
 5080734:	1007883a 	mov	r3,r2
 5080738:	e0bffd0b 	ldhu	r2,-12(fp)
 508073c:	1884703a 	and	r2,r3,r2
 5080740:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 5080744:	e0bffd0b 	ldhu	r2,-12(fp)
 5080748:	01000104 	movi	r4,4
 508074c:	100b883a 	mov	r5,r2
 5080750:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080754:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080758:	e0bffe17 	ldw	r2,-8(fp)
}
 508075c:	e037883a 	mov	sp,fp
 5080760:	dfc00117 	ldw	ra,4(sp)
 5080764:	df000017 	ldw	fp,0(sp)
 5080768:	dec00204 	addi	sp,sp,8
 508076c:	f800283a 	ret

05080770 <AUDIO_LineInMute>:

bool AUDIO_LineInMute(bool bMute){
 5080770:	defffa04 	addi	sp,sp,-24
 5080774:	dfc00515 	stw	ra,20(sp)
 5080778:	df000415 	stw	fp,16(sp)
 508077c:	df000404 	addi	fp,sp,16
 5080780:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control_l, control_r;
    alt_u16 mask;
    control_l = reg_file[0];
 5080784:	008142b4 	movhi	r2,1290
 5080788:	10a33404 	addi	r2,r2,-29488
 508078c:	1080000b 	ldhu	r2,0(r2)
 5080790:	e0bffd0d 	sth	r2,-12(fp)
    control_r = reg_file[1];
 5080794:	008142b4 	movhi	r2,1290
 5080798:	10a33404 	addi	r2,r2,-29488
 508079c:	1080008b 	ldhu	r2,2(r2)
 50807a0:	e0bffd8d 	sth	r2,-10(fp)
    mask = 0x01 << 7;
 50807a4:	00802004 	movi	r2,128
 50807a8:	e0bffe0d 	sth	r2,-8(fp)
    if (bMute){
 50807ac:	e0bfff17 	ldw	r2,-4(fp)
 50807b0:	10000926 	beq	r2,zero,50807d8 <AUDIO_LineInMute+0x68>
        control_l |= mask;
 50807b4:	e0fffd0b 	ldhu	r3,-12(fp)
 50807b8:	e0bffe0b 	ldhu	r2,-8(fp)
 50807bc:	1884b03a 	or	r2,r3,r2
 50807c0:	e0bffd0d 	sth	r2,-12(fp)
        control_r |= mask;
 50807c4:	e0fffd8b 	ldhu	r3,-10(fp)
 50807c8:	e0bffe0b 	ldhu	r2,-8(fp)
 50807cc:	1884b03a 	or	r2,r3,r2
 50807d0:	e0bffd8d 	sth	r2,-10(fp)
 50807d4:	00000c06 	br	5080808 <AUDIO_LineInMute+0x98>
    }else{        
        control_l &= ~mask;
 50807d8:	e0bffe0b 	ldhu	r2,-8(fp)
 50807dc:	0084303a 	nor	r2,zero,r2
 50807e0:	1007883a 	mov	r3,r2
 50807e4:	e0bffd0b 	ldhu	r2,-12(fp)
 50807e8:	1884703a 	and	r2,r3,r2
 50807ec:	e0bffd0d 	sth	r2,-12(fp)
        control_r &= ~mask;
 50807f0:	e0bffe0b 	ldhu	r2,-8(fp)
 50807f4:	0084303a 	nor	r2,zero,r2
 50807f8:	1007883a 	mov	r3,r2
 50807fc:	e0bffd8b 	ldhu	r2,-10(fp)
 5080800:	1884703a 	and	r2,r3,r2
 5080804:	e0bffd8d 	sth	r2,-10(fp)
    }        
    bSuccess = aduio_RegWrite(0, control_l);  // Left Line In: set left line in volume
 5080808:	e0bffd0b 	ldhu	r2,-12(fp)
 508080c:	0009883a 	mov	r4,zero
 5080810:	100b883a 	mov	r5,r2
 5080814:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080818:	e0bffc15 	stw	r2,-16(fp)
    if (bSuccess)
 508081c:	e0bffc17 	ldw	r2,-16(fp)
 5080820:	10000526 	beq	r2,zero,5080838 <AUDIO_LineInMute+0xc8>
        bSuccess = aduio_RegWrite(1, control_r);  // Left Line In: set left line in volume
 5080824:	e0bffd8b 	ldhu	r2,-10(fp)
 5080828:	01000044 	movi	r4,1
 508082c:	100b883a 	mov	r5,r2
 5080830:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080834:	e0bffc15 	stw	r2,-16(fp)
    return bSuccess;        
 5080838:	e0bffc17 	ldw	r2,-16(fp)
}
 508083c:	e037883a 	mov	sp,fp
 5080840:	dfc00117 	ldw	ra,4(sp)
 5080844:	df000017 	ldw	fp,0(sp)
 5080848:	dec00204 	addi	sp,sp,8
 508084c:	f800283a 	ret

05080850 <AUDIO_SetInputSource>:



bool AUDIO_SetInputSource(alt_u8 InputSource){
 5080850:	defffb04 	addi	sp,sp,-20
 5080854:	dfc00415 	stw	ra,16(sp)
 5080858:	df000315 	stw	fp,12(sp)
 508085c:	df000304 	addi	fp,sp,12
 5080860:	2005883a 	mov	r2,r4
 5080864:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080868:	008142b4 	movhi	r2,1290
 508086c:	10a33404 	addi	r2,r2,-29488
 5080870:	1080020b 	ldhu	r2,8(r2)
 5080874:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 2;
 5080878:	00800104 	movi	r2,4
 508087c:	e0bffd8d 	sth	r2,-10(fp)
    if (InputSource == SOURCE_MIC)
 5080880:	e0bfff03 	ldbu	r2,-4(fp)
 5080884:	1000051e 	bne	r2,zero,508089c <AUDIO_SetInputSource+0x4c>
        control |= mask;
 5080888:	e0fffd0b 	ldhu	r3,-12(fp)
 508088c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080890:	1884b03a 	or	r2,r3,r2
 5080894:	e0bffd0d 	sth	r2,-12(fp)
 5080898:	00000606 	br	50808b4 <AUDIO_SetInputSource+0x64>
    else        
        control &= ~mask;
 508089c:	e0bffd8b 	ldhu	r2,-10(fp)
 50808a0:	0084303a 	nor	r2,zero,r2
 50808a4:	1007883a 	mov	r3,r2
 50808a8:	e0bffd0b 	ldhu	r2,-12(fp)
 50808ac:	1884703a 	and	r2,r3,r2
 50808b0:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control);  // Left Line In: set left line in volume
 50808b4:	e0bffd0b 	ldhu	r2,-12(fp)
 50808b8:	01000104 	movi	r4,4
 50808bc:	100b883a 	mov	r5,r2
 50808c0:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50808c4:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;       
 50808c8:	e0bffe17 	ldw	r2,-8(fp)
}
 50808cc:	e037883a 	mov	sp,fp
 50808d0:	dfc00117 	ldw	ra,4(sp)
 50808d4:	df000017 	ldw	fp,0(sp)
 50808d8:	dec00204 	addi	sp,sp,8
 50808dc:	f800283a 	ret

050808e0 <AUDIO_SetSampleRate>:

// See datasheet page 39
bool AUDIO_SetSampleRate(alt_u8 SampleRate){
 50808e0:	defffb04 	addi	sp,sp,-20
 50808e4:	dfc00415 	stw	ra,16(sp)
 50808e8:	df000315 	stw	fp,12(sp)
 50808ec:	df000304 	addi	fp,sp,12
 50808f0:	2005883a 	mov	r2,r4
 50808f4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    control = 0;
 50808f8:	e03ffd0d 	sth	zero,-12(fp)

    switch(SampleRate){
 50808fc:	e0bfff03 	ldbu	r2,-4(fp)
 5080900:	10c001e8 	cmpgeui	r3,r2,7
 5080904:	1800211e 	bne	r3,zero,508098c <AUDIO_SetSampleRate+0xac>
 5080908:	100690ba 	slli	r3,r2,2
 508090c:	00814234 	movhi	r2,1288
 5080910:	10824804 	addi	r2,r2,2336
 5080914:	1885883a 	add	r2,r3,r2
 5080918:	10800017 	ldw	r2,0(r2)
 508091c:	1000683a 	jmp	r2
 5080920:	0508093c 	xorhi	r20,zero,8228
 5080924:	05080944 	movi	r20,8229
 5080928:	05080950 	cmplti	r20,zero,8229
 508092c:	0508095c 	xori	r20,zero,8229
 5080930:	05080968 	cmpgeui	r20,zero,8229
 5080934:	05080974 	movhi	r20,8229
 5080938:	05080980 	call	508098 <__alt_mem_sdram+0x508098>
         // MCLK = 18.432
        case RATE_ADC48K_DAC48K: control = (0x0) << 2; break;
 508093c:	e03ffd0d 	sth	zero,-12(fp)
 5080940:	00001206 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC48K_DAC8K: control = (0x1) << 2; break;
 5080944:	00800104 	movi	r2,4
 5080948:	e0bffd0d 	sth	r2,-12(fp)
 508094c:	00000f06 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC8K_DAC48K: control = (0x2) << 2; break;
 5080950:	00800204 	movi	r2,8
 5080954:	e0bffd0d 	sth	r2,-12(fp)
 5080958:	00000c06 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC8K_DAC8K: control = (0x3) << 2; break;
 508095c:	00800304 	movi	r2,12
 5080960:	e0bffd0d 	sth	r2,-12(fp)
 5080964:	00000906 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC32K_DAC32K: control = (0x6) << 2; break;
 5080968:	00800604 	movi	r2,24
 508096c:	e0bffd0d 	sth	r2,-12(fp)
 5080970:	00000606 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC96K_DAC96K: control = (0x7) << 2; break;
 5080974:	00800704 	movi	r2,28
 5080978:	e0bffd0d 	sth	r2,-12(fp)
 508097c:	00000306 	br	508098c <AUDIO_SetSampleRate+0xac>
        case RATE_ADC44K1_DAC44K1: control = (0x8) << 2; break;
 5080980:	00800804 	movi	r2,32
 5080984:	e0bffd0d 	sth	r2,-12(fp)
 5080988:	0001883a 	nop
        // MCLK = 11.2896
      //  case RATE_ADC44K1_DAC8K: control = (0x9) << 2; break;
      //  case RATE_ADC8K_DAC44K1: control = (0xA) << 2; break;
    }
    control |= 0x02; // BOSR=1 (384fs = 384*48k = 18.432M)
 508098c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080990:	10800094 	ori	r2,r2,2
 5080994:	e0bffd0d 	sth	r2,-12(fp)
        
    bSuccess = aduio_RegWrite(8, control);  // Left Line In: set left line in volume
 5080998:	e0bffd0b 	ldhu	r2,-12(fp)
 508099c:	01000204 	movi	r4,8
 50809a0:	100b883a 	mov	r5,r2
 50809a4:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 50809a8:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;      
 50809ac:	e0bffe17 	ldw	r2,-8(fp)
}
 50809b0:	e037883a 	mov	sp,fp
 50809b4:	dfc00117 	ldw	ra,4(sp)
 50809b8:	df000017 	ldw	fp,0(sp)
 50809bc:	dec00204 	addi	sp,sp,8
 50809c0:	f800283a 	ret

050809c4 <AUDIO_SetLineInVol>:





bool AUDIO_SetLineInVol(alt_u16 l_vol, alt_u16 r_vol){
 50809c4:	defffa04 	addi	sp,sp,-24
 50809c8:	dfc00515 	stw	ra,20(sp)
 50809cc:	df000415 	stw	fp,16(sp)
 50809d0:	df000404 	addi	fp,sp,16
 50809d4:	2007883a 	mov	r3,r4
 50809d8:	2805883a 	mov	r2,r5
 50809dc:	e0fffe0d 	sth	r3,-8(fp)
 50809e0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;
    
    // left
    control = reg_file[0];
 50809e4:	008142b4 	movhi	r2,1290
 50809e8:	10a33404 	addi	r2,r2,-29488
 50809ec:	1080000b 	ldhu	r2,0(r2)
 50809f0:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFFE0;
 50809f4:	e0fffd0b 	ldhu	r3,-12(fp)
 50809f8:	00bff804 	movi	r2,-32
 50809fc:	1884703a 	and	r2,r3,r2
 5080a00:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x1F;
 5080a04:	e0bffe0b 	ldhu	r2,-8(fp)
 5080a08:	108007cc 	andi	r2,r2,31
 5080a0c:	1007883a 	mov	r3,r2
 5080a10:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a14:	1885883a 	add	r2,r3,r2
 5080a18:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(0, control);
 5080a1c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a20:	0009883a 	mov	r4,zero
 5080a24:	100b883a 	mov	r5,r2
 5080a28:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080a2c:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080a30:	e0bffc17 	ldw	r2,-16(fp)
 5080a34:	10001326 	beq	r2,zero,5080a84 <AUDIO_SetLineInVol+0xc0>
        // right
        control = reg_file[1];
 5080a38:	008142b4 	movhi	r2,1290
 5080a3c:	10a33404 	addi	r2,r2,-29488
 5080a40:	1080008b 	ldhu	r2,2(r2)
 5080a44:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFFE0;
 5080a48:	e0fffd0b 	ldhu	r3,-12(fp)
 5080a4c:	00bff804 	movi	r2,-32
 5080a50:	1884703a 	and	r2,r3,r2
 5080a54:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x1F;
 5080a58:	e0bfff0b 	ldhu	r2,-4(fp)
 5080a5c:	108007cc 	andi	r2,r2,31
 5080a60:	1007883a 	mov	r3,r2
 5080a64:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a68:	1885883a 	add	r2,r3,r2
 5080a6c:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(1, control);        
 5080a70:	e0bffd0b 	ldhu	r2,-12(fp)
 5080a74:	01000044 	movi	r4,1
 5080a78:	100b883a 	mov	r5,r2
 5080a7c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080a80:	e0bffc15 	stw	r2,-16(fp)
    }
    
    AUDIO_DEBUG(("[AUDIO] set Line-In vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));        
 5080a84:	e17ffe0b 	ldhu	r5,-8(fp)
 5080a88:	e0ffff0b 	ldhu	r3,-4(fp)
 5080a8c:	e0bffc17 	ldw	r2,-16(fp)
 5080a90:	10000326 	beq	r2,zero,5080aa0 <AUDIO_SetLineInVol+0xdc>
 5080a94:	00814274 	movhi	r2,1289
 5080a98:	10923804 	addi	r2,r2,18656
 5080a9c:	00000206 	br	5080aa8 <AUDIO_SetLineInVol+0xe4>
 5080aa0:	00814274 	movhi	r2,1289
 5080aa4:	10923a04 	addi	r2,r2,18664
 5080aa8:	01014274 	movhi	r4,1289
 5080aac:	21124204 	addi	r4,r4,18696
 5080ab0:	180d883a 	mov	r6,r3
 5080ab4:	100f883a 	mov	r7,r2
 5080ab8:	5081a580 	call	5081a58 <myprintf>
    return bSuccess;
 5080abc:	e0bffc17 	ldw	r2,-16(fp)
}
 5080ac0:	e037883a 	mov	sp,fp
 5080ac4:	dfc00117 	ldw	ra,4(sp)
 5080ac8:	df000017 	ldw	fp,0(sp)
 5080acc:	dec00204 	addi	sp,sp,8
 5080ad0:	f800283a 	ret

05080ad4 <AUDIO_SetLineOutVol>:

bool AUDIO_SetLineOutVol(alt_u16 l_vol, alt_u16 r_vol){
 5080ad4:	defffa04 	addi	sp,sp,-24
 5080ad8:	dfc00515 	stw	ra,20(sp)
 5080adc:	df000415 	stw	fp,16(sp)
 5080ae0:	df000404 	addi	fp,sp,16
 5080ae4:	2007883a 	mov	r3,r4
 5080ae8:	2805883a 	mov	r2,r5
 5080aec:	e0fffe0d 	sth	r3,-8(fp)
 5080af0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u16 control;

 
    // left
    control = reg_file[2];
 5080af4:	008142b4 	movhi	r2,1290
 5080af8:	10a33404 	addi	r2,r2,-29488
 5080afc:	1080010b 	ldhu	r2,4(r2)
 5080b00:	e0bffd0d 	sth	r2,-12(fp)
    control &= 0xFF80;
 5080b04:	e0fffd0b 	ldhu	r3,-12(fp)
 5080b08:	00bfe004 	movi	r2,-128
 5080b0c:	1884703a 	and	r2,r3,r2
 5080b10:	e0bffd0d 	sth	r2,-12(fp)
    control += l_vol & 0x7F;
 5080b14:	e0bffe0b 	ldhu	r2,-8(fp)
 5080b18:	10801fcc 	andi	r2,r2,127
 5080b1c:	1007883a 	mov	r3,r2
 5080b20:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b24:	1885883a 	add	r2,r3,r2
 5080b28:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(2, control);
 5080b2c:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b30:	01000084 	movi	r4,2
 5080b34:	100b883a 	mov	r5,r2
 5080b38:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080b3c:	e0bffc15 	stw	r2,-16(fp)
    
    if (bSuccess){
 5080b40:	e0bffc17 	ldw	r2,-16(fp)
 5080b44:	10001326 	beq	r2,zero,5080b94 <AUDIO_SetLineOutVol+0xc0>
        // right
        control = reg_file[3];
 5080b48:	008142b4 	movhi	r2,1290
 5080b4c:	10a33404 	addi	r2,r2,-29488
 5080b50:	1080018b 	ldhu	r2,6(r2)
 5080b54:	e0bffd0d 	sth	r2,-12(fp)
        control &= 0xFF80;
 5080b58:	e0fffd0b 	ldhu	r3,-12(fp)
 5080b5c:	00bfe004 	movi	r2,-128
 5080b60:	1884703a 	and	r2,r3,r2
 5080b64:	e0bffd0d 	sth	r2,-12(fp)
        control += r_vol & 0x7F;
 5080b68:	e0bfff0b 	ldhu	r2,-4(fp)
 5080b6c:	10801fcc 	andi	r2,r2,127
 5080b70:	1007883a 	mov	r3,r2
 5080b74:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b78:	1885883a 	add	r2,r3,r2
 5080b7c:	e0bffd0d 	sth	r2,-12(fp)
        bSuccess = aduio_RegWrite(3, control);        
 5080b80:	e0bffd0b 	ldhu	r2,-12(fp)
 5080b84:	010000c4 	movi	r4,3
 5080b88:	100b883a 	mov	r5,r2
 5080b8c:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080b90:	e0bffc15 	stw	r2,-16(fp)
    }    
    
    AUDIO_DEBUG(("[AUDIO] set Line-Out vol(%d,%d) %s\r\n", l_vol, r_vol, bSuccess?"success":"fail"));
 5080b94:	e17ffe0b 	ldhu	r5,-8(fp)
 5080b98:	e0ffff0b 	ldhu	r3,-4(fp)
 5080b9c:	e0bffc17 	ldw	r2,-16(fp)
 5080ba0:	10000326 	beq	r2,zero,5080bb0 <AUDIO_SetLineOutVol+0xdc>
 5080ba4:	00814274 	movhi	r2,1289
 5080ba8:	10923804 	addi	r2,r2,18656
 5080bac:	00000206 	br	5080bb8 <AUDIO_SetLineOutVol+0xe4>
 5080bb0:	00814274 	movhi	r2,1289
 5080bb4:	10923a04 	addi	r2,r2,18664
 5080bb8:	01014274 	movhi	r4,1289
 5080bbc:	21124b04 	addi	r4,r4,18732
 5080bc0:	180d883a 	mov	r6,r3
 5080bc4:	100f883a 	mov	r7,r2
 5080bc8:	5081a580 	call	5081a58 <myprintf>
    
    return bSuccess;
 5080bcc:	e0bffc17 	ldw	r2,-16(fp)
}
 5080bd0:	e037883a 	mov	sp,fp
 5080bd4:	dfc00117 	ldw	ra,4(sp)
 5080bd8:	df000017 	ldw	fp,0(sp)
 5080bdc:	dec00204 	addi	sp,sp,8
 5080be0:	f800283a 	ret

05080be4 <AUDIO_EnableByPass>:


bool AUDIO_EnableByPass(bool bEnable){
 5080be4:	defffb04 	addi	sp,sp,-20
 5080be8:	dfc00415 	stw	ra,16(sp)
 5080bec:	df000315 	stw	fp,12(sp)
 5080bf0:	df000304 	addi	fp,sp,12
 5080bf4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080bf8:	008142b4 	movhi	r2,1290
 5080bfc:	10a33404 	addi	r2,r2,-29488
 5080c00:	1080020b 	ldhu	r2,8(r2)
 5080c04:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 3;
 5080c08:	00800204 	movi	r2,8
 5080c0c:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080c10:	e0bfff17 	ldw	r2,-4(fp)
 5080c14:	10000526 	beq	r2,zero,5080c2c <AUDIO_EnableByPass+0x48>
        control |= mask;
 5080c18:	e0fffd0b 	ldhu	r3,-12(fp)
 5080c1c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c20:	1884b03a 	or	r2,r3,r2
 5080c24:	e0bffd0d 	sth	r2,-12(fp)
 5080c28:	00000606 	br	5080c44 <AUDIO_EnableByPass+0x60>
    else        
        control &= ~mask;
 5080c2c:	e0bffd8b 	ldhu	r2,-10(fp)
 5080c30:	0084303a 	nor	r2,zero,r2
 5080c34:	1007883a 	mov	r3,r2
 5080c38:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c3c:	1884703a 	and	r2,r3,r2
 5080c40:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080c44:	e0bffd0b 	ldhu	r2,-12(fp)
 5080c48:	01000104 	movi	r4,4
 5080c4c:	100b883a 	mov	r5,r2
 5080c50:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080c54:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;  	
 5080c58:	e0bffe17 	ldw	r2,-8(fp)
}
 5080c5c:	e037883a 	mov	sp,fp
 5080c60:	dfc00117 	ldw	ra,4(sp)
 5080c64:	df000017 	ldw	fp,0(sp)
 5080c68:	dec00204 	addi	sp,sp,8
 5080c6c:	f800283a 	ret

05080c70 <AUDIO_EnableSiteTone>:

bool AUDIO_EnableSiteTone(bool bEnable){
 5080c70:	defffb04 	addi	sp,sp,-20
 5080c74:	dfc00415 	stw	ra,16(sp)
 5080c78:	df000315 	stw	fp,12(sp)
 5080c7c:	df000304 	addi	fp,sp,12
 5080c80:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    alt_u16 control;
    alt_u16 mask;
    control = reg_file[4];
 5080c84:	008142b4 	movhi	r2,1290
 5080c88:	10a33404 	addi	r2,r2,-29488
 5080c8c:	1080020b 	ldhu	r2,8(r2)
 5080c90:	e0bffd0d 	sth	r2,-12(fp)
    mask = 0x01 << 5;
 5080c94:	00800804 	movi	r2,32
 5080c98:	e0bffd8d 	sth	r2,-10(fp)
    if (bEnable)
 5080c9c:	e0bfff17 	ldw	r2,-4(fp)
 5080ca0:	10000526 	beq	r2,zero,5080cb8 <AUDIO_EnableSiteTone+0x48>
        control |= mask;
 5080ca4:	e0fffd0b 	ldhu	r3,-12(fp)
 5080ca8:	e0bffd8b 	ldhu	r2,-10(fp)
 5080cac:	1884b03a 	or	r2,r3,r2
 5080cb0:	e0bffd0d 	sth	r2,-12(fp)
 5080cb4:	00000606 	br	5080cd0 <AUDIO_EnableSiteTone+0x60>
    else        
        control &= ~mask;
 5080cb8:	e0bffd8b 	ldhu	r2,-10(fp)
 5080cbc:	0084303a 	nor	r2,zero,r2
 5080cc0:	1007883a 	mov	r3,r2
 5080cc4:	e0bffd0b 	ldhu	r2,-12(fp)
 5080cc8:	1884703a 	and	r2,r3,r2
 5080ccc:	e0bffd0d 	sth	r2,-12(fp)
    bSuccess = aduio_RegWrite(4, control); 
 5080cd0:	e0bffd0b 	ldhu	r2,-12(fp)
 5080cd4:	01000104 	movi	r4,4
 5080cd8:	100b883a 	mov	r5,r2
 5080cdc:	5080cfc0 	call	5080cfc <aduio_RegWrite>
 5080ce0:	e0bffe15 	stw	r2,-8(fp)
    return bSuccess;        
 5080ce4:	e0bffe17 	ldw	r2,-8(fp)
}
 5080ce8:	e037883a 	mov	sp,fp
 5080cec:	dfc00117 	ldw	ra,4(sp)
 5080cf0:	df000017 	ldw	fp,0(sp)
 5080cf4:	dec00204 	addi	sp,sp,8
 5080cf8:	f800283a 	ret

05080cfc <aduio_RegWrite>:

/////////////////////////////////////////////////////////////////////////
///////////// Interla function body ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

bool aduio_RegWrite(alt_u8 reg_index, alt_u16 data16){
 5080cfc:	defff904 	addi	sp,sp,-28
 5080d00:	dfc00615 	stw	ra,24(sp)
 5080d04:	df000515 	stw	fp,20(sp)
 5080d08:	df000504 	addi	fp,sp,20
 5080d0c:	2007883a 	mov	r3,r4
 5080d10:	2805883a 	mov	r2,r5
 5080d14:	e0fffe05 	stb	r3,-8(fp)
 5080d18:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 data, control;
    if (reg_index <= 10)
 5080d1c:	e0bffe03 	ldbu	r2,-8(fp)
 5080d20:	108002e8 	cmpgeui	r2,r2,11
 5080d24:	1000071e 	bne	r2,zero,5080d44 <aduio_RegWrite+0x48>
        reg_file[reg_index] = data16;
 5080d28:	e0fffe03 	ldbu	r3,-8(fp)
 5080d2c:	008142b4 	movhi	r2,1290
 5080d30:	10a33404 	addi	r2,r2,-29488
 5080d34:	18c7883a 	add	r3,r3,r3
 5080d38:	10c5883a 	add	r2,r2,r3
 5080d3c:	e0ffff0b 	ldhu	r3,-4(fp)
 5080d40:	10c0000d 	sth	r3,0(r2)
    data = data16 & 0xFF;
 5080d44:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d48:	e0bffc05 	stb	r2,-16(fp)
    control = (reg_index << 1) & 0xFE;
 5080d4c:	e0bffe03 	ldbu	r2,-8(fp)
 5080d50:	1085883a 	add	r2,r2,r2
 5080d54:	e0bffc45 	stb	r2,-15(fp)
    control |= ((data16 >> 8) & 0x01);
 5080d58:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d5c:	1004d23a 	srli	r2,r2,8
 5080d60:	1080004c 	andi	r2,r2,1
 5080d64:	1007883a 	mov	r3,r2
 5080d68:	e0bffc43 	ldbu	r2,-15(fp)
 5080d6c:	1884b03a 	or	r2,r3,r2
 5080d70:	e0bffc45 	stb	r2,-15(fp)
    AUDIO_DEBUG(("[AUDIO] set audio reg[%02d] = %04Xh\r\n", reg_index, data16));
 5080d74:	e0fffe03 	ldbu	r3,-8(fp)
 5080d78:	e0bfff0b 	ldhu	r2,-4(fp)
 5080d7c:	01014274 	movhi	r4,1289
 5080d80:	21125504 	addi	r4,r4,18772
 5080d84:	180b883a 	mov	r5,r3
 5080d88:	100d883a 	mov	r6,r2
 5080d8c:	5081a580 	call	5081a58 <myprintf>
    bSuccess = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, I2C_AUDIO_ADDR, control, data);
 5080d90:	e0fffc43 	ldbu	r3,-15(fp)
 5080d94:	e0bffc03 	ldbu	r2,-16(fp)
 5080d98:	d8800015 	stw	r2,0(sp)
 5080d9c:	01010034 	movhi	r4,1024
 5080da0:	21000c04 	addi	r4,r4,48
 5080da4:	01410034 	movhi	r5,1024
 5080da8:	29400804 	addi	r5,r5,32
 5080dac:	01800d04 	movi	r6,52
 5080db0:	180f883a 	mov	r7,r3
 5080db4:	5080f340 	call	5080f34 <I2C_Write>
 5080db8:	e0bffd15 	stw	r2,-12(fp)
    if (!bSuccess) 
 5080dbc:	e0bffd17 	ldw	r2,-12(fp)
 5080dc0:	1000031e 	bne	r2,zero,5080dd0 <aduio_RegWrite+0xd4>
        AUDIO_DEBUG(("[AUDIO] write reg fail!!!!\r\n"));
 5080dc4:	01014274 	movhi	r4,1289
 5080dc8:	21125f04 	addi	r4,r4,18812
 5080dcc:	5081a580 	call	5081a58 <myprintf>
    usleep(50*1000);  // wait audio chip read        
 5080dd0:	0130d414 	movui	r4,50000
 5080dd4:	50927c40 	call	50927c4 <usleep>
    return bSuccess;        
 5080dd8:	e0bffd17 	ldw	r2,-12(fp)
}
 5080ddc:	e037883a 	mov	sp,fp
 5080de0:	dfc00117 	ldw	ra,4(sp)
 5080de4:	df000017 	ldw	fp,0(sp)
 5080de8:	dec00204 	addi	sp,sp,8
 5080dec:	f800283a 	ret

05080df0 <AUDIO_DacFifoNotFull>:

/////////////////////////////////////////////////////////////////////////
///////////// Audio Play & Recor ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////
// check whether the dac-fifo is full.
bool AUDIO_DacFifoNotFull(void){
 5080df0:	defffe04 	addi	sp,sp,-8
 5080df4:	df000115 	stw	fp,4(sp)
 5080df8:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_DAC_FULL()?FALSE:TRUE;
 5080dfc:	00814434 	movhi	r2,1296
 5080e00:	10840d04 	addi	r2,r2,4148
 5080e04:	10800037 	ldwio	r2,0(r2)
 5080e08:	1080004c 	andi	r2,r2,1
 5080e0c:	1005003a 	cmpeq	r2,r2,zero
 5080e10:	10803fcc 	andi	r2,r2,255
 5080e14:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080e18:	e0bfff17 	ldw	r2,-4(fp)
}
 5080e1c:	e037883a 	mov	sp,fp
 5080e20:	df000017 	ldw	fp,0(sp)
 5080e24:	dec00104 	addi	sp,sp,4
 5080e28:	f800283a 	ret

05080e2c <AUDIO_DacFifoSetData>:

// call AUDIO_PlayIsReady to make sure the fifo is not full before call this function 
void AUDIO_DacFifoSetData(short ch_left, short ch_right){
 5080e2c:	defffd04 	addi	sp,sp,-12
 5080e30:	df000215 	stw	fp,8(sp)
 5080e34:	df000204 	addi	fp,sp,8
 5080e38:	2007883a 	mov	r3,r4
 5080e3c:	2805883a 	mov	r2,r5
 5080e40:	e0fffe0d 	sth	r3,-8(fp)
 5080e44:	e0bfff0d 	sth	r2,-4(fp)
    AUDIO_DAC_WRITE_L(ch_left);
 5080e48:	e0fffe0f 	ldh	r3,-8(fp)
 5080e4c:	00814434 	movhi	r2,1296
 5080e50:	10840804 	addi	r2,r2,4128
 5080e54:	10c00035 	stwio	r3,0(r2)
    AUDIO_DAC_WRITE_R(ch_right);
 5080e58:	e0ffff0f 	ldh	r3,-4(fp)
 5080e5c:	00814434 	movhi	r2,1296
 5080e60:	10840904 	addi	r2,r2,4132
 5080e64:	10c00035 	stwio	r3,0(r2)
}
 5080e68:	e037883a 	mov	sp,fp
 5080e6c:	df000017 	ldw	fp,0(sp)
 5080e70:	dec00104 	addi	sp,sp,4
 5080e74:	f800283a 	ret

05080e78 <AUDIO_AdcFifoNotEmpty>:

// wheck whether there is data available in adc-fifo
bool AUDIO_AdcFifoNotEmpty(void){
 5080e78:	defffe04 	addi	sp,sp,-8
 5080e7c:	df000115 	stw	fp,4(sp)
 5080e80:	df000104 	addi	fp,sp,4
    bool bReady;
    bReady = AUDIO_ADC_EMPTY()?FALSE:TRUE;
 5080e84:	00814434 	movhi	r2,1296
 5080e88:	10840d04 	addi	r2,r2,4148
 5080e8c:	10800037 	ldwio	r2,0(r2)
 5080e90:	1080008c 	andi	r2,r2,2
 5080e94:	1005003a 	cmpeq	r2,r2,zero
 5080e98:	10803fcc 	andi	r2,r2,255
 5080e9c:	e0bfff15 	stw	r2,-4(fp)
    return bReady;
 5080ea0:	e0bfff17 	ldw	r2,-4(fp)
}
 5080ea4:	e037883a 	mov	sp,fp
 5080ea8:	df000017 	ldw	fp,0(sp)
 5080eac:	dec00104 	addi	sp,sp,4
 5080eb0:	f800283a 	ret

05080eb4 <AUDIO_AdcFifoGetData>:


// make sure the data is available before call this fucntion
void AUDIO_AdcFifoGetData(short *pch_left, short *pch_right){
 5080eb4:	defffd04 	addi	sp,sp,-12
 5080eb8:	df000215 	stw	fp,8(sp)
 5080ebc:	df000204 	addi	fp,sp,8
 5080ec0:	e13ffe15 	stw	r4,-8(fp)
 5080ec4:	e17fff15 	stw	r5,-4(fp)
    *pch_left = AUDIO_ADC_READ_L();
 5080ec8:	00814434 	movhi	r2,1296
 5080ecc:	10840a04 	addi	r2,r2,4136
 5080ed0:	10800037 	ldwio	r2,0(r2)
 5080ed4:	1007883a 	mov	r3,r2
 5080ed8:	e0bffe17 	ldw	r2,-8(fp)
 5080edc:	10c0000d 	sth	r3,0(r2)
    *pch_right = AUDIO_ADC_READ_R();
 5080ee0:	00814434 	movhi	r2,1296
 5080ee4:	10840b04 	addi	r2,r2,4140
 5080ee8:	10800037 	ldwio	r2,0(r2)
 5080eec:	1007883a 	mov	r3,r2
 5080ef0:	e0bfff17 	ldw	r2,-4(fp)
 5080ef4:	10c0000d 	sth	r3,0(r2)
    
}
 5080ef8:	e037883a 	mov	sp,fp
 5080efc:	df000017 	ldw	fp,0(sp)
 5080f00:	dec00104 	addi	sp,sp,4
 5080f04:	f800283a 	ret

05080f08 <AUDIO_FifoClear>:

void AUDIO_FifoClear(void){
 5080f08:	deffff04 	addi	sp,sp,-4
 5080f0c:	df000015 	stw	fp,0(sp)
 5080f10:	d839883a 	mov	fp,sp
    AUDIO_FIFO_CLEAR();
 5080f14:	00c00044 	movi	r3,1
 5080f18:	00814434 	movhi	r2,1296
 5080f1c:	10840c04 	addi	r2,r2,4144
 5080f20:	10c00035 	stwio	r3,0(r2)
}
 5080f24:	e037883a 	mov	sp,fp
 5080f28:	df000017 	ldw	fp,0(sp)
 5080f2c:	dec00104 	addi	sp,sp,4
 5080f30:	f800283a 	ret

05080f34 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 5080f34:	defff804 	addi	sp,sp,-32
 5080f38:	dfc00715 	stw	ra,28(sp)
 5080f3c:	df000615 	stw	fp,24(sp)
 5080f40:	df000604 	addi	fp,sp,24
 5080f44:	e13ffb15 	stw	r4,-20(fp)
 5080f48:	e17ffc15 	stw	r5,-16(fp)
 5080f4c:	3009883a 	mov	r4,r6
 5080f50:	3807883a 	mov	r3,r7
 5080f54:	e0800217 	ldw	r2,8(fp)
 5080f58:	e13ffd05 	stb	r4,-12(fp)
 5080f5c:	e0fffe05 	stb	r3,-8(fp)
 5080f60:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 5080f64:	00800044 	movi	r2,1
 5080f68:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5080f6c:	e13ffb17 	ldw	r4,-20(fp)
 5080f70:	e17ffc17 	ldw	r5,-16(fp)
 5080f74:	50812cc0 	call	50812cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5080f78:	e0bffd03 	ldbu	r2,-12(fp)
 5080f7c:	10803fcc 	andi	r2,r2,255
 5080f80:	e13ffb17 	ldw	r4,-20(fp)
 5080f84:	e17ffc17 	ldw	r5,-16(fp)
 5080f88:	100d883a 	mov	r6,r2
 5080f8c:	50813c80 	call	50813c8 <i2c_write>
 5080f90:	1000041e 	bne	r2,zero,5080fa4 <I2C_Write+0x70>
        bSuccess = FALSE;
 5080f94:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 5080f98:	01014274 	movhi	r4,1289
 5080f9c:	21126704 	addi	r4,r4,18844
 5080fa0:	5081a580 	call	5081a58 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5080fa4:	e0bffa17 	ldw	r2,-24(fp)
 5080fa8:	10000a26 	beq	r2,zero,5080fd4 <I2C_Write+0xa0>
 5080fac:	e0bffe03 	ldbu	r2,-8(fp)
 5080fb0:	e13ffb17 	ldw	r4,-20(fp)
 5080fb4:	e17ffc17 	ldw	r5,-16(fp)
 5080fb8:	100d883a 	mov	r6,r2
 5080fbc:	50813c80 	call	50813c8 <i2c_write>
 5080fc0:	1000041e 	bne	r2,zero,5080fd4 <I2C_Write+0xa0>
        bSuccess = FALSE;
 5080fc4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 5080fc8:	01014274 	movhi	r4,1289
 5080fcc:	21126f04 	addi	r4,r4,18876
 5080fd0:	5081a580 	call	5081a58 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 5080fd4:	e0bffa17 	ldw	r2,-24(fp)
 5080fd8:	10000a26 	beq	r2,zero,5081004 <I2C_Write+0xd0>
 5080fdc:	e0bfff03 	ldbu	r2,-4(fp)
 5080fe0:	e13ffb17 	ldw	r4,-20(fp)
 5080fe4:	e17ffc17 	ldw	r5,-16(fp)
 5080fe8:	100d883a 	mov	r6,r2
 5080fec:	50813c80 	call	50813c8 <i2c_write>
 5080ff0:	1000041e 	bne	r2,zero,5081004 <I2C_Write+0xd0>
        bSuccess = FALSE;
 5080ff4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 5080ff8:	01014274 	movhi	r4,1289
 5080ffc:	21127804 	addi	r4,r4,18912
 5081000:	5081a580 	call	5081a58 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 5081004:	e13ffb17 	ldw	r4,-20(fp)
 5081008:	e17ffc17 	ldw	r5,-16(fp)
 508100c:	50813540 	call	5081354 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 5081010:	0106d604 	movi	r4,7000
 5081014:	50927c40 	call	50927c4 <usleep>
    
    return bSuccess;
 5081018:	e0bffa17 	ldw	r2,-24(fp)

    
}
 508101c:	e037883a 	mov	sp,fp
 5081020:	dfc00117 	ldw	ra,4(sp)
 5081024:	df000017 	ldw	fp,0(sp)
 5081028:	dec00204 	addi	sp,sp,8
 508102c:	f800283a 	ret

05081030 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 5081030:	defff904 	addi	sp,sp,-28
 5081034:	dfc00615 	stw	ra,24(sp)
 5081038:	df000515 	stw	fp,20(sp)
 508103c:	df000504 	addi	fp,sp,20
 5081040:	e13ffc15 	stw	r4,-16(fp)
 5081044:	e17ffd15 	stw	r5,-12(fp)
 5081048:	3007883a 	mov	r3,r6
 508104c:	3805883a 	mov	r2,r7
 5081050:	e0fffe05 	stb	r3,-8(fp)
 5081054:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 5081058:	00800044 	movi	r2,1
 508105c:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 5081060:	e13ffc17 	ldw	r4,-16(fp)
 5081064:	e17ffd17 	ldw	r5,-12(fp)
 5081068:	50812cc0 	call	50812cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 508106c:	e0bffe03 	ldbu	r2,-8(fp)
 5081070:	10803fcc 	andi	r2,r2,255
 5081074:	e13ffc17 	ldw	r4,-16(fp)
 5081078:	e17ffd17 	ldw	r5,-12(fp)
 508107c:	100d883a 	mov	r6,r2
 5081080:	50813c80 	call	50813c8 <i2c_write>
 5081084:	1000041e 	bne	r2,zero,5081098 <I2C_Read+0x68>
        bSuccess = FALSE;
 5081088:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 508108c:	01014274 	movhi	r4,1289
 5081090:	21126704 	addi	r4,r4,18844
 5081094:	5081a580 	call	5081a58 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 5081098:	e0bffb17 	ldw	r2,-20(fp)
 508109c:	10000a26 	beq	r2,zero,50810c8 <I2C_Read+0x98>
 50810a0:	e0bfff03 	ldbu	r2,-4(fp)
 50810a4:	e13ffc17 	ldw	r4,-16(fp)
 50810a8:	e17ffd17 	ldw	r5,-12(fp)
 50810ac:	100d883a 	mov	r6,r2
 50810b0:	50813c80 	call	50813c8 <i2c_write>
 50810b4:	1000041e 	bne	r2,zero,50810c8 <I2C_Read+0x98>
        bSuccess = FALSE;
 50810b8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 50810bc:	01014274 	movhi	r4,1289
 50810c0:	21126f04 	addi	r4,r4,18876
 50810c4:	5081a580 	call	5081a58 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 50810c8:	e13ffc17 	ldw	r4,-16(fp)
 50810cc:	e17ffd17 	ldw	r5,-12(fp)
 50810d0:	50812cc0 	call	50812cc <i2c_start>
    DeviceAddr |= 1; // Read
 50810d4:	e0bffe03 	ldbu	r2,-8(fp)
 50810d8:	10800054 	ori	r2,r2,1
 50810dc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 50810e0:	e0bffb17 	ldw	r2,-20(fp)
 50810e4:	10000b26 	beq	r2,zero,5081114 <I2C_Read+0xe4>
 50810e8:	e0bffe03 	ldbu	r2,-8(fp)
 50810ec:	10803fcc 	andi	r2,r2,255
 50810f0:	e13ffc17 	ldw	r4,-16(fp)
 50810f4:	e17ffd17 	ldw	r5,-12(fp)
 50810f8:	100d883a 	mov	r6,r2
 50810fc:	50813c80 	call	50813c8 <i2c_write>
 5081100:	1000041e 	bne	r2,zero,5081114 <I2C_Read+0xe4>
        bSuccess = FALSE;
 5081104:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 5081108:	01014274 	movhi	r4,1289
 508110c:	21128004 	addi	r4,r4,18944
 5081110:	5081a580 	call	5081a58 <myprintf>
    }
    
    if (bSuccess){
 5081114:	e0bffb17 	ldw	r2,-20(fp)
 5081118:	10000526 	beq	r2,zero,5081130 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 508111c:	e13ffc17 	ldw	r4,-16(fp)
 5081120:	e17ffd17 	ldw	r5,-12(fp)
 5081124:	e1800217 	ldw	r6,8(fp)
 5081128:	000f883a 	mov	r7,zero
 508112c:	50814f80 	call	50814f8 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 5081130:	e13ffc17 	ldw	r4,-16(fp)
 5081134:	e17ffd17 	ldw	r5,-12(fp)
 5081138:	50813540 	call	5081354 <i2c_stop>
    
    return bSuccess;
 508113c:	e0bffb17 	ldw	r2,-20(fp)
}
 5081140:	e037883a 	mov	sp,fp
 5081144:	dfc00117 	ldw	ra,4(sp)
 5081148:	df000017 	ldw	fp,0(sp)
 508114c:	dec00204 	addi	sp,sp,8
 5081150:	f800283a 	ret

05081154 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
 5081154:	defff604 	addi	sp,sp,-40
 5081158:	dfc00915 	stw	ra,36(sp)
 508115c:	df000815 	stw	fp,32(sp)
 5081160:	df000804 	addi	fp,sp,32
 5081164:	e13ffb15 	stw	r4,-20(fp)
 5081168:	e17ffc15 	stw	r5,-16(fp)
 508116c:	3007883a 	mov	r3,r6
 5081170:	e1fffe15 	stw	r7,-8(fp)
 5081174:	e0800217 	ldw	r2,8(fp)
 5081178:	e0fffd05 	stb	r3,-12(fp)
 508117c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 5081180:	00800044 	movi	r2,1
 5081184:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
 5081188:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 508118c:	e13ffb17 	ldw	r4,-20(fp)
 5081190:	e17ffc17 	ldw	r5,-16(fp)
 5081194:	50812cc0 	call	50812cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 5081198:	e0bffd03 	ldbu	r2,-12(fp)
 508119c:	10803fcc 	andi	r2,r2,255
 50811a0:	e13ffb17 	ldw	r4,-20(fp)
 50811a4:	e17ffc17 	ldw	r5,-16(fp)
 50811a8:	100d883a 	mov	r6,r2
 50811ac:	50813c80 	call	50813c8 <i2c_write>
 50811b0:	1000041e 	bne	r2,zero,50811c4 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 50811b4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 50811b8:	01014274 	movhi	r4,1289
 50811bc:	21126704 	addi	r4,r4,18844
 50811c0:	5081a580 	call	5081a58 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 50811c4:	e0bff917 	ldw	r2,-28(fp)
 50811c8:	10000a26 	beq	r2,zero,50811f4 <I2C_MultipleRead+0xa0>
 50811cc:	e0bffa03 	ldbu	r2,-24(fp)
 50811d0:	e13ffb17 	ldw	r4,-20(fp)
 50811d4:	e17ffc17 	ldw	r5,-16(fp)
 50811d8:	100d883a 	mov	r6,r2
 50811dc:	50813c80 	call	50813c8 <i2c_write>
 50811e0:	1000041e 	bne	r2,zero,50811f4 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 50811e4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 50811e8:	01014274 	movhi	r4,1289
 50811ec:	21126f04 	addi	r4,r4,18876
 50811f0:	5081a580 	call	5081a58 <myprintf>
    }    
    if (bSuccess)        
 50811f4:	e0bff917 	ldw	r2,-28(fp)
 50811f8:	10000326 	beq	r2,zero,5081208 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 50811fc:	e13ffb17 	ldw	r4,-20(fp)
 5081200:	e17ffc17 	ldw	r5,-16(fp)
 5081204:	50812cc0 	call	50812cc <i2c_start>
    DeviceAddr |= 1; // Read
 5081208:	e0bffd03 	ldbu	r2,-12(fp)
 508120c:	10800054 	ori	r2,r2,1
 5081210:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 5081214:	e0bff917 	ldw	r2,-28(fp)
 5081218:	10000b26 	beq	r2,zero,5081248 <I2C_MultipleRead+0xf4>
 508121c:	e0bffd03 	ldbu	r2,-12(fp)
 5081220:	10803fcc 	andi	r2,r2,255
 5081224:	e13ffb17 	ldw	r4,-20(fp)
 5081228:	e17ffc17 	ldw	r5,-16(fp)
 508122c:	100d883a 	mov	r6,r2
 5081230:	50813c80 	call	50813c8 <i2c_write>
 5081234:	1000041e 	bne	r2,zero,5081248 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 5081238:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 508123c:	01014274 	movhi	r4,1289
 5081240:	21128004 	addi	r4,r4,18944
 5081244:	5081a580 	call	5081a58 <myprintf>
    }
    
    if (bSuccess){
 5081248:	e0bff917 	ldw	r2,-28(fp)
 508124c:	10001626 	beq	r2,zero,50812a8 <I2C_MultipleRead+0x154>
        for(i=0;i<len && bSuccess;i++){
 5081250:	e03ff815 	stw	zero,-32(fp)
 5081254:	00000f06 	br	5081294 <I2C_MultipleRead+0x140>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 5081258:	e0bff817 	ldw	r2,-32(fp)
 508125c:	e0fffe17 	ldw	r3,-8(fp)
 5081260:	188d883a 	add	r6,r3,r2
 5081264:	e0bfff0b 	ldhu	r2,-4(fp)
 5081268:	10ffffc4 	addi	r3,r2,-1
 508126c:	e0bff817 	ldw	r2,-32(fp)
 5081270:	1884c03a 	cmpne	r2,r3,r2
 5081274:	10803fcc 	andi	r2,r2,255
 5081278:	e13ffb17 	ldw	r4,-20(fp)
 508127c:	e17ffc17 	ldw	r5,-16(fp)
 5081280:	100f883a 	mov	r7,r2
 5081284:	50814f80 	call	50814f8 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 5081288:	e0bff817 	ldw	r2,-32(fp)
 508128c:	10800044 	addi	r2,r2,1
 5081290:	e0bff815 	stw	r2,-32(fp)
 5081294:	e0bfff0b 	ldhu	r2,-4(fp)
 5081298:	e0fff817 	ldw	r3,-32(fp)
 508129c:	1880020e 	bge	r3,r2,50812a8 <I2C_MultipleRead+0x154>
 50812a0:	e0bff917 	ldw	r2,-28(fp)
 50812a4:	103fec1e 	bne	r2,zero,5081258 <__alt_data_end+0xfffb3058>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 50812a8:	e13ffb17 	ldw	r4,-20(fp)
 50812ac:	e17ffc17 	ldw	r5,-16(fp)
 50812b0:	50813540 	call	5081354 <i2c_stop>
    
    return bSuccess;    
 50812b4:	e0bff917 	ldw	r2,-28(fp)
    
}
 50812b8:	e037883a 	mov	sp,fp
 50812bc:	dfc00117 	ldw	ra,4(sp)
 50812c0:	df000017 	ldw	fp,0(sp)
 50812c4:	dec00204 	addi	sp,sp,8
 50812c8:	f800283a 	ret

050812cc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 50812cc:	defffc04 	addi	sp,sp,-16
 50812d0:	dfc00315 	stw	ra,12(sp)
 50812d4:	df000215 	stw	fp,8(sp)
 50812d8:	df000204 	addi	fp,sp,8
 50812dc:	e13ffe15 	stw	r4,-8(fp)
 50812e0:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 50812e4:	e0bfff17 	ldw	r2,-4(fp)
 50812e8:	10800104 	addi	r2,r2,4
 50812ec:	1007883a 	mov	r3,r2
 50812f0:	00800044 	movi	r2,1
 50812f4:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition 
    SDA_HIGH(data_base); // data high
 50812f8:	e0bfff17 	ldw	r2,-4(fp)
 50812fc:	00c00044 	movi	r3,1
 5081300:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 5081304:	e0bffe17 	ldw	r2,-8(fp)
 5081308:	00c00044 	movi	r3,1
 508130c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 5081310:	01000044 	movi	r4,1
 5081314:	50927c40 	call	50927c4 <usleep>
     
    SDA_LOW(data_base); // data low
 5081318:	e0bfff17 	ldw	r2,-4(fp)
 508131c:	0007883a 	mov	r3,zero
 5081320:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 5081324:	01000044 	movi	r4,1
 5081328:	50927c40 	call	50927c4 <usleep>
    SCL_LOW(clk_base); // clock low
 508132c:	e0bffe17 	ldw	r2,-8(fp)
 5081330:	0007883a 	mov	r3,zero
 5081334:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 5081338:	01000044 	movi	r4,1
 508133c:	50927c40 	call	50927c4 <usleep>
}
 5081340:	e037883a 	mov	sp,fp
 5081344:	dfc00117 	ldw	ra,4(sp)
 5081348:	df000017 	ldw	fp,0(sp)
 508134c:	dec00204 	addi	sp,sp,8
 5081350:	f800283a 	ret

05081354 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 5081354:	defffc04 	addi	sp,sp,-16
 5081358:	dfc00315 	stw	ra,12(sp)
 508135c:	df000215 	stw	fp,8(sp)
 5081360:	df000204 	addi	fp,sp,8
 5081364:	e13ffe15 	stw	r4,-8(fp)
 5081368:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 508136c:	e0bfff17 	ldw	r2,-4(fp)
 5081370:	10800104 	addi	r2,r2,4
 5081374:	1007883a 	mov	r3,r2
 5081378:	00800044 	movi	r2,1
 508137c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 5081380:	e0bfff17 	ldw	r2,-4(fp)
 5081384:	0007883a 	mov	r3,zero
 5081388:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 508138c:	e0bffe17 	ldw	r2,-8(fp)
 5081390:	00c00044 	movi	r3,1
 5081394:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 5081398:	01000044 	movi	r4,1
 508139c:	50927c40 	call	50927c4 <usleep>
    SDA_HIGH(data_base); // data high
 50813a0:	e0bfff17 	ldw	r2,-4(fp)
 50813a4:	00c00044 	movi	r3,1
 50813a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 50813ac:	01000044 	movi	r4,1
 50813b0:	50927c40 	call	50927c4 <usleep>
}
 50813b4:	e037883a 	mov	sp,fp
 50813b8:	dfc00117 	ldw	ra,4(sp)
 50813bc:	df000017 	ldw	fp,0(sp)
 50813c0:	dec00204 	addi	sp,sp,8
 50813c4:	f800283a 	ret

050813c8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 50813c8:	defff804 	addi	sp,sp,-32
 50813cc:	dfc00715 	stw	ra,28(sp)
 50813d0:	df000615 	stw	fp,24(sp)
 50813d4:	df000604 	addi	fp,sp,24
 50813d8:	e13ffd15 	stw	r4,-12(fp)
 50813dc:	e17ffe15 	stw	r5,-8(fp)
 50813e0:	3005883a 	mov	r2,r6
 50813e4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 50813e8:	00bfe004 	movi	r2,-128
 50813ec:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 50813f0:	e0bffe17 	ldw	r2,-8(fp)
 50813f4:	10800104 	addi	r2,r2,4
 50813f8:	1007883a 	mov	r3,r2
 50813fc:	00800044 	movi	r2,1
 5081400:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 5081404:	e03ffb15 	stw	zero,-20(fp)
 5081408:	00001f06 	br	5081488 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 508140c:	e0bffd17 	ldw	r2,-12(fp)
 5081410:	0007883a 	mov	r3,zero
 5081414:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 5081418:	e0ffff03 	ldbu	r3,-4(fp)
 508141c:	e0bffa03 	ldbu	r2,-24(fp)
 5081420:	1884703a 	and	r2,r3,r2
 5081424:	10803fcc 	andi	r2,r2,255
 5081428:	10000426 	beq	r2,zero,508143c <i2c_write+0x74>
            SDA_HIGH(data_base);
 508142c:	e0bffe17 	ldw	r2,-8(fp)
 5081430:	00c00044 	movi	r3,1
 5081434:	10c00035 	stwio	r3,0(r2)
 5081438:	00000306 	br	5081448 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 508143c:	e0bffe17 	ldw	r2,-8(fp)
 5081440:	0007883a 	mov	r3,zero
 5081444:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 5081448:	e0bffa03 	ldbu	r2,-24(fp)
 508144c:	1004d07a 	srli	r2,r2,1
 5081450:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 5081454:	e0bffd17 	ldw	r2,-12(fp)
 5081458:	00c00044 	movi	r3,1
 508145c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081460:	01000044 	movi	r4,1
 5081464:	50927c40 	call	50927c4 <usleep>
        SCL_LOW(clk_base);
 5081468:	e0bffd17 	ldw	r2,-12(fp)
 508146c:	0007883a 	mov	r3,zero
 5081470:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081474:	01000044 	movi	r4,1
 5081478:	50927c40 	call	50927c4 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 508147c:	e0bffb17 	ldw	r2,-20(fp)
 5081480:	10800044 	addi	r2,r2,1
 5081484:	e0bffb15 	stw	r2,-20(fp)
 5081488:	e0bffb17 	ldw	r2,-20(fp)
 508148c:	10800210 	cmplti	r2,r2,8
 5081490:	103fde1e 	bne	r2,zero,508140c <__alt_data_end+0xfffb320c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 5081494:	e0bffe17 	ldw	r2,-8(fp)
 5081498:	10800104 	addi	r2,r2,4
 508149c:	0007883a 	mov	r3,zero
 50814a0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 50814a4:	e0bffd17 	ldw	r2,-12(fp)
 50814a8:	00c00044 	movi	r3,1
 50814ac:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 50814b0:	01000044 	movi	r4,1
 50814b4:	50927c40 	call	50927c4 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 50814b8:	e0bffe17 	ldw	r2,-8(fp)
 50814bc:	10800037 	ldwio	r2,0(r2)
 50814c0:	1005003a 	cmpeq	r2,r2,zero
 50814c4:	10803fcc 	andi	r2,r2,255
 50814c8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 50814cc:	e0bffd17 	ldw	r2,-12(fp)
 50814d0:	0007883a 	mov	r3,zero
 50814d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 50814d8:	01000044 	movi	r4,1
 50814dc:	50927c40 	call	50927c4 <usleep>
    return bAck;
 50814e0:	e0bffc17 	ldw	r2,-16(fp)
}    
 50814e4:	e037883a 	mov	sp,fp
 50814e8:	dfc00117 	ldw	ra,4(sp)
 50814ec:	df000017 	ldw	fp,0(sp)
 50814f0:	dec00204 	addi	sp,sp,8
 50814f4:	f800283a 	ret

050814f8 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 50814f8:	defff804 	addi	sp,sp,-32
 50814fc:	dfc00715 	stw	ra,28(sp)
 5081500:	df000615 	stw	fp,24(sp)
 5081504:	df000604 	addi	fp,sp,24
 5081508:	e13ffc15 	stw	r4,-16(fp)
 508150c:	e17ffd15 	stw	r5,-12(fp)
 5081510:	e1bffe15 	stw	r6,-8(fp)
 5081514:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 5081518:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 508151c:	e0bffd17 	ldw	r2,-12(fp)
 5081520:	10800104 	addi	r2,r2,4
 5081524:	0007883a 	mov	r3,zero
 5081528:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 508152c:	e0bffc17 	ldw	r2,-16(fp)
 5081530:	0007883a 	mov	r3,zero
 5081534:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 5081538:	01000044 	movi	r4,1
 508153c:	50927c40 	call	50927c4 <usleep>

    for(i=0;i<8;i++){
 5081540:	e03ffb15 	stw	zero,-20(fp)
 5081544:	00001606 	br	50815a0 <i2c_read+0xa8>
        Data <<= 1;
 5081548:	e0bffa03 	ldbu	r2,-24(fp)
 508154c:	1085883a 	add	r2,r2,r2
 5081550:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 5081554:	e0bffc17 	ldw	r2,-16(fp)
 5081558:	00c00044 	movi	r3,1
 508155c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 5081560:	01000044 	movi	r4,1
 5081564:	50927c40 	call	50927c4 <usleep>
        if (SDA_READ(data_base))  // read data   
 5081568:	e0bffd17 	ldw	r2,-12(fp)
 508156c:	10800037 	ldwio	r2,0(r2)
 5081570:	10000326 	beq	r2,zero,5081580 <i2c_read+0x88>
            Data |= 0x01;
 5081574:	e0bffa03 	ldbu	r2,-24(fp)
 5081578:	10800054 	ori	r2,r2,1
 508157c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 5081580:	e0bffc17 	ldw	r2,-16(fp)
 5081584:	0007883a 	mov	r3,zero
 5081588:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 508158c:	01000044 	movi	r4,1
 5081590:	50927c40 	call	50927c4 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 5081594:	e0bffb17 	ldw	r2,-20(fp)
 5081598:	10800044 	addi	r2,r2,1
 508159c:	e0bffb15 	stw	r2,-20(fp)
 50815a0:	e0bffb17 	ldw	r2,-20(fp)
 50815a4:	10800210 	cmplti	r2,r2,8
 50815a8:	103fe71e 	bne	r2,zero,5081548 <__alt_data_end+0xfffb3348>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 50815ac:	e0bffc17 	ldw	r2,-16(fp)
 50815b0:	0007883a 	mov	r3,zero
 50815b4:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 50815b8:	e0bffd17 	ldw	r2,-12(fp)
 50815bc:	10800104 	addi	r2,r2,4
 50815c0:	1007883a 	mov	r3,r2
 50815c4:	00800044 	movi	r2,1
 50815c8:	18800035 	stwio	r2,0(r3)
    if (bAck)
 50815cc:	e0bfff17 	ldw	r2,-4(fp)
 50815d0:	10000426 	beq	r2,zero,50815e4 <i2c_read+0xec>
        SDA_LOW(data_base);
 50815d4:	e0bffd17 	ldw	r2,-12(fp)
 50815d8:	0007883a 	mov	r3,zero
 50815dc:	10c00035 	stwio	r3,0(r2)
 50815e0:	00000306 	br	50815f0 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 50815e4:	e0bffd17 	ldw	r2,-12(fp)
 50815e8:	00c00044 	movi	r3,1
 50815ec:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 50815f0:	e0bffc17 	ldw	r2,-16(fp)
 50815f4:	00c00044 	movi	r3,1
 50815f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 50815fc:	01000044 	movi	r4,1
 5081600:	50927c40 	call	50927c4 <usleep>
    SCL_LOW(clk_base); // clock low
 5081604:	e0bffc17 	ldw	r2,-16(fp)
 5081608:	0007883a 	mov	r3,zero
 508160c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 5081610:	01000044 	movi	r4,1
 5081614:	50927c40 	call	50927c4 <usleep>
    SDA_LOW(data_base);  // data low
 5081618:	e0bffd17 	ldw	r2,-12(fp)
 508161c:	0007883a 	mov	r3,zero
 5081620:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 5081624:	01000044 	movi	r4,1
 5081628:	50927c40 	call	50927c4 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 508162c:	e0bffe17 	ldw	r2,-8(fp)
 5081630:	e0fffa03 	ldbu	r3,-24(fp)
 5081634:	10c00005 	stb	r3,0(r2)
}
 5081638:	e037883a 	mov	sp,fp
 508163c:	dfc00117 	ldw	ra,4(sp)
 5081640:	df000017 	ldw	fp,0(sp)
 5081644:	dec00204 	addi	sp,sp,8
 5081648:	f800283a 	ret

0508164c <LED_Display>:
#define LED_INIT_MASK   (0x01 << 24)

#define LED_SET(mask)   IOWR_ALTERA_AVALON_PIO_DATA(PIO_LED_BASE, mask)


void LED_Display(alt_u32 Mask){ // 1: light, 0:unlight
 508164c:	defffd04 	addi	sp,sp,-12
 5081650:	df000215 	stw	fp,8(sp)
 5081654:	df000204 	addi	fp,sp,8
 5081658:	e13fff15 	stw	r4,-4(fp)
    alt_u32 ThisMask;
    ThisMask = Mask;//~(Mask & 0x7FFFFFF);
 508165c:	e0bfff17 	ldw	r2,-4(fp)
 5081660:	e0bffe15 	stw	r2,-8(fp)
    LED_SET(ThisMask);  //0:ligh, 1:unlight
 5081664:	e0fffe17 	ldw	r3,-8(fp)
 5081668:	00810034 	movhi	r2,1024
 508166c:	10801404 	addi	r2,r2,80
 5081670:	10c00035 	stwio	r3,0(r2)
    
}
 5081674:	e037883a 	mov	sp,fp
 5081678:	df000017 	ldw	fp,0(sp)
 508167c:	dec00104 	addi	sp,sp,4
 5081680:	f800283a 	ret

05081684 <LED_AllOn>:


void LED_AllOn(void){
 5081684:	defffe04 	addi	sp,sp,-8
 5081688:	dfc00115 	stw	ra,4(sp)
 508168c:	df000015 	stw	fp,0(sp)
 5081690:	d839883a 	mov	fp,sp
    LED_Display(0xFFFFFFFF);       
 5081694:	013fffc4 	movi	r4,-1
 5081698:	508164c0 	call	508164c <LED_Display>
}
 508169c:	e037883a 	mov	sp,fp
 50816a0:	dfc00117 	ldw	ra,4(sp)
 50816a4:	df000017 	ldw	fp,0(sp)
 50816a8:	dec00204 	addi	sp,sp,8
 50816ac:	f800283a 	ret

050816b0 <LED_AllOff>:

void LED_AllOff(void){
 50816b0:	defffe04 	addi	sp,sp,-8
 50816b4:	dfc00115 	stw	ra,4(sp)
 50816b8:	df000015 	stw	fp,0(sp)
 50816bc:	d839883a 	mov	fp,sp
    LED_Display(0x00);       
 50816c0:	0009883a 	mov	r4,zero
 50816c4:	508164c0 	call	508164c <LED_Display>
}
 50816c8:	e037883a 	mov	sp,fp
 50816cc:	dfc00117 	ldw	ra,4(sp)
 50816d0:	df000017 	ldw	fp,0(sp)
 50816d4:	dec00204 	addi	sp,sp,8
 50816d8:	f800283a 	ret

050816dc <LED_LightCount>:


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
 50816dc:	defffb04 	addi	sp,sp,-20
 50816e0:	dfc00415 	stw	ra,16(sp)
 50816e4:	df000315 	stw	fp,12(sp)
 50816e8:	df000304 	addi	fp,sp,12
 50816ec:	2005883a 	mov	r2,r4
 50816f0:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 Mask = 0;
 50816f4:	e03ffd15 	stw	zero,-12(fp)
    int i;
    for(i=0;i<LightCount;i++){
 50816f8:	e03ffe15 	stw	zero,-8(fp)
 50816fc:	00000906 	br	5081724 <LED_LightCount+0x48>
        Mask <<= 1;
 5081700:	e0bffd17 	ldw	r2,-12(fp)
 5081704:	1085883a 	add	r2,r2,r2
 5081708:	e0bffd15 	stw	r2,-12(fp)
        Mask |= 0x01;
 508170c:	e0bffd17 	ldw	r2,-12(fp)
 5081710:	10800054 	ori	r2,r2,1
 5081714:	e0bffd15 	stw	r2,-12(fp)


void LED_LightCount(alt_u8 LightCount){ // 1: light, 0:unlight
    alt_u32 Mask = 0;
    int i;
    for(i=0;i<LightCount;i++){
 5081718:	e0bffe17 	ldw	r2,-8(fp)
 508171c:	10800044 	addi	r2,r2,1
 5081720:	e0bffe15 	stw	r2,-8(fp)
 5081724:	e0bfff03 	ldbu	r2,-4(fp)
 5081728:	e0fffe17 	ldw	r3,-8(fp)
 508172c:	18bff416 	blt	r3,r2,5081700 <__alt_data_end+0xfffb3500>
        Mask <<= 1;
        Mask |= 0x01;
    }
    LED_Display(Mask);  //0:ligh, 1:unlight
 5081730:	e13ffd17 	ldw	r4,-12(fp)
 5081734:	508164c0 	call	508164c <LED_Display>
    
}
 5081738:	e037883a 	mov	sp,fp
 508173c:	dfc00117 	ldw	ra,4(sp)
 5081740:	df000017 	ldw	fp,0(sp)
 5081744:	dec00204 	addi	sp,sp,8
 5081748:	f800283a 	ret

0508174c <SEG7_Clear>:
static    unsigned char szMap[] = {
        63, 6, 91, 79, 102, 109, 125, 7, 
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
 508174c:	defffe04 	addi	sp,sp,-8
 5081750:	df000115 	stw	fp,4(sp)
 5081754:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081758:	e03fff15 	stw	zero,-4(fp)
 508175c:	00000b06 	br	508178c <SEG7_Clear+0x40>
        SEG7_SET(i, 0x00);
 5081760:	e0bfff17 	ldw	r2,-4(fp)
 5081764:	1085883a 	add	r2,r2,r2
 5081768:	1085883a 	add	r2,r2,r2
 508176c:	1007883a 	mov	r3,r2
 5081770:	00810034 	movhi	r2,1024
 5081774:	1885883a 	add	r2,r3,r2
 5081778:	0007883a 	mov	r3,zero
 508177c:	10c00035 	stwio	r3,0(r2)
        127, 111, 119, 124, 57, 94, 121, 113
    };  // 0,1,2,....9, a, b, c, d, e, f
    
void SEG7_Clear(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081780:	e0bfff17 	ldw	r2,-4(fp)
 5081784:	10800044 	addi	r2,r2,1
 5081788:	e0bfff15 	stw	r2,-4(fp)
 508178c:	e0bfff17 	ldw	r2,-4(fp)
 5081790:	10800190 	cmplti	r2,r2,6
 5081794:	103ff21e 	bne	r2,zero,5081760 <__alt_data_end+0xfffb3560>
        SEG7_SET(i, 0x00);
    }        
}
 5081798:	e037883a 	mov	sp,fp
 508179c:	df000017 	ldw	fp,0(sp)
 50817a0:	dec00104 	addi	sp,sp,4
 50817a4:	f800283a 	ret

050817a8 <SEG7_Full>:
void SEG7_Full(void){
 50817a8:	defffe04 	addi	sp,sp,-8
 50817ac:	df000115 	stw	fp,4(sp)
 50817b0:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 50817b4:	e03fff15 	stw	zero,-4(fp)
 50817b8:	00000b06 	br	50817e8 <SEG7_Full+0x40>
        SEG7_SET(i, 0xFF);
 50817bc:	e0bfff17 	ldw	r2,-4(fp)
 50817c0:	1085883a 	add	r2,r2,r2
 50817c4:	1085883a 	add	r2,r2,r2
 50817c8:	1007883a 	mov	r3,r2
 50817cc:	00810034 	movhi	r2,1024
 50817d0:	1885883a 	add	r2,r3,r2
 50817d4:	00c03fc4 	movi	r3,255
 50817d8:	10c00035 	stwio	r3,0(r2)
        SEG7_SET(i, 0x00);
    }        
}
void SEG7_Full(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 50817dc:	e0bfff17 	ldw	r2,-4(fp)
 50817e0:	10800044 	addi	r2,r2,1
 50817e4:	e0bfff15 	stw	r2,-4(fp)
 50817e8:	e0bfff17 	ldw	r2,-4(fp)
 50817ec:	10800190 	cmplti	r2,r2,6
 50817f0:	103ff21e 	bne	r2,zero,50817bc <__alt_data_end+0xfffb35bc>
        SEG7_SET(i, 0xFF);
    }        
}
 50817f4:	e037883a 	mov	sp,fp
 50817f8:	df000017 	ldw	fp,0(sp)
 50817fc:	dec00104 	addi	sp,sp,4
 5081800:	f800283a 	ret

05081804 <SEG7_Number>:

void SEG7_Number(void){
 5081804:	defffe04 	addi	sp,sp,-8
 5081808:	df000115 	stw	fp,4(sp)
 508180c:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<SEG7_NUM;i++){
 5081810:	e03fff15 	stw	zero,-4(fp)
 5081814:	00001006 	br	5081858 <SEG7_Number+0x54>
        SEG7_SET(i, szMap[i]);
 5081818:	e0bfff17 	ldw	r2,-4(fp)
 508181c:	1085883a 	add	r2,r2,r2
 5081820:	1085883a 	add	r2,r2,r2
 5081824:	1007883a 	mov	r3,r2
 5081828:	00810034 	movhi	r2,1024
 508182c:	1887883a 	add	r3,r3,r2
 5081830:	00814274 	movhi	r2,1289
 5081834:	1095a604 	addi	r2,r2,22168
 5081838:	e13fff17 	ldw	r4,-4(fp)
 508183c:	1105883a 	add	r2,r2,r4
 5081840:	10800003 	ldbu	r2,0(r2)
 5081844:	10803fcc 	andi	r2,r2,255
 5081848:	18800035 	stwio	r2,0(r3)
    }        
}

void SEG7_Number(void){
    int i;
    for(i=0;i<SEG7_NUM;i++){
 508184c:	e0bfff17 	ldw	r2,-4(fp)
 5081850:	10800044 	addi	r2,r2,1
 5081854:	e0bfff15 	stw	r2,-4(fp)
 5081858:	e0bfff17 	ldw	r2,-4(fp)
 508185c:	10800190 	cmplti	r2,r2,6
 5081860:	103fed1e 	bne	r2,zero,5081818 <__alt_data_end+0xfffb3618>
        SEG7_SET(i, szMap[i]);
    }        
}
 5081864:	e037883a 	mov	sp,fp
 5081868:	df000017 	ldw	fp,0(sp)
 508186c:	dec00104 	addi	sp,sp,4
 5081870:	f800283a 	ret

05081874 <SEG7_Hex>:

void SEG7_Hex(alt_u32 Data, alt_u8 point_mask){
 5081874:	defffb04 	addi	sp,sp,-20
 5081878:	df000415 	stw	fp,16(sp)
 508187c:	df000404 	addi	fp,sp,16
 5081880:	e13ffe15 	stw	r4,-8(fp)
 5081884:	2805883a 	mov	r2,r5
 5081888:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 508188c:	00800044 	movi	r2,1
 5081890:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 5081894:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 5081898:	e03ffd15 	stw	zero,-12(fp)
 508189c:	00002106 	br	5081924 <SEG7_Hex+0xb0>
        seg_mask = szMap[Data & 0x0F];
 50818a0:	e0bffe17 	ldw	r2,-8(fp)
 50818a4:	10c003cc 	andi	r3,r2,15
 50818a8:	00814274 	movhi	r2,1289
 50818ac:	1095a604 	addi	r2,r2,22168
 50818b0:	10c5883a 	add	r2,r2,r3
 50818b4:	10800003 	ldbu	r2,0(r2)
 50818b8:	e0bffc45 	stb	r2,-15(fp)
        Data >>= 4;
 50818bc:	e0bffe17 	ldw	r2,-8(fp)
 50818c0:	1004d13a 	srli	r2,r2,4
 50818c4:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 50818c8:	e0ffff03 	ldbu	r3,-4(fp)
 50818cc:	e0bffc03 	ldbu	r2,-16(fp)
 50818d0:	1884703a 	and	r2,r3,r2
 50818d4:	10803fcc 	andi	r2,r2,255
 50818d8:	10000426 	beq	r2,zero,50818ec <SEG7_Hex+0x78>
            seg_mask |= 0x80;
 50818dc:	e0fffc43 	ldbu	r3,-15(fp)
 50818e0:	00bfe004 	movi	r2,-128
 50818e4:	1884b03a 	or	r2,r3,r2
 50818e8:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;     
 50818ec:	e0bffc03 	ldbu	r2,-16(fp)
 50818f0:	1085883a 	add	r2,r2,r2
 50818f4:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 50818f8:	e0bffd17 	ldw	r2,-12(fp)
 50818fc:	1085883a 	add	r2,r2,r2
 5081900:	1085883a 	add	r2,r2,r2
 5081904:	1007883a 	mov	r3,r2
 5081908:	00810034 	movhi	r2,1024
 508190c:	1885883a 	add	r2,r3,r2
 5081910:	e0fffc43 	ldbu	r3,-15(fp)
 5081914:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 5081918:	e0bffd17 	ldw	r2,-12(fp)
 508191c:	10800044 	addi	r2,r2,1
 5081920:	e0bffd15 	stw	r2,-12(fp)
 5081924:	e0bffd17 	ldw	r2,-12(fp)
 5081928:	10800190 	cmplti	r2,r2,6
 508192c:	103fdc1e 	bne	r2,zero,50818a0 <__alt_data_end+0xfffb36a0>
        if (point_mask & mask)
            seg_mask |= 0x80;
        mask <<= 1;     
        SEG7_SET(i, seg_mask);
    }        
}
 5081930:	e037883a 	mov	sp,fp
 5081934:	df000017 	ldw	fp,0(sp)
 5081938:	dec00104 	addi	sp,sp,4
 508193c:	f800283a 	ret

05081940 <SEG7_Decimal>:

void SEG7_Decimal(alt_u32 Data, alt_u8 point_mask){
 5081940:	defffa04 	addi	sp,sp,-24
 5081944:	dfc00515 	stw	ra,20(sp)
 5081948:	df000415 	stw	fp,16(sp)
 508194c:	df000404 	addi	fp,sp,16
 5081950:	e13ffe15 	stw	r4,-8(fp)
 5081954:	2805883a 	mov	r2,r5
 5081958:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 mask = 0x01;
 508195c:	00800044 	movi	r2,1
 5081960:	e0bffc05 	stb	r2,-16(fp)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
 5081964:	e03ffc45 	stb	zero,-15(fp)
    for(i=0;i<SEG7_NUM;i++){
 5081968:	e03ffd15 	stw	zero,-12(fp)
 508196c:	00002606 	br	5081a08 <SEG7_Decimal+0xc8>
        seg_mask = szMap[Data%10];
 5081970:	e0bffe17 	ldw	r2,-8(fp)
 5081974:	1009883a 	mov	r4,r2
 5081978:	01400284 	movi	r5,10
 508197c:	50827c80 	call	50827c8 <__umodsi3>
 5081980:	1007883a 	mov	r3,r2
 5081984:	00814274 	movhi	r2,1289
 5081988:	1095a604 	addi	r2,r2,22168
 508198c:	10c5883a 	add	r2,r2,r3
 5081990:	10800003 	ldbu	r2,0(r2)
 5081994:	e0bffc45 	stb	r2,-15(fp)
        Data /= 10;
 5081998:	e0bffe17 	ldw	r2,-8(fp)
 508199c:	1009883a 	mov	r4,r2
 50819a0:	01400284 	movi	r5,10
 50819a4:	50827c00 	call	50827c0 <__udivsi3>
 50819a8:	e0bffe15 	stw	r2,-8(fp)
        if (point_mask & mask)
 50819ac:	e0ffff03 	ldbu	r3,-4(fp)
 50819b0:	e0bffc03 	ldbu	r2,-16(fp)
 50819b4:	1884703a 	and	r2,r3,r2
 50819b8:	10803fcc 	andi	r2,r2,255
 50819bc:	10000426 	beq	r2,zero,50819d0 <SEG7_Decimal+0x90>
            seg_mask |= 0x80;
 50819c0:	e0fffc43 	ldbu	r3,-15(fp)
 50819c4:	00bfe004 	movi	r2,-128
 50819c8:	1884b03a 	or	r2,r3,r2
 50819cc:	e0bffc45 	stb	r2,-15(fp)
        mask <<= 1;   
 50819d0:	e0bffc03 	ldbu	r2,-16(fp)
 50819d4:	1085883a 	add	r2,r2,r2
 50819d8:	e0bffc05 	stb	r2,-16(fp)
        SEG7_SET(i, seg_mask);
 50819dc:	e0bffd17 	ldw	r2,-12(fp)
 50819e0:	1085883a 	add	r2,r2,r2
 50819e4:	1085883a 	add	r2,r2,r2
 50819e8:	1007883a 	mov	r3,r2
 50819ec:	00810034 	movhi	r2,1024
 50819f0:	1885883a 	add	r2,r3,r2
 50819f4:	e0fffc43 	ldbu	r3,-15(fp)
 50819f8:	10c00035 	stwio	r3,0(r2)
    alt_u8 seg_mask;
    int i;
    
    //
    seg_mask = 0;
    for(i=0;i<SEG7_NUM;i++){
 50819fc:	e0bffd17 	ldw	r2,-12(fp)
 5081a00:	10800044 	addi	r2,r2,1
 5081a04:	e0bffd15 	stw	r2,-12(fp)
 5081a08:	e0bffd17 	ldw	r2,-12(fp)
 5081a0c:	10800190 	cmplti	r2,r2,6
 5081a10:	103fd71e 	bne	r2,zero,5081970 <__alt_data_end+0xfffb3770>
            seg_mask |= 0x80;
        mask <<= 1;   
        SEG7_SET(i, seg_mask);
    }        
  
} 
 5081a14:	e037883a 	mov	sp,fp
 5081a18:	dfc00117 	ldw	ra,4(sp)
 5081a1c:	df000017 	ldw	fp,0(sp)
 5081a20:	dec00204 	addi	sp,sp,8
 5081a24:	f800283a 	ret

05081a28 <debug_output>:
    if (!UART_IsOpened())
        UART_Open();
    UART_WriteString(pMessage);  // UART debug
}
#else
void debug_output(char *pMessage){
 5081a28:	defffd04 	addi	sp,sp,-12
 5081a2c:	dfc00215 	stw	ra,8(sp)
 5081a30:	df000115 	stw	fp,4(sp)
 5081a34:	df000104 	addi	fp,sp,4
 5081a38:	e13fff15 	stw	r4,-4(fp)
    printf(pMessage);
 5081a3c:	e13fff17 	ldw	r4,-4(fp)
 5081a40:	50827fc0 	call	50827fc <printf>
}
 5081a44:	e037883a 	mov	sp,fp
 5081a48:	dfc00117 	ldw	ra,4(sp)
 5081a4c:	df000017 	ldw	fp,0(sp)
 5081a50:	dec00204 	addi	sp,sp,8
 5081a54:	f800283a 	ret

05081a58 <myprintf>:

#endif


int myprintf(char *format, ...){
 5081a58:	deff7804 	addi	sp,sp,-544
 5081a5c:	dfc08415 	stw	ra,528(sp)
 5081a60:	df008315 	stw	fp,524(sp)
 5081a64:	df008304 	addi	fp,sp,524
 5081a68:	e1400215 	stw	r5,8(fp)
 5081a6c:	e1800315 	stw	r6,12(fp)
 5081a70:	e1c00415 	stw	r7,16(fp)
 5081a74:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 5081a78:	e0800204 	addi	r2,fp,8
 5081a7c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 5081a80:	e0bffe17 	ldw	r2,-8(fp)
 5081a84:	e0ff7e04 	addi	r3,fp,-520
 5081a88:	1809883a 	mov	r4,r3
 5081a8c:	01408004 	movi	r5,512
 5081a90:	e1bfff17 	ldw	r6,-4(fp)
 5081a94:	100f883a 	mov	r7,r2
 5081a98:	5086b000 	call	5086b00 <vsnprintf>
 5081a9c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 5081aa0:	e0bf7e04 	addi	r2,fp,-520
 5081aa4:	1009883a 	mov	r4,r2
 5081aa8:	5081a280 	call	5081a28 <debug_output>

    return rc;    
 5081aac:	e0bf7d17 	ldw	r2,-524(fp)
}
 5081ab0:	e037883a 	mov	sp,fp
 5081ab4:	dfc00117 	ldw	ra,4(sp)
 5081ab8:	df000017 	ldw	fp,0(sp)
 5081abc:	dec00504 	addi	sp,sp,20
 5081ac0:	f800283a 	ret

05081ac4 <myprintf_hex_array>:


int myprintf_hex_array(unsigned char *pHex, int len){
 5081ac4:	defff704 	addi	sp,sp,-36
 5081ac8:	dfc00815 	stw	ra,32(sp)
 5081acc:	df000715 	stw	fp,28(sp)
 5081ad0:	df000704 	addi	fp,sp,28
 5081ad4:	e13ffe15 	stw	r4,-8(fp)
 5081ad8:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5081adc:	e03ff915 	stw	zero,-28(fp)
 5081ae0:	00001106 	br	5081b28 <myprintf_hex_array+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 5081ae4:	e0bff917 	ldw	r2,-28(fp)
 5081ae8:	e0fffe17 	ldw	r3,-8(fp)
 5081aec:	1885883a 	add	r2,r3,r2
 5081af0:	10800003 	ldbu	r2,0(r2)
 5081af4:	10803fcc 	andi	r2,r2,255
 5081af8:	e0fffa04 	addi	r3,fp,-24
 5081afc:	1809883a 	mov	r4,r3
 5081b00:	01414274 	movhi	r5,1289
 5081b04:	29528904 	addi	r5,r5,18980
 5081b08:	100d883a 	mov	r6,r2
 5081b0c:	508295c0 	call	508295c <sprintf>
        DEBUG((szText));
 5081b10:	e0bffa04 	addi	r2,fp,-24
 5081b14:	1009883a 	mov	r4,r2
 5081b18:	5081a580 	call	5081a58 <myprintf>


int myprintf_hex_array(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 5081b1c:	e0bff917 	ldw	r2,-28(fp)
 5081b20:	10800044 	addi	r2,r2,1
 5081b24:	e0bff915 	stw	r2,-28(fp)
 5081b28:	e0fff917 	ldw	r3,-28(fp)
 5081b2c:	e0bfff17 	ldw	r2,-4(fp)
 5081b30:	18bfec16 	blt	r3,r2,5081ae4 <__alt_data_end+0xfffb38e4>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 5081b34:	e0bfff17 	ldw	r2,-4(fp)
}
 5081b38:	e037883a 	mov	sp,fp
 5081b3c:	dfc00117 	ldw	ra,4(sp)
 5081b40:	df000017 	ldw	fp,0(sp)
 5081b44:	dec00204 	addi	sp,sp,8
 5081b48:	f800283a 	ret

05081b4c <myprintf_dword_array>:

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
 5081b4c:	defff704 	addi	sp,sp,-36
 5081b50:	dfc00815 	stw	ra,32(sp)
 5081b54:	df000715 	stw	fp,28(sp)
 5081b58:	df000704 	addi	fp,sp,28
 5081b5c:	e13ffe15 	stw	r4,-8(fp)
 5081b60:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5081b64:	e03ff915 	stw	zero,-28(fp)
 5081b68:	00001306 	br	5081bb8 <myprintf_dword_array+0x6c>
        sprintf(szText, "[%08X]", *(pArray+i));
 5081b6c:	e0bff917 	ldw	r2,-28(fp)
 5081b70:	1085883a 	add	r2,r2,r2
 5081b74:	1085883a 	add	r2,r2,r2
 5081b78:	1007883a 	mov	r3,r2
 5081b7c:	e0bffe17 	ldw	r2,-8(fp)
 5081b80:	10c5883a 	add	r2,r2,r3
 5081b84:	10800017 	ldw	r2,0(r2)
 5081b88:	e0fffa04 	addi	r3,fp,-24
 5081b8c:	1809883a 	mov	r4,r3
 5081b90:	01414274 	movhi	r5,1289
 5081b94:	29528b04 	addi	r5,r5,18988
 5081b98:	100d883a 	mov	r6,r2
 5081b9c:	508295c0 	call	508295c <sprintf>
        DEBUG((szText));
 5081ba0:	e0bffa04 	addi	r2,fp,-24
 5081ba4:	1009883a 	mov	r4,r2
 5081ba8:	5081a580 	call	5081a58 <myprintf>
}

int  myprintf_dword_array(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 5081bac:	e0bff917 	ldw	r2,-28(fp)
 5081bb0:	10800044 	addi	r2,r2,1
 5081bb4:	e0bff915 	stw	r2,-28(fp)
 5081bb8:	e0fff917 	ldw	r3,-28(fp)
 5081bbc:	e0bfff17 	ldw	r2,-4(fp)
 5081bc0:	18bfea16 	blt	r3,r2,5081b6c <__alt_data_end+0xfffb396c>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 5081bc4:	e0bfff17 	ldw	r2,-4(fp)
}
 5081bc8:	e037883a 	mov	sp,fp
 5081bcc:	dfc00117 	ldw	ra,4(sp)
 5081bd0:	df000017 	ldw	fp,0(sp)
 5081bd4:	dec00204 	addi	sp,sp,8
 5081bd8:	f800283a 	ret

05081bdc <ui_is_mic_record>:
int record_sample_rate;

///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
 5081bdc:	defffe04 	addi	sp,sp,-8
 5081be0:	df000115 	stw	fp,4(sp)
 5081be4:	df000104 	addi	fp,sp,4
    bool bMicRecord;
    bMicRecord = (IORD(SW_BASE, 0) & 0x01)?FALSE:TRUE;
 5081be8:	00810034 	movhi	r2,1024
 5081bec:	10801004 	addi	r2,r2,64
 5081bf0:	10800037 	ldwio	r2,0(r2)
 5081bf4:	1080004c 	andi	r2,r2,1
 5081bf8:	1005003a 	cmpeq	r2,r2,zero
 5081bfc:	10803fcc 	andi	r2,r2,255
 5081c00:	e0bfff15 	stw	r2,-4(fp)
    return bMicRecord;
 5081c04:	e0bfff17 	ldw	r2,-4(fp)
}
 5081c08:	e037883a 	mov	sp,fp
 5081c0c:	df000017 	ldw	fp,0(sp)
 5081c10:	dec00104 	addi	sp,sp,4
 5081c14:	f800283a 	ret

05081c18 <ui_is_mic_boost>:

bool ui_is_mic_boost(void){
 5081c18:	defffe04 	addi	sp,sp,-8
 5081c1c:	df000115 	stw	fp,4(sp)
 5081c20:	df000104 	addi	fp,sp,4
    bool bMicBoost;
    bMicBoost = (IORD(SW_BASE, 0) & (0x01 << 1))?TRUE:FALSE;
 5081c24:	00810034 	movhi	r2,1024
 5081c28:	10801004 	addi	r2,r2,64
 5081c2c:	10800037 	ldwio	r2,0(r2)
 5081c30:	1080008c 	andi	r2,r2,2
 5081c34:	1004c03a 	cmpne	r2,r2,zero
 5081c38:	10803fcc 	andi	r2,r2,255
 5081c3c:	e0bfff15 	stw	r2,-4(fp)
    return bMicBoost;
 5081c40:	e0bfff17 	ldw	r2,-4(fp)
}
 5081c44:	e037883a 	mov	sp,fp
 5081c48:	df000017 	ldw	fp,0(sp)
 5081c4c:	dec00104 	addi	sp,sp,4
 5081c50:	f800283a 	ret

05081c54 <ui_is_dac_zero_cross>:

bool ui_is_dac_zero_cross(void){
 5081c54:	defffe04 	addi	sp,sp,-8
 5081c58:	df000115 	stw	fp,4(sp)
 5081c5c:	df000104 	addi	fp,sp,4
    bool bZeroCross;
    bZeroCross = (IORD(SW_BASE, 0) & (0x01 << 2))?TRUE:FALSE;
 5081c60:	00810034 	movhi	r2,1024
 5081c64:	10801004 	addi	r2,r2,64
 5081c68:	10800037 	ldwio	r2,0(r2)
 5081c6c:	1080010c 	andi	r2,r2,4
 5081c70:	1004c03a 	cmpne	r2,r2,zero
 5081c74:	10803fcc 	andi	r2,r2,255
 5081c78:	e0bfff15 	stw	r2,-4(fp)
    return bZeroCross;
 5081c7c:	e0bfff17 	ldw	r2,-4(fp)
}
 5081c80:	e037883a 	mov	sp,fp
 5081c84:	df000017 	ldw	fp,0(sp)
 5081c88:	dec00104 	addi	sp,sp,4
 5081c8c:	f800283a 	ret

05081c90 <ui_get_sample_rate>:

int ui_get_sample_rate(void){
 5081c90:	defffd04 	addi	sp,sp,-12
 5081c94:	df000215 	stw	fp,8(sp)
 5081c98:	df000204 	addi	fp,sp,8
    int sample_rate = 96000;
 5081c9c:	00800074 	movhi	r2,1
 5081ca0:	109dc004 	addi	r2,r2,30464
 5081ca4:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 mask;
    mask = IORD(SW_BASE, 0);
 5081ca8:	00810034 	movhi	r2,1024
 5081cac:	10801004 	addi	r2,r2,64
 5081cb0:	10800037 	ldwio	r2,0(r2)
 5081cb4:	e0bfff15 	stw	r2,-4(fp)
    mask = (mask >> 3) & 0x07;
 5081cb8:	e0bfff17 	ldw	r2,-4(fp)
 5081cbc:	1004d0fa 	srli	r2,r2,3
 5081cc0:	108001cc 	andi	r2,r2,7
 5081cc4:	e0bfff15 	stw	r2,-4(fp)
    if (mask == 1)
 5081cc8:	e0bfff17 	ldw	r2,-4(fp)
 5081ccc:	10800058 	cmpnei	r2,r2,1
 5081cd0:	1000031e 	bne	r2,zero,5081ce0 <ui_get_sample_rate+0x50>
        sample_rate = 48000;
 5081cd4:	00aee014 	movui	r2,48000
 5081cd8:	e0bffe15 	stw	r2,-8(fp)
 5081cdc:	00001106 	br	5081d24 <ui_get_sample_rate+0x94>
    else if (mask == 2)
 5081ce0:	e0bfff17 	ldw	r2,-4(fp)
 5081ce4:	10800098 	cmpnei	r2,r2,2
 5081ce8:	1000031e 	bne	r2,zero,5081cf8 <ui_get_sample_rate+0x68>
        sample_rate = 44100;
 5081cec:	00ab1114 	movui	r2,44100
 5081cf0:	e0bffe15 	stw	r2,-8(fp)
 5081cf4:	00000b06 	br	5081d24 <ui_get_sample_rate+0x94>
    else if (mask == 3)
 5081cf8:	e0bfff17 	ldw	r2,-4(fp)
 5081cfc:	108000d8 	cmpnei	r2,r2,3
 5081d00:	1000031e 	bne	r2,zero,5081d10 <ui_get_sample_rate+0x80>
        sample_rate = 32000;
 5081d04:	009f4004 	movi	r2,32000
 5081d08:	e0bffe15 	stw	r2,-8(fp)
 5081d0c:	00000506 	br	5081d24 <ui_get_sample_rate+0x94>
    else if (mask == 4)
 5081d10:	e0bfff17 	ldw	r2,-4(fp)
 5081d14:	10800118 	cmpnei	r2,r2,4
 5081d18:	1000021e 	bne	r2,zero,5081d24 <ui_get_sample_rate+0x94>
        sample_rate = 8000;
 5081d1c:	0087d004 	movi	r2,8000
 5081d20:	e0bffe15 	stw	r2,-8(fp)
    return sample_rate;
 5081d24:	e0bffe17 	ldw	r2,-8(fp)
}
 5081d28:	e037883a 	mov	sp,fp
 5081d2c:	df000017 	ldw	fp,0(sp)
 5081d30:	dec00104 	addi	sp,sp,4
 5081d34:	f800283a 	ret

05081d38 <button_monitor_isr>:

void button_monitor_isr(void* context, alt_u32 id){
 5081d38:	defffc04 	addi	sp,sp,-16
 5081d3c:	df000315 	stw	fp,12(sp)
 5081d40:	df000304 	addi	fp,sp,12
 5081d44:	e13ffe15 	stw	r4,-8(fp)
 5081d48:	e17fff15 	stw	r5,-4(fp)
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
 5081d4c:	e0bffe17 	ldw	r2,-8(fp)
 5081d50:	e0bffd15 	stw	r2,-12(fp)
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE) & 0x0F;  // 4-button
 5081d54:	00810034 	movhi	r2,1024
 5081d58:	10801b04 	addi	r2,r2,108
 5081d5c:	10800037 	ldwio	r2,0(r2)
 5081d60:	10c003cc 	andi	r3,r2,15
 5081d64:	e0bffd17 	ldw	r2,-12(fp)
 5081d68:	10800017 	ldw	r2,0(r2)
 5081d6c:	10c6b03a 	or	r3,r2,r3
 5081d70:	e0bffd17 	ldw	r2,-12(fp)
 5081d74:	10c00015 	stw	r3,0(r2)

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 5081d78:	0007883a 	mov	r3,zero
 5081d7c:	00810034 	movhi	r2,1024
 5081d80:	10801b04 	addi	r2,r2,108
 5081d84:	10c00035 	stwio	r3,0(r2)
}
 5081d88:	e037883a 	mov	sp,fp
 5081d8c:	df000017 	ldw	fp,0(sp)
 5081d90:	dec00104 	addi	sp,sp,4
 5081d94:	f800283a 	ret

05081d98 <button_monitor_start>:

bool button_monitor_start(volatile alt_u32 *pPressedMask){
 5081d98:	defffc04 	addi	sp,sp,-16
 5081d9c:	dfc00315 	stw	ra,12(sp)
 5081da0:	df000215 	stw	fp,8(sp)
 5081da4:	df000204 	addi	fp,sp,8
 5081da8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 5081dac:	00800044 	movi	r2,1
 5081db0:	e0bffe15 	stw	r2,-8(fp)
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(KEY_BASE, 0x0F); // 4-button
 5081db4:	00c003c4 	movi	r3,15
 5081db8:	00810034 	movhi	r2,1024
 5081dbc:	10801a04 	addi	r2,r2,104
 5081dc0:	10c00035 	stwio	r3,0(r2)

    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(KEY_BASE,0);
 5081dc4:	0007883a 	mov	r3,zero
 5081dc8:	00810034 	movhi	r2,1024
 5081dcc:	10801b04 	addi	r2,r2,108
 5081dd0:	10c00035 	stwio	r3,0(r2)

    // register IRQ
    if (bSuccess && (alt_irq_register(KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
 5081dd4:	e0bffe17 	ldw	r2,-8(fp)
 5081dd8:	10000a26 	beq	r2,zero,5081e04 <button_monitor_start+0x6c>
 5081ddc:	01000044 	movi	r4,1
 5081de0:	e17fff17 	ldw	r5,-4(fp)
 5081de4:	01814234 	movhi	r6,1288
 5081de8:	31874e04 	addi	r6,r6,7480
 5081dec:	50920040 	call	5092004 <alt_irq_register>
 5081df0:	10000426 	beq	r2,zero,5081e04 <button_monitor_start+0x6c>
        printf("[SW-MONITOR]register button IRQ fail\r\n");
 5081df4:	01014274 	movhi	r4,1289
 5081df8:	21128d04 	addi	r4,r4,18996
 5081dfc:	50828f00 	call	50828f0 <puts>
        bSuccess = FALSE;
 5081e00:	e03ffe15 	stw	zero,-8(fp)
    }

    return bSuccess;
 5081e04:	e0bffe17 	ldw	r2,-8(fp)
}
 5081e08:	e037883a 	mov	sp,fp
 5081e0c:	dfc00117 	ldw	ra,4(sp)
 5081e10:	df000017 	ldw	fp,0(sp)
 5081e14:	dec00204 	addi	sp,sp,8
 5081e18:	f800283a 	ret

05081e1c <init_audio>:




bool init_audio(AUDIO_FUNC audio_func){
 5081e1c:	defffb04 	addi	sp,sp,-20
 5081e20:	dfc00415 	stw	ra,16(sp)
 5081e24:	df000315 	stw	fp,12(sp)
 5081e28:	df000304 	addi	fp,sp,12
 5081e2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
 5081e30:	00800044 	movi	r2,1
 5081e34:	e0bffd15 	stw	r2,-12(fp)
    AUDIO_InterfaceActive(FALSE);
 5081e38:	0009883a 	mov	r4,zero
 5081e3c:	50803900 	call	5080390 <AUDIO_InterfaceActive>
    //
    if (audio_func == MIC_RECORD){
 5081e40:	e0bfff17 	ldw	r2,-4(fp)
 5081e44:	10000f1e 	bne	r2,zero,5081e84 <init_audio+0x68>
        bool bMicBoost;
        bMicBoost = ui_is_mic_boost();
 5081e48:	5081c180 	call	5081c18 <ui_is_mic_boost>
 5081e4c:	e0bffe15 	stw	r2,-8(fp)
        AUDIO_SetInputSource(SOURCE_MIC);
 5081e50:	0009883a 	mov	r4,zero
 5081e54:	50808500 	call	5080850 <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
 5081e58:	01000044 	movi	r4,1
 5081e5c:	50806580 	call	5080658 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
 5081e60:	0009883a 	mov	r4,zero
 5081e64:	50804500 	call	5080450 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicBoost(bMicBoost);
 5081e68:	e13ffe17 	ldw	r4,-8(fp)
 5081e6c:	50803d80 	call	50803d8 <AUDIO_MicBoost>
        AUDIO_MicMute(FALSE);
 5081e70:	0009883a 	mov	r4,zero
 5081e74:	50806e40 	call	50806e4 <AUDIO_MicMute>
        AUDIO_LineInMute(TRUE);
 5081e78:	01000044 	movi	r4,1
 5081e7c:	50807700 	call	5080770 <AUDIO_LineInMute>
 5081e80:	00002606 	br	5081f1c <init_audio+0x100>
    }else if (audio_func == LINEIN_RECORD){
 5081e84:	e0bfff17 	ldw	r2,-4(fp)
 5081e88:	10800058 	cmpnei	r2,r2,1
 5081e8c:	10000e1e 	bne	r2,zero,5081ec8 <init_audio+0xac>
        AUDIO_SetInputSource(SOURCE_LINEIN);
 5081e90:	01000044 	movi	r4,1
 5081e94:	50808500 	call	5080850 <AUDIO_SetInputSource>
        AUDIO_DacEnableSoftMute(TRUE);
 5081e98:	01000044 	movi	r4,1
 5081e9c:	50806580 	call	5080658 <AUDIO_DacEnableSoftMute>
        AUDIO_AdcEnableHighPassFilter(FALSE);
 5081ea0:	0009883a 	mov	r4,zero
 5081ea4:	50804500 	call	5080450 <AUDIO_AdcEnableHighPassFilter>
        AUDIO_MicMute(TRUE);
 5081ea8:	01000044 	movi	r4,1
 5081eac:	50806e40 	call	50806e4 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 5081eb0:	0009883a 	mov	r4,zero
 5081eb4:	50807700 	call	5080770 <AUDIO_LineInMute>
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
 5081eb8:	010005c4 	movi	r4,23
 5081ebc:	014005c4 	movi	r5,23
 5081ec0:	50809c40 	call	50809c4 <AUDIO_SetLineInVol>
 5081ec4:	00001506 	br	5081f1c <init_audio+0x100>
    }else if (audio_func == LINEOUT_PLAY){
 5081ec8:	e0bfff17 	ldw	r2,-4(fp)
 5081ecc:	10800098 	cmpnei	r2,r2,2
 5081ed0:	1000121e 	bne	r2,zero,5081f1c <init_audio+0x100>
        AUDIO_DacEnableSoftMute(TRUE);
 5081ed4:	01000044 	movi	r4,1
 5081ed8:	50806580 	call	5080658 <AUDIO_DacEnableSoftMute>
        AUDIO_MicBoost(FALSE);
 5081edc:	0009883a 	mov	r4,zero
 5081ee0:	50803d80 	call	50803d8 <AUDIO_MicBoost>
        AUDIO_MicMute(TRUE);
 5081ee4:	01000044 	movi	r4,1
 5081ee8:	50806e40 	call	50806e4 <AUDIO_MicMute>
        AUDIO_LineInMute(FALSE);
 5081eec:	0009883a 	mov	r4,zero
 5081ef0:	50807700 	call	5080770 <AUDIO_LineInMute>
        AUDIO_DacEnableSoftMute(FALSE);
 5081ef4:	0009883a 	mov	r4,zero
 5081ef8:	50806580 	call	5080658 <AUDIO_DacEnableSoftMute>
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_DacEnableZeroCross(ui_is_dac_zero_cross());
 5081efc:	5081c540 	call	5081c54 <ui_is_dac_zero_cross>
 5081f00:	1009883a 	mov	r4,r2
 5081f04:	50805780 	call	5080578 <AUDIO_DacEnableZeroCross>
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
 5081f08:	01001e44 	movi	r4,121
 5081f0c:	01401e44 	movi	r5,121
 5081f10:	5080ad40 	call	5080ad4 <AUDIO_SetLineOutVol>
        AUDIO_DacEnableSoftMute(FALSE);
 5081f14:	0009883a 	mov	r4,zero
 5081f18:	50806580 	call	5080658 <AUDIO_DacEnableSoftMute>
    }

    if (record_sample_rate == 8000)
 5081f1c:	d0a6d117 	ldw	r2,-25788(gp)
 5081f20:	1087d018 	cmpnei	r2,r2,8000
 5081f24:	1000031e 	bne	r2,zero,5081f34 <init_audio+0x118>
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
 5081f28:	010000c4 	movi	r4,3
 5081f2c:	50808e00 	call	50808e0 <AUDIO_SetSampleRate>
 5081f30:	00001406 	br	5081f84 <init_audio+0x168>
    else if (record_sample_rate == 32000)
 5081f34:	d0a6d117 	ldw	r2,-25788(gp)
 5081f38:	109f4018 	cmpnei	r2,r2,32000
 5081f3c:	1000031e 	bne	r2,zero,5081f4c <init_audio+0x130>
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
 5081f40:	01000104 	movi	r4,4
 5081f44:	50808e00 	call	50808e0 <AUDIO_SetSampleRate>
 5081f48:	00000e06 	br	5081f84 <init_audio+0x168>
    else if (record_sample_rate == 48000)
 5081f4c:	d0e6d117 	ldw	r3,-25788(gp)
 5081f50:	00aee014 	movui	r2,48000
 5081f54:	1880031e 	bne	r3,r2,5081f64 <init_audio+0x148>
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
 5081f58:	0009883a 	mov	r4,zero
 5081f5c:	50808e00 	call	50808e0 <AUDIO_SetSampleRate>
 5081f60:	00000806 	br	5081f84 <init_audio+0x168>
    else if (record_sample_rate == 44100)
 5081f64:	d0e6d117 	ldw	r3,-25788(gp)
 5081f68:	00ab1114 	movui	r2,44100
 5081f6c:	1880031e 	bne	r3,r2,5081f7c <init_audio+0x160>
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
 5081f70:	01000184 	movi	r4,6
 5081f74:	50808e00 	call	50808e0 <AUDIO_SetSampleRate>
 5081f78:	00000206 	br	5081f84 <init_audio+0x168>
    else
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
 5081f7c:	01000144 	movi	r4,5
 5081f80:	50808e00 	call	50808e0 <AUDIO_SetSampleRate>
    //
    AUDIO_InterfaceActive(TRUE);
 5081f84:	01000044 	movi	r4,1
 5081f88:	50803900 	call	5080390 <AUDIO_InterfaceActive>

    return bSuccess;
 5081f8c:	e0bffd17 	ldw	r2,-12(fp)
}
 5081f90:	e037883a 	mov	sp,fp
 5081f94:	dfc00117 	ldw	ra,4(sp)
 5081f98:	df000017 	ldw	fp,0(sp)
 5081f9c:	dec00204 	addi	sp,sp,8
 5081fa0:	f800283a 	ret

05081fa4 <display_time_elapsed>:


void display_time_elapsed(alt_u32 sample_num){
 5081fa4:	defffc04 	addi	sp,sp,-16
 5081fa8:	dfc00315 	stw	ra,12(sp)
 5081fac:	df000215 	stw	fp,8(sp)
 5081fb0:	df000204 	addi	fp,sp,8
 5081fb4:	e13fff15 	stw	r4,-4(fp)
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
 5081fb8:	e0bfff17 	ldw	r2,-4(fp)
 5081fbc:	10801924 	muli	r2,r2,100
 5081fc0:	d0e6d117 	ldw	r3,-25788(gp)
 5081fc4:	1009883a 	mov	r4,r2
 5081fc8:	180b883a 	mov	r5,r3
 5081fcc:	50827c00 	call	50827c0 <__udivsi3>
 5081fd0:	e0bffe15 	stw	r2,-8(fp)
    SEG7_Decimal(time, 0x04);
 5081fd4:	e13ffe17 	ldw	r4,-8(fp)
 5081fd8:	01400104 	movi	r5,4
 5081fdc:	50819400 	call	5081940 <SEG7_Decimal>
}
 5081fe0:	e037883a 	mov	sp,fp
 5081fe4:	dfc00117 	ldw	ra,4(sp)
 5081fe8:	df000017 	ldw	fp,0(sp)
 5081fec:	dec00204 	addi	sp,sp,8
 5081ff0:	f800283a 	ret

05081ff4 <show_power>:

void show_power(short sample){
 5081ff4:	defffc04 	addi	sp,sp,-16
 5081ff8:	dfc00315 	stw	ra,12(sp)
 5081ffc:	df000215 	stw	fp,8(sp)
 5082000:	df000204 	addi	fp,sp,8
 5082004:	2005883a 	mov	r2,r4
 5082008:	e0bfff0d 	sth	r2,-4(fp)
    static alt_u32 sum = 0;
    static alt_u16   cnt = 0;
    alt_u16 power = 0;
 508200c:	e03ffe0d 	sth	zero,-8(fp)
    sum += (sample >= 0)?sample:-sample;
 5082010:	e0bfff0f 	ldh	r2,-4(fp)
 5082014:	10000216 	blt	r2,zero,5082020 <show_power+0x2c>
 5082018:	e0bfff0f 	ldh	r2,-4(fp)
 508201c:	00000206 	br	5082028 <show_power+0x34>
 5082020:	e0bfff0f 	ldh	r2,-4(fp)
 5082024:	0085c83a 	sub	r2,zero,r2
 5082028:	d0e6cf17 	ldw	r3,-25796(gp)
 508202c:	10c5883a 	add	r2,r2,r3
 5082030:	d0a6cf15 	stw	r2,-25796(gp)
    cnt++;
 5082034:	d0a6d00b 	ldhu	r2,-25792(gp)
 5082038:	10800044 	addi	r2,r2,1
 508203c:	d0a6d00d 	sth	r2,-25792(gp)
    if (cnt == 32){
 5082040:	d0a6d00b 	ldhu	r2,-25792(gp)
 5082044:	10bfffcc 	andi	r2,r2,65535
 5082048:	10800818 	cmpnei	r2,r2,32
 508204c:	1000091e 	bne	r2,zero,5082074 <show_power+0x80>
        power = sum >> 13;
 5082050:	d0a6cf17 	ldw	r2,-25796(gp)
 5082054:	1004d37a 	srli	r2,r2,13
 5082058:	e0bffe0d 	sth	r2,-8(fp)
        LED_LightCount(power);
 508205c:	e0bffe0b 	ldhu	r2,-8(fp)
 5082060:	10803fcc 	andi	r2,r2,255
 5082064:	1009883a 	mov	r4,r2
 5082068:	50816dc0 	call	50816dc <LED_LightCount>
        sum = 0;
 508206c:	d026cf15 	stw	zero,-25796(gp)
        cnt = 0;
 5082070:	d026d00d 	sth	zero,-25792(gp)
    }
}
 5082074:	e037883a 	mov	sp,fp
 5082078:	dfc00117 	ldw	ra,4(sp)
 508207c:	df000017 	ldw	fp,0(sp)
 5082080:	dec00204 	addi	sp,sp,8
 5082084:	f800283a 	ret

05082088 <init>:


bool init(void){
 5082088:	defffd04 	addi	sp,sp,-12
 508208c:	dfc00215 	stw	ra,8(sp)
 5082090:	df000115 	stw	fp,4(sp)
 5082094:	df000104 	addi	fp,sp,4
    bool bSuccess = TRUE;
 5082098:	00800044 	movi	r2,1
 508209c:	e0bfff15 	stw	r2,-4(fp)

    SEG7_Clear();
 50820a0:	508174c0 	call	508174c <SEG7_Clear>


    SEG7_Decimal(0x00000000, 0x00);
 50820a4:	0009883a 	mov	r4,zero
 50820a8:	000b883a 	mov	r5,zero
 50820ac:	50819400 	call	5081940 <SEG7_Decimal>

    // prepare
    if (!AUDIO_Init()){
 50820b0:	50802080 	call	5080208 <AUDIO_Init>
 50820b4:	1000041e 	bne	r2,zero,50820c8 <init+0x40>

        printf("Audio Init Error\r\n");
 50820b8:	01014274 	movhi	r4,1289
 50820bc:	21129704 	addi	r4,r4,19036
 50820c0:	50828f00 	call	50828f0 <puts>
        bSuccess = FALSE;
 50820c4:	e03fff15 	stw	zero,-4(fp)
    }


    return bSuccess;
 50820c8:	e0bfff17 	ldw	r2,-4(fp)
}
 50820cc:	e037883a 	mov	sp,fp
 50820d0:	dfc00117 	ldw	ra,4(sp)
 50820d4:	df000017 	ldw	fp,0(sp)
 50820d8:	dec00204 	addi	sp,sp,8
 50820dc:	f800283a 	ret

050820e0 <dump_record_data>:

void dump_record_data(alt_u32 *pData, alt_u32 len){
 50820e0:	defff804 	addi	sp,sp,-32
 50820e4:	dfc00715 	stw	ra,28(sp)
 50820e8:	df000615 	stw	fp,24(sp)
 50820ec:	df000604 	addi	fp,sp,24
 50820f0:	e13ffe15 	stw	r4,-8(fp)
 50820f4:	e17fff15 	stw	r5,-4(fp)
    short sample_l, sample_r, sample_max = 0;
 50820f8:	e03ffa0d 	sth	zero,-24(fp)
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
 50820fc:	e03ffb15 	stw	zero,-20(fp)
 5082100:	00002d06 	br	50821b8 <dump_record_data+0xd8>
        data = *pData++;
 5082104:	e0bffe17 	ldw	r2,-8(fp)
 5082108:	10c00104 	addi	r3,r2,4
 508210c:	e0fffe15 	stw	r3,-8(fp)
 5082110:	10800017 	ldw	r2,0(r2)
 5082114:	e0bffc15 	stw	r2,-16(fp)
        sample_l = (short)((data >> 16) & 0xFFFF);
 5082118:	e0bffc17 	ldw	r2,-16(fp)
 508211c:	1004d43a 	srli	r2,r2,16
 5082120:	e0bffd0d 	sth	r2,-12(fp)
        sample_r = (short)(data & 0xFFFF);
 5082124:	e0bffc17 	ldw	r2,-16(fp)
 5082128:	e0bffd8d 	sth	r2,-10(fp)
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
 508212c:	e0bffd0f 	ldh	r2,-12(fp)
 5082130:	0080050e 	bge	zero,r2,5082148 <dump_record_data+0x68>
 5082134:	e0fffa0f 	ldh	r3,-24(fp)
 5082138:	e0bffd0f 	ldh	r2,-12(fp)
 508213c:	1880020e 	bge	r3,r2,5082148 <dump_record_data+0x68>
            sample_max = sample_l;
 5082140:	e0bffd0b 	ldhu	r2,-12(fp)
 5082144:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_l < 0 && sample_max <  -sample_l)
 5082148:	e0bffd0f 	ldh	r2,-12(fp)
 508214c:	1000070e 	bge	r2,zero,508216c <dump_record_data+0x8c>
 5082150:	e0fffa0f 	ldh	r3,-24(fp)
 5082154:	e0bffd0f 	ldh	r2,-12(fp)
 5082158:	0085c83a 	sub	r2,zero,r2
 508215c:	1880030e 	bge	r3,r2,508216c <dump_record_data+0x8c>
            sample_max = -sample_l;
 5082160:	e0bffd0b 	ldhu	r2,-12(fp)
 5082164:	0085c83a 	sub	r2,zero,r2
 5082168:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r > 0 && sample_max <  sample_r)
 508216c:	e0bffd8f 	ldh	r2,-10(fp)
 5082170:	0080050e 	bge	zero,r2,5082188 <dump_record_data+0xa8>
 5082174:	e0fffa0f 	ldh	r3,-24(fp)
 5082178:	e0bffd8f 	ldh	r2,-10(fp)
 508217c:	1880020e 	bge	r3,r2,5082188 <dump_record_data+0xa8>
            sample_max = sample_r;
 5082180:	e0bffd8b 	ldhu	r2,-10(fp)
 5082184:	e0bffa0d 	sth	r2,-24(fp)
        if (sample_r < 0 && sample_max <  -sample_r)
 5082188:	e0bffd8f 	ldh	r2,-10(fp)
 508218c:	1000070e 	bge	r2,zero,50821ac <dump_record_data+0xcc>
 5082190:	e0fffa0f 	ldh	r3,-24(fp)
 5082194:	e0bffd8f 	ldh	r2,-10(fp)
 5082198:	0085c83a 	sub	r2,zero,r2
 508219c:	1880030e 	bge	r3,r2,50821ac <dump_record_data+0xcc>
            sample_max = -sample_r;
 50821a0:	e0bffd8b 	ldhu	r2,-10(fp)
 50821a4:	0085c83a 	sub	r2,zero,r2
 50821a8:	e0bffa0d 	sth	r2,-24(fp)
void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
 50821ac:	e0bffb17 	ldw	r2,-20(fp)
 50821b0:	10800044 	addi	r2,r2,1
 50821b4:	e0bffb15 	stw	r2,-20(fp)
 50821b8:	e0fffb17 	ldw	r3,-20(fp)
 50821bc:	e0bfff17 	ldw	r2,-4(fp)
 50821c0:	18bfd036 	bltu	r3,r2,5082104 <__alt_data_end+0xfffb3f04>
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n", sample_max);
 50821c4:	e0bffa0f 	ldh	r2,-24(fp)
 50821c8:	01014274 	movhi	r4,1289
 50821cc:	21129c04 	addi	r4,r4,19056
 50821d0:	100b883a 	mov	r5,r2
 50821d4:	50827fc0 	call	50827fc <printf>
}
 50821d8:	e037883a 	mov	sp,fp
 50821dc:	dfc00117 	ldw	ra,4(sp)
 50821e0:	df000017 	ldw	fp,0(sp)
 50821e4:	dec00204 	addi	sp,sp,8
 50821e8:	f800283a 	ret

050821ec <show_menu>:
    "  LED:  Display audio singal strength.\n",
    "  SEG7: Display time elapsed for playing/recording.\n"
    "\n\n"
};

void show_menu(void){
 50821ec:	defffd04 	addi	sp,sp,-12
 50821f0:	dfc00215 	stw	ra,8(sp)
 50821f4:	df000115 	stw	fp,4(sp)
 50821f8:	df000104 	addi	fp,sp,4
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 50821fc:	e03fff15 	stw	zero,-4(fp)
 5082200:	00000a06 	br	508222c <show_menu+0x40>
        printf(szMenu[i]);
 5082204:	e0bfff17 	ldw	r2,-4(fp)
 5082208:	100691fa 	slli	r3,r2,7
 508220c:	00814274 	movhi	r2,1289
 5082210:	10929e04 	addi	r2,r2,19064
 5082214:	1885883a 	add	r2,r3,r2
 5082218:	1009883a 	mov	r4,r2
 508221c:	50827fc0 	call	50827fc <printf>
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
 5082220:	e0bfff17 	ldw	r2,-4(fp)
 5082224:	10800044 	addi	r2,r2,1
 5082228:	e0bfff15 	stw	r2,-4(fp)
 508222c:	e0bfff17 	ldw	r2,-4(fp)
 5082230:	10800430 	cmpltui	r2,r2,16
 5082234:	103ff31e 	bne	r2,zero,5082204 <__alt_data_end+0xfffb4004>
        printf(szMenu[i]);
}
 5082238:	e037883a 	mov	sp,fp
 508223c:	dfc00117 	ldw	ra,4(sp)
 5082240:	df000017 	ldw	fp,0(sp)
 5082244:	dec00204 	addi	sp,sp,8
 5082248:	f800283a 	ret

0508224c <main>:

int main()
{
 508224c:	deffeb04 	addi	sp,sp,-84
 5082250:	dfc01415 	stw	ra,80(sp)
 5082254:	df001315 	stw	fp,76(sp)
 5082258:	df001304 	addi	fp,sp,76
    typedef enum{
        ST_STANDY,
        ST_RECODING,
        ST_PLAYING
    }STATE;
    STATE state = ST_STANDY;
 508225c:	e03fed15 	stw	zero,-76(fp)
    volatile alt_u32 button_mask=0;
 5082260:	e03ffe15 	stw	zero,-8(fp)
    bool bRecordPressed, bPlayPressed, bError = FALSE;
 5082264:	e03fee15 	stw	zero,-72(fp)
    alt_u32 *pBuf, *pPlaying, *pRecording, RecordLen, PlayLen, data, try_cnt, buf_sample_size;
    alt_u16 ch_right, ch_left;


    printf("\nHello World\n");
 5082268:	01014274 	movhi	r4,1289
 508226c:	21149e04 	addi	r4,r4,21112
 5082270:	50828f00 	call	50828f0 <puts>

    show_menu();
 5082274:	50821ec0 	call	50821ec <show_menu>
    if (!init())
 5082278:	50820880 	call	5082088 <init>
 508227c:	1000021e 	bne	r2,zero,5082288 <main+0x3c>
        return 0;
 5082280:	0005883a 	mov	r2,zero
 5082284:	00010206 	br	5082690 <main+0x444>


#ifdef USE_SDRAM_FOR_DATA
    pBuf = (alt_u32 *)SDRAM_BASE;
 5082288:	e03ff615 	stw	zero,-40(fp)
    buf_sample_size = SDRAM_SPAN/sizeof(alt_u32);
 508228c:	00804034 	movhi	r2,256
 5082290:	e0bff715 	stw	r2,-36(fp)
        LCD_TextOut("malloc fail\n\n");
        printf("malloc fail\r\n");
        return 0;
    }
#endif
    button_monitor_start(&button_mask);  // button IRQ
 5082294:	e0bffe04 	addi	r2,fp,-8
 5082298:	1009883a 	mov	r4,r2
 508229c:	5081d980 	call	5081d98 <button_monitor_start>
    printf("ready\n");
 50822a0:	01014274 	movhi	r4,1289
 50822a4:	2114a204 	addi	r4,r4,21128
 50822a8:	50828f00 	call	50828f0 <puts>


    // test
    record_sample_rate = ui_get_sample_rate();
 50822ac:	5081c900 	call	5081c90 <ui_get_sample_rate>
 50822b0:	d0a6d115 	stw	r2,-25788(gp)
    RecordLen = buf_sample_size;
 50822b4:	e0bff717 	ldw	r2,-36(fp)
 50822b8:	e0bff115 	stw	r2,-60(fp)
    //

    // infinite loop
    while(1){
        //
        bRecordPressed = (button_mask & RECORD_BUTTON)?TRUE:FALSE;
 50822bc:	e0bffe17 	ldw	r2,-8(fp)
 50822c0:	1080020c 	andi	r2,r2,8
 50822c4:	1004c03a 	cmpne	r2,r2,zero
 50822c8:	10803fcc 	andi	r2,r2,255
 50822cc:	e0bff815 	stw	r2,-32(fp)
        bPlayPressed = (button_mask & PLAY_BUTTON)?TRUE:FALSE;
 50822d0:	e0bffe17 	ldw	r2,-8(fp)
 50822d4:	1080010c 	andi	r2,r2,4
 50822d8:	1004c03a 	cmpne	r2,r2,zero
 50822dc:	10803fcc 	andi	r2,r2,255
 50822e0:	e0bff915 	stw	r2,-28(fp)
        if (bPlayPressed || bRecordPressed)
 50822e4:	e0bff917 	ldw	r2,-28(fp)
 50822e8:	1000021e 	bne	r2,zero,50822f4 <main+0xa8>
 50822ec:	e0bff817 	ldw	r2,-32(fp)
 50822f0:	10000126 	beq	r2,zero,50822f8 <main+0xac>
            button_mask = 0;
 50822f4:	e03ffe15 	stw	zero,-8(fp)
        if (state == ST_STANDY){
 50822f8:	e0bfed17 	ldw	r2,-76(fp)
 50822fc:	1000431e 	bne	r2,zero,508240c <main+0x1c0>
            if (bRecordPressed){
 5082300:	e0bff817 	ldw	r2,-32(fp)
 5082304:	10002826 	beq	r2,zero,50823a8 <main+0x15c>
                bool bMicRecord;
                record_sample_rate = ui_get_sample_rate();
 5082308:	5081c900 	call	5081c90 <ui_get_sample_rate>
 508230c:	d0a6d115 	stw	r2,-25788(gp)
                bMicRecord = ui_is_mic_record();
 5082310:	5081bdc0 	call	5081bdc <ui_is_mic_record>
 5082314:	e0bffa15 	stw	r2,-24(fp)
                AUDIO_FifoClear();
 5082318:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                init_audio(bMicRecord?MIC_RECORD:LINEIN_RECORD);
 508231c:	e0bffa17 	ldw	r2,-24(fp)
 5082320:	1005003a 	cmpeq	r2,r2,zero
 5082324:	10803fcc 	andi	r2,r2,255
 5082328:	1009883a 	mov	r4,r2
 508232c:	5081e1c0 	call	5081e1c <init_audio>
                AUDIO_FifoClear();
 5082330:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                state = ST_RECODING;
 5082334:	00800044 	movi	r2,1
 5082338:	e0bfed15 	stw	r2,-76(fp)
                if (bMicRecord){
 508233c:	e0bffa17 	ldw	r2,-24(fp)
 5082340:	10001026 	beq	r2,zero,5082384 <main+0x138>
                    bool bMicBoost = ui_is_mic_boost();
 5082344:	5081c180 	call	5081c18 <ui_is_mic_boost>
 5082348:	e0bffb15 	stw	r2,-20(fp)
                    printf("MIC %srecording (sample rate = %d)...\r\n", bMicBoost?"Boost ":"", record_sample_rate);
 508234c:	e0bffb17 	ldw	r2,-20(fp)
 5082350:	10000326 	beq	r2,zero,5082360 <main+0x114>
 5082354:	00814274 	movhi	r2,1289
 5082358:	1094a404 	addi	r2,r2,21136
 508235c:	00000206 	br	5082368 <main+0x11c>
 5082360:	00814274 	movhi	r2,1289
 5082364:	1094a604 	addi	r2,r2,21144
 5082368:	d0e6d117 	ldw	r3,-25788(gp)
 508236c:	01014274 	movhi	r4,1289
 5082370:	2114a704 	addi	r4,r4,21148
 5082374:	100b883a 	mov	r5,r2
 5082378:	180d883a 	mov	r6,r3
 508237c:	50827fc0 	call	50827fc <printf>
 5082380:	00000506 	br	5082398 <main+0x14c>

                }else{
                    printf("LINE-IN recording (sample rate = %d)...\r\n", record_sample_rate);
 5082384:	d0a6d117 	ldw	r2,-25788(gp)
 5082388:	01014274 	movhi	r4,1289
 508238c:	2114b104 	addi	r4,r4,21188
 5082390:	100b883a 	mov	r5,r2
 5082394:	50827fc0 	call	50827fc <printf>


                }
                pRecording = pBuf;
 5082398:	e0bff617 	ldw	r2,-40(fp)
 508239c:	e0bff015 	stw	r2,-64(fp)
                RecordLen = 0;
 50823a0:	e03ff115 	stw	zero,-60(fp)
 50823a4:	00001706 	br	5082404 <main+0x1b8>
            }else if (bPlayPressed){
 50823a8:	e0bff917 	ldw	r2,-28(fp)
 50823ac:	10001526 	beq	r2,zero,5082404 <main+0x1b8>
                if (RecordLen == 0){
 50823b0:	e0bff117 	ldw	r2,-60(fp)
 50823b4:	1000041e 	bne	r2,zero,50823c8 <main+0x17c>
                    printf("Please record before play audio\r\n");
 50823b8:	01014274 	movhi	r4,1289
 50823bc:	2114bc04 	addi	r4,r4,21232
 50823c0:	50828f00 	call	50828f0 <puts>
 50823c4:	00000f06 	br	5082404 <main+0x1b8>

                }else{
                    bool bZeroCross = ui_is_dac_zero_cross();
 50823c8:	5081c540 	call	5081c54 <ui_is_dac_zero_cross>
 50823cc:	e0bffc15 	stw	r2,-16(fp)
                    AUDIO_FifoClear();
 50823d0:	5080f080 	call	5080f08 <AUDIO_FifoClear>
                    init_audio(LINEOUT_PLAY);
 50823d4:	01000084 	movi	r4,2
 50823d8:	5081e1c0 	call	5081e1c <init_audio>
                    state = ST_PLAYING;
 50823dc:	00800084 	movi	r2,2
 50823e0:	e0bfed15 	stw	r2,-76(fp)
                    printf("playing (sample rate = %d)...\r\n", record_sample_rate);
 50823e4:	d0a6d117 	ldw	r2,-25788(gp)
 50823e8:	01014274 	movhi	r4,1289
 50823ec:	2114c504 	addi	r4,r4,21268
 50823f0:	100b883a 	mov	r5,r2
 50823f4:	50827fc0 	call	50827fc <printf>


                    pPlaying = pBuf;
 50823f8:	e0bff617 	ldw	r2,-40(fp)
 50823fc:	e0bfef15 	stw	r2,-68(fp)
                    PlayLen = 0;
 5082400:	e03ff215 	stw	zero,-56(fp)
                }
            }
            bError = FALSE;
 5082404:	e03fee15 	stw	zero,-72(fp)
 5082408:	0000a006 	br	508268c <main+0x440>
        }else if (state == ST_RECODING){
 508240c:	e0bfed17 	ldw	r2,-76(fp)
 5082410:	10800058 	cmpnei	r2,r2,1
 5082414:	10004a1e 	bne	r2,zero,5082540 <main+0x2f4>
            if (bRecordPressed || (RecordLen >= buf_sample_size) || bError){
 5082418:	e0bff817 	ldw	r2,-32(fp)
 508241c:	1000051e 	bne	r2,zero,5082434 <main+0x1e8>
 5082420:	e0fff117 	ldw	r3,-60(fp)
 5082424:	e0bff717 	ldw	r2,-36(fp)
 5082428:	1880022e 	bgeu	r3,r2,5082434 <main+0x1e8>
 508242c:	e0bfee17 	ldw	r2,-72(fp)
 5082430:	10000b26 	beq	r2,zero,5082460 <main+0x214>
                // stop record
                printf("record %d samples\n", (int)RecordLen);
 5082434:	e0bff117 	ldw	r2,-60(fp)
 5082438:	01014274 	movhi	r4,1289
 508243c:	2114cd04 	addi	r4,r4,21300
 5082440:	100b883a 	mov	r5,r2
 5082444:	50827fc0 	call	50827fc <printf>


                state = ST_STANDY;
 5082448:	e03fed15 	stw	zero,-76(fp)
                LED_AllOff();
 508244c:	50816b00 	call	50816b0 <LED_AllOff>
                dump_record_data(pBuf, RecordLen);
 5082450:	e13ff617 	ldw	r4,-40(fp)
 5082454:	e17ff117 	ldw	r5,-60(fp)
 5082458:	50820e00 	call	50820e0 <dump_record_data>
 508245c:	00008b06 	br	508268c <main+0x440>

            }else{
                // continue recoding
                int i = 0;
 5082460:	e03ff415 	stw	zero,-48(fp)
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
 5082464:	00002d06 	br	508251c <main+0x2d0>
                    try_cnt = 0;
 5082468:	e03ff315 	stw	zero,-52(fp)
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 508246c:	00000306 	br	508247c <main+0x230>
                        try_cnt++;
 5082470:	e0bff317 	ldw	r2,-52(fp)
 5082474:	10800044 	addi	r2,r2,1
 5082478:	e0bff315 	stw	r2,-52(fp)
            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
                    try_cnt = 0;
                    while (!AUDIO_AdcFifoNotEmpty() && try_cnt < MAX_TRY_CNT){ // wait while empty
 508247c:	5080e780 	call	5080e78 <AUDIO_AdcFifoNotEmpty>
 5082480:	1000031e 	bne	r2,zero,5082490 <main+0x244>
 5082484:	e0bff317 	ldw	r2,-52(fp)
 5082488:	10810030 	cmpltui	r2,r2,1024
 508248c:	103ff81e 	bne	r2,zero,5082470 <__alt_data_end+0xfffb4270>
                        try_cnt++;
                    }
                    if (try_cnt >= MAX_TRY_CNT){
 5082490:	e0bff317 	ldw	r2,-52(fp)
 5082494:	10810030 	cmpltui	r2,r2,1024
 5082498:	1000031e 	bne	r2,zero,50824a8 <main+0x25c>
                        bError = TRUE;
 508249c:	00800044 	movi	r2,1
 50824a0:	e0bfee15 	stw	r2,-72(fp)
                        break;
 50824a4:	00002306 	br	5082534 <main+0x2e8>
                    }
                    AUDIO_AdcFifoGetData(&ch_left, &ch_right);
 50824a8:	e0ffff84 	addi	r3,fp,-2
 50824ac:	e0bfff04 	addi	r2,fp,-4
 50824b0:	1809883a 	mov	r4,r3
 50824b4:	100b883a 	mov	r5,r2
 50824b8:	5080eb40 	call	5080eb4 <AUDIO_AdcFifoGetData>
                    data = (ch_left << 16) | ch_right;
 50824bc:	e0bfff8b 	ldhu	r2,-2(fp)
 50824c0:	10bfffcc 	andi	r2,r2,65535
 50824c4:	1006943a 	slli	r3,r2,16
 50824c8:	e0bfff0b 	ldhu	r2,-4(fp)
 50824cc:	10bfffcc 	andi	r2,r2,65535
 50824d0:	1884b03a 	or	r2,r3,r2
 50824d4:	e0bffd15 	stw	r2,-12(fp)
                    *pRecording++ = data;
 50824d8:	e0bff017 	ldw	r2,-64(fp)
 50824dc:	10c00104 	addi	r3,r2,4
 50824e0:	e0fff015 	stw	r3,-64(fp)
 50824e4:	e0fffd17 	ldw	r3,-12(fp)
 50824e8:	10c00015 	stw	r3,0(r2)
                    RecordLen++;
 50824ec:	e0bff117 	ldw	r2,-60(fp)
 50824f0:	10800044 	addi	r2,r2,1
 50824f4:	e0bff115 	stw	r2,-60(fp)
                    i++;
 50824f8:	e0bff417 	ldw	r2,-48(fp)
 50824fc:	10800044 	addi	r2,r2,1
 5082500:	e0bff415 	stw	r2,-48(fp)
                    show_power(data & 0xFFFF);
 5082504:	e0bffd17 	ldw	r2,-12(fp)
 5082508:	10bfffcc 	andi	r2,r2,65535
 508250c:	10a0001c 	xori	r2,r2,32768
 5082510:	10a00004 	addi	r2,r2,-32768
 5082514:	1009883a 	mov	r4,r2
 5082518:	5081ff40 	call	5081ff4 <show_power>
                dump_record_data(pBuf, RecordLen);

            }else{
                // continue recoding
                int i = 0;
                while ((i < RECORD_BLOCK_SIZE) && (RecordLen < buf_sample_size)){
 508251c:	e0bff417 	ldw	r2,-48(fp)
 5082520:	10803e88 	cmpgei	r2,r2,250
 5082524:	1000031e 	bne	r2,zero,5082534 <main+0x2e8>
 5082528:	e0fff117 	ldw	r3,-60(fp)
 508252c:	e0bff717 	ldw	r2,-36(fp)
 5082530:	18bfcd36 	bltu	r3,r2,5082468 <__alt_data_end+0xfffb4268>
                    *pRecording++ = data;
                    RecordLen++;
                    i++;
                    show_power(data & 0xFFFF);
                }  // while
                display_time_elapsed(RecordLen);
 5082534:	e13ff117 	ldw	r4,-60(fp)
 5082538:	5081fa40 	call	5081fa4 <display_time_elapsed>
 508253c:	00005306 	br	508268c <main+0x440>
            }
        }else if (state == ST_PLAYING){
 5082540:	e0bfed17 	ldw	r2,-76(fp)
 5082544:	10800098 	cmpnei	r2,r2,2
 5082548:	1000501e 	bne	r2,zero,508268c <main+0x440>
            if (bPlayPressed || (PlayLen >= RecordLen) || bError){
 508254c:	e0bff917 	ldw	r2,-28(fp)
 5082550:	1000051e 	bne	r2,zero,5082568 <main+0x31c>
 5082554:	e0fff217 	ldw	r3,-56(fp)
 5082558:	e0bff117 	ldw	r2,-60(fp)
 508255c:	1880022e 	bgeu	r3,r2,5082568 <main+0x31c>
 5082560:	e0bfee17 	ldw	r2,-72(fp)
 5082564:	10000e26 	beq	r2,zero,50825a0 <main+0x354>
                // stop playing
                printf("Play Stop %s\r\n", bError?"(Error)":"");
 5082568:	e0bfee17 	ldw	r2,-72(fp)
 508256c:	10000326 	beq	r2,zero,508257c <main+0x330>
 5082570:	00814274 	movhi	r2,1289
 5082574:	1094d204 	addi	r2,r2,21320
 5082578:	00000206 	br	5082584 <main+0x338>
 508257c:	00814274 	movhi	r2,1289
 5082580:	1094a604 	addi	r2,r2,21144
 5082584:	01014274 	movhi	r4,1289
 5082588:	2114d404 	addi	r4,r4,21328
 508258c:	100b883a 	mov	r5,r2
 5082590:	50827fc0 	call	50827fc <printf>

                state = ST_STANDY;
 5082594:	e03fed15 	stw	zero,-76(fp)
                LED_AllOff();
 5082598:	50816b00 	call	50816b0 <LED_AllOff>
 508259c:	00003b06 	br	508268c <main+0x440>
            }else{
                // continue playing
                int i = 0;
 50825a0:	e03ff515 	stw	zero,-44(fp)
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
 50825a4:	00003106 	br	508266c <main+0x420>
                    try_cnt = 0;
 50825a8:	e03ff315 	stw	zero,-52(fp)
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 50825ac:	00000306 	br	50825bc <main+0x370>
                        try_cnt++;
 50825b0:	e0bff317 	ldw	r2,-52(fp)
 50825b4:	10800044 	addi	r2,r2,1
 50825b8:	e0bff315 	stw	r2,-52(fp)
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
                    try_cnt = 0;
                    while (!AUDIO_DacFifoNotFull() && try_cnt < MAX_TRY_CNT){  // wait while full
 50825bc:	5080df00 	call	5080df0 <AUDIO_DacFifoNotFull>
 50825c0:	1000031e 	bne	r2,zero,50825d0 <main+0x384>
 50825c4:	e0bff317 	ldw	r2,-52(fp)
 50825c8:	10810030 	cmpltui	r2,r2,1024
 50825cc:	103ff81e 	bne	r2,zero,50825b0 <__alt_data_end+0xfffb43b0>
                        try_cnt++;
                    }
                    if (try_cnt >= MAX_TRY_CNT){
 50825d0:	e0bff317 	ldw	r2,-52(fp)
 50825d4:	10810030 	cmpltui	r2,r2,1024
 50825d8:	1000031e 	bne	r2,zero,50825e8 <main+0x39c>
                        bError = TRUE;
 50825dc:	00800044 	movi	r2,1
 50825e0:	e0bfee15 	stw	r2,-72(fp)
                        break;
 50825e4:	00002706 	br	5082684 <main+0x438>
                    }
                    data = *pPlaying++;
 50825e8:	e0bfef17 	ldw	r2,-68(fp)
 50825ec:	10c00104 	addi	r3,r2,4
 50825f0:	e0ffef15 	stw	r3,-68(fp)
 50825f4:	10800017 	ldw	r2,0(r2)
 50825f8:	e0bffd15 	stw	r2,-12(fp)

                    //data = 0;
                    ch_left = data >> 16;
 50825fc:	e0bffd17 	ldw	r2,-12(fp)
 5082600:	1004d43a 	srli	r2,r2,16
 5082604:	e0bfff8d 	sth	r2,-2(fp)
                    ch_right = data & 0xFFFF;
 5082608:	e0bffd17 	ldw	r2,-12(fp)
 508260c:	e0bfff0d 	sth	r2,-4(fp)
                    AUDIO_DacFifoSetData(ch_left, ch_right);
 5082610:	e0bfff8b 	ldhu	r2,-2(fp)
 5082614:	10ffffcc 	andi	r3,r2,65535
 5082618:	18e0001c 	xori	r3,r3,32768
 508261c:	18e00004 	addi	r3,r3,-32768
 5082620:	e0bfff0b 	ldhu	r2,-4(fp)
 5082624:	10bfffcc 	andi	r2,r2,65535
 5082628:	10a0001c 	xori	r2,r2,32768
 508262c:	10a00004 	addi	r2,r2,-32768
 5082630:	1809883a 	mov	r4,r3
 5082634:	100b883a 	mov	r5,r2
 5082638:	5080e2c0 	call	5080e2c <AUDIO_DacFifoSetData>
                    i++;
 508263c:	e0bff517 	ldw	r2,-44(fp)
 5082640:	10800044 	addi	r2,r2,1
 5082644:	e0bff515 	stw	r2,-44(fp)
                    PlayLen++;
 5082648:	e0bff217 	ldw	r2,-56(fp)
 508264c:	10800044 	addi	r2,r2,1
 5082650:	e0bff215 	stw	r2,-56(fp)
                    show_power(data & 0xFFFF);
 5082654:	e0bffd17 	ldw	r2,-12(fp)
 5082658:	10bfffcc 	andi	r2,r2,65535
 508265c:	10a0001c 	xori	r2,r2,32768
 5082660:	10a00004 	addi	r2,r2,-32768
 5082664:	1009883a 	mov	r4,r2
 5082668:	5081ff40 	call	5081ff4 <show_power>
                state = ST_STANDY;
                LED_AllOff();
            }else{
                // continue playing
                int i = 0;
                while ((i < PLAY_BLOCK_SIZE) && (PlayLen < RecordLen)){
 508266c:	e0bff517 	ldw	r2,-44(fp)
 5082670:	10803e88 	cmpgei	r2,r2,250
 5082674:	1000031e 	bne	r2,zero,5082684 <main+0x438>
 5082678:	e0fff217 	ldw	r3,-56(fp)
 508267c:	e0bff117 	ldw	r2,-60(fp)
 5082680:	18bfc936 	bltu	r3,r2,50825a8 <__alt_data_end+0xfffb43a8>
                    i++;
                    PlayLen++;
                    show_power(data & 0xFFFF);
                    //printf("[%d] %d/%d\n", PlayLen, (short)((data >> 16) & 0xFFFF), (short)(data & 0xFFFF));
                }
                display_time_elapsed(PlayLen);
 5082684:	e13ff217 	ldw	r4,-56(fp)
 5082688:	5081fa40 	call	5081fa4 <display_time_elapsed>
            }
        }
    }
 508268c:	003f0b06 	br	50822bc <__alt_data_end+0xfffb40bc>

}
 5082690:	e037883a 	mov	sp,fp
 5082694:	dfc00117 	ldw	ra,4(sp)
 5082698:	df000017 	ldw	fp,0(sp)
 508269c:	dec00204 	addi	sp,sp,8
 50826a0:	f800283a 	ret

050826a4 <udivmodsi4>:
 50826a4:	2900182e 	bgeu	r5,r4,5082708 <udivmodsi4+0x64>
 50826a8:	28001716 	blt	r5,zero,5082708 <udivmodsi4+0x64>
 50826ac:	00800804 	movi	r2,32
 50826b0:	00c00044 	movi	r3,1
 50826b4:	00000206 	br	50826c0 <udivmodsi4+0x1c>
 50826b8:	10001126 	beq	r2,zero,5082700 <udivmodsi4+0x5c>
 50826bc:	28000516 	blt	r5,zero,50826d4 <udivmodsi4+0x30>
 50826c0:	294b883a 	add	r5,r5,r5
 50826c4:	10bfffc4 	addi	r2,r2,-1
 50826c8:	18c7883a 	add	r3,r3,r3
 50826cc:	293ffa36 	bltu	r5,r4,50826b8 <__alt_data_end+0xfffb44b8>
 50826d0:	18000b26 	beq	r3,zero,5082700 <udivmodsi4+0x5c>
 50826d4:	0005883a 	mov	r2,zero
 50826d8:	21400236 	bltu	r4,r5,50826e4 <udivmodsi4+0x40>
 50826dc:	2149c83a 	sub	r4,r4,r5
 50826e0:	10c4b03a 	or	r2,r2,r3
 50826e4:	1806d07a 	srli	r3,r3,1
 50826e8:	280ad07a 	srli	r5,r5,1
 50826ec:	183ffa1e 	bne	r3,zero,50826d8 <__alt_data_end+0xfffb44d8>
 50826f0:	3000011e 	bne	r6,zero,50826f8 <udivmodsi4+0x54>
 50826f4:	f800283a 	ret
 50826f8:	2005883a 	mov	r2,r4
 50826fc:	f800283a 	ret
 5082700:	0005883a 	mov	r2,zero
 5082704:	003ffa06 	br	50826f0 <__alt_data_end+0xfffb44f0>
 5082708:	00c00044 	movi	r3,1
 508270c:	003ff106 	br	50826d4 <__alt_data_end+0xfffb44d4>

05082710 <__divsi3>:
 5082710:	defffe04 	addi	sp,sp,-8
 5082714:	dfc00115 	stw	ra,4(sp)
 5082718:	dc000015 	stw	r16,0(sp)
 508271c:	20000b16 	blt	r4,zero,508274c <__divsi3+0x3c>
 5082720:	0021883a 	mov	r16,zero
 5082724:	28000c16 	blt	r5,zero,5082758 <__divsi3+0x48>
 5082728:	000d883a 	mov	r6,zero
 508272c:	50826a40 	call	50826a4 <udivmodsi4>
 5082730:	0407c83a 	sub	r3,zero,r16
 5082734:	1884f03a 	xor	r2,r3,r2
 5082738:	1405883a 	add	r2,r2,r16
 508273c:	dfc00117 	ldw	ra,4(sp)
 5082740:	dc000017 	ldw	r16,0(sp)
 5082744:	dec00204 	addi	sp,sp,8
 5082748:	f800283a 	ret
 508274c:	0109c83a 	sub	r4,zero,r4
 5082750:	04000044 	movi	r16,1
 5082754:	283ff40e 	bge	r5,zero,5082728 <__alt_data_end+0xfffb4528>
 5082758:	014bc83a 	sub	r5,zero,r5
 508275c:	8400005c 	xori	r16,r16,1
 5082760:	003ff106 	br	5082728 <__alt_data_end+0xfffb4528>

05082764 <__modsi3>:
 5082764:	defffd04 	addi	sp,sp,-12
 5082768:	dfc00215 	stw	ra,8(sp)
 508276c:	dc400115 	stw	r17,4(sp)
 5082770:	dc000015 	stw	r16,0(sp)
 5082774:	20000c16 	blt	r4,zero,50827a8 <__modsi3+0x44>
 5082778:	0023883a 	mov	r17,zero
 508277c:	0021883a 	mov	r16,zero
 5082780:	28000d16 	blt	r5,zero,50827b8 <__modsi3+0x54>
 5082784:	01800044 	movi	r6,1
 5082788:	50826a40 	call	50826a4 <udivmodsi4>
 508278c:	1404f03a 	xor	r2,r2,r16
 5082790:	8885883a 	add	r2,r17,r2
 5082794:	dfc00217 	ldw	ra,8(sp)
 5082798:	dc400117 	ldw	r17,4(sp)
 508279c:	dc000017 	ldw	r16,0(sp)
 50827a0:	dec00304 	addi	sp,sp,12
 50827a4:	f800283a 	ret
 50827a8:	0109c83a 	sub	r4,zero,r4
 50827ac:	04400044 	movi	r17,1
 50827b0:	043fffc4 	movi	r16,-1
 50827b4:	283ff30e 	bge	r5,zero,5082784 <__alt_data_end+0xfffb4584>
 50827b8:	014bc83a 	sub	r5,zero,r5
 50827bc:	003ff106 	br	5082784 <__alt_data_end+0xfffb4584>

050827c0 <__udivsi3>:
 50827c0:	000d883a 	mov	r6,zero
 50827c4:	50826a41 	jmpi	50826a4 <udivmodsi4>

050827c8 <__umodsi3>:
 50827c8:	01800044 	movi	r6,1
 50827cc:	50826a41 	jmpi	50826a4 <udivmodsi4>

050827d0 <_printf_r>:
 50827d0:	defffd04 	addi	sp,sp,-12
 50827d4:	dfc00015 	stw	ra,0(sp)
 50827d8:	d9800115 	stw	r6,4(sp)
 50827dc:	d9c00215 	stw	r7,8(sp)
 50827e0:	280d883a 	mov	r6,r5
 50827e4:	21400217 	ldw	r5,8(r4)
 50827e8:	d9c00104 	addi	r7,sp,4
 50827ec:	50849f00 	call	50849f0 <___vfprintf_internal_r>
 50827f0:	dfc00017 	ldw	ra,0(sp)
 50827f4:	dec00304 	addi	sp,sp,12
 50827f8:	f800283a 	ret

050827fc <printf>:
 50827fc:	defffc04 	addi	sp,sp,-16
 5082800:	dfc00015 	stw	ra,0(sp)
 5082804:	d9400115 	stw	r5,4(sp)
 5082808:	d9800215 	stw	r6,8(sp)
 508280c:	d9c00315 	stw	r7,12(sp)
 5082810:	00814274 	movhi	r2,1289
 5082814:	109c5604 	addi	r2,r2,29016
 5082818:	10800017 	ldw	r2,0(r2)
 508281c:	200b883a 	mov	r5,r4
 5082820:	d9800104 	addi	r6,sp,4
 5082824:	11000217 	ldw	r4,8(r2)
 5082828:	50869ec0 	call	50869ec <__vfprintf_internal>
 508282c:	dfc00017 	ldw	ra,0(sp)
 5082830:	dec00404 	addi	sp,sp,16
 5082834:	f800283a 	ret

05082838 <_puts_r>:
 5082838:	defff604 	addi	sp,sp,-40
 508283c:	dc000715 	stw	r16,28(sp)
 5082840:	2021883a 	mov	r16,r4
 5082844:	2809883a 	mov	r4,r5
 5082848:	dc400815 	stw	r17,32(sp)
 508284c:	dfc00915 	stw	ra,36(sp)
 5082850:	2823883a 	mov	r17,r5
 5082854:	50829c80 	call	50829c8 <strlen>
 5082858:	00c14274 	movhi	r3,1289
 508285c:	18dc5604 	addi	r3,r3,29016
 5082860:	18c00017 	ldw	r3,0(r3)
 5082864:	11000044 	addi	r4,r2,1
 5082868:	d8800115 	stw	r2,4(sp)
 508286c:	18c00217 	ldw	r3,8(r3)
 5082870:	01414274 	movhi	r5,1289
 5082874:	2954d804 	addi	r5,r5,21344
 5082878:	1880030b 	ldhu	r2,12(r3)
 508287c:	d9400215 	stw	r5,8(sp)
 5082880:	d9000615 	stw	r4,24(sp)
 5082884:	01400044 	movi	r5,1
 5082888:	01000084 	movi	r4,2
 508288c:	d9000515 	stw	r4,20(sp)
 5082890:	dc400015 	stw	r17,0(sp)
 5082894:	d9400315 	stw	r5,12(sp)
 5082898:	dec00415 	stw	sp,16(sp)
 508289c:	1108000c 	andi	r4,r2,8192
 50828a0:	2000061e 	bne	r4,zero,50828bc <_puts_r+0x84>
 50828a4:	19401917 	ldw	r5,100(r3)
 50828a8:	0137ffc4 	movi	r4,-8193
 50828ac:	10880014 	ori	r2,r2,8192
 50828b0:	2908703a 	and	r4,r5,r4
 50828b4:	1880030d 	sth	r2,12(r3)
 50828b8:	19001915 	stw	r4,100(r3)
 50828bc:	81400217 	ldw	r5,8(r16)
 50828c0:	8009883a 	mov	r4,r16
 50828c4:	d9800404 	addi	r6,sp,16
 50828c8:	5088fa40 	call	5088fa4 <__sfvwrite_r>
 50828cc:	1000061e 	bne	r2,zero,50828e8 <_puts_r+0xb0>
 50828d0:	00800284 	movi	r2,10
 50828d4:	dfc00917 	ldw	ra,36(sp)
 50828d8:	dc400817 	ldw	r17,32(sp)
 50828dc:	dc000717 	ldw	r16,28(sp)
 50828e0:	dec00a04 	addi	sp,sp,40
 50828e4:	f800283a 	ret
 50828e8:	00bfffc4 	movi	r2,-1
 50828ec:	003ff906 	br	50828d4 <__alt_data_end+0xfffb46d4>

050828f0 <puts>:
 50828f0:	00814274 	movhi	r2,1289
 50828f4:	109c5604 	addi	r2,r2,29016
 50828f8:	200b883a 	mov	r5,r4
 50828fc:	11000017 	ldw	r4,0(r2)
 5082900:	50828381 	jmpi	5082838 <_puts_r>

05082904 <_sprintf_r>:
 5082904:	deffe404 	addi	sp,sp,-112
 5082908:	2807883a 	mov	r3,r5
 508290c:	dfc01a15 	stw	ra,104(sp)
 5082910:	d9c01b15 	stw	r7,108(sp)
 5082914:	00a00034 	movhi	r2,32768
 5082918:	10bfffc4 	addi	r2,r2,-1
 508291c:	02008204 	movi	r8,520
 5082920:	d8800215 	stw	r2,8(sp)
 5082924:	d8800515 	stw	r2,20(sp)
 5082928:	d80b883a 	mov	r5,sp
 508292c:	d9c01b04 	addi	r7,sp,108
 5082930:	00bfffc4 	movi	r2,-1
 5082934:	d8c00015 	stw	r3,0(sp)
 5082938:	d8c00415 	stw	r3,16(sp)
 508293c:	da00030d 	sth	r8,12(sp)
 5082940:	d880038d 	sth	r2,14(sp)
 5082944:	5082a600 	call	5082a60 <___svfprintf_internal_r>
 5082948:	d8c00017 	ldw	r3,0(sp)
 508294c:	18000005 	stb	zero,0(r3)
 5082950:	dfc01a17 	ldw	ra,104(sp)
 5082954:	dec01c04 	addi	sp,sp,112
 5082958:	f800283a 	ret

0508295c <sprintf>:
 508295c:	deffe304 	addi	sp,sp,-116
 5082960:	2007883a 	mov	r3,r4
 5082964:	dfc01a15 	stw	ra,104(sp)
 5082968:	d9801b15 	stw	r6,108(sp)
 508296c:	d9c01c15 	stw	r7,112(sp)
 5082970:	01014274 	movhi	r4,1289
 5082974:	211c5604 	addi	r4,r4,29016
 5082978:	21000017 	ldw	r4,0(r4)
 508297c:	00a00034 	movhi	r2,32768
 5082980:	10bfffc4 	addi	r2,r2,-1
 5082984:	280d883a 	mov	r6,r5
 5082988:	02008204 	movi	r8,520
 508298c:	d8800215 	stw	r2,8(sp)
 5082990:	d8800515 	stw	r2,20(sp)
 5082994:	d80b883a 	mov	r5,sp
 5082998:	d9c01b04 	addi	r7,sp,108
 508299c:	00bfffc4 	movi	r2,-1
 50829a0:	d8c00015 	stw	r3,0(sp)
 50829a4:	d8c00415 	stw	r3,16(sp)
 50829a8:	da00030d 	sth	r8,12(sp)
 50829ac:	d880038d 	sth	r2,14(sp)
 50829b0:	5082a600 	call	5082a60 <___svfprintf_internal_r>
 50829b4:	d8c00017 	ldw	r3,0(sp)
 50829b8:	18000005 	stb	zero,0(r3)
 50829bc:	dfc01a17 	ldw	ra,104(sp)
 50829c0:	dec01d04 	addi	sp,sp,116
 50829c4:	f800283a 	ret

050829c8 <strlen>:
 50829c8:	208000cc 	andi	r2,r4,3
 50829cc:	10002026 	beq	r2,zero,5082a50 <strlen+0x88>
 50829d0:	20800007 	ldb	r2,0(r4)
 50829d4:	10002026 	beq	r2,zero,5082a58 <strlen+0x90>
 50829d8:	2005883a 	mov	r2,r4
 50829dc:	00000206 	br	50829e8 <strlen+0x20>
 50829e0:	10c00007 	ldb	r3,0(r2)
 50829e4:	18001826 	beq	r3,zero,5082a48 <strlen+0x80>
 50829e8:	10800044 	addi	r2,r2,1
 50829ec:	10c000cc 	andi	r3,r2,3
 50829f0:	183ffb1e 	bne	r3,zero,50829e0 <__alt_data_end+0xfffb47e0>
 50829f4:	10c00017 	ldw	r3,0(r2)
 50829f8:	01ffbff4 	movhi	r7,65279
 50829fc:	39ffbfc4 	addi	r7,r7,-257
 5082a00:	00ca303a 	nor	r5,zero,r3
 5082a04:	01a02074 	movhi	r6,32897
 5082a08:	19c7883a 	add	r3,r3,r7
 5082a0c:	31a02004 	addi	r6,r6,-32640
 5082a10:	1946703a 	and	r3,r3,r5
 5082a14:	1986703a 	and	r3,r3,r6
 5082a18:	1800091e 	bne	r3,zero,5082a40 <strlen+0x78>
 5082a1c:	10800104 	addi	r2,r2,4
 5082a20:	10c00017 	ldw	r3,0(r2)
 5082a24:	19cb883a 	add	r5,r3,r7
 5082a28:	00c6303a 	nor	r3,zero,r3
 5082a2c:	28c6703a 	and	r3,r5,r3
 5082a30:	1986703a 	and	r3,r3,r6
 5082a34:	183ff926 	beq	r3,zero,5082a1c <__alt_data_end+0xfffb481c>
 5082a38:	00000106 	br	5082a40 <strlen+0x78>
 5082a3c:	10800044 	addi	r2,r2,1
 5082a40:	10c00007 	ldb	r3,0(r2)
 5082a44:	183ffd1e 	bne	r3,zero,5082a3c <__alt_data_end+0xfffb483c>
 5082a48:	1105c83a 	sub	r2,r2,r4
 5082a4c:	f800283a 	ret
 5082a50:	2005883a 	mov	r2,r4
 5082a54:	003fe706 	br	50829f4 <__alt_data_end+0xfffb47f4>
 5082a58:	0005883a 	mov	r2,zero
 5082a5c:	f800283a 	ret

05082a60 <___svfprintf_internal_r>:
 5082a60:	deffb504 	addi	sp,sp,-300
 5082a64:	dfc04a15 	stw	ra,296(sp)
 5082a68:	ddc04815 	stw	r23,288(sp)
 5082a6c:	d9002f15 	stw	r4,188(sp)
 5082a70:	282f883a 	mov	r23,r5
 5082a74:	d9802915 	stw	r6,164(sp)
 5082a78:	d9c02d15 	stw	r7,180(sp)
 5082a7c:	df004915 	stw	fp,292(sp)
 5082a80:	dd804715 	stw	r22,284(sp)
 5082a84:	dd404615 	stw	r21,280(sp)
 5082a88:	dd004515 	stw	r20,276(sp)
 5082a8c:	dcc04415 	stw	r19,272(sp)
 5082a90:	dc804315 	stw	r18,268(sp)
 5082a94:	dc404215 	stw	r17,264(sp)
 5082a98:	dc004115 	stw	r16,260(sp)
 5082a9c:	50896640 	call	5089664 <_localeconv_r>
 5082aa0:	10800017 	ldw	r2,0(r2)
 5082aa4:	1009883a 	mov	r4,r2
 5082aa8:	d8803515 	stw	r2,212(sp)
 5082aac:	50829c80 	call	50829c8 <strlen>
 5082ab0:	d8803915 	stw	r2,228(sp)
 5082ab4:	b880030b 	ldhu	r2,12(r23)
 5082ab8:	1080200c 	andi	r2,r2,128
 5082abc:	10000226 	beq	r2,zero,5082ac8 <___svfprintf_internal_r+0x68>
 5082ac0:	b8800417 	ldw	r2,16(r23)
 5082ac4:	10065d26 	beq	r2,zero,508443c <___svfprintf_internal_r+0x19dc>
 5082ac8:	db001dc4 	addi	r12,sp,119
 5082acc:	dd801e04 	addi	r22,sp,120
 5082ad0:	d8800404 	addi	r2,sp,16
 5082ad4:	05014274 	movhi	r20,1289
 5082ad8:	b317c83a 	sub	r11,r22,r12
 5082adc:	a514e984 	addi	r20,r20,21414
 5082ae0:	db002815 	stw	r12,160(sp)
 5082ae4:	d8801e15 	stw	r2,120(sp)
 5082ae8:	d8002015 	stw	zero,128(sp)
 5082aec:	d8001f15 	stw	zero,124(sp)
 5082af0:	d8003315 	stw	zero,204(sp)
 5082af4:	d8003715 	stw	zero,220(sp)
 5082af8:	d8003815 	stw	zero,224(sp)
 5082afc:	d8003b15 	stw	zero,236(sp)
 5082b00:	d8003a15 	stw	zero,232(sp)
 5082b04:	d8003015 	stw	zero,192(sp)
 5082b08:	1011883a 	mov	r8,r2
 5082b0c:	dac03d15 	stw	r11,244(sp)
 5082b10:	db002917 	ldw	r12,164(sp)
 5082b14:	60800007 	ldb	r2,0(r12)
 5082b18:	1000ab26 	beq	r2,zero,5082dc8 <___svfprintf_internal_r+0x368>
 5082b1c:	00c00944 	movi	r3,37
 5082b20:	10c0a926 	beq	r2,r3,5082dc8 <___svfprintf_internal_r+0x368>
 5082b24:	6021883a 	mov	r16,r12
 5082b28:	00000106 	br	5082b30 <___svfprintf_internal_r+0xd0>
 5082b2c:	10c08426 	beq	r2,r3,5082d40 <___svfprintf_internal_r+0x2e0>
 5082b30:	84000044 	addi	r16,r16,1
 5082b34:	80800007 	ldb	r2,0(r16)
 5082b38:	103ffc1e 	bne	r2,zero,5082b2c <__alt_data_end+0xfffb492c>
 5082b3c:	dac02917 	ldw	r11,164(sp)
 5082b40:	82e3c83a 	sub	r17,r16,r11
 5082b44:	88000f26 	beq	r17,zero,5082b84 <___svfprintf_internal_r+0x124>
 5082b48:	d8c02017 	ldw	r3,128(sp)
 5082b4c:	d8801f17 	ldw	r2,124(sp)
 5082b50:	dac02917 	ldw	r11,164(sp)
 5082b54:	1c47883a 	add	r3,r3,r17
 5082b58:	10800044 	addi	r2,r2,1
 5082b5c:	d8c02015 	stw	r3,128(sp)
 5082b60:	42c00015 	stw	r11,0(r8)
 5082b64:	44400115 	stw	r17,4(r8)
 5082b68:	d8801f15 	stw	r2,124(sp)
 5082b6c:	00c001c4 	movi	r3,7
 5082b70:	18807616 	blt	r3,r2,5082d4c <___svfprintf_internal_r+0x2ec>
 5082b74:	42000204 	addi	r8,r8,8
 5082b78:	db003017 	ldw	r12,192(sp)
 5082b7c:	6459883a 	add	r12,r12,r17
 5082b80:	db003015 	stw	r12,192(sp)
 5082b84:	80800007 	ldb	r2,0(r16)
 5082b88:	10007726 	beq	r2,zero,5082d68 <___svfprintf_internal_r+0x308>
 5082b8c:	80800044 	addi	r2,r16,1
 5082b90:	84000047 	ldb	r16,1(r16)
 5082b94:	d8002785 	stb	zero,158(sp)
 5082b98:	000d883a 	mov	r6,zero
 5082b9c:	027fffc4 	movi	r9,-1
 5082ba0:	d8002e15 	stw	zero,184(sp)
 5082ba4:	0023883a 	mov	r17,zero
 5082ba8:	01001604 	movi	r4,88
 5082bac:	01400244 	movi	r5,9
 5082bb0:	02800a84 	movi	r10,42
 5082bb4:	01c01b04 	movi	r7,108
 5082bb8:	10c00044 	addi	r3,r2,1
 5082bbc:	80bff804 	addi	r2,r16,-32
 5082bc0:	2082e436 	bltu	r4,r2,5083754 <___svfprintf_internal_r+0xcf4>
 5082bc4:	100490ba 	slli	r2,r2,2
 5082bc8:	02c14234 	movhi	r11,1288
 5082bcc:	5acaf704 	addi	r11,r11,11228
 5082bd0:	12c5883a 	add	r2,r2,r11
 5082bd4:	10800017 	ldw	r2,0(r2)
 5082bd8:	1000683a 	jmp	r2
 5082bdc:	0508350c 	andi	r20,zero,8404
 5082be0:	05083754 	movui	r20,8413
 5082be4:	05083754 	movui	r20,8413
 5082be8:	0508368c 	andi	r20,zero,8410
 5082bec:	05083754 	movui	r20,8413
 5082bf0:	05083754 	movui	r20,8413
 5082bf4:	05083754 	movui	r20,8413
 5082bf8:	05083754 	movui	r20,8413
 5082bfc:	05083754 	movui	r20,8413
 5082c00:	05083754 	movui	r20,8413
 5082c04:	05083650 	cmplti	r20,zero,8409
 5082c08:	0508367c 	xorhi	r20,zero,8409
 5082c0c:	05083754 	movui	r20,8413
 5082c10:	05082dd0 	cmplti	r20,zero,8375
 5082c14:	05082de0 	cmpeqi	r20,zero,8375
 5082c18:	05083754 	movui	r20,8413
 5082c1c:	05082e20 	cmpeqi	r20,zero,8376
 5082c20:	05082e30 	cmpltui	r20,zero,8376
 5082c24:	05082e30 	cmpltui	r20,zero,8376
 5082c28:	05082e30 	cmpltui	r20,zero,8376
 5082c2c:	05082e30 	cmpltui	r20,zero,8376
 5082c30:	05082e30 	cmpltui	r20,zero,8376
 5082c34:	05082e30 	cmpltui	r20,zero,8376
 5082c38:	05082e30 	cmpltui	r20,zero,8376
 5082c3c:	05082e30 	cmpltui	r20,zero,8376
 5082c40:	05082e30 	cmpltui	r20,zero,8376
 5082c44:	05083754 	movui	r20,8413
 5082c48:	05083754 	movui	r20,8413
 5082c4c:	05083754 	movui	r20,8413
 5082c50:	05083754 	movui	r20,8413
 5082c54:	05083754 	movui	r20,8413
 5082c58:	05083754 	movui	r20,8413
 5082c5c:	05083754 	movui	r20,8413
 5082c60:	05083754 	movui	r20,8413
 5082c64:	05083754 	movui	r20,8413
 5082c68:	05083754 	movui	r20,8413
 5082c6c:	05082e64 	muli	r20,zero,8377
 5082c70:	05083350 	cmplti	r20,zero,8397
 5082c74:	05083754 	movui	r20,8413
 5082c78:	05083350 	cmplti	r20,zero,8397
 5082c7c:	05083754 	movui	r20,8413
 5082c80:	05083754 	movui	r20,8413
 5082c84:	05083754 	movui	r20,8413
 5082c88:	05083754 	movui	r20,8413
 5082c8c:	0508343c 	xorhi	r20,zero,8400
 5082c90:	05083754 	movui	r20,8413
 5082c94:	05083754 	movui	r20,8413
 5082c98:	050832e4 	muli	r20,zero,8395
 5082c9c:	05083754 	movui	r20,8413
 5082ca0:	05083754 	movui	r20,8413
 5082ca4:	05083754 	movui	r20,8413
 5082ca8:	05083754 	movui	r20,8413
 5082cac:	05083754 	movui	r20,8413
 5082cb0:	05083320 	cmpeqi	r20,zero,8396
 5082cb4:	05083754 	movui	r20,8413
 5082cb8:	05083754 	movui	r20,8413
 5082cbc:	0508352c 	andhi	r20,zero,8404
 5082cc0:	05083754 	movui	r20,8413
 5082cc4:	05083754 	movui	r20,8413
 5082cc8:	05083754 	movui	r20,8413
 5082ccc:	05083754 	movui	r20,8413
 5082cd0:	05083754 	movui	r20,8413
 5082cd4:	05083754 	movui	r20,8413
 5082cd8:	05083754 	movui	r20,8413
 5082cdc:	05083754 	movui	r20,8413
 5082ce0:	05083754 	movui	r20,8413
 5082ce4:	05083754 	movui	r20,8413
 5082ce8:	05083610 	cmplti	r20,zero,8408
 5082cec:	0508344c 	andi	r20,zero,8401
 5082cf0:	05083350 	cmplti	r20,zero,8397
 5082cf4:	05083350 	cmplti	r20,zero,8397
 5082cf8:	05083350 	cmplti	r20,zero,8397
 5082cfc:	050834b4 	movhi	r20,8402
 5082d00:	0508344c 	andi	r20,zero,8401
 5082d04:	05083754 	movui	r20,8413
 5082d08:	05083754 	movui	r20,8413
 5082d0c:	050834c4 	movi	r20,8403
 5082d10:	05083754 	movui	r20,8413
 5082d14:	050834d8 	cmpnei	r20,zero,8403
 5082d18:	05083718 	cmpnei	r20,zero,8412
 5082d1c:	050833f4 	movhi	r20,8399
 5082d20:	05083600 	call	508360 <__alt_mem_sdram+0x508360>
 5082d24:	05083754 	movui	r20,8413
 5082d28:	05083588 	cmpgei	r20,zero,8406
 5082d2c:	05083754 	movui	r20,8413
 5082d30:	050836dc 	xori	r20,zero,8411
 5082d34:	05083754 	movui	r20,8413
 5082d38:	05083754 	movui	r20,8413
 5082d3c:	0508369c 	xori	r20,zero,8410
 5082d40:	db002917 	ldw	r12,164(sp)
 5082d44:	8323c83a 	sub	r17,r16,r12
 5082d48:	003f7e06 	br	5082b44 <__alt_data_end+0xfffb4944>
 5082d4c:	d9002f17 	ldw	r4,188(sp)
 5082d50:	b80b883a 	mov	r5,r23
 5082d54:	b00d883a 	mov	r6,r22
 5082d58:	508bc6c0 	call	508bc6c <__ssprint_r>
 5082d5c:	1000081e 	bne	r2,zero,5082d80 <___svfprintf_internal_r+0x320>
 5082d60:	da000404 	addi	r8,sp,16
 5082d64:	003f8406 	br	5082b78 <__alt_data_end+0xfffb4978>
 5082d68:	d8802017 	ldw	r2,128(sp)
 5082d6c:	10000426 	beq	r2,zero,5082d80 <___svfprintf_internal_r+0x320>
 5082d70:	d9002f17 	ldw	r4,188(sp)
 5082d74:	b80b883a 	mov	r5,r23
 5082d78:	d9801e04 	addi	r6,sp,120
 5082d7c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5082d80:	b880030b 	ldhu	r2,12(r23)
 5082d84:	1080100c 	andi	r2,r2,64
 5082d88:	10000d1e 	bne	r2,zero,5082dc0 <___svfprintf_internal_r+0x360>
 5082d8c:	d8803017 	ldw	r2,192(sp)
 5082d90:	dfc04a17 	ldw	ra,296(sp)
 5082d94:	df004917 	ldw	fp,292(sp)
 5082d98:	ddc04817 	ldw	r23,288(sp)
 5082d9c:	dd804717 	ldw	r22,284(sp)
 5082da0:	dd404617 	ldw	r21,280(sp)
 5082da4:	dd004517 	ldw	r20,276(sp)
 5082da8:	dcc04417 	ldw	r19,272(sp)
 5082dac:	dc804317 	ldw	r18,268(sp)
 5082db0:	dc404217 	ldw	r17,264(sp)
 5082db4:	dc004117 	ldw	r16,260(sp)
 5082db8:	dec04b04 	addi	sp,sp,300
 5082dbc:	f800283a 	ret
 5082dc0:	00bfffc4 	movi	r2,-1
 5082dc4:	003ff206 	br	5082d90 <__alt_data_end+0xfffb4b90>
 5082dc8:	dc002917 	ldw	r16,164(sp)
 5082dcc:	003f6d06 	br	5082b84 <__alt_data_end+0xfffb4984>
 5082dd0:	1805883a 	mov	r2,r3
 5082dd4:	8c400114 	ori	r17,r17,4
 5082dd8:	1c000007 	ldb	r16,0(r3)
 5082ddc:	003f7606 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 5082de0:	1c000007 	ldb	r16,0(r3)
 5082de4:	18800044 	addi	r2,r3,1
 5082de8:	8286e726 	beq	r16,r10,5084988 <___svfprintf_internal_r+0x1f28>
 5082dec:	82fff404 	addi	r11,r16,-48
 5082df0:	1007883a 	mov	r3,r2
 5082df4:	0013883a 	mov	r9,zero
 5082df8:	2aff7036 	bltu	r5,r11,5082bbc <__alt_data_end+0xfffb49bc>
 5082dfc:	1c000007 	ldb	r16,0(r3)
 5082e00:	4a4002a4 	muli	r9,r9,10
 5082e04:	18c00044 	addi	r3,r3,1
 5082e08:	5a53883a 	add	r9,r11,r9
 5082e0c:	82fff404 	addi	r11,r16,-48
 5082e10:	2afffa2e 	bgeu	r5,r11,5082dfc <__alt_data_end+0xfffb4bfc>
 5082e14:	483f690e 	bge	r9,zero,5082bbc <__alt_data_end+0xfffb49bc>
 5082e18:	027fffc4 	movi	r9,-1
 5082e1c:	003f6706 	br	5082bbc <__alt_data_end+0xfffb49bc>
 5082e20:	8c402014 	ori	r17,r17,128
 5082e24:	1805883a 	mov	r2,r3
 5082e28:	1c000007 	ldb	r16,0(r3)
 5082e2c:	003f6206 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 5082e30:	1805883a 	mov	r2,r3
 5082e34:	d8002e15 	stw	zero,184(sp)
 5082e38:	82fff404 	addi	r11,r16,-48
 5082e3c:	0019883a 	mov	r12,zero
 5082e40:	14000007 	ldb	r16,0(r2)
 5082e44:	630002a4 	muli	r12,r12,10
 5082e48:	18c00044 	addi	r3,r3,1
 5082e4c:	1805883a 	mov	r2,r3
 5082e50:	62d9883a 	add	r12,r12,r11
 5082e54:	82fff404 	addi	r11,r16,-48
 5082e58:	2afff92e 	bgeu	r5,r11,5082e40 <__alt_data_end+0xfffb4c40>
 5082e5c:	db002e15 	stw	r12,184(sp)
 5082e60:	003f5606 	br	5082bbc <__alt_data_end+0xfffb49bc>
 5082e64:	8c400414 	ori	r17,r17,16
 5082e68:	d8c02915 	stw	r3,164(sp)
 5082e6c:	d9802785 	stb	r6,158(sp)
 5082e70:	8880080c 	andi	r2,r17,32
 5082e74:	d8c02d17 	ldw	r3,180(sp)
 5082e78:	10017926 	beq	r2,zero,5083460 <___svfprintf_internal_r+0xa00>
 5082e7c:	db002d17 	ldw	r12,180(sp)
 5082e80:	18800117 	ldw	r2,4(r3)
 5082e84:	1cc00017 	ldw	r19,0(r3)
 5082e88:	63000204 	addi	r12,r12,8
 5082e8c:	db002d15 	stw	r12,180(sp)
 5082e90:	1039883a 	mov	fp,r2
 5082e94:	10017d16 	blt	r2,zero,508348c <___svfprintf_internal_r+0xa2c>
 5082e98:	dd402783 	ldbu	r21,158(sp)
 5082e9c:	da403215 	stw	r9,200(sp)
 5082ea0:	00800044 	movi	r2,1
 5082ea4:	9f06b03a 	or	r3,r19,fp
 5082ea8:	48000216 	blt	r9,zero,5082eb4 <___svfprintf_internal_r+0x454>
 5082eac:	013fdfc4 	movi	r4,-129
 5082eb0:	8922703a 	and	r17,r17,r4
 5082eb4:	1802371e 	bne	r3,zero,5083794 <___svfprintf_internal_r+0xd34>
 5082eb8:	48034526 	beq	r9,zero,5083bd0 <___svfprintf_internal_r+0x1170>
 5082ebc:	10803fcc 	andi	r2,r2,255
 5082ec0:	00c00044 	movi	r3,1
 5082ec4:	10c25826 	beq	r2,r3,5083828 <___svfprintf_internal_r+0xdc8>
 5082ec8:	00c00084 	movi	r3,2
 5082ecc:	10c2db26 	beq	r2,r3,5083a3c <___svfprintf_internal_r+0xfdc>
 5082ed0:	b007883a 	mov	r3,r22
 5082ed4:	9808d0fa 	srli	r4,r19,3
 5082ed8:	e00a977a 	slli	r5,fp,29
 5082edc:	e038d0fa 	srli	fp,fp,3
 5082ee0:	9cc001cc 	andi	r19,r19,7
 5082ee4:	98800c04 	addi	r2,r19,48
 5082ee8:	18ffffc4 	addi	r3,r3,-1
 5082eec:	2926b03a 	or	r19,r5,r4
 5082ef0:	18800005 	stb	r2,0(r3)
 5082ef4:	9f08b03a 	or	r4,r19,fp
 5082ef8:	203ff61e 	bne	r4,zero,5082ed4 <__alt_data_end+0xfffb4cd4>
 5082efc:	8900004c 	andi	r4,r17,1
 5082f00:	d8c03115 	stw	r3,196(sp)
 5082f04:	2002db26 	beq	r4,zero,5083a74 <___svfprintf_internal_r+0x1014>
 5082f08:	10803fcc 	andi	r2,r2,255
 5082f0c:	1080201c 	xori	r2,r2,128
 5082f10:	10bfe004 	addi	r2,r2,-128
 5082f14:	01000c04 	movi	r4,48
 5082f18:	11056626 	beq	r2,r4,50844b4 <___svfprintf_internal_r+0x1a54>
 5082f1c:	dac03117 	ldw	r11,196(sp)
 5082f20:	193fffc5 	stb	r4,-1(r3)
 5082f24:	5affffc4 	addi	r11,r11,-1
 5082f28:	dac03115 	stw	r11,196(sp)
 5082f2c:	b2e5c83a 	sub	r18,r22,r11
 5082f30:	9005883a 	mov	r2,r18
 5082f34:	9240010e 	bge	r18,r9,5082f3c <___svfprintf_internal_r+0x4dc>
 5082f38:	4805883a 	mov	r2,r9
 5082f3c:	d8802a15 	stw	r2,168(sp)
 5082f40:	d8003415 	stw	zero,208(sp)
 5082f44:	a8803fcc 	andi	r2,r21,255
 5082f48:	1080201c 	xori	r2,r2,128
 5082f4c:	10bfe004 	addi	r2,r2,-128
 5082f50:	10000326 	beq	r2,zero,5082f60 <___svfprintf_internal_r+0x500>
 5082f54:	d8c02a17 	ldw	r3,168(sp)
 5082f58:	18c00044 	addi	r3,r3,1
 5082f5c:	d8c02a15 	stw	r3,168(sp)
 5082f60:	8ac0008c 	andi	r11,r17,2
 5082f64:	dac02b15 	stw	r11,172(sp)
 5082f68:	58000326 	beq	r11,zero,5082f78 <___svfprintf_internal_r+0x518>
 5082f6c:	db002a17 	ldw	r12,168(sp)
 5082f70:	63000084 	addi	r12,r12,2
 5082f74:	db002a15 	stw	r12,168(sp)
 5082f78:	88c0210c 	andi	r3,r17,132
 5082f7c:	d8c02c15 	stw	r3,176(sp)
 5082f80:	1802021e 	bne	r3,zero,508378c <___svfprintf_internal_r+0xd2c>
 5082f84:	dac02e17 	ldw	r11,184(sp)
 5082f88:	db002a17 	ldw	r12,168(sp)
 5082f8c:	5b39c83a 	sub	fp,r11,r12
 5082f90:	0701fe0e 	bge	zero,fp,508378c <___svfprintf_internal_r+0xd2c>
 5082f94:	02400404 	movi	r9,16
 5082f98:	d8c02017 	ldw	r3,128(sp)
 5082f9c:	d8801f17 	ldw	r2,124(sp)
 5082fa0:	4f057d0e 	bge	r9,fp,5084598 <___svfprintf_internal_r+0x1b38>
 5082fa4:	01414274 	movhi	r5,1289
 5082fa8:	e009883a 	mov	r4,fp
 5082fac:	2954ed84 	addi	r5,r5,21430
 5082fb0:	dc003c15 	stw	r16,240(sp)
 5082fb4:	9039883a 	mov	fp,r18
 5082fb8:	d9403615 	stw	r5,216(sp)
 5082fbc:	8825883a 	mov	r18,r17
 5082fc0:	482b883a 	mov	r21,r9
 5082fc4:	04c001c4 	movi	r19,7
 5082fc8:	dc002f17 	ldw	r16,188(sp)
 5082fcc:	2023883a 	mov	r17,r4
 5082fd0:	00000306 	br	5082fe0 <___svfprintf_internal_r+0x580>
 5082fd4:	8c7ffc04 	addi	r17,r17,-16
 5082fd8:	42000204 	addi	r8,r8,8
 5082fdc:	ac40130e 	bge	r21,r17,508302c <___svfprintf_internal_r+0x5cc>
 5082fe0:	02c14274 	movhi	r11,1289
 5082fe4:	18c00404 	addi	r3,r3,16
 5082fe8:	10800044 	addi	r2,r2,1
 5082fec:	5ad4ed84 	addi	r11,r11,21430
 5082ff0:	42c00015 	stw	r11,0(r8)
 5082ff4:	45400115 	stw	r21,4(r8)
 5082ff8:	d8c02015 	stw	r3,128(sp)
 5082ffc:	d8801f15 	stw	r2,124(sp)
 5083000:	98bff40e 	bge	r19,r2,5082fd4 <__alt_data_end+0xfffb4dd4>
 5083004:	8009883a 	mov	r4,r16
 5083008:	b80b883a 	mov	r5,r23
 508300c:	b00d883a 	mov	r6,r22
 5083010:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083014:	103f5a1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083018:	8c7ffc04 	addi	r17,r17,-16
 508301c:	d8c02017 	ldw	r3,128(sp)
 5083020:	d8801f17 	ldw	r2,124(sp)
 5083024:	da000404 	addi	r8,sp,16
 5083028:	ac7fed16 	blt	r21,r17,5082fe0 <__alt_data_end+0xfffb4de0>
 508302c:	dc003c17 	ldw	r16,240(sp)
 5083030:	8809883a 	mov	r4,r17
 5083034:	9023883a 	mov	r17,r18
 5083038:	e025883a 	mov	r18,fp
 508303c:	2039883a 	mov	fp,r4
 5083040:	db003617 	ldw	r12,216(sp)
 5083044:	e0c7883a 	add	r3,fp,r3
 5083048:	10800044 	addi	r2,r2,1
 508304c:	43000015 	stw	r12,0(r8)
 5083050:	47000115 	stw	fp,4(r8)
 5083054:	d8c02015 	stw	r3,128(sp)
 5083058:	d8801f15 	stw	r2,124(sp)
 508305c:	010001c4 	movi	r4,7
 5083060:	20833516 	blt	r4,r2,5083d38 <___svfprintf_internal_r+0x12d8>
 5083064:	d8802787 	ldb	r2,158(sp)
 5083068:	42000204 	addi	r8,r8,8
 508306c:	10000c26 	beq	r2,zero,50830a0 <___svfprintf_internal_r+0x640>
 5083070:	d8801f17 	ldw	r2,124(sp)
 5083074:	d9002784 	addi	r4,sp,158
 5083078:	18c00044 	addi	r3,r3,1
 508307c:	10800044 	addi	r2,r2,1
 5083080:	41000015 	stw	r4,0(r8)
 5083084:	01000044 	movi	r4,1
 5083088:	41000115 	stw	r4,4(r8)
 508308c:	d8c02015 	stw	r3,128(sp)
 5083090:	d8801f15 	stw	r2,124(sp)
 5083094:	010001c4 	movi	r4,7
 5083098:	2082df16 	blt	r4,r2,5083c18 <___svfprintf_internal_r+0x11b8>
 508309c:	42000204 	addi	r8,r8,8
 50830a0:	dac02b17 	ldw	r11,172(sp)
 50830a4:	58000c26 	beq	r11,zero,50830d8 <___svfprintf_internal_r+0x678>
 50830a8:	d8801f17 	ldw	r2,124(sp)
 50830ac:	d9002704 	addi	r4,sp,156
 50830b0:	18c00084 	addi	r3,r3,2
 50830b4:	10800044 	addi	r2,r2,1
 50830b8:	41000015 	stw	r4,0(r8)
 50830bc:	01000084 	movi	r4,2
 50830c0:	41000115 	stw	r4,4(r8)
 50830c4:	d8c02015 	stw	r3,128(sp)
 50830c8:	d8801f15 	stw	r2,124(sp)
 50830cc:	010001c4 	movi	r4,7
 50830d0:	2082d916 	blt	r4,r2,5083c38 <___svfprintf_internal_r+0x11d8>
 50830d4:	42000204 	addi	r8,r8,8
 50830d8:	db002c17 	ldw	r12,176(sp)
 50830dc:	00802004 	movi	r2,128
 50830e0:	60822026 	beq	r12,r2,5083964 <___svfprintf_internal_r+0xf04>
 50830e4:	db003217 	ldw	r12,200(sp)
 50830e8:	64abc83a 	sub	r21,r12,r18
 50830ec:	0540310e 	bge	zero,r21,50831b4 <___svfprintf_internal_r+0x754>
 50830f0:	07000404 	movi	fp,16
 50830f4:	d8801f17 	ldw	r2,124(sp)
 50830f8:	e544180e 	bge	fp,r21,508415c <___svfprintf_internal_r+0x16fc>
 50830fc:	01414274 	movhi	r5,1289
 5083100:	a809883a 	mov	r4,r21
 5083104:	2954e984 	addi	r5,r5,21414
 5083108:	dc002c15 	stw	r16,176(sp)
 508310c:	902b883a 	mov	r21,r18
 5083110:	d9402b15 	stw	r5,172(sp)
 5083114:	8825883a 	mov	r18,r17
 5083118:	04c001c4 	movi	r19,7
 508311c:	dc002f17 	ldw	r16,188(sp)
 5083120:	2023883a 	mov	r17,r4
 5083124:	00000306 	br	5083134 <___svfprintf_internal_r+0x6d4>
 5083128:	8c7ffc04 	addi	r17,r17,-16
 508312c:	42000204 	addi	r8,r8,8
 5083130:	e440110e 	bge	fp,r17,5083178 <___svfprintf_internal_r+0x718>
 5083134:	18c00404 	addi	r3,r3,16
 5083138:	10800044 	addi	r2,r2,1
 508313c:	45000015 	stw	r20,0(r8)
 5083140:	47000115 	stw	fp,4(r8)
 5083144:	d8c02015 	stw	r3,128(sp)
 5083148:	d8801f15 	stw	r2,124(sp)
 508314c:	98bff60e 	bge	r19,r2,5083128 <__alt_data_end+0xfffb4f28>
 5083150:	8009883a 	mov	r4,r16
 5083154:	b80b883a 	mov	r5,r23
 5083158:	b00d883a 	mov	r6,r22
 508315c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083160:	103f071e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083164:	8c7ffc04 	addi	r17,r17,-16
 5083168:	d8c02017 	ldw	r3,128(sp)
 508316c:	d8801f17 	ldw	r2,124(sp)
 5083170:	da000404 	addi	r8,sp,16
 5083174:	e47fef16 	blt	fp,r17,5083134 <__alt_data_end+0xfffb4f34>
 5083178:	dc002c17 	ldw	r16,176(sp)
 508317c:	8809883a 	mov	r4,r17
 5083180:	9023883a 	mov	r17,r18
 5083184:	a825883a 	mov	r18,r21
 5083188:	202b883a 	mov	r21,r4
 508318c:	dac02b17 	ldw	r11,172(sp)
 5083190:	1d47883a 	add	r3,r3,r21
 5083194:	10800044 	addi	r2,r2,1
 5083198:	42c00015 	stw	r11,0(r8)
 508319c:	45400115 	stw	r21,4(r8)
 50831a0:	d8c02015 	stw	r3,128(sp)
 50831a4:	d8801f15 	stw	r2,124(sp)
 50831a8:	010001c4 	movi	r4,7
 50831ac:	20829216 	blt	r4,r2,5083bf8 <___svfprintf_internal_r+0x1198>
 50831b0:	42000204 	addi	r8,r8,8
 50831b4:	8880400c 	andi	r2,r17,256
 50831b8:	1001a11e 	bne	r2,zero,5083840 <___svfprintf_internal_r+0xde0>
 50831bc:	d8801f17 	ldw	r2,124(sp)
 50831c0:	db003117 	ldw	r12,196(sp)
 50831c4:	1c87883a 	add	r3,r3,r18
 50831c8:	10800044 	addi	r2,r2,1
 50831cc:	43000015 	stw	r12,0(r8)
 50831d0:	44800115 	stw	r18,4(r8)
 50831d4:	d8c02015 	stw	r3,128(sp)
 50831d8:	d8801f15 	stw	r2,124(sp)
 50831dc:	010001c4 	movi	r4,7
 50831e0:	20826d16 	blt	r4,r2,5083b98 <___svfprintf_internal_r+0x1138>
 50831e4:	42000204 	addi	r8,r8,8
 50831e8:	8c40010c 	andi	r17,r17,4
 50831ec:	88003226 	beq	r17,zero,50832b8 <___svfprintf_internal_r+0x858>
 50831f0:	db002e17 	ldw	r12,184(sp)
 50831f4:	dac02a17 	ldw	r11,168(sp)
 50831f8:	62e1c83a 	sub	r16,r12,r11
 50831fc:	04002e0e 	bge	zero,r16,50832b8 <___svfprintf_internal_r+0x858>
 5083200:	04400404 	movi	r17,16
 5083204:	d8801f17 	ldw	r2,124(sp)
 5083208:	8c05240e 	bge	r17,r16,508469c <___svfprintf_internal_r+0x1c3c>
 508320c:	01014274 	movhi	r4,1289
 5083210:	2114ed84 	addi	r4,r4,21430
 5083214:	d9003615 	stw	r4,216(sp)
 5083218:	048001c4 	movi	r18,7
 508321c:	dcc02f17 	ldw	r19,188(sp)
 5083220:	00000306 	br	5083230 <___svfprintf_internal_r+0x7d0>
 5083224:	843ffc04 	addi	r16,r16,-16
 5083228:	42000204 	addi	r8,r8,8
 508322c:	8c00130e 	bge	r17,r16,508327c <___svfprintf_internal_r+0x81c>
 5083230:	01414274 	movhi	r5,1289
 5083234:	18c00404 	addi	r3,r3,16
 5083238:	10800044 	addi	r2,r2,1
 508323c:	2954ed84 	addi	r5,r5,21430
 5083240:	41400015 	stw	r5,0(r8)
 5083244:	44400115 	stw	r17,4(r8)
 5083248:	d8c02015 	stw	r3,128(sp)
 508324c:	d8801f15 	stw	r2,124(sp)
 5083250:	90bff40e 	bge	r18,r2,5083224 <__alt_data_end+0xfffb5024>
 5083254:	9809883a 	mov	r4,r19
 5083258:	b80b883a 	mov	r5,r23
 508325c:	b00d883a 	mov	r6,r22
 5083260:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083264:	103ec61e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083268:	843ffc04 	addi	r16,r16,-16
 508326c:	d8c02017 	ldw	r3,128(sp)
 5083270:	d8801f17 	ldw	r2,124(sp)
 5083274:	da000404 	addi	r8,sp,16
 5083278:	8c3fed16 	blt	r17,r16,5083230 <__alt_data_end+0xfffb5030>
 508327c:	dac03617 	ldw	r11,216(sp)
 5083280:	1c07883a 	add	r3,r3,r16
 5083284:	10800044 	addi	r2,r2,1
 5083288:	42c00015 	stw	r11,0(r8)
 508328c:	44000115 	stw	r16,4(r8)
 5083290:	d8c02015 	stw	r3,128(sp)
 5083294:	d8801f15 	stw	r2,124(sp)
 5083298:	010001c4 	movi	r4,7
 508329c:	2080060e 	bge	r4,r2,50832b8 <___svfprintf_internal_r+0x858>
 50832a0:	d9002f17 	ldw	r4,188(sp)
 50832a4:	b80b883a 	mov	r5,r23
 50832a8:	b00d883a 	mov	r6,r22
 50832ac:	508bc6c0 	call	508bc6c <__ssprint_r>
 50832b0:	103eb31e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50832b4:	d8c02017 	ldw	r3,128(sp)
 50832b8:	d8802a17 	ldw	r2,168(sp)
 50832bc:	db002e17 	ldw	r12,184(sp)
 50832c0:	1300010e 	bge	r2,r12,50832c8 <___svfprintf_internal_r+0x868>
 50832c4:	6005883a 	mov	r2,r12
 50832c8:	dac03017 	ldw	r11,192(sp)
 50832cc:	5897883a 	add	r11,r11,r2
 50832d0:	dac03015 	stw	r11,192(sp)
 50832d4:	1802381e 	bne	r3,zero,5083bb8 <___svfprintf_internal_r+0x1158>
 50832d8:	d8001f15 	stw	zero,124(sp)
 50832dc:	da000404 	addi	r8,sp,16
 50832e0:	003e0b06 	br	5082b10 <__alt_data_end+0xfffb4910>
 50832e4:	8c400414 	ori	r17,r17,16
 50832e8:	d8c02915 	stw	r3,164(sp)
 50832ec:	8880080c 	andi	r2,r17,32
 50832f0:	10010c26 	beq	r2,zero,5083724 <___svfprintf_internal_r+0xcc4>
 50832f4:	db002d17 	ldw	r12,180(sp)
 50832f8:	0005883a 	mov	r2,zero
 50832fc:	64c00017 	ldw	r19,0(r12)
 5083300:	67000117 	ldw	fp,4(r12)
 5083304:	63000204 	addi	r12,r12,8
 5083308:	db002d15 	stw	r12,180(sp)
 508330c:	9f06b03a 	or	r3,r19,fp
 5083310:	d8002785 	stb	zero,158(sp)
 5083314:	da403215 	stw	r9,200(sp)
 5083318:	002b883a 	mov	r21,zero
 508331c:	003ee206 	br	5082ea8 <__alt_data_end+0xfffb4ca8>
 5083320:	8c400414 	ori	r17,r17,16
 5083324:	d8c02915 	stw	r3,164(sp)
 5083328:	8880080c 	andi	r2,r17,32
 508332c:	1000ee26 	beq	r2,zero,50836e8 <___svfprintf_internal_r+0xc88>
 5083330:	dac02d17 	ldw	r11,180(sp)
 5083334:	00800044 	movi	r2,1
 5083338:	5cc00017 	ldw	r19,0(r11)
 508333c:	5f000117 	ldw	fp,4(r11)
 5083340:	5ac00204 	addi	r11,r11,8
 5083344:	dac02d15 	stw	r11,180(sp)
 5083348:	9f06b03a 	or	r3,r19,fp
 508334c:	003ff006 	br	5083310 <__alt_data_end+0xfffb5110>
 5083350:	db002d17 	ldw	r12,180(sp)
 5083354:	dac02d17 	ldw	r11,180(sp)
 5083358:	d8c02915 	stw	r3,164(sp)
 508335c:	63000017 	ldw	r12,0(r12)
 5083360:	5ac00117 	ldw	r11,4(r11)
 5083364:	d9802785 	stb	r6,158(sp)
 5083368:	6009883a 	mov	r4,r12
 508336c:	580b883a 	mov	r5,r11
 5083370:	db003715 	stw	r12,220(sp)
 5083374:	da004015 	stw	r8,256(sp)
 5083378:	da403f15 	stw	r9,252(sp)
 508337c:	dac03815 	stw	r11,224(sp)
 5083380:	508b9c40 	call	508b9c4 <__fpclassifyd>
 5083384:	db002d17 	ldw	r12,180(sp)
 5083388:	04800044 	movi	r18,1
 508338c:	da004017 	ldw	r8,256(sp)
 5083390:	64c00204 	addi	r19,r12,8
 5083394:	da403f17 	ldw	r9,252(sp)
 5083398:	d9003717 	ldw	r4,220(sp)
 508339c:	d9403817 	ldw	r5,224(sp)
 50833a0:	14832c1e 	bne	r2,r18,5084054 <___svfprintf_internal_r+0x15f4>
 50833a4:	000d883a 	mov	r6,zero
 50833a8:	000f883a 	mov	r7,zero
 50833ac:	5090a840 	call	5090a84 <__ledf2>
 50833b0:	da004017 	ldw	r8,256(sp)
 50833b4:	1004c416 	blt	r2,zero,50846c8 <___svfprintf_internal_r+0x1c68>
 50833b8:	dd402783 	ldbu	r21,158(sp)
 50833bc:	008011c4 	movi	r2,71
 50833c0:	14041a0e 	bge	r2,r16,508442c <___svfprintf_internal_r+0x19cc>
 50833c4:	00c14274 	movhi	r3,1289
 50833c8:	18d4da04 	addi	r3,r3,21352
 50833cc:	d8c03115 	stw	r3,196(sp)
 50833d0:	02c000c4 	movi	r11,3
 50833d4:	00bfdfc4 	movi	r2,-129
 50833d8:	dac02a15 	stw	r11,168(sp)
 50833dc:	88a2703a 	and	r17,r17,r2
 50833e0:	dcc02d15 	stw	r19,180(sp)
 50833e4:	5825883a 	mov	r18,r11
 50833e8:	d8003215 	stw	zero,200(sp)
 50833ec:	d8003415 	stw	zero,208(sp)
 50833f0:	003ed406 	br	5082f44 <__alt_data_end+0xfffb4d44>
 50833f4:	db002d17 	ldw	r12,180(sp)
 50833f8:	00800c04 	movi	r2,48
 50833fc:	d8802705 	stb	r2,156(sp)
 5083400:	64c00017 	ldw	r19,0(r12)
 5083404:	00801e04 	movi	r2,120
 5083408:	d8802745 	stb	r2,157(sp)
 508340c:	00814274 	movhi	r2,1289
 5083410:	1094e204 	addi	r2,r2,21384
 5083414:	63000104 	addi	r12,r12,4
 5083418:	d8c02915 	stw	r3,164(sp)
 508341c:	d8803b15 	stw	r2,236(sp)
 5083420:	0039883a 	mov	fp,zero
 5083424:	8c400094 	ori	r17,r17,2
 5083428:	db002d15 	stw	r12,180(sp)
 508342c:	00800084 	movi	r2,2
 5083430:	04001e04 	movi	r16,120
 5083434:	9807883a 	mov	r3,r19
 5083438:	003fb506 	br	5083310 <__alt_data_end+0xfffb5110>
 508343c:	8c400214 	ori	r17,r17,8
 5083440:	1805883a 	mov	r2,r3
 5083444:	1c000007 	ldb	r16,0(r3)
 5083448:	003ddb06 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508344c:	d8c02915 	stw	r3,164(sp)
 5083450:	d9802785 	stb	r6,158(sp)
 5083454:	8880080c 	andi	r2,r17,32
 5083458:	d8c02d17 	ldw	r3,180(sp)
 508345c:	103e871e 	bne	r2,zero,5082e7c <__alt_data_end+0xfffb4c7c>
 5083460:	8880040c 	andi	r2,r17,16
 5083464:	10027a1e 	bne	r2,zero,5083e50 <___svfprintf_internal_r+0x13f0>
 5083468:	8880100c 	andi	r2,r17,64
 508346c:	10027826 	beq	r2,zero,5083e50 <___svfprintf_internal_r+0x13f0>
 5083470:	1cc0000f 	ldh	r19,0(r3)
 5083474:	db002d17 	ldw	r12,180(sp)
 5083478:	9839d7fa 	srai	fp,r19,31
 508347c:	63000104 	addi	r12,r12,4
 5083480:	db002d15 	stw	r12,180(sp)
 5083484:	e005883a 	mov	r2,fp
 5083488:	103e830e 	bge	r2,zero,5082e98 <__alt_data_end+0xfffb4c98>
 508348c:	04e7c83a 	sub	r19,zero,r19
 5083490:	9804c03a 	cmpne	r2,r19,zero
 5083494:	0739c83a 	sub	fp,zero,fp
 5083498:	e0b9c83a 	sub	fp,fp,r2
 508349c:	05400b44 	movi	r21,45
 50834a0:	dd402785 	stb	r21,158(sp)
 50834a4:	da403215 	stw	r9,200(sp)
 50834a8:	00800044 	movi	r2,1
 50834ac:	9f06b03a 	or	r3,r19,fp
 50834b0:	003e7d06 	br	5082ea8 <__alt_data_end+0xfffb4ca8>
 50834b4:	8c401014 	ori	r17,r17,64
 50834b8:	1805883a 	mov	r2,r3
 50834bc:	1c000007 	ldb	r16,0(r3)
 50834c0:	003dbd06 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 50834c4:	1c000007 	ldb	r16,0(r3)
 50834c8:	81c37126 	beq	r16,r7,5084290 <___svfprintf_internal_r+0x1830>
 50834cc:	8c400414 	ori	r17,r17,16
 50834d0:	1805883a 	mov	r2,r3
 50834d4:	003db806 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 50834d8:	d8c02915 	stw	r3,164(sp)
 50834dc:	d9802785 	stb	r6,158(sp)
 50834e0:	8880080c 	andi	r2,r17,32
 50834e4:	1002f026 	beq	r2,zero,50840a8 <___svfprintf_internal_r+0x1648>
 50834e8:	db002d17 	ldw	r12,180(sp)
 50834ec:	dac03017 	ldw	r11,192(sp)
 50834f0:	60800017 	ldw	r2,0(r12)
 50834f4:	5807d7fa 	srai	r3,r11,31
 50834f8:	63000104 	addi	r12,r12,4
 50834fc:	db002d15 	stw	r12,180(sp)
 5083500:	12c00015 	stw	r11,0(r2)
 5083504:	10c00115 	stw	r3,4(r2)
 5083508:	003d8106 	br	5082b10 <__alt_data_end+0xfffb4910>
 508350c:	30803fcc 	andi	r2,r6,255
 5083510:	1080201c 	xori	r2,r2,128
 5083514:	10bfe004 	addi	r2,r2,-128
 5083518:	1002fd1e 	bne	r2,zero,5084110 <___svfprintf_internal_r+0x16b0>
 508351c:	1805883a 	mov	r2,r3
 5083520:	01800804 	movi	r6,32
 5083524:	1c000007 	ldb	r16,0(r3)
 5083528:	003da306 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508352c:	03014274 	movhi	r12,1289
 5083530:	6314dd04 	addi	r12,r12,21364
 5083534:	d8c02915 	stw	r3,164(sp)
 5083538:	d9802785 	stb	r6,158(sp)
 508353c:	db003b15 	stw	r12,236(sp)
 5083540:	88c0080c 	andi	r3,r17,32
 5083544:	d8802d17 	ldw	r2,180(sp)
 5083548:	18005c26 	beq	r3,zero,50836bc <___svfprintf_internal_r+0xc5c>
 508354c:	dac02d17 	ldw	r11,180(sp)
 5083550:	14c00017 	ldw	r19,0(r2)
 5083554:	17000117 	ldw	fp,4(r2)
 5083558:	5ac00204 	addi	r11,r11,8
 508355c:	dac02d15 	stw	r11,180(sp)
 5083560:	8880004c 	andi	r2,r17,1
 5083564:	10022f26 	beq	r2,zero,5083e24 <___svfprintf_internal_r+0x13c4>
 5083568:	9f06b03a 	or	r3,r19,fp
 508356c:	1802eb26 	beq	r3,zero,508411c <___svfprintf_internal_r+0x16bc>
 5083570:	00800c04 	movi	r2,48
 5083574:	d8802705 	stb	r2,156(sp)
 5083578:	dc002745 	stb	r16,157(sp)
 508357c:	8c400094 	ori	r17,r17,2
 5083580:	00800084 	movi	r2,2
 5083584:	003f6206 	br	5083310 <__alt_data_end+0xfffb5110>
 5083588:	dac02d17 	ldw	r11,180(sp)
 508358c:	db002d17 	ldw	r12,180(sp)
 5083590:	d8c02915 	stw	r3,164(sp)
 5083594:	5ac00017 	ldw	r11,0(r11)
 5083598:	d8002785 	stb	zero,158(sp)
 508359c:	64c00104 	addi	r19,r12,4
 50835a0:	dac03115 	stw	r11,196(sp)
 50835a4:	58042e26 	beq	r11,zero,5084660 <___svfprintf_internal_r+0x1c00>
 50835a8:	d9003117 	ldw	r4,196(sp)
 50835ac:	4803c416 	blt	r9,zero,50844c0 <___svfprintf_internal_r+0x1a60>
 50835b0:	480d883a 	mov	r6,r9
 50835b4:	000b883a 	mov	r5,zero
 50835b8:	da004015 	stw	r8,256(sp)
 50835bc:	da403f15 	stw	r9,252(sp)
 50835c0:	5089ff80 	call	5089ff8 <memchr>
 50835c4:	da004017 	ldw	r8,256(sp)
 50835c8:	da403f17 	ldw	r9,252(sp)
 50835cc:	10048a26 	beq	r2,zero,50847f8 <___svfprintf_internal_r+0x1d98>
 50835d0:	d8c03117 	ldw	r3,196(sp)
 50835d4:	10e5c83a 	sub	r18,r2,r3
 50835d8:	4c80010e 	bge	r9,r18,50835e0 <___svfprintf_internal_r+0xb80>
 50835dc:	4825883a 	mov	r18,r9
 50835e0:	9005883a 	mov	r2,r18
 50835e4:	9003bb16 	blt	r18,zero,50844d4 <___svfprintf_internal_r+0x1a74>
 50835e8:	dd402783 	ldbu	r21,158(sp)
 50835ec:	d8802a15 	stw	r2,168(sp)
 50835f0:	dcc02d15 	stw	r19,180(sp)
 50835f4:	d8003215 	stw	zero,200(sp)
 50835f8:	d8003415 	stw	zero,208(sp)
 50835fc:	003e5106 	br	5082f44 <__alt_data_end+0xfffb4d44>
 5083600:	8c400814 	ori	r17,r17,32
 5083604:	1805883a 	mov	r2,r3
 5083608:	1c000007 	ldb	r16,0(r3)
 508360c:	003d6a06 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 5083610:	db002d17 	ldw	r12,180(sp)
 5083614:	d8c02915 	stw	r3,164(sp)
 5083618:	dac01404 	addi	r11,sp,80
 508361c:	60800017 	ldw	r2,0(r12)
 5083620:	00c00044 	movi	r3,1
 5083624:	63000104 	addi	r12,r12,4
 5083628:	d8801405 	stb	r2,80(sp)
 508362c:	d8c02a15 	stw	r3,168(sp)
 5083630:	d8002785 	stb	zero,158(sp)
 5083634:	db002d15 	stw	r12,180(sp)
 5083638:	1825883a 	mov	r18,r3
 508363c:	d8003215 	stw	zero,200(sp)
 5083640:	d8003415 	stw	zero,208(sp)
 5083644:	dac03115 	stw	r11,196(sp)
 5083648:	0005883a 	mov	r2,zero
 508364c:	003e4406 	br	5082f60 <__alt_data_end+0xfffb4d60>
 5083650:	dac02d17 	ldw	r11,180(sp)
 5083654:	db002d17 	ldw	r12,180(sp)
 5083658:	5ac00017 	ldw	r11,0(r11)
 508365c:	dac02e15 	stw	r11,184(sp)
 5083660:	62c00104 	addi	r11,r12,4
 5083664:	db002e17 	ldw	r12,184(sp)
 5083668:	60030316 	blt	r12,zero,5084278 <___svfprintf_internal_r+0x1818>
 508366c:	dac02d15 	stw	r11,180(sp)
 5083670:	1805883a 	mov	r2,r3
 5083674:	1c000007 	ldb	r16,0(r3)
 5083678:	003d4f06 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508367c:	1805883a 	mov	r2,r3
 5083680:	01800ac4 	movi	r6,43
 5083684:	1c000007 	ldb	r16,0(r3)
 5083688:	003d4b06 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508368c:	8c400054 	ori	r17,r17,1
 5083690:	1805883a 	mov	r2,r3
 5083694:	1c000007 	ldb	r16,0(r3)
 5083698:	003d4706 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508369c:	00814274 	movhi	r2,1289
 50836a0:	1094e204 	addi	r2,r2,21384
 50836a4:	d8c02915 	stw	r3,164(sp)
 50836a8:	d8803b15 	stw	r2,236(sp)
 50836ac:	d9802785 	stb	r6,158(sp)
 50836b0:	88c0080c 	andi	r3,r17,32
 50836b4:	d8802d17 	ldw	r2,180(sp)
 50836b8:	183fa41e 	bne	r3,zero,508354c <__alt_data_end+0xfffb534c>
 50836bc:	88c0040c 	andi	r3,r17,16
 50836c0:	18028b26 	beq	r3,zero,50840f0 <___svfprintf_internal_r+0x1690>
 50836c4:	db002d17 	ldw	r12,180(sp)
 50836c8:	14c00017 	ldw	r19,0(r2)
 50836cc:	0039883a 	mov	fp,zero
 50836d0:	63000104 	addi	r12,r12,4
 50836d4:	db002d15 	stw	r12,180(sp)
 50836d8:	003fa106 	br	5083560 <__alt_data_end+0xfffb5360>
 50836dc:	d8c02915 	stw	r3,164(sp)
 50836e0:	8880080c 	andi	r2,r17,32
 50836e4:	103f121e 	bne	r2,zero,5083330 <__alt_data_end+0xfffb5130>
 50836e8:	8880040c 	andi	r2,r17,16
 50836ec:	1001df1e 	bne	r2,zero,5083e6c <___svfprintf_internal_r+0x140c>
 50836f0:	8880100c 	andi	r2,r17,64
 50836f4:	1001dd26 	beq	r2,zero,5083e6c <___svfprintf_internal_r+0x140c>
 50836f8:	dac02d17 	ldw	r11,180(sp)
 50836fc:	0039883a 	mov	fp,zero
 5083700:	00800044 	movi	r2,1
 5083704:	5cc0000b 	ldhu	r19,0(r11)
 5083708:	5ac00104 	addi	r11,r11,4
 508370c:	dac02d15 	stw	r11,180(sp)
 5083710:	9807883a 	mov	r3,r19
 5083714:	003efe06 	br	5083310 <__alt_data_end+0xfffb5110>
 5083718:	d8c02915 	stw	r3,164(sp)
 508371c:	8880080c 	andi	r2,r17,32
 5083720:	103ef41e 	bne	r2,zero,50832f4 <__alt_data_end+0xfffb50f4>
 5083724:	8880040c 	andi	r2,r17,16
 5083728:	1001c11e 	bne	r2,zero,5083e30 <___svfprintf_internal_r+0x13d0>
 508372c:	8880100c 	andi	r2,r17,64
 5083730:	1001bf26 	beq	r2,zero,5083e30 <___svfprintf_internal_r+0x13d0>
 5083734:	db002d17 	ldw	r12,180(sp)
 5083738:	0039883a 	mov	fp,zero
 508373c:	0005883a 	mov	r2,zero
 5083740:	64c0000b 	ldhu	r19,0(r12)
 5083744:	63000104 	addi	r12,r12,4
 5083748:	db002d15 	stw	r12,180(sp)
 508374c:	9807883a 	mov	r3,r19
 5083750:	003eef06 	br	5083310 <__alt_data_end+0xfffb5110>
 5083754:	d8c02915 	stw	r3,164(sp)
 5083758:	d9802785 	stb	r6,158(sp)
 508375c:	803d8226 	beq	r16,zero,5082d68 <__alt_data_end+0xfffb4b68>
 5083760:	02c00044 	movi	r11,1
 5083764:	db001404 	addi	r12,sp,80
 5083768:	dac02a15 	stw	r11,168(sp)
 508376c:	dc001405 	stb	r16,80(sp)
 5083770:	d8002785 	stb	zero,158(sp)
 5083774:	5825883a 	mov	r18,r11
 5083778:	d8003215 	stw	zero,200(sp)
 508377c:	d8003415 	stw	zero,208(sp)
 5083780:	db003115 	stw	r12,196(sp)
 5083784:	0005883a 	mov	r2,zero
 5083788:	003df506 	br	5082f60 <__alt_data_end+0xfffb4d60>
 508378c:	d8c02017 	ldw	r3,128(sp)
 5083790:	003e3606 	br	508306c <__alt_data_end+0xfffb4e6c>
 5083794:	10803fcc 	andi	r2,r2,255
 5083798:	00c00044 	movi	r3,1
 508379c:	10fdca1e 	bne	r2,r3,5082ec8 <__alt_data_end+0xfffb4cc8>
 50837a0:	e000021e 	bne	fp,zero,50837ac <___svfprintf_internal_r+0xd4c>
 50837a4:	00800244 	movi	r2,9
 50837a8:	14c01f2e 	bgeu	r2,r19,5083828 <___svfprintf_internal_r+0xdc8>
 50837ac:	dc002a15 	stw	r16,168(sp)
 50837b0:	dc402b15 	stw	r17,172(sp)
 50837b4:	9821883a 	mov	r16,r19
 50837b8:	e023883a 	mov	r17,fp
 50837bc:	b025883a 	mov	r18,r22
 50837c0:	4027883a 	mov	r19,r8
 50837c4:	4839883a 	mov	fp,r9
 50837c8:	8009883a 	mov	r4,r16
 50837cc:	880b883a 	mov	r5,r17
 50837d0:	01800284 	movi	r6,10
 50837d4:	000f883a 	mov	r7,zero
 50837d8:	508f2280 	call	508f228 <__umoddi3>
 50837dc:	10800c04 	addi	r2,r2,48
 50837e0:	94bfffc4 	addi	r18,r18,-1
 50837e4:	8009883a 	mov	r4,r16
 50837e8:	880b883a 	mov	r5,r17
 50837ec:	01800284 	movi	r6,10
 50837f0:	000f883a 	mov	r7,zero
 50837f4:	90800005 	stb	r2,0(r18)
 50837f8:	508ec680 	call	508ec68 <__udivdi3>
 50837fc:	1021883a 	mov	r16,r2
 5083800:	10c4b03a 	or	r2,r2,r3
 5083804:	1823883a 	mov	r17,r3
 5083808:	103fef1e 	bne	r2,zero,50837c8 <__alt_data_end+0xfffb55c8>
 508380c:	dc803115 	stw	r18,196(sp)
 5083810:	dc002a17 	ldw	r16,168(sp)
 5083814:	9811883a 	mov	r8,r19
 5083818:	dc402b17 	ldw	r17,172(sp)
 508381c:	e013883a 	mov	r9,fp
 5083820:	b4a5c83a 	sub	r18,r22,r18
 5083824:	003dc206 	br	5082f30 <__alt_data_end+0xfffb4d30>
 5083828:	9cc00c04 	addi	r19,r19,48
 508382c:	db001dc4 	addi	r12,sp,119
 5083830:	dcc01dc5 	stb	r19,119(sp)
 5083834:	dc803d17 	ldw	r18,244(sp)
 5083838:	db003115 	stw	r12,196(sp)
 508383c:	003dbc06 	br	5082f30 <__alt_data_end+0xfffb4d30>
 5083840:	00801944 	movi	r2,101
 5083844:	14008d0e 	bge	r2,r16,5083a7c <___svfprintf_internal_r+0x101c>
 5083848:	d9003717 	ldw	r4,220(sp)
 508384c:	d9403817 	ldw	r5,224(sp)
 5083850:	000d883a 	mov	r6,zero
 5083854:	000f883a 	mov	r7,zero
 5083858:	d8c03e15 	stw	r3,248(sp)
 508385c:	da004015 	stw	r8,256(sp)
 5083860:	50909200 	call	5090920 <__eqdf2>
 5083864:	d8c03e17 	ldw	r3,248(sp)
 5083868:	da004017 	ldw	r8,256(sp)
 508386c:	1000fd1e 	bne	r2,zero,5083c64 <___svfprintf_internal_r+0x1204>
 5083870:	d8801f17 	ldw	r2,124(sp)
 5083874:	01014274 	movhi	r4,1289
 5083878:	2114e904 	addi	r4,r4,21412
 508387c:	18c00044 	addi	r3,r3,1
 5083880:	10800044 	addi	r2,r2,1
 5083884:	41000015 	stw	r4,0(r8)
 5083888:	01000044 	movi	r4,1
 508388c:	41000115 	stw	r4,4(r8)
 5083890:	d8c02015 	stw	r3,128(sp)
 5083894:	d8801f15 	stw	r2,124(sp)
 5083898:	010001c4 	movi	r4,7
 508389c:	20823316 	blt	r4,r2,508416c <___svfprintf_internal_r+0x170c>
 50838a0:	42000204 	addi	r8,r8,8
 50838a4:	d8802617 	ldw	r2,152(sp)
 50838a8:	dac03317 	ldw	r11,204(sp)
 50838ac:	12c00216 	blt	r2,r11,50838b8 <___svfprintf_internal_r+0xe58>
 50838b0:	8880004c 	andi	r2,r17,1
 50838b4:	103e4c26 	beq	r2,zero,50831e8 <__alt_data_end+0xfffb4fe8>
 50838b8:	db003917 	ldw	r12,228(sp)
 50838bc:	d8801f17 	ldw	r2,124(sp)
 50838c0:	dac03517 	ldw	r11,212(sp)
 50838c4:	1b07883a 	add	r3,r3,r12
 50838c8:	10800044 	addi	r2,r2,1
 50838cc:	42c00015 	stw	r11,0(r8)
 50838d0:	43000115 	stw	r12,4(r8)
 50838d4:	d8c02015 	stw	r3,128(sp)
 50838d8:	d8801f15 	stw	r2,124(sp)
 50838dc:	010001c4 	movi	r4,7
 50838e0:	20826f16 	blt	r4,r2,50842a0 <___svfprintf_internal_r+0x1840>
 50838e4:	42000204 	addi	r8,r8,8
 50838e8:	db003317 	ldw	r12,204(sp)
 50838ec:	643fffc4 	addi	r16,r12,-1
 50838f0:	043e3d0e 	bge	zero,r16,50831e8 <__alt_data_end+0xfffb4fe8>
 50838f4:	04800404 	movi	r18,16
 50838f8:	d8801f17 	ldw	r2,124(sp)
 50838fc:	94009a0e 	bge	r18,r16,5083b68 <___svfprintf_internal_r+0x1108>
 5083900:	01414274 	movhi	r5,1289
 5083904:	2954e984 	addi	r5,r5,21414
 5083908:	d9402b15 	stw	r5,172(sp)
 508390c:	054001c4 	movi	r21,7
 5083910:	dcc02f17 	ldw	r19,188(sp)
 5083914:	00000306 	br	5083924 <___svfprintf_internal_r+0xec4>
 5083918:	42000204 	addi	r8,r8,8
 508391c:	843ffc04 	addi	r16,r16,-16
 5083920:	9400940e 	bge	r18,r16,5083b74 <___svfprintf_internal_r+0x1114>
 5083924:	18c00404 	addi	r3,r3,16
 5083928:	10800044 	addi	r2,r2,1
 508392c:	45000015 	stw	r20,0(r8)
 5083930:	44800115 	stw	r18,4(r8)
 5083934:	d8c02015 	stw	r3,128(sp)
 5083938:	d8801f15 	stw	r2,124(sp)
 508393c:	a8bff60e 	bge	r21,r2,5083918 <__alt_data_end+0xfffb5718>
 5083940:	9809883a 	mov	r4,r19
 5083944:	b80b883a 	mov	r5,r23
 5083948:	b00d883a 	mov	r6,r22
 508394c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083950:	103d0b1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083954:	d8c02017 	ldw	r3,128(sp)
 5083958:	d8801f17 	ldw	r2,124(sp)
 508395c:	da000404 	addi	r8,sp,16
 5083960:	003fee06 	br	508391c <__alt_data_end+0xfffb571c>
 5083964:	dac02e17 	ldw	r11,184(sp)
 5083968:	db002a17 	ldw	r12,168(sp)
 508396c:	5b2bc83a 	sub	r21,r11,r12
 5083970:	057ddc0e 	bge	zero,r21,50830e4 <__alt_data_end+0xfffb4ee4>
 5083974:	07000404 	movi	fp,16
 5083978:	d8801f17 	ldw	r2,124(sp)
 508397c:	e5435d0e 	bge	fp,r21,50846f4 <___svfprintf_internal_r+0x1c94>
 5083980:	01414274 	movhi	r5,1289
 5083984:	a809883a 	mov	r4,r21
 5083988:	2954e984 	addi	r5,r5,21414
 508398c:	dc002c15 	stw	r16,176(sp)
 5083990:	902b883a 	mov	r21,r18
 5083994:	d9402b15 	stw	r5,172(sp)
 5083998:	8825883a 	mov	r18,r17
 508399c:	04c001c4 	movi	r19,7
 50839a0:	dc002f17 	ldw	r16,188(sp)
 50839a4:	2023883a 	mov	r17,r4
 50839a8:	00000306 	br	50839b8 <___svfprintf_internal_r+0xf58>
 50839ac:	8c7ffc04 	addi	r17,r17,-16
 50839b0:	42000204 	addi	r8,r8,8
 50839b4:	e440110e 	bge	fp,r17,50839fc <___svfprintf_internal_r+0xf9c>
 50839b8:	18c00404 	addi	r3,r3,16
 50839bc:	10800044 	addi	r2,r2,1
 50839c0:	45000015 	stw	r20,0(r8)
 50839c4:	47000115 	stw	fp,4(r8)
 50839c8:	d8c02015 	stw	r3,128(sp)
 50839cc:	d8801f15 	stw	r2,124(sp)
 50839d0:	98bff60e 	bge	r19,r2,50839ac <__alt_data_end+0xfffb57ac>
 50839d4:	8009883a 	mov	r4,r16
 50839d8:	b80b883a 	mov	r5,r23
 50839dc:	b00d883a 	mov	r6,r22
 50839e0:	508bc6c0 	call	508bc6c <__ssprint_r>
 50839e4:	103ce61e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50839e8:	8c7ffc04 	addi	r17,r17,-16
 50839ec:	d8c02017 	ldw	r3,128(sp)
 50839f0:	d8801f17 	ldw	r2,124(sp)
 50839f4:	da000404 	addi	r8,sp,16
 50839f8:	e47fef16 	blt	fp,r17,50839b8 <__alt_data_end+0xfffb57b8>
 50839fc:	dc002c17 	ldw	r16,176(sp)
 5083a00:	8809883a 	mov	r4,r17
 5083a04:	9023883a 	mov	r17,r18
 5083a08:	a825883a 	mov	r18,r21
 5083a0c:	202b883a 	mov	r21,r4
 5083a10:	dac02b17 	ldw	r11,172(sp)
 5083a14:	1d47883a 	add	r3,r3,r21
 5083a18:	10800044 	addi	r2,r2,1
 5083a1c:	42c00015 	stw	r11,0(r8)
 5083a20:	45400115 	stw	r21,4(r8)
 5083a24:	d8c02015 	stw	r3,128(sp)
 5083a28:	d8801f15 	stw	r2,124(sp)
 5083a2c:	010001c4 	movi	r4,7
 5083a30:	20818016 	blt	r4,r2,5084034 <___svfprintf_internal_r+0x15d4>
 5083a34:	42000204 	addi	r8,r8,8
 5083a38:	003daa06 	br	50830e4 <__alt_data_end+0xfffb4ee4>
 5083a3c:	d9403b17 	ldw	r5,236(sp)
 5083a40:	b007883a 	mov	r3,r22
 5083a44:	988003cc 	andi	r2,r19,15
 5083a48:	e008973a 	slli	r4,fp,28
 5083a4c:	2885883a 	add	r2,r5,r2
 5083a50:	9826d13a 	srli	r19,r19,4
 5083a54:	10800003 	ldbu	r2,0(r2)
 5083a58:	e038d13a 	srli	fp,fp,4
 5083a5c:	18ffffc4 	addi	r3,r3,-1
 5083a60:	24e6b03a 	or	r19,r4,r19
 5083a64:	18800005 	stb	r2,0(r3)
 5083a68:	9f04b03a 	or	r2,r19,fp
 5083a6c:	103ff51e 	bne	r2,zero,5083a44 <__alt_data_end+0xfffb5844>
 5083a70:	d8c03115 	stw	r3,196(sp)
 5083a74:	b0e5c83a 	sub	r18,r22,r3
 5083a78:	003d2d06 	br	5082f30 <__alt_data_end+0xfffb4d30>
 5083a7c:	db003317 	ldw	r12,204(sp)
 5083a80:	00800044 	movi	r2,1
 5083a84:	18c00044 	addi	r3,r3,1
 5083a88:	13014b0e 	bge	r2,r12,5083fb8 <___svfprintf_internal_r+0x1558>
 5083a8c:	dc001f17 	ldw	r16,124(sp)
 5083a90:	dac03117 	ldw	r11,196(sp)
 5083a94:	00800044 	movi	r2,1
 5083a98:	84000044 	addi	r16,r16,1
 5083a9c:	40800115 	stw	r2,4(r8)
 5083aa0:	42c00015 	stw	r11,0(r8)
 5083aa4:	d8c02015 	stw	r3,128(sp)
 5083aa8:	dc001f15 	stw	r16,124(sp)
 5083aac:	008001c4 	movi	r2,7
 5083ab0:	14014e16 	blt	r2,r16,5083fec <___svfprintf_internal_r+0x158c>
 5083ab4:	42000204 	addi	r8,r8,8
 5083ab8:	db003917 	ldw	r12,228(sp)
 5083abc:	dac03517 	ldw	r11,212(sp)
 5083ac0:	84000044 	addi	r16,r16,1
 5083ac4:	1b07883a 	add	r3,r3,r12
 5083ac8:	42c00015 	stw	r11,0(r8)
 5083acc:	43000115 	stw	r12,4(r8)
 5083ad0:	d8c02015 	stw	r3,128(sp)
 5083ad4:	dc001f15 	stw	r16,124(sp)
 5083ad8:	008001c4 	movi	r2,7
 5083adc:	14014c16 	blt	r2,r16,5084010 <___svfprintf_internal_r+0x15b0>
 5083ae0:	44800204 	addi	r18,r8,8
 5083ae4:	d9003717 	ldw	r4,220(sp)
 5083ae8:	d9403817 	ldw	r5,224(sp)
 5083aec:	000d883a 	mov	r6,zero
 5083af0:	000f883a 	mov	r7,zero
 5083af4:	d8c03e15 	stw	r3,248(sp)
 5083af8:	50909200 	call	5090920 <__eqdf2>
 5083afc:	d8c03e17 	ldw	r3,248(sp)
 5083b00:	db003317 	ldw	r12,204(sp)
 5083b04:	10009526 	beq	r2,zero,5083d5c <___svfprintf_internal_r+0x12fc>
 5083b08:	dac03117 	ldw	r11,196(sp)
 5083b0c:	60bfffc4 	addi	r2,r12,-1
 5083b10:	1887883a 	add	r3,r3,r2
 5083b14:	59000044 	addi	r4,r11,1
 5083b18:	84000044 	addi	r16,r16,1
 5083b1c:	90800115 	stw	r2,4(r18)
 5083b20:	91000015 	stw	r4,0(r18)
 5083b24:	d8c02015 	stw	r3,128(sp)
 5083b28:	dc001f15 	stw	r16,124(sp)
 5083b2c:	008001c4 	movi	r2,7
 5083b30:	1400b316 	blt	r2,r16,5083e00 <___svfprintf_internal_r+0x13a0>
 5083b34:	94800204 	addi	r18,r18,8
 5083b38:	dac03a17 	ldw	r11,232(sp)
 5083b3c:	dd4022c4 	addi	r21,sp,139
 5083b40:	84000044 	addi	r16,r16,1
 5083b44:	58c7883a 	add	r3,r11,r3
 5083b48:	95400015 	stw	r21,0(r18)
 5083b4c:	92c00115 	stw	r11,4(r18)
 5083b50:	d8c02015 	stw	r3,128(sp)
 5083b54:	dc001f15 	stw	r16,124(sp)
 5083b58:	008001c4 	movi	r2,7
 5083b5c:	14000e16 	blt	r2,r16,5083b98 <___svfprintf_internal_r+0x1138>
 5083b60:	92000204 	addi	r8,r18,8
 5083b64:	003da006 	br	50831e8 <__alt_data_end+0xfffb4fe8>
 5083b68:	01014274 	movhi	r4,1289
 5083b6c:	2114e984 	addi	r4,r4,21414
 5083b70:	d9002b15 	stw	r4,172(sp)
 5083b74:	dac02b17 	ldw	r11,172(sp)
 5083b78:	1c07883a 	add	r3,r3,r16
 5083b7c:	44000115 	stw	r16,4(r8)
 5083b80:	42c00015 	stw	r11,0(r8)
 5083b84:	10800044 	addi	r2,r2,1
 5083b88:	d8c02015 	stw	r3,128(sp)
 5083b8c:	d8801f15 	stw	r2,124(sp)
 5083b90:	010001c4 	movi	r4,7
 5083b94:	20bd930e 	bge	r4,r2,50831e4 <__alt_data_end+0xfffb4fe4>
 5083b98:	d9002f17 	ldw	r4,188(sp)
 5083b9c:	b80b883a 	mov	r5,r23
 5083ba0:	b00d883a 	mov	r6,r22
 5083ba4:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083ba8:	103c751e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083bac:	d8c02017 	ldw	r3,128(sp)
 5083bb0:	da000404 	addi	r8,sp,16
 5083bb4:	003d8c06 	br	50831e8 <__alt_data_end+0xfffb4fe8>
 5083bb8:	d9002f17 	ldw	r4,188(sp)
 5083bbc:	b80b883a 	mov	r5,r23
 5083bc0:	b00d883a 	mov	r6,r22
 5083bc4:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083bc8:	103dc326 	beq	r2,zero,50832d8 <__alt_data_end+0xfffb50d8>
 5083bcc:	003c6c06 	br	5082d80 <__alt_data_end+0xfffb4b80>
 5083bd0:	10803fcc 	andi	r2,r2,255
 5083bd4:	1000201e 	bne	r2,zero,5083c58 <___svfprintf_internal_r+0x11f8>
 5083bd8:	8880004c 	andi	r2,r17,1
 5083bdc:	10001e26 	beq	r2,zero,5083c58 <___svfprintf_internal_r+0x11f8>
 5083be0:	00800c04 	movi	r2,48
 5083be4:	d8c01dc4 	addi	r3,sp,119
 5083be8:	d8801dc5 	stb	r2,119(sp)
 5083bec:	dc803d17 	ldw	r18,244(sp)
 5083bf0:	d8c03115 	stw	r3,196(sp)
 5083bf4:	003cce06 	br	5082f30 <__alt_data_end+0xfffb4d30>
 5083bf8:	d9002f17 	ldw	r4,188(sp)
 5083bfc:	b80b883a 	mov	r5,r23
 5083c00:	b00d883a 	mov	r6,r22
 5083c04:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083c08:	103c5d1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083c0c:	d8c02017 	ldw	r3,128(sp)
 5083c10:	da000404 	addi	r8,sp,16
 5083c14:	003d6706 	br	50831b4 <__alt_data_end+0xfffb4fb4>
 5083c18:	d9002f17 	ldw	r4,188(sp)
 5083c1c:	b80b883a 	mov	r5,r23
 5083c20:	b00d883a 	mov	r6,r22
 5083c24:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083c28:	103c551e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083c2c:	d8c02017 	ldw	r3,128(sp)
 5083c30:	da000404 	addi	r8,sp,16
 5083c34:	003d1a06 	br	50830a0 <__alt_data_end+0xfffb4ea0>
 5083c38:	d9002f17 	ldw	r4,188(sp)
 5083c3c:	b80b883a 	mov	r5,r23
 5083c40:	b00d883a 	mov	r6,r22
 5083c44:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083c48:	103c4d1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083c4c:	d8c02017 	ldw	r3,128(sp)
 5083c50:	da000404 	addi	r8,sp,16
 5083c54:	003d2006 	br	50830d8 <__alt_data_end+0xfffb4ed8>
 5083c58:	0025883a 	mov	r18,zero
 5083c5c:	dd803115 	stw	r22,196(sp)
 5083c60:	003cb306 	br	5082f30 <__alt_data_end+0xfffb4d30>
 5083c64:	dc002617 	ldw	r16,152(sp)
 5083c68:	0401480e 	bge	zero,r16,508418c <___svfprintf_internal_r+0x172c>
 5083c6c:	db003117 	ldw	r12,196(sp)
 5083c70:	dac03317 	ldw	r11,204(sp)
 5083c74:	62e1883a 	add	r16,r12,r11
 5083c78:	db003417 	ldw	r12,208(sp)
 5083c7c:	5825883a 	mov	r18,r11
 5083c80:	62c0010e 	bge	r12,r11,5083c88 <___svfprintf_internal_r+0x1228>
 5083c84:	6025883a 	mov	r18,r12
 5083c88:	04800b0e 	bge	zero,r18,5083cb8 <___svfprintf_internal_r+0x1258>
 5083c8c:	d8801f17 	ldw	r2,124(sp)
 5083c90:	dac03117 	ldw	r11,196(sp)
 5083c94:	1c87883a 	add	r3,r3,r18
 5083c98:	10800044 	addi	r2,r2,1
 5083c9c:	42c00015 	stw	r11,0(r8)
 5083ca0:	44800115 	stw	r18,4(r8)
 5083ca4:	d8c02015 	stw	r3,128(sp)
 5083ca8:	d8801f15 	stw	r2,124(sp)
 5083cac:	010001c4 	movi	r4,7
 5083cb0:	20823f16 	blt	r4,r2,50845b0 <___svfprintf_internal_r+0x1b50>
 5083cb4:	42000204 	addi	r8,r8,8
 5083cb8:	90023b16 	blt	r18,zero,50845a8 <___svfprintf_internal_r+0x1b48>
 5083cbc:	db003417 	ldw	r12,208(sp)
 5083cc0:	64a5c83a 	sub	r18,r12,r18
 5083cc4:	0480780e 	bge	zero,r18,5083ea8 <___svfprintf_internal_r+0x1448>
 5083cc8:	05400404 	movi	r21,16
 5083ccc:	d8801f17 	ldw	r2,124(sp)
 5083cd0:	ac81140e 	bge	r21,r18,5084124 <___svfprintf_internal_r+0x16c4>
 5083cd4:	01414274 	movhi	r5,1289
 5083cd8:	2954e984 	addi	r5,r5,21414
 5083cdc:	d9402b15 	stw	r5,172(sp)
 5083ce0:	070001c4 	movi	fp,7
 5083ce4:	dcc02f17 	ldw	r19,188(sp)
 5083ce8:	00000306 	br	5083cf8 <___svfprintf_internal_r+0x1298>
 5083cec:	42000204 	addi	r8,r8,8
 5083cf0:	94bffc04 	addi	r18,r18,-16
 5083cf4:	ac810e0e 	bge	r21,r18,5084130 <___svfprintf_internal_r+0x16d0>
 5083cf8:	18c00404 	addi	r3,r3,16
 5083cfc:	10800044 	addi	r2,r2,1
 5083d00:	45000015 	stw	r20,0(r8)
 5083d04:	45400115 	stw	r21,4(r8)
 5083d08:	d8c02015 	stw	r3,128(sp)
 5083d0c:	d8801f15 	stw	r2,124(sp)
 5083d10:	e0bff60e 	bge	fp,r2,5083cec <__alt_data_end+0xfffb5aec>
 5083d14:	9809883a 	mov	r4,r19
 5083d18:	b80b883a 	mov	r5,r23
 5083d1c:	b00d883a 	mov	r6,r22
 5083d20:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083d24:	103c161e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083d28:	d8c02017 	ldw	r3,128(sp)
 5083d2c:	d8801f17 	ldw	r2,124(sp)
 5083d30:	da000404 	addi	r8,sp,16
 5083d34:	003fee06 	br	5083cf0 <__alt_data_end+0xfffb5af0>
 5083d38:	d9002f17 	ldw	r4,188(sp)
 5083d3c:	b80b883a 	mov	r5,r23
 5083d40:	b00d883a 	mov	r6,r22
 5083d44:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083d48:	103c0d1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083d4c:	d8c02017 	ldw	r3,128(sp)
 5083d50:	d8802787 	ldb	r2,158(sp)
 5083d54:	da000404 	addi	r8,sp,16
 5083d58:	003cc406 	br	508306c <__alt_data_end+0xfffb4e6c>
 5083d5c:	657fffc4 	addi	r21,r12,-1
 5083d60:	057f750e 	bge	zero,r21,5083b38 <__alt_data_end+0xfffb5938>
 5083d64:	07000404 	movi	fp,16
 5083d68:	e542ef0e 	bge	fp,r21,5084928 <___svfprintf_internal_r+0x1ec8>
 5083d6c:	01014274 	movhi	r4,1289
 5083d70:	2114e984 	addi	r4,r4,21414
 5083d74:	d9002b15 	stw	r4,172(sp)
 5083d78:	01c001c4 	movi	r7,7
 5083d7c:	dcc02f17 	ldw	r19,188(sp)
 5083d80:	00000306 	br	5083d90 <___svfprintf_internal_r+0x1330>
 5083d84:	ad7ffc04 	addi	r21,r21,-16
 5083d88:	94800204 	addi	r18,r18,8
 5083d8c:	e540130e 	bge	fp,r21,5083ddc <___svfprintf_internal_r+0x137c>
 5083d90:	18c00404 	addi	r3,r3,16
 5083d94:	84000044 	addi	r16,r16,1
 5083d98:	95000015 	stw	r20,0(r18)
 5083d9c:	97000115 	stw	fp,4(r18)
 5083da0:	d8c02015 	stw	r3,128(sp)
 5083da4:	dc001f15 	stw	r16,124(sp)
 5083da8:	3c3ff60e 	bge	r7,r16,5083d84 <__alt_data_end+0xfffb5b84>
 5083dac:	9809883a 	mov	r4,r19
 5083db0:	b80b883a 	mov	r5,r23
 5083db4:	b00d883a 	mov	r6,r22
 5083db8:	d9c03e15 	stw	r7,248(sp)
 5083dbc:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083dc0:	d9c03e17 	ldw	r7,248(sp)
 5083dc4:	103bee1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083dc8:	ad7ffc04 	addi	r21,r21,-16
 5083dcc:	d8c02017 	ldw	r3,128(sp)
 5083dd0:	dc001f17 	ldw	r16,124(sp)
 5083dd4:	dc800404 	addi	r18,sp,16
 5083dd8:	e57fed16 	blt	fp,r21,5083d90 <__alt_data_end+0xfffb5b90>
 5083ddc:	dac02b17 	ldw	r11,172(sp)
 5083de0:	1d47883a 	add	r3,r3,r21
 5083de4:	84000044 	addi	r16,r16,1
 5083de8:	92c00015 	stw	r11,0(r18)
 5083dec:	95400115 	stw	r21,4(r18)
 5083df0:	d8c02015 	stw	r3,128(sp)
 5083df4:	dc001f15 	stw	r16,124(sp)
 5083df8:	008001c4 	movi	r2,7
 5083dfc:	143f4d0e 	bge	r2,r16,5083b34 <__alt_data_end+0xfffb5934>
 5083e00:	d9002f17 	ldw	r4,188(sp)
 5083e04:	b80b883a 	mov	r5,r23
 5083e08:	b00d883a 	mov	r6,r22
 5083e0c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083e10:	103bdb1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083e14:	d8c02017 	ldw	r3,128(sp)
 5083e18:	dc001f17 	ldw	r16,124(sp)
 5083e1c:	dc800404 	addi	r18,sp,16
 5083e20:	003f4506 	br	5083b38 <__alt_data_end+0xfffb5938>
 5083e24:	00800084 	movi	r2,2
 5083e28:	9f06b03a 	or	r3,r19,fp
 5083e2c:	003d3806 	br	5083310 <__alt_data_end+0xfffb5110>
 5083e30:	dac02d17 	ldw	r11,180(sp)
 5083e34:	0039883a 	mov	fp,zero
 5083e38:	0005883a 	mov	r2,zero
 5083e3c:	5cc00017 	ldw	r19,0(r11)
 5083e40:	5ac00104 	addi	r11,r11,4
 5083e44:	dac02d15 	stw	r11,180(sp)
 5083e48:	9807883a 	mov	r3,r19
 5083e4c:	003d3006 	br	5083310 <__alt_data_end+0xfffb5110>
 5083e50:	1cc00017 	ldw	r19,0(r3)
 5083e54:	dac02d17 	ldw	r11,180(sp)
 5083e58:	9839d7fa 	srai	fp,r19,31
 5083e5c:	5ac00104 	addi	r11,r11,4
 5083e60:	dac02d15 	stw	r11,180(sp)
 5083e64:	e005883a 	mov	r2,fp
 5083e68:	003c0a06 	br	5082e94 <__alt_data_end+0xfffb4c94>
 5083e6c:	db002d17 	ldw	r12,180(sp)
 5083e70:	0039883a 	mov	fp,zero
 5083e74:	00800044 	movi	r2,1
 5083e78:	64c00017 	ldw	r19,0(r12)
 5083e7c:	63000104 	addi	r12,r12,4
 5083e80:	db002d15 	stw	r12,180(sp)
 5083e84:	9807883a 	mov	r3,r19
 5083e88:	003d2106 	br	5083310 <__alt_data_end+0xfffb5110>
 5083e8c:	d9002f17 	ldw	r4,188(sp)
 5083e90:	b80b883a 	mov	r5,r23
 5083e94:	b00d883a 	mov	r6,r22
 5083e98:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083e9c:	103bb81e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083ea0:	d8c02017 	ldw	r3,128(sp)
 5083ea4:	da000404 	addi	r8,sp,16
 5083ea8:	db003117 	ldw	r12,196(sp)
 5083eac:	dac03417 	ldw	r11,208(sp)
 5083eb0:	d8802617 	ldw	r2,152(sp)
 5083eb4:	62e5883a 	add	r18,r12,r11
 5083eb8:	db003317 	ldw	r12,204(sp)
 5083ebc:	13000216 	blt	r2,r12,5083ec8 <___svfprintf_internal_r+0x1468>
 5083ec0:	8900004c 	andi	r4,r17,1
 5083ec4:	20000c26 	beq	r4,zero,5083ef8 <___svfprintf_internal_r+0x1498>
 5083ec8:	dac03917 	ldw	r11,228(sp)
 5083ecc:	d9001f17 	ldw	r4,124(sp)
 5083ed0:	db003517 	ldw	r12,212(sp)
 5083ed4:	1ac7883a 	add	r3,r3,r11
 5083ed8:	21000044 	addi	r4,r4,1
 5083edc:	43000015 	stw	r12,0(r8)
 5083ee0:	42c00115 	stw	r11,4(r8)
 5083ee4:	d8c02015 	stw	r3,128(sp)
 5083ee8:	d9001f15 	stw	r4,124(sp)
 5083eec:	014001c4 	movi	r5,7
 5083ef0:	2901b716 	blt	r5,r4,50845d0 <___svfprintf_internal_r+0x1b70>
 5083ef4:	42000204 	addi	r8,r8,8
 5083ef8:	dac03317 	ldw	r11,204(sp)
 5083efc:	8489c83a 	sub	r4,r16,r18
 5083f00:	5885c83a 	sub	r2,r11,r2
 5083f04:	1021883a 	mov	r16,r2
 5083f08:	2080010e 	bge	r4,r2,5083f10 <___svfprintf_internal_r+0x14b0>
 5083f0c:	2021883a 	mov	r16,r4
 5083f10:	04000a0e 	bge	zero,r16,5083f3c <___svfprintf_internal_r+0x14dc>
 5083f14:	d9001f17 	ldw	r4,124(sp)
 5083f18:	1c07883a 	add	r3,r3,r16
 5083f1c:	44800015 	stw	r18,0(r8)
 5083f20:	21000044 	addi	r4,r4,1
 5083f24:	44000115 	stw	r16,4(r8)
 5083f28:	d8c02015 	stw	r3,128(sp)
 5083f2c:	d9001f15 	stw	r4,124(sp)
 5083f30:	014001c4 	movi	r5,7
 5083f34:	2901bf16 	blt	r5,r4,5084634 <___svfprintf_internal_r+0x1bd4>
 5083f38:	42000204 	addi	r8,r8,8
 5083f3c:	8001bb16 	blt	r16,zero,508462c <___svfprintf_internal_r+0x1bcc>
 5083f40:	1421c83a 	sub	r16,r2,r16
 5083f44:	043ca80e 	bge	zero,r16,50831e8 <__alt_data_end+0xfffb4fe8>
 5083f48:	04800404 	movi	r18,16
 5083f4c:	d8801f17 	ldw	r2,124(sp)
 5083f50:	943f050e 	bge	r18,r16,5083b68 <__alt_data_end+0xfffb5968>
 5083f54:	01414274 	movhi	r5,1289
 5083f58:	2954e984 	addi	r5,r5,21414
 5083f5c:	d9402b15 	stw	r5,172(sp)
 5083f60:	054001c4 	movi	r21,7
 5083f64:	dcc02f17 	ldw	r19,188(sp)
 5083f68:	00000306 	br	5083f78 <___svfprintf_internal_r+0x1518>
 5083f6c:	42000204 	addi	r8,r8,8
 5083f70:	843ffc04 	addi	r16,r16,-16
 5083f74:	943eff0e 	bge	r18,r16,5083b74 <__alt_data_end+0xfffb5974>
 5083f78:	18c00404 	addi	r3,r3,16
 5083f7c:	10800044 	addi	r2,r2,1
 5083f80:	45000015 	stw	r20,0(r8)
 5083f84:	44800115 	stw	r18,4(r8)
 5083f88:	d8c02015 	stw	r3,128(sp)
 5083f8c:	d8801f15 	stw	r2,124(sp)
 5083f90:	a8bff60e 	bge	r21,r2,5083f6c <__alt_data_end+0xfffb5d6c>
 5083f94:	9809883a 	mov	r4,r19
 5083f98:	b80b883a 	mov	r5,r23
 5083f9c:	b00d883a 	mov	r6,r22
 5083fa0:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083fa4:	103b761e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5083fa8:	d8c02017 	ldw	r3,128(sp)
 5083fac:	d8801f17 	ldw	r2,124(sp)
 5083fb0:	da000404 	addi	r8,sp,16
 5083fb4:	003fee06 	br	5083f70 <__alt_data_end+0xfffb5d70>
 5083fb8:	8888703a 	and	r4,r17,r2
 5083fbc:	203eb31e 	bne	r4,zero,5083a8c <__alt_data_end+0xfffb588c>
 5083fc0:	dc001f17 	ldw	r16,124(sp)
 5083fc4:	db003117 	ldw	r12,196(sp)
 5083fc8:	40800115 	stw	r2,4(r8)
 5083fcc:	84000044 	addi	r16,r16,1
 5083fd0:	43000015 	stw	r12,0(r8)
 5083fd4:	d8c02015 	stw	r3,128(sp)
 5083fd8:	dc001f15 	stw	r16,124(sp)
 5083fdc:	008001c4 	movi	r2,7
 5083fe0:	143f8716 	blt	r2,r16,5083e00 <__alt_data_end+0xfffb5c00>
 5083fe4:	44800204 	addi	r18,r8,8
 5083fe8:	003ed306 	br	5083b38 <__alt_data_end+0xfffb5938>
 5083fec:	d9002f17 	ldw	r4,188(sp)
 5083ff0:	b80b883a 	mov	r5,r23
 5083ff4:	b00d883a 	mov	r6,r22
 5083ff8:	508bc6c0 	call	508bc6c <__ssprint_r>
 5083ffc:	103b601e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084000:	d8c02017 	ldw	r3,128(sp)
 5084004:	dc001f17 	ldw	r16,124(sp)
 5084008:	da000404 	addi	r8,sp,16
 508400c:	003eaa06 	br	5083ab8 <__alt_data_end+0xfffb58b8>
 5084010:	d9002f17 	ldw	r4,188(sp)
 5084014:	b80b883a 	mov	r5,r23
 5084018:	b00d883a 	mov	r6,r22
 508401c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084020:	103b571e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084024:	d8c02017 	ldw	r3,128(sp)
 5084028:	dc001f17 	ldw	r16,124(sp)
 508402c:	dc800404 	addi	r18,sp,16
 5084030:	003eac06 	br	5083ae4 <__alt_data_end+0xfffb58e4>
 5084034:	d9002f17 	ldw	r4,188(sp)
 5084038:	b80b883a 	mov	r5,r23
 508403c:	b00d883a 	mov	r6,r22
 5084040:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084044:	103b4e1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084048:	d8c02017 	ldw	r3,128(sp)
 508404c:	da000404 	addi	r8,sp,16
 5084050:	003c2406 	br	50830e4 <__alt_data_end+0xfffb4ee4>
 5084054:	da004015 	stw	r8,256(sp)
 5084058:	da403f15 	stw	r9,252(sp)
 508405c:	508b9c40 	call	508b9c4 <__fpclassifyd>
 5084060:	da004017 	ldw	r8,256(sp)
 5084064:	da403f17 	ldw	r9,252(sp)
 5084068:	1000951e 	bne	r2,zero,50842c0 <___svfprintf_internal_r+0x1860>
 508406c:	008011c4 	movi	r2,71
 5084070:	1400fb16 	blt	r2,r16,5084460 <___svfprintf_internal_r+0x1a00>
 5084074:	03014274 	movhi	r12,1289
 5084078:	6314db04 	addi	r12,r12,21356
 508407c:	db003115 	stw	r12,196(sp)
 5084080:	00c000c4 	movi	r3,3
 5084084:	00bfdfc4 	movi	r2,-129
 5084088:	d8c02a15 	stw	r3,168(sp)
 508408c:	88a2703a 	and	r17,r17,r2
 5084090:	dd402783 	ldbu	r21,158(sp)
 5084094:	dcc02d15 	stw	r19,180(sp)
 5084098:	1825883a 	mov	r18,r3
 508409c:	d8003215 	stw	zero,200(sp)
 50840a0:	d8003415 	stw	zero,208(sp)
 50840a4:	003ba706 	br	5082f44 <__alt_data_end+0xfffb4d44>
 50840a8:	8880040c 	andi	r2,r17,16
 50840ac:	1000091e 	bne	r2,zero,50840d4 <___svfprintf_internal_r+0x1674>
 50840b0:	8c40100c 	andi	r17,r17,64
 50840b4:	88000726 	beq	r17,zero,50840d4 <___svfprintf_internal_r+0x1674>
 50840b8:	db002d17 	ldw	r12,180(sp)
 50840bc:	dac03017 	ldw	r11,192(sp)
 50840c0:	60800017 	ldw	r2,0(r12)
 50840c4:	63000104 	addi	r12,r12,4
 50840c8:	db002d15 	stw	r12,180(sp)
 50840cc:	12c0000d 	sth	r11,0(r2)
 50840d0:	003a8f06 	br	5082b10 <__alt_data_end+0xfffb4910>
 50840d4:	db002d17 	ldw	r12,180(sp)
 50840d8:	dac03017 	ldw	r11,192(sp)
 50840dc:	60800017 	ldw	r2,0(r12)
 50840e0:	63000104 	addi	r12,r12,4
 50840e4:	db002d15 	stw	r12,180(sp)
 50840e8:	12c00015 	stw	r11,0(r2)
 50840ec:	003a8806 	br	5082b10 <__alt_data_end+0xfffb4910>
 50840f0:	88c0100c 	andi	r3,r17,64
 50840f4:	1800e926 	beq	r3,zero,508449c <___svfprintf_internal_r+0x1a3c>
 50840f8:	dac02d17 	ldw	r11,180(sp)
 50840fc:	14c0000b 	ldhu	r19,0(r2)
 5084100:	0039883a 	mov	fp,zero
 5084104:	5ac00104 	addi	r11,r11,4
 5084108:	dac02d15 	stw	r11,180(sp)
 508410c:	003d1406 	br	5083560 <__alt_data_end+0xfffb5360>
 5084110:	1c000007 	ldb	r16,0(r3)
 5084114:	1805883a 	mov	r2,r3
 5084118:	003aa706 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 508411c:	00800084 	movi	r2,2
 5084120:	003c7b06 	br	5083310 <__alt_data_end+0xfffb5110>
 5084124:	01014274 	movhi	r4,1289
 5084128:	2114e984 	addi	r4,r4,21414
 508412c:	d9002b15 	stw	r4,172(sp)
 5084130:	dac02b17 	ldw	r11,172(sp)
 5084134:	1c87883a 	add	r3,r3,r18
 5084138:	10800044 	addi	r2,r2,1
 508413c:	42c00015 	stw	r11,0(r8)
 5084140:	44800115 	stw	r18,4(r8)
 5084144:	d8c02015 	stw	r3,128(sp)
 5084148:	d8801f15 	stw	r2,124(sp)
 508414c:	010001c4 	movi	r4,7
 5084150:	20bf4e16 	blt	r4,r2,5083e8c <__alt_data_end+0xfffb5c8c>
 5084154:	42000204 	addi	r8,r8,8
 5084158:	003f5306 	br	5083ea8 <__alt_data_end+0xfffb5ca8>
 508415c:	01014274 	movhi	r4,1289
 5084160:	2114e984 	addi	r4,r4,21414
 5084164:	d9002b15 	stw	r4,172(sp)
 5084168:	003c0806 	br	508318c <__alt_data_end+0xfffb4f8c>
 508416c:	d9002f17 	ldw	r4,188(sp)
 5084170:	b80b883a 	mov	r5,r23
 5084174:	b00d883a 	mov	r6,r22
 5084178:	508bc6c0 	call	508bc6c <__ssprint_r>
 508417c:	103b001e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084180:	d8c02017 	ldw	r3,128(sp)
 5084184:	da000404 	addi	r8,sp,16
 5084188:	003dc606 	br	50838a4 <__alt_data_end+0xfffb56a4>
 508418c:	d8801f17 	ldw	r2,124(sp)
 5084190:	03014274 	movhi	r12,1289
 5084194:	01000044 	movi	r4,1
 5084198:	18c00044 	addi	r3,r3,1
 508419c:	10800044 	addi	r2,r2,1
 50841a0:	6314e904 	addi	r12,r12,21412
 50841a4:	41000115 	stw	r4,4(r8)
 50841a8:	43000015 	stw	r12,0(r8)
 50841ac:	d8c02015 	stw	r3,128(sp)
 50841b0:	d8801f15 	stw	r2,124(sp)
 50841b4:	010001c4 	movi	r4,7
 50841b8:	2080ad16 	blt	r4,r2,5084470 <___svfprintf_internal_r+0x1a10>
 50841bc:	42000204 	addi	r8,r8,8
 50841c0:	8000041e 	bne	r16,zero,50841d4 <___svfprintf_internal_r+0x1774>
 50841c4:	dac03317 	ldw	r11,204(sp)
 50841c8:	5800021e 	bne	r11,zero,50841d4 <___svfprintf_internal_r+0x1774>
 50841cc:	8880004c 	andi	r2,r17,1
 50841d0:	103c0526 	beq	r2,zero,50831e8 <__alt_data_end+0xfffb4fe8>
 50841d4:	db003917 	ldw	r12,228(sp)
 50841d8:	d8801f17 	ldw	r2,124(sp)
 50841dc:	dac03517 	ldw	r11,212(sp)
 50841e0:	1b07883a 	add	r3,r3,r12
 50841e4:	10800044 	addi	r2,r2,1
 50841e8:	42c00015 	stw	r11,0(r8)
 50841ec:	43000115 	stw	r12,4(r8)
 50841f0:	d8c02015 	stw	r3,128(sp)
 50841f4:	d8801f15 	stw	r2,124(sp)
 50841f8:	010001c4 	movi	r4,7
 50841fc:	20818816 	blt	r4,r2,5084820 <___svfprintf_internal_r+0x1dc0>
 5084200:	42000204 	addi	r8,r8,8
 5084204:	0421c83a 	sub	r16,zero,r16
 5084208:	0400bc0e 	bge	zero,r16,50844fc <___svfprintf_internal_r+0x1a9c>
 508420c:	04800404 	movi	r18,16
 5084210:	9400f80e 	bge	r18,r16,50845f4 <___svfprintf_internal_r+0x1b94>
 5084214:	01014274 	movhi	r4,1289
 5084218:	2114e984 	addi	r4,r4,21414
 508421c:	d9002b15 	stw	r4,172(sp)
 5084220:	054001c4 	movi	r21,7
 5084224:	dcc02f17 	ldw	r19,188(sp)
 5084228:	00000306 	br	5084238 <___svfprintf_internal_r+0x17d8>
 508422c:	42000204 	addi	r8,r8,8
 5084230:	843ffc04 	addi	r16,r16,-16
 5084234:	9400f20e 	bge	r18,r16,5084600 <___svfprintf_internal_r+0x1ba0>
 5084238:	18c00404 	addi	r3,r3,16
 508423c:	10800044 	addi	r2,r2,1
 5084240:	45000015 	stw	r20,0(r8)
 5084244:	44800115 	stw	r18,4(r8)
 5084248:	d8c02015 	stw	r3,128(sp)
 508424c:	d8801f15 	stw	r2,124(sp)
 5084250:	a8bff60e 	bge	r21,r2,508422c <__alt_data_end+0xfffb602c>
 5084254:	9809883a 	mov	r4,r19
 5084258:	b80b883a 	mov	r5,r23
 508425c:	b00d883a 	mov	r6,r22
 5084260:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084264:	103ac61e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084268:	d8c02017 	ldw	r3,128(sp)
 508426c:	d8801f17 	ldw	r2,124(sp)
 5084270:	da000404 	addi	r8,sp,16
 5084274:	003fee06 	br	5084230 <__alt_data_end+0xfffb6030>
 5084278:	db002e17 	ldw	r12,184(sp)
 508427c:	1805883a 	mov	r2,r3
 5084280:	dac02d15 	stw	r11,180(sp)
 5084284:	0319c83a 	sub	r12,zero,r12
 5084288:	db002e15 	stw	r12,184(sp)
 508428c:	003ad106 	br	5082dd4 <__alt_data_end+0xfffb4bd4>
 5084290:	18800044 	addi	r2,r3,1
 5084294:	8c400814 	ori	r17,r17,32
 5084298:	1c000047 	ldb	r16,1(r3)
 508429c:	003a4606 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 50842a0:	d9002f17 	ldw	r4,188(sp)
 50842a4:	b80b883a 	mov	r5,r23
 50842a8:	b00d883a 	mov	r6,r22
 50842ac:	508bc6c0 	call	508bc6c <__ssprint_r>
 50842b0:	103ab31e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50842b4:	d8c02017 	ldw	r3,128(sp)
 50842b8:	da000404 	addi	r8,sp,16
 50842bc:	003d8a06 	br	50838e8 <__alt_data_end+0xfffb56e8>
 50842c0:	057ff7c4 	movi	r21,-33
 50842c4:	00bfffc4 	movi	r2,-1
 50842c8:	856a703a 	and	r21,r16,r21
 50842cc:	48807126 	beq	r9,r2,5084494 <___svfprintf_internal_r+0x1a34>
 50842d0:	008011c4 	movi	r2,71
 50842d4:	a8814f26 	beq	r21,r2,5084814 <___svfprintf_internal_r+0x1db4>
 50842d8:	db003817 	ldw	r12,224(sp)
 50842dc:	8ac04014 	ori	r11,r17,256
 50842e0:	dac02d15 	stw	r11,180(sp)
 50842e4:	60015816 	blt	r12,zero,5084848 <___svfprintf_internal_r+0x1de8>
 50842e8:	dc803817 	ldw	r18,224(sp)
 50842ec:	d8002a05 	stb	zero,168(sp)
 50842f0:	00801984 	movi	r2,102
 50842f4:	80808c26 	beq	r16,r2,5084528 <___svfprintf_internal_r+0x1ac8>
 50842f8:	00801184 	movi	r2,70
 50842fc:	80808a26 	beq	r16,r2,5084528 <___svfprintf_internal_r+0x1ac8>
 5084300:	00801144 	movi	r2,69
 5084304:	a8815426 	beq	r21,r2,5084858 <___svfprintf_internal_r+0x1df8>
 5084308:	4839883a 	mov	fp,r9
 508430c:	d8802604 	addi	r2,sp,152
 5084310:	d8800115 	stw	r2,4(sp)
 5084314:	d9002f17 	ldw	r4,188(sp)
 5084318:	d8802504 	addi	r2,sp,148
 508431c:	d9403717 	ldw	r5,220(sp)
 5084320:	d8800215 	stw	r2,8(sp)
 5084324:	d8802104 	addi	r2,sp,132
 5084328:	df000015 	stw	fp,0(sp)
 508432c:	d8800315 	stw	r2,12(sp)
 5084330:	900d883a 	mov	r6,r18
 5084334:	01c00084 	movi	r7,2
 5084338:	da004015 	stw	r8,256(sp)
 508433c:	da403f15 	stw	r9,252(sp)
 5084340:	5086e700 	call	5086e70 <_dtoa_r>
 5084344:	d8803115 	stw	r2,196(sp)
 5084348:	008019c4 	movi	r2,103
 508434c:	da004017 	ldw	r8,256(sp)
 5084350:	da403f17 	ldw	r9,252(sp)
 5084354:	80800226 	beq	r16,r2,5084360 <___svfprintf_internal_r+0x1900>
 5084358:	008011c4 	movi	r2,71
 508435c:	8080841e 	bne	r16,r2,5084570 <___svfprintf_internal_r+0x1b10>
 5084360:	8880004c 	andi	r2,r17,1
 5084364:	10015126 	beq	r2,zero,50848ac <___svfprintf_internal_r+0x1e4c>
 5084368:	db003117 	ldw	r12,196(sp)
 508436c:	6715883a 	add	r10,r12,fp
 5084370:	d9003717 	ldw	r4,220(sp)
 5084374:	900b883a 	mov	r5,r18
 5084378:	000d883a 	mov	r6,zero
 508437c:	000f883a 	mov	r7,zero
 5084380:	da004015 	stw	r8,256(sp)
 5084384:	da403f15 	stw	r9,252(sp)
 5084388:	da803e15 	stw	r10,248(sp)
 508438c:	50909200 	call	5090920 <__eqdf2>
 5084390:	da004017 	ldw	r8,256(sp)
 5084394:	da403f17 	ldw	r9,252(sp)
 5084398:	da803e17 	ldw	r10,248(sp)
 508439c:	1000d926 	beq	r2,zero,5084704 <___svfprintf_internal_r+0x1ca4>
 50843a0:	d8802117 	ldw	r2,132(sp)
 50843a4:	1280062e 	bgeu	r2,r10,50843c0 <___svfprintf_internal_r+0x1960>
 50843a8:	01000c04 	movi	r4,48
 50843ac:	10c00044 	addi	r3,r2,1
 50843b0:	d8c02115 	stw	r3,132(sp)
 50843b4:	11000005 	stb	r4,0(r2)
 50843b8:	d8802117 	ldw	r2,132(sp)
 50843bc:	12bffb36 	bltu	r2,r10,50843ac <__alt_data_end+0xfffb61ac>
 50843c0:	db003117 	ldw	r12,196(sp)
 50843c4:	1305c83a 	sub	r2,r2,r12
 50843c8:	d8803315 	stw	r2,204(sp)
 50843cc:	008011c4 	movi	r2,71
 50843d0:	a880b626 	beq	r21,r2,50846ac <___svfprintf_internal_r+0x1c4c>
 50843d4:	00801944 	movi	r2,101
 50843d8:	14017e0e 	bge	r2,r16,50849d4 <___svfprintf_internal_r+0x1f74>
 50843dc:	00801984 	movi	r2,102
 50843e0:	80812826 	beq	r16,r2,5084884 <___svfprintf_internal_r+0x1e24>
 50843e4:	db002617 	ldw	r12,152(sp)
 50843e8:	db003415 	stw	r12,208(sp)
 50843ec:	db003417 	ldw	r12,208(sp)
 50843f0:	dac03317 	ldw	r11,204(sp)
 50843f4:	62c11a16 	blt	r12,r11,5084860 <___svfprintf_internal_r+0x1e00>
 50843f8:	8c40004c 	andi	r17,r17,1
 50843fc:	88013d1e 	bne	r17,zero,50848f4 <___svfprintf_internal_r+0x1e94>
 5084400:	6005883a 	mov	r2,r12
 5084404:	60012716 	blt	r12,zero,50848a4 <___svfprintf_internal_r+0x1e44>
 5084408:	dc803417 	ldw	r18,208(sp)
 508440c:	df002a07 	ldb	fp,168(sp)
 5084410:	e000b01e 	bne	fp,zero,50846d4 <___svfprintf_internal_r+0x1c74>
 5084414:	dc402d17 	ldw	r17,180(sp)
 5084418:	dd402783 	ldbu	r21,158(sp)
 508441c:	d8802a15 	stw	r2,168(sp)
 5084420:	dcc02d15 	stw	r19,180(sp)
 5084424:	d8003215 	stw	zero,200(sp)
 5084428:	003ac606 	br	5082f44 <__alt_data_end+0xfffb4d44>
 508442c:	00814274 	movhi	r2,1289
 5084430:	1094d904 	addi	r2,r2,21348
 5084434:	d8803115 	stw	r2,196(sp)
 5084438:	003be506 	br	50833d0 <__alt_data_end+0xfffb51d0>
 508443c:	d9002f17 	ldw	r4,188(sp)
 5084440:	04001004 	movi	r16,64
 5084444:	800b883a 	mov	r5,r16
 5084448:	50898500 	call	5089850 <_malloc_r>
 508444c:	b8800015 	stw	r2,0(r23)
 5084450:	b8800415 	stw	r2,16(r23)
 5084454:	10016126 	beq	r2,zero,50849dc <___svfprintf_internal_r+0x1f7c>
 5084458:	bc000515 	stw	r16,20(r23)
 508445c:	00399a06 	br	5082ac8 <__alt_data_end+0xfffb48c8>
 5084460:	00814274 	movhi	r2,1289
 5084464:	1094dc04 	addi	r2,r2,21360
 5084468:	d8803115 	stw	r2,196(sp)
 508446c:	003f0406 	br	5084080 <__alt_data_end+0xfffb5e80>
 5084470:	d9002f17 	ldw	r4,188(sp)
 5084474:	b80b883a 	mov	r5,r23
 5084478:	b00d883a 	mov	r6,r22
 508447c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084480:	103a3f1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084484:	dc002617 	ldw	r16,152(sp)
 5084488:	d8c02017 	ldw	r3,128(sp)
 508448c:	da000404 	addi	r8,sp,16
 5084490:	003f4b06 	br	50841c0 <__alt_data_end+0xfffb5fc0>
 5084494:	02400184 	movi	r9,6
 5084498:	003f8f06 	br	50842d8 <__alt_data_end+0xfffb60d8>
 508449c:	db002d17 	ldw	r12,180(sp)
 50844a0:	14c00017 	ldw	r19,0(r2)
 50844a4:	0039883a 	mov	fp,zero
 50844a8:	63000104 	addi	r12,r12,4
 50844ac:	db002d15 	stw	r12,180(sp)
 50844b0:	003c2b06 	br	5083560 <__alt_data_end+0xfffb5360>
 50844b4:	d8c03117 	ldw	r3,196(sp)
 50844b8:	b0e5c83a 	sub	r18,r22,r3
 50844bc:	003a9c06 	br	5082f30 <__alt_data_end+0xfffb4d30>
 50844c0:	da004015 	stw	r8,256(sp)
 50844c4:	50829c80 	call	50829c8 <strlen>
 50844c8:	1025883a 	mov	r18,r2
 50844cc:	da004017 	ldw	r8,256(sp)
 50844d0:	903c450e 	bge	r18,zero,50835e8 <__alt_data_end+0xfffb53e8>
 50844d4:	0005883a 	mov	r2,zero
 50844d8:	003c4306 	br	50835e8 <__alt_data_end+0xfffb53e8>
 50844dc:	d9002f17 	ldw	r4,188(sp)
 50844e0:	b80b883a 	mov	r5,r23
 50844e4:	b00d883a 	mov	r6,r22
 50844e8:	508bc6c0 	call	508bc6c <__ssprint_r>
 50844ec:	103a241e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50844f0:	d8c02017 	ldw	r3,128(sp)
 50844f4:	d8801f17 	ldw	r2,124(sp)
 50844f8:	da000404 	addi	r8,sp,16
 50844fc:	db003317 	ldw	r12,204(sp)
 5084500:	dac03117 	ldw	r11,196(sp)
 5084504:	10800044 	addi	r2,r2,1
 5084508:	60c7883a 	add	r3,r12,r3
 508450c:	42c00015 	stw	r11,0(r8)
 5084510:	43000115 	stw	r12,4(r8)
 5084514:	d8c02015 	stw	r3,128(sp)
 5084518:	d8801f15 	stw	r2,124(sp)
 508451c:	010001c4 	movi	r4,7
 5084520:	20bb300e 	bge	r4,r2,50831e4 <__alt_data_end+0xfffb4fe4>
 5084524:	003d9c06 	br	5083b98 <__alt_data_end+0xfffb5998>
 5084528:	d8802604 	addi	r2,sp,152
 508452c:	d8800115 	stw	r2,4(sp)
 5084530:	d9002f17 	ldw	r4,188(sp)
 5084534:	d8802504 	addi	r2,sp,148
 5084538:	d9403717 	ldw	r5,220(sp)
 508453c:	d8800215 	stw	r2,8(sp)
 5084540:	d8802104 	addi	r2,sp,132
 5084544:	da400015 	stw	r9,0(sp)
 5084548:	d8800315 	stw	r2,12(sp)
 508454c:	900d883a 	mov	r6,r18
 5084550:	01c000c4 	movi	r7,3
 5084554:	da004015 	stw	r8,256(sp)
 5084558:	da403f15 	stw	r9,252(sp)
 508455c:	5086e700 	call	5086e70 <_dtoa_r>
 5084560:	da403f17 	ldw	r9,252(sp)
 5084564:	da004017 	ldw	r8,256(sp)
 5084568:	d8803115 	stw	r2,196(sp)
 508456c:	4839883a 	mov	fp,r9
 5084570:	dac03117 	ldw	r11,196(sp)
 5084574:	00801184 	movi	r2,70
 5084578:	5f15883a 	add	r10,r11,fp
 508457c:	a8bf7c1e 	bne	r21,r2,5084370 <__alt_data_end+0xfffb6170>
 5084580:	59000007 	ldb	r4,0(r11)
 5084584:	00800c04 	movi	r2,48
 5084588:	2080ca26 	beq	r4,r2,50848b4 <___svfprintf_internal_r+0x1e54>
 508458c:	d8c02617 	ldw	r3,152(sp)
 5084590:	50d5883a 	add	r10,r10,r3
 5084594:	003f7606 	br	5084370 <__alt_data_end+0xfffb6170>
 5084598:	01014274 	movhi	r4,1289
 508459c:	2114ed84 	addi	r4,r4,21430
 50845a0:	d9003615 	stw	r4,216(sp)
 50845a4:	003aa606 	br	5083040 <__alt_data_end+0xfffb4e40>
 50845a8:	0025883a 	mov	r18,zero
 50845ac:	003dc306 	br	5083cbc <__alt_data_end+0xfffb5abc>
 50845b0:	d9002f17 	ldw	r4,188(sp)
 50845b4:	b80b883a 	mov	r5,r23
 50845b8:	b00d883a 	mov	r6,r22
 50845bc:	508bc6c0 	call	508bc6c <__ssprint_r>
 50845c0:	1039ef1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50845c4:	d8c02017 	ldw	r3,128(sp)
 50845c8:	da000404 	addi	r8,sp,16
 50845cc:	003dba06 	br	5083cb8 <__alt_data_end+0xfffb5ab8>
 50845d0:	d9002f17 	ldw	r4,188(sp)
 50845d4:	b80b883a 	mov	r5,r23
 50845d8:	b00d883a 	mov	r6,r22
 50845dc:	508bc6c0 	call	508bc6c <__ssprint_r>
 50845e0:	1039e71e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 50845e4:	d8802617 	ldw	r2,152(sp)
 50845e8:	d8c02017 	ldw	r3,128(sp)
 50845ec:	da000404 	addi	r8,sp,16
 50845f0:	003e4106 	br	5083ef8 <__alt_data_end+0xfffb5cf8>
 50845f4:	03014274 	movhi	r12,1289
 50845f8:	6314e984 	addi	r12,r12,21414
 50845fc:	db002b15 	stw	r12,172(sp)
 5084600:	dac02b17 	ldw	r11,172(sp)
 5084604:	1c07883a 	add	r3,r3,r16
 5084608:	10800044 	addi	r2,r2,1
 508460c:	42c00015 	stw	r11,0(r8)
 5084610:	44000115 	stw	r16,4(r8)
 5084614:	d8c02015 	stw	r3,128(sp)
 5084618:	d8801f15 	stw	r2,124(sp)
 508461c:	010001c4 	movi	r4,7
 5084620:	20bfae16 	blt	r4,r2,50844dc <__alt_data_end+0xfffb62dc>
 5084624:	42000204 	addi	r8,r8,8
 5084628:	003fb406 	br	50844fc <__alt_data_end+0xfffb62fc>
 508462c:	0021883a 	mov	r16,zero
 5084630:	003e4306 	br	5083f40 <__alt_data_end+0xfffb5d40>
 5084634:	d9002f17 	ldw	r4,188(sp)
 5084638:	b80b883a 	mov	r5,r23
 508463c:	b00d883a 	mov	r6,r22
 5084640:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084644:	1039ce1e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084648:	d8802617 	ldw	r2,152(sp)
 508464c:	db003317 	ldw	r12,204(sp)
 5084650:	d8c02017 	ldw	r3,128(sp)
 5084654:	da000404 	addi	r8,sp,16
 5084658:	6085c83a 	sub	r2,r12,r2
 508465c:	003e3706 	br	5083f3c <__alt_data_end+0xfffb5d3c>
 5084660:	00800184 	movi	r2,6
 5084664:	1240012e 	bgeu	r2,r9,508466c <___svfprintf_internal_r+0x1c0c>
 5084668:	1013883a 	mov	r9,r2
 508466c:	4825883a 	mov	r18,r9
 5084670:	4805883a 	mov	r2,r9
 5084674:	4800a416 	blt	r9,zero,5084908 <___svfprintf_internal_r+0x1ea8>
 5084678:	d8802a15 	stw	r2,168(sp)
 508467c:	00814274 	movhi	r2,1289
 5084680:	1094e704 	addi	r2,r2,21404
 5084684:	d8803115 	stw	r2,196(sp)
 5084688:	dcc02d15 	stw	r19,180(sp)
 508468c:	d8003215 	stw	zero,200(sp)
 5084690:	d8003415 	stw	zero,208(sp)
 5084694:	0005883a 	mov	r2,zero
 5084698:	003a3106 	br	5082f60 <__alt_data_end+0xfffb4d60>
 508469c:	03014274 	movhi	r12,1289
 50846a0:	6314ed84 	addi	r12,r12,21430
 50846a4:	db003615 	stw	r12,216(sp)
 50846a8:	003af406 	br	508327c <__alt_data_end+0xfffb507c>
 50846ac:	d8c02617 	ldw	r3,152(sp)
 50846b0:	00bfff44 	movi	r2,-3
 50846b4:	18801516 	blt	r3,r2,508470c <___svfprintf_internal_r+0x1cac>
 50846b8:	48c01416 	blt	r9,r3,508470c <___svfprintf_internal_r+0x1cac>
 50846bc:	d8c03415 	stw	r3,208(sp)
 50846c0:	040019c4 	movi	r16,103
 50846c4:	003f4906 	br	50843ec <__alt_data_end+0xfffb61ec>
 50846c8:	05400b44 	movi	r21,45
 50846cc:	dd402785 	stb	r21,158(sp)
 50846d0:	003b3a06 	br	50833bc <__alt_data_end+0xfffb51bc>
 50846d4:	00c00b44 	movi	r3,45
 50846d8:	d8802a15 	stw	r2,168(sp)
 50846dc:	dc402d17 	ldw	r17,180(sp)
 50846e0:	d8c02785 	stb	r3,158(sp)
 50846e4:	dcc02d15 	stw	r19,180(sp)
 50846e8:	d8003215 	stw	zero,200(sp)
 50846ec:	00800b44 	movi	r2,45
 50846f0:	003a1806 	br	5082f54 <__alt_data_end+0xfffb4d54>
 50846f4:	01014274 	movhi	r4,1289
 50846f8:	2114e984 	addi	r4,r4,21414
 50846fc:	d9002b15 	stw	r4,172(sp)
 5084700:	003cc306 	br	5083a10 <__alt_data_end+0xfffb5810>
 5084704:	5005883a 	mov	r2,r10
 5084708:	003f2d06 	br	50843c0 <__alt_data_end+0xfffb61c0>
 508470c:	843fff84 	addi	r16,r16,-2
 5084710:	1f3fffc4 	addi	fp,r3,-1
 5084714:	df002615 	stw	fp,152(sp)
 5084718:	dc0022c5 	stb	r16,139(sp)
 508471c:	e000a216 	blt	fp,zero,50849a8 <___svfprintf_internal_r+0x1f48>
 5084720:	00800ac4 	movi	r2,43
 5084724:	d8802305 	stb	r2,140(sp)
 5084728:	00800244 	movi	r2,9
 508472c:	1700820e 	bge	r2,fp,5084938 <___svfprintf_internal_r+0x1ed8>
 5084730:	dd4022c4 	addi	r21,sp,139
 5084734:	dc002b15 	stw	r16,172(sp)
 5084738:	8825883a 	mov	r18,r17
 508473c:	a821883a 	mov	r16,r21
 5084740:	4023883a 	mov	r17,r8
 5084744:	e009883a 	mov	r4,fp
 5084748:	01400284 	movi	r5,10
 508474c:	50827640 	call	5082764 <__modsi3>
 5084750:	10800c04 	addi	r2,r2,48
 5084754:	843fffc4 	addi	r16,r16,-1
 5084758:	e009883a 	mov	r4,fp
 508475c:	01400284 	movi	r5,10
 5084760:	80800005 	stb	r2,0(r16)
 5084764:	50827100 	call	5082710 <__divsi3>
 5084768:	1039883a 	mov	fp,r2
 508476c:	00800244 	movi	r2,9
 5084770:	173ff416 	blt	r2,fp,5084744 <__alt_data_end+0xfffb6544>
 5084774:	8811883a 	mov	r8,r17
 5084778:	e0800c04 	addi	r2,fp,48
 508477c:	9023883a 	mov	r17,r18
 5084780:	8025883a 	mov	r18,r16
 5084784:	913fffc4 	addi	r4,r18,-1
 5084788:	90bfffc5 	stb	r2,-1(r18)
 508478c:	dc002b17 	ldw	r16,172(sp)
 5084790:	25408e2e 	bgeu	r4,r21,50849cc <___svfprintf_internal_r+0x1f6c>
 5084794:	d9402384 	addi	r5,sp,142
 5084798:	2c8bc83a 	sub	r5,r5,r18
 508479c:	d8c02344 	addi	r3,sp,141
 50847a0:	a94b883a 	add	r5,r21,r5
 50847a4:	00000106 	br	50847ac <___svfprintf_internal_r+0x1d4c>
 50847a8:	20800003 	ldbu	r2,0(r4)
 50847ac:	18800005 	stb	r2,0(r3)
 50847b0:	18c00044 	addi	r3,r3,1
 50847b4:	21000044 	addi	r4,r4,1
 50847b8:	197ffb1e 	bne	r3,r5,50847a8 <__alt_data_end+0xfffb65a8>
 50847bc:	d8802304 	addi	r2,sp,140
 50847c0:	1485c83a 	sub	r2,r2,r18
 50847c4:	d8c02344 	addi	r3,sp,141
 50847c8:	1885883a 	add	r2,r3,r2
 50847cc:	dac03317 	ldw	r11,204(sp)
 50847d0:	156bc83a 	sub	r21,r2,r21
 50847d4:	dd403a15 	stw	r21,232(sp)
 50847d8:	00800044 	movi	r2,1
 50847dc:	5d65883a 	add	r18,r11,r21
 50847e0:	12c0770e 	bge	r2,r11,50849c0 <___svfprintf_internal_r+0x1f60>
 50847e4:	94800044 	addi	r18,r18,1
 50847e8:	9005883a 	mov	r2,r18
 50847ec:	90007216 	blt	r18,zero,50849b8 <___svfprintf_internal_r+0x1f58>
 50847f0:	d8003415 	stw	zero,208(sp)
 50847f4:	003f0506 	br	508440c <__alt_data_end+0xfffb620c>
 50847f8:	da402a15 	stw	r9,168(sp)
 50847fc:	dd402783 	ldbu	r21,158(sp)
 5084800:	4825883a 	mov	r18,r9
 5084804:	dcc02d15 	stw	r19,180(sp)
 5084808:	d8003215 	stw	zero,200(sp)
 508480c:	d8003415 	stw	zero,208(sp)
 5084810:	0039cc06 	br	5082f44 <__alt_data_end+0xfffb4d44>
 5084814:	483eb01e 	bne	r9,zero,50842d8 <__alt_data_end+0xfffb60d8>
 5084818:	9013883a 	mov	r9,r18
 508481c:	003eae06 	br	50842d8 <__alt_data_end+0xfffb60d8>
 5084820:	d9002f17 	ldw	r4,188(sp)
 5084824:	b80b883a 	mov	r5,r23
 5084828:	b00d883a 	mov	r6,r22
 508482c:	508bc6c0 	call	508bc6c <__ssprint_r>
 5084830:	1039531e 	bne	r2,zero,5082d80 <__alt_data_end+0xfffb4b80>
 5084834:	dc002617 	ldw	r16,152(sp)
 5084838:	d8c02017 	ldw	r3,128(sp)
 508483c:	d8801f17 	ldw	r2,124(sp)
 5084840:	da000404 	addi	r8,sp,16
 5084844:	003e6f06 	br	5084204 <__alt_data_end+0xfffb6004>
 5084848:	00c00b44 	movi	r3,45
 508484c:	64a0003c 	xorhi	r18,r12,32768
 5084850:	d8c02a05 	stb	r3,168(sp)
 5084854:	003ea606 	br	50842f0 <__alt_data_end+0xfffb60f0>
 5084858:	4f000044 	addi	fp,r9,1
 508485c:	003eab06 	br	508430c <__alt_data_end+0xfffb610c>
 5084860:	d8c03417 	ldw	r3,208(sp)
 5084864:	00c0410e 	bge	zero,r3,508496c <___svfprintf_internal_r+0x1f0c>
 5084868:	04800044 	movi	r18,1
 508486c:	dac03317 	ldw	r11,204(sp)
 5084870:	92e5883a 	add	r18,r18,r11
 5084874:	9005883a 	mov	r2,r18
 5084878:	903ee40e 	bge	r18,zero,508440c <__alt_data_end+0xfffb620c>
 508487c:	0005883a 	mov	r2,zero
 5084880:	003ee206 	br	508440c <__alt_data_end+0xfffb620c>
 5084884:	d8c02617 	ldw	r3,152(sp)
 5084888:	d8c03415 	stw	r3,208(sp)
 508488c:	00c0310e 	bge	zero,r3,5084954 <___svfprintf_internal_r+0x1ef4>
 5084890:	48001f1e 	bne	r9,zero,5084910 <___svfprintf_internal_r+0x1eb0>
 5084894:	8c40004c 	andi	r17,r17,1
 5084898:	88001d1e 	bne	r17,zero,5084910 <___svfprintf_internal_r+0x1eb0>
 508489c:	1805883a 	mov	r2,r3
 50848a0:	183ed90e 	bge	r3,zero,5084408 <__alt_data_end+0xfffb6208>
 50848a4:	0005883a 	mov	r2,zero
 50848a8:	003ed706 	br	5084408 <__alt_data_end+0xfffb6208>
 50848ac:	d8802117 	ldw	r2,132(sp)
 50848b0:	003ec306 	br	50843c0 <__alt_data_end+0xfffb61c0>
 50848b4:	d9003717 	ldw	r4,220(sp)
 50848b8:	900b883a 	mov	r5,r18
 50848bc:	000d883a 	mov	r6,zero
 50848c0:	000f883a 	mov	r7,zero
 50848c4:	da004015 	stw	r8,256(sp)
 50848c8:	da403f15 	stw	r9,252(sp)
 50848cc:	da803e15 	stw	r10,248(sp)
 50848d0:	50909200 	call	5090920 <__eqdf2>
 50848d4:	da004017 	ldw	r8,256(sp)
 50848d8:	da403f17 	ldw	r9,252(sp)
 50848dc:	da803e17 	ldw	r10,248(sp)
 50848e0:	103f2a26 	beq	r2,zero,508458c <__alt_data_end+0xfffb638c>
 50848e4:	00800044 	movi	r2,1
 50848e8:	1707c83a 	sub	r3,r2,fp
 50848ec:	d8c02615 	stw	r3,152(sp)
 50848f0:	003f2706 	br	5084590 <__alt_data_end+0xfffb6390>
 50848f4:	db003417 	ldw	r12,208(sp)
 50848f8:	64800044 	addi	r18,r12,1
 50848fc:	9005883a 	mov	r2,r18
 5084900:	903ec20e 	bge	r18,zero,508440c <__alt_data_end+0xfffb620c>
 5084904:	003fdd06 	br	508487c <__alt_data_end+0xfffb667c>
 5084908:	0005883a 	mov	r2,zero
 508490c:	003f5a06 	br	5084678 <__alt_data_end+0xfffb6478>
 5084910:	dac03417 	ldw	r11,208(sp)
 5084914:	4a400044 	addi	r9,r9,1
 5084918:	5a65883a 	add	r18,r11,r9
 508491c:	9005883a 	mov	r2,r18
 5084920:	903eba0e 	bge	r18,zero,508440c <__alt_data_end+0xfffb620c>
 5084924:	003fd506 	br	508487c <__alt_data_end+0xfffb667c>
 5084928:	00814274 	movhi	r2,1289
 508492c:	1094e984 	addi	r2,r2,21414
 5084930:	d8802b15 	stw	r2,172(sp)
 5084934:	003d2906 	br	5083ddc <__alt_data_end+0xfffb5bdc>
 5084938:	00800c04 	movi	r2,48
 508493c:	e0c00c04 	addi	r3,fp,48
 5084940:	d8802345 	stb	r2,141(sp)
 5084944:	d8c02385 	stb	r3,142(sp)
 5084948:	d88023c4 	addi	r2,sp,143
 508494c:	dd4022c4 	addi	r21,sp,139
 5084950:	003f9e06 	br	50847cc <__alt_data_end+0xfffb65cc>
 5084954:	4800081e 	bne	r9,zero,5084978 <___svfprintf_internal_r+0x1f18>
 5084958:	8c40004c 	andi	r17,r17,1
 508495c:	8800061e 	bne	r17,zero,5084978 <___svfprintf_internal_r+0x1f18>
 5084960:	00800044 	movi	r2,1
 5084964:	1025883a 	mov	r18,r2
 5084968:	003ea806 	br	508440c <__alt_data_end+0xfffb620c>
 508496c:	04800084 	movi	r18,2
 5084970:	90e5c83a 	sub	r18,r18,r3
 5084974:	003fbd06 	br	508486c <__alt_data_end+0xfffb666c>
 5084978:	4c800084 	addi	r18,r9,2
 508497c:	9005883a 	mov	r2,r18
 5084980:	903ea20e 	bge	r18,zero,508440c <__alt_data_end+0xfffb620c>
 5084984:	003fbd06 	br	508487c <__alt_data_end+0xfffb667c>
 5084988:	dac02d17 	ldw	r11,180(sp)
 508498c:	5a400017 	ldw	r9,0(r11)
 5084990:	5ac00104 	addi	r11,r11,4
 5084994:	dac02d15 	stw	r11,180(sp)
 5084998:	483e3f0e 	bge	r9,zero,5084298 <__alt_data_end+0xfffb6098>
 508499c:	027fffc4 	movi	r9,-1
 50849a0:	1c000047 	ldb	r16,1(r3)
 50849a4:	00388406 	br	5082bb8 <__alt_data_end+0xfffb49b8>
 50849a8:	00800b44 	movi	r2,45
 50849ac:	0739c83a 	sub	fp,zero,fp
 50849b0:	d8802305 	stb	r2,140(sp)
 50849b4:	003f5c06 	br	5084728 <__alt_data_end+0xfffb6528>
 50849b8:	0005883a 	mov	r2,zero
 50849bc:	003f8c06 	br	50847f0 <__alt_data_end+0xfffb65f0>
 50849c0:	88a2703a 	and	r17,r17,r2
 50849c4:	883f8826 	beq	r17,zero,50847e8 <__alt_data_end+0xfffb65e8>
 50849c8:	003f8606 	br	50847e4 <__alt_data_end+0xfffb65e4>
 50849cc:	d8802344 	addi	r2,sp,141
 50849d0:	003f7e06 	br	50847cc <__alt_data_end+0xfffb65cc>
 50849d4:	d8c02617 	ldw	r3,152(sp)
 50849d8:	003f4d06 	br	5084710 <__alt_data_end+0xfffb6510>
 50849dc:	dac02f17 	ldw	r11,188(sp)
 50849e0:	00800304 	movi	r2,12
 50849e4:	58800015 	stw	r2,0(r11)
 50849e8:	00bfffc4 	movi	r2,-1
 50849ec:	0038e806 	br	5082d90 <__alt_data_end+0xfffb4b90>

050849f0 <___vfprintf_internal_r>:
 50849f0:	defeb604 	addi	sp,sp,-1320
 50849f4:	dfc14915 	stw	ra,1316(sp)
 50849f8:	ddc14715 	stw	r23,1308(sp)
 50849fc:	dd814615 	stw	r22,1304(sp)
 5084a00:	282f883a 	mov	r23,r5
 5084a04:	202d883a 	mov	r22,r4
 5084a08:	d9812a15 	stw	r6,1192(sp)
 5084a0c:	d9c12d15 	stw	r7,1204(sp)
 5084a10:	df014815 	stw	fp,1312(sp)
 5084a14:	dd414515 	stw	r21,1300(sp)
 5084a18:	dd014415 	stw	r20,1296(sp)
 5084a1c:	dcc14315 	stw	r19,1292(sp)
 5084a20:	dc814215 	stw	r18,1288(sp)
 5084a24:	dc414115 	stw	r17,1284(sp)
 5084a28:	dc014015 	stw	r16,1280(sp)
 5084a2c:	50896640 	call	5089664 <_localeconv_r>
 5084a30:	10800017 	ldw	r2,0(r2)
 5084a34:	1009883a 	mov	r4,r2
 5084a38:	d8813515 	stw	r2,1236(sp)
 5084a3c:	50829c80 	call	50829c8 <strlen>
 5084a40:	d8813815 	stw	r2,1248(sp)
 5084a44:	b0000226 	beq	r22,zero,5084a50 <___vfprintf_internal_r+0x60>
 5084a48:	b0800e17 	ldw	r2,56(r22)
 5084a4c:	10010426 	beq	r2,zero,5084e60 <___vfprintf_internal_r+0x470>
 5084a50:	b8c0030b 	ldhu	r3,12(r23)
 5084a54:	1908000c 	andi	r4,r3,8192
 5084a58:	1805883a 	mov	r2,r3
 5084a5c:	2000071e 	bne	r4,zero,5084a7c <___vfprintf_internal_r+0x8c>
 5084a60:	b9001917 	ldw	r4,100(r23)
 5084a64:	18880014 	ori	r2,r3,8192
 5084a68:	00f7ffc4 	movi	r3,-8193
 5084a6c:	20c8703a 	and	r4,r4,r3
 5084a70:	b880030d 	sth	r2,12(r23)
 5084a74:	1007883a 	mov	r3,r2
 5084a78:	b9001915 	stw	r4,100(r23)
 5084a7c:	1100020c 	andi	r4,r2,8
 5084a80:	2000a726 	beq	r4,zero,5084d20 <___vfprintf_internal_r+0x330>
 5084a84:	b9000417 	ldw	r4,16(r23)
 5084a88:	2000a526 	beq	r4,zero,5084d20 <___vfprintf_internal_r+0x330>
 5084a8c:	1080068c 	andi	r2,r2,26
 5084a90:	01000284 	movi	r4,10
 5084a94:	1100ab26 	beq	r2,r4,5084d44 <___vfprintf_internal_r+0x354>
 5084a98:	dac10e04 	addi	r11,sp,1080
 5084a9c:	db010dc4 	addi	r12,sp,1079
 5084aa0:	d8800404 	addi	r2,sp,16
 5084aa4:	05014274 	movhi	r20,1289
 5084aa8:	dac12815 	stw	r11,1184(sp)
 5084aac:	5b17c83a 	sub	r11,r11,r12
 5084ab0:	a514f184 	addi	r20,r20,21446
 5084ab4:	db012915 	stw	r12,1188(sp)
 5084ab8:	d8811e15 	stw	r2,1144(sp)
 5084abc:	d8012015 	stw	zero,1152(sp)
 5084ac0:	d8011f15 	stw	zero,1148(sp)
 5084ac4:	d8013315 	stw	zero,1228(sp)
 5084ac8:	d8013715 	stw	zero,1244(sp)
 5084acc:	d8013915 	stw	zero,1252(sp)
 5084ad0:	d8013b15 	stw	zero,1260(sp)
 5084ad4:	d8013a15 	stw	zero,1256(sp)
 5084ad8:	d8012f15 	stw	zero,1212(sp)
 5084adc:	1011883a 	mov	r8,r2
 5084ae0:	dac13c15 	stw	r11,1264(sp)
 5084ae4:	db012a17 	ldw	r12,1192(sp)
 5084ae8:	60800007 	ldb	r2,0(r12)
 5084aec:	1000df26 	beq	r2,zero,5084e6c <___vfprintf_internal_r+0x47c>
 5084af0:	00c00944 	movi	r3,37
 5084af4:	10c0dd26 	beq	r2,r3,5084e6c <___vfprintf_internal_r+0x47c>
 5084af8:	6021883a 	mov	r16,r12
 5084afc:	00000106 	br	5084b04 <___vfprintf_internal_r+0x114>
 5084b00:	10c08426 	beq	r2,r3,5084d14 <___vfprintf_internal_r+0x324>
 5084b04:	84000044 	addi	r16,r16,1
 5084b08:	80800007 	ldb	r2,0(r16)
 5084b0c:	103ffc1e 	bne	r2,zero,5084b00 <__alt_data_end+0xfffb6900>
 5084b10:	dac12a17 	ldw	r11,1192(sp)
 5084b14:	82e3c83a 	sub	r17,r16,r11
 5084b18:	88000f26 	beq	r17,zero,5084b58 <___vfprintf_internal_r+0x168>
 5084b1c:	d8c12017 	ldw	r3,1152(sp)
 5084b20:	d8811f17 	ldw	r2,1148(sp)
 5084b24:	dac12a17 	ldw	r11,1192(sp)
 5084b28:	1c47883a 	add	r3,r3,r17
 5084b2c:	10800044 	addi	r2,r2,1
 5084b30:	d8c12015 	stw	r3,1152(sp)
 5084b34:	42c00015 	stw	r11,0(r8)
 5084b38:	44400115 	stw	r17,4(r8)
 5084b3c:	d8811f15 	stw	r2,1148(sp)
 5084b40:	00c001c4 	movi	r3,7
 5084b44:	1880b416 	blt	r3,r2,5084e18 <___vfprintf_internal_r+0x428>
 5084b48:	42000204 	addi	r8,r8,8
 5084b4c:	db012f17 	ldw	r12,1212(sp)
 5084b50:	6459883a 	add	r12,r12,r17
 5084b54:	db012f15 	stw	r12,1212(sp)
 5084b58:	80800007 	ldb	r2,0(r16)
 5084b5c:	1000b526 	beq	r2,zero,5084e34 <___vfprintf_internal_r+0x444>
 5084b60:	80800044 	addi	r2,r16,1
 5084b64:	84000047 	ldb	r16,1(r16)
 5084b68:	d8012785 	stb	zero,1182(sp)
 5084b6c:	000d883a 	mov	r6,zero
 5084b70:	027fffc4 	movi	r9,-1
 5084b74:	d8012e15 	stw	zero,1208(sp)
 5084b78:	0023883a 	mov	r17,zero
 5084b7c:	01001604 	movi	r4,88
 5084b80:	01400244 	movi	r5,9
 5084b84:	02800a84 	movi	r10,42
 5084b88:	01c01b04 	movi	r7,108
 5084b8c:	10c00044 	addi	r3,r2,1
 5084b90:	80bff804 	addi	r2,r16,-32
 5084b94:	2082f236 	bltu	r4,r2,5085760 <___vfprintf_internal_r+0xd70>
 5084b98:	100490ba 	slli	r2,r2,2
 5084b9c:	02c14234 	movhi	r11,1288
 5084ba0:	5ad2ec04 	addi	r11,r11,19376
 5084ba4:	12c5883a 	add	r2,r2,r11
 5084ba8:	10800017 	ldw	r2,0(r2)
 5084bac:	1000683a 	jmp	r2
 5084bb0:	050855a8 	cmpgeui	r20,zero,8534
 5084bb4:	05085760 	cmpeqi	r20,zero,8541
 5084bb8:	05085760 	cmpeqi	r20,zero,8541
 5084bbc:	050855c8 	cmpgei	r20,zero,8535
 5084bc0:	05085760 	cmpeqi	r20,zero,8541
 5084bc4:	05085760 	cmpeqi	r20,zero,8541
 5084bc8:	05085760 	cmpeqi	r20,zero,8541
 5084bcc:	05085760 	cmpeqi	r20,zero,8541
 5084bd0:	05085760 	cmpeqi	r20,zero,8541
 5084bd4:	05085760 	cmpeqi	r20,zero,8541
 5084bd8:	05085724 	muli	r20,zero,8540
 5084bdc:	05085750 	cmplti	r20,zero,8541
 5084be0:	05085760 	cmpeqi	r20,zero,8541
 5084be4:	05084e74 	movhi	r20,8505
 5084be8:	05084e84 	movi	r20,8506
 5084bec:	05085760 	cmpeqi	r20,zero,8541
 5084bf0:	05084ec4 	movi	r20,8507
 5084bf4:	050853b8 	rdprs	r20,zero,8526
 5084bf8:	050853b8 	rdprs	r20,zero,8526
 5084bfc:	050853b8 	rdprs	r20,zero,8526
 5084c00:	050853b8 	rdprs	r20,zero,8526
 5084c04:	050853b8 	rdprs	r20,zero,8526
 5084c08:	050853b8 	rdprs	r20,zero,8526
 5084c0c:	050853b8 	rdprs	r20,zero,8526
 5084c10:	050853b8 	rdprs	r20,zero,8526
 5084c14:	050853b8 	rdprs	r20,zero,8526
 5084c18:	05085760 	cmpeqi	r20,zero,8541
 5084c1c:	05085760 	cmpeqi	r20,zero,8541
 5084c20:	05085760 	cmpeqi	r20,zero,8541
 5084c24:	05085760 	cmpeqi	r20,zero,8541
 5084c28:	05085760 	cmpeqi	r20,zero,8541
 5084c2c:	05085760 	cmpeqi	r20,zero,8541
 5084c30:	05085760 	cmpeqi	r20,zero,8541
 5084c34:	05085760 	cmpeqi	r20,zero,8541
 5084c38:	05085760 	cmpeqi	r20,zero,8541
 5084c3c:	05085760 	cmpeqi	r20,zero,8541
 5084c40:	050853ec 	andhi	r20,zero,8527
 5084c44:	05084ed4 	movui	r20,8507
 5084c48:	05085760 	cmpeqi	r20,zero,8541
 5084c4c:	05084ed4 	movui	r20,8507
 5084c50:	05085760 	cmpeqi	r20,zero,8541
 5084c54:	05085760 	cmpeqi	r20,zero,8541
 5084c58:	05085760 	cmpeqi	r20,zero,8541
 5084c5c:	05085760 	cmpeqi	r20,zero,8541
 5084c60:	05084f78 	rdprs	r20,zero,8509
 5084c64:	05085760 	cmpeqi	r20,zero,8541
 5084c68:	05085760 	cmpeqi	r20,zero,8541
 5084c6c:	05084f88 	cmpgei	r20,zero,8510
 5084c70:	05085760 	cmpeqi	r20,zero,8541
 5084c74:	05085760 	cmpeqi	r20,zero,8541
 5084c78:	05085760 	cmpeqi	r20,zero,8541
 5084c7c:	05085760 	cmpeqi	r20,zero,8541
 5084c80:	05085760 	cmpeqi	r20,zero,8541
 5084c84:	05085384 	movi	r20,8526
 5084c88:	05085760 	cmpeqi	r20,zero,8541
 5084c8c:	05085760 	cmpeqi	r20,zero,8541
 5084c90:	05085434 	movhi	r20,8528
 5084c94:	05085760 	cmpeqi	r20,zero,8541
 5084c98:	05085760 	cmpeqi	r20,zero,8541
 5084c9c:	05085760 	cmpeqi	r20,zero,8541
 5084ca0:	05085760 	cmpeqi	r20,zero,8541
 5084ca4:	05085760 	cmpeqi	r20,zero,8541
 5084ca8:	05085760 	cmpeqi	r20,zero,8541
 5084cac:	05085760 	cmpeqi	r20,zero,8541
 5084cb0:	05085760 	cmpeqi	r20,zero,8541
 5084cb4:	05085760 	cmpeqi	r20,zero,8541
 5084cb8:	05085760 	cmpeqi	r20,zero,8541
 5084cbc:	05085628 	cmpgeui	r20,zero,8536
 5084cc0:	050855d8 	cmpnei	r20,zero,8535
 5084cc4:	05084ed4 	movui	r20,8507
 5084cc8:	05084ed4 	movui	r20,8507
 5084ccc:	05084ed4 	movui	r20,8507
 5084cd0:	05085618 	cmpnei	r20,zero,8536
 5084cd4:	050855d8 	cmpnei	r20,zero,8535
 5084cd8:	05085760 	cmpeqi	r20,zero,8541
 5084cdc:	05085760 	cmpeqi	r20,zero,8541
 5084ce0:	05085520 	cmpeqi	r20,zero,8532
 5084ce4:	05085760 	cmpeqi	r20,zero,8541
 5084ce8:	05085534 	movhi	r20,8532
 5084cec:	05085568 	cmpgeui	r20,zero,8533
 5084cf0:	05085668 	cmpgeui	r20,zero,8537
 5084cf4:	05085490 	cmplti	r20,zero,8530
 5084cf8:	05085760 	cmpeqi	r20,zero,8541
 5084cfc:	050856b0 	cmpltui	r20,zero,8538
 5084d00:	05085760 	cmpeqi	r20,zero,8541
 5084d04:	050854a0 	cmpeqi	r20,zero,8530
 5084d08:	05085760 	cmpeqi	r20,zero,8541
 5084d0c:	05085760 	cmpeqi	r20,zero,8541
 5084d10:	050854e0 	cmpeqi	r20,zero,8531
 5084d14:	db012a17 	ldw	r12,1192(sp)
 5084d18:	8323c83a 	sub	r17,r16,r12
 5084d1c:	003f7e06 	br	5084b18 <__alt_data_end+0xfffb6918>
 5084d20:	b009883a 	mov	r4,r22
 5084d24:	b80b883a 	mov	r5,r23
 5084d28:	5086b400 	call	5086b40 <__swsetup_r>
 5084d2c:	10002d1e 	bne	r2,zero,5084de4 <___vfprintf_internal_r+0x3f4>
 5084d30:	b8c0030b 	ldhu	r3,12(r23)
 5084d34:	01000284 	movi	r4,10
 5084d38:	1805883a 	mov	r2,r3
 5084d3c:	1080068c 	andi	r2,r2,26
 5084d40:	113f551e 	bne	r2,r4,5084a98 <__alt_data_end+0xfffb6898>
 5084d44:	b880038b 	ldhu	r2,14(r23)
 5084d48:	113fffcc 	andi	r4,r2,65535
 5084d4c:	2120001c 	xori	r4,r4,32768
 5084d50:	21200004 	addi	r4,r4,-32768
 5084d54:	203f5016 	blt	r4,zero,5084a98 <__alt_data_end+0xfffb6898>
 5084d58:	bac01917 	ldw	r11,100(r23)
 5084d5c:	ba800717 	ldw	r10,28(r23)
 5084d60:	ba400917 	ldw	r9,36(r23)
 5084d64:	d9812a17 	ldw	r6,1192(sp)
 5084d68:	d9c12d17 	ldw	r7,1204(sp)
 5084d6c:	02010004 	movi	r8,1024
 5084d70:	18ffff4c 	andi	r3,r3,65533
 5084d74:	d881078d 	sth	r2,1054(sp)
 5084d78:	b009883a 	mov	r4,r22
 5084d7c:	d8800404 	addi	r2,sp,16
 5084d80:	d9410404 	addi	r5,sp,1040
 5084d84:	d8c1070d 	sth	r3,1052(sp)
 5084d88:	dac11d15 	stw	r11,1140(sp)
 5084d8c:	da810b15 	stw	r10,1068(sp)
 5084d90:	da410d15 	stw	r9,1076(sp)
 5084d94:	d8810415 	stw	r2,1040(sp)
 5084d98:	d8810815 	stw	r2,1056(sp)
 5084d9c:	da010615 	stw	r8,1048(sp)
 5084da0:	da010915 	stw	r8,1060(sp)
 5084da4:	d8010a15 	stw	zero,1064(sp)
 5084da8:	50849f00 	call	50849f0 <___vfprintf_internal_r>
 5084dac:	1021883a 	mov	r16,r2
 5084db0:	10000416 	blt	r2,zero,5084dc4 <___vfprintf_internal_r+0x3d4>
 5084db4:	b009883a 	mov	r4,r22
 5084db8:	d9410404 	addi	r5,sp,1040
 5084dbc:	50885980 	call	5088598 <_fflush_r>
 5084dc0:	1006ee1e 	bne	r2,zero,508697c <___vfprintf_internal_r+0x1f8c>
 5084dc4:	d881070b 	ldhu	r2,1052(sp)
 5084dc8:	1080100c 	andi	r2,r2,64
 5084dcc:	10000326 	beq	r2,zero,5084ddc <___vfprintf_internal_r+0x3ec>
 5084dd0:	b880030b 	ldhu	r2,12(r23)
 5084dd4:	10801014 	ori	r2,r2,64
 5084dd8:	b880030d 	sth	r2,12(r23)
 5084ddc:	8005883a 	mov	r2,r16
 5084de0:	00000106 	br	5084de8 <___vfprintf_internal_r+0x3f8>
 5084de4:	00bfffc4 	movi	r2,-1
 5084de8:	dfc14917 	ldw	ra,1316(sp)
 5084dec:	df014817 	ldw	fp,1312(sp)
 5084df0:	ddc14717 	ldw	r23,1308(sp)
 5084df4:	dd814617 	ldw	r22,1304(sp)
 5084df8:	dd414517 	ldw	r21,1300(sp)
 5084dfc:	dd014417 	ldw	r20,1296(sp)
 5084e00:	dcc14317 	ldw	r19,1292(sp)
 5084e04:	dc814217 	ldw	r18,1288(sp)
 5084e08:	dc414117 	ldw	r17,1284(sp)
 5084e0c:	dc014017 	ldw	r16,1280(sp)
 5084e10:	dec14a04 	addi	sp,sp,1320
 5084e14:	f800283a 	ret
 5084e18:	b009883a 	mov	r4,r22
 5084e1c:	b80b883a 	mov	r5,r23
 5084e20:	d9811e04 	addi	r6,sp,1144
 5084e24:	508cf980 	call	508cf98 <__sprint_r>
 5084e28:	1000081e 	bne	r2,zero,5084e4c <___vfprintf_internal_r+0x45c>
 5084e2c:	da000404 	addi	r8,sp,16
 5084e30:	003f4606 	br	5084b4c <__alt_data_end+0xfffb694c>
 5084e34:	d8812017 	ldw	r2,1152(sp)
 5084e38:	10000426 	beq	r2,zero,5084e4c <___vfprintf_internal_r+0x45c>
 5084e3c:	b009883a 	mov	r4,r22
 5084e40:	b80b883a 	mov	r5,r23
 5084e44:	d9811e04 	addi	r6,sp,1144
 5084e48:	508cf980 	call	508cf98 <__sprint_r>
 5084e4c:	b880030b 	ldhu	r2,12(r23)
 5084e50:	1080100c 	andi	r2,r2,64
 5084e54:	103fe31e 	bne	r2,zero,5084de4 <__alt_data_end+0xfffb6be4>
 5084e58:	d8812f17 	ldw	r2,1212(sp)
 5084e5c:	003fe206 	br	5084de8 <__alt_data_end+0xfffb6be8>
 5084e60:	b009883a 	mov	r4,r22
 5084e64:	5088b400 	call	5088b40 <__sinit>
 5084e68:	003ef906 	br	5084a50 <__alt_data_end+0xfffb6850>
 5084e6c:	dc012a17 	ldw	r16,1192(sp)
 5084e70:	003f3906 	br	5084b58 <__alt_data_end+0xfffb6958>
 5084e74:	1805883a 	mov	r2,r3
 5084e78:	8c400114 	ori	r17,r17,4
 5084e7c:	1c000007 	ldb	r16,0(r3)
 5084e80:	003f4206 	br	5084b8c <__alt_data_end+0xfffb698c>
 5084e84:	1c000007 	ldb	r16,0(r3)
 5084e88:	18800044 	addi	r2,r3,1
 5084e8c:	8286b326 	beq	r16,r10,508695c <___vfprintf_internal_r+0x1f6c>
 5084e90:	82fff404 	addi	r11,r16,-48
 5084e94:	1007883a 	mov	r3,r2
 5084e98:	0013883a 	mov	r9,zero
 5084e9c:	2aff3c36 	bltu	r5,r11,5084b90 <__alt_data_end+0xfffb6990>
 5084ea0:	1c000007 	ldb	r16,0(r3)
 5084ea4:	4a4002a4 	muli	r9,r9,10
 5084ea8:	18c00044 	addi	r3,r3,1
 5084eac:	5a53883a 	add	r9,r11,r9
 5084eb0:	82fff404 	addi	r11,r16,-48
 5084eb4:	2afffa2e 	bgeu	r5,r11,5084ea0 <__alt_data_end+0xfffb6ca0>
 5084eb8:	483f350e 	bge	r9,zero,5084b90 <__alt_data_end+0xfffb6990>
 5084ebc:	027fffc4 	movi	r9,-1
 5084ec0:	003f3306 	br	5084b90 <__alt_data_end+0xfffb6990>
 5084ec4:	8c402014 	ori	r17,r17,128
 5084ec8:	1805883a 	mov	r2,r3
 5084ecc:	1c000007 	ldb	r16,0(r3)
 5084ed0:	003f2e06 	br	5084b8c <__alt_data_end+0xfffb698c>
 5084ed4:	db012d17 	ldw	r12,1204(sp)
 5084ed8:	dac12d17 	ldw	r11,1204(sp)
 5084edc:	d8c12a15 	stw	r3,1192(sp)
 5084ee0:	63000017 	ldw	r12,0(r12)
 5084ee4:	5ac00117 	ldw	r11,4(r11)
 5084ee8:	d9812785 	stb	r6,1182(sp)
 5084eec:	6009883a 	mov	r4,r12
 5084ef0:	580b883a 	mov	r5,r11
 5084ef4:	db013715 	stw	r12,1244(sp)
 5084ef8:	da013f15 	stw	r8,1276(sp)
 5084efc:	da413e15 	stw	r9,1272(sp)
 5084f00:	dac13915 	stw	r11,1252(sp)
 5084f04:	508b9c40 	call	508b9c4 <__fpclassifyd>
 5084f08:	db012d17 	ldw	r12,1204(sp)
 5084f0c:	04800044 	movi	r18,1
 5084f10:	da013f17 	ldw	r8,1276(sp)
 5084f14:	64c00204 	addi	r19,r12,8
 5084f18:	da413e17 	ldw	r9,1272(sp)
 5084f1c:	d9013717 	ldw	r4,1244(sp)
 5084f20:	d9413917 	ldw	r5,1252(sp)
 5084f24:	1484581e 	bne	r2,r18,5086088 <___vfprintf_internal_r+0x1698>
 5084f28:	000d883a 	mov	r6,zero
 5084f2c:	000f883a 	mov	r7,zero
 5084f30:	5090a840 	call	5090a84 <__ledf2>
 5084f34:	da013f17 	ldw	r8,1276(sp)
 5084f38:	1005ef16 	blt	r2,zero,50866f8 <___vfprintf_internal_r+0x1d08>
 5084f3c:	dd412783 	ldbu	r21,1182(sp)
 5084f40:	008011c4 	movi	r2,71
 5084f44:	14053b0e 	bge	r2,r16,5086434 <___vfprintf_internal_r+0x1a44>
 5084f48:	00c14274 	movhi	r3,1289
 5084f4c:	18d4da04 	addi	r3,r3,21352
 5084f50:	d8c13115 	stw	r3,1220(sp)
 5084f54:	02c000c4 	movi	r11,3
 5084f58:	00bfdfc4 	movi	r2,-129
 5084f5c:	dac12b15 	stw	r11,1196(sp)
 5084f60:	88a2703a 	and	r17,r17,r2
 5084f64:	dcc12d15 	stw	r19,1204(sp)
 5084f68:	5825883a 	mov	r18,r11
 5084f6c:	d8013215 	stw	zero,1224(sp)
 5084f70:	d8013415 	stw	zero,1232(sp)
 5084f74:	00003206 	br	5085040 <___vfprintf_internal_r+0x650>
 5084f78:	8c400214 	ori	r17,r17,8
 5084f7c:	1805883a 	mov	r2,r3
 5084f80:	1c000007 	ldb	r16,0(r3)
 5084f84:	003f0106 	br	5084b8c <__alt_data_end+0xfffb698c>
 5084f88:	8c400414 	ori	r17,r17,16
 5084f8c:	d8c12a15 	stw	r3,1192(sp)
 5084f90:	88c0080c 	andi	r3,r17,32
 5084f94:	d8812d17 	ldw	r2,1204(sp)
 5084f98:	18017726 	beq	r3,zero,5085578 <___vfprintf_internal_r+0xb88>
 5084f9c:	db012d17 	ldw	r12,1204(sp)
 5084fa0:	14c00017 	ldw	r19,0(r2)
 5084fa4:	17000117 	ldw	fp,4(r2)
 5084fa8:	63000204 	addi	r12,r12,8
 5084fac:	db012d15 	stw	r12,1204(sp)
 5084fb0:	0005883a 	mov	r2,zero
 5084fb4:	9f06b03a 	or	r3,r19,fp
 5084fb8:	d8012785 	stb	zero,1182(sp)
 5084fbc:	da413215 	stw	r9,1224(sp)
 5084fc0:	002b883a 	mov	r21,zero
 5084fc4:	48000216 	blt	r9,zero,5084fd0 <___vfprintf_internal_r+0x5e0>
 5084fc8:	013fdfc4 	movi	r4,-129
 5084fcc:	8922703a 	and	r17,r17,r4
 5084fd0:	1801ed1e 	bne	r3,zero,5085788 <___vfprintf_internal_r+0xd98>
 5084fd4:	4802e026 	beq	r9,zero,5085b58 <___vfprintf_internal_r+0x1168>
 5084fd8:	10803fcc 	andi	r2,r2,255
 5084fdc:	00c00044 	movi	r3,1
 5084fe0:	10c20f26 	beq	r2,r3,5085820 <___vfprintf_internal_r+0xe30>
 5084fe4:	00c00084 	movi	r3,2
 5084fe8:	10c2fd26 	beq	r2,r3,5085be0 <___vfprintf_internal_r+0x11f0>
 5084fec:	d8c10e04 	addi	r3,sp,1080
 5084ff0:	9808d0fa 	srli	r4,r19,3
 5084ff4:	e00a977a 	slli	r5,fp,29
 5084ff8:	e038d0fa 	srli	fp,fp,3
 5084ffc:	9cc001cc 	andi	r19,r19,7
 5085000:	98800c04 	addi	r2,r19,48
 5085004:	18ffffc4 	addi	r3,r3,-1
 5085008:	2926b03a 	or	r19,r5,r4
 508500c:	18800005 	stb	r2,0(r3)
 5085010:	9f08b03a 	or	r4,r19,fp
 5085014:	203ff61e 	bne	r4,zero,5084ff0 <__alt_data_end+0xfffb6df0>
 5085018:	8900004c 	andi	r4,r17,1
 508501c:	d8c13115 	stw	r3,1220(sp)
 5085020:	2003791e 	bne	r4,zero,5085e08 <___vfprintf_internal_r+0x1418>
 5085024:	dac12817 	ldw	r11,1184(sp)
 5085028:	58e5c83a 	sub	r18,r11,r3
 508502c:	9005883a 	mov	r2,r18
 5085030:	9240010e 	bge	r18,r9,5085038 <___vfprintf_internal_r+0x648>
 5085034:	4805883a 	mov	r2,r9
 5085038:	d8812b15 	stw	r2,1196(sp)
 508503c:	d8013415 	stw	zero,1232(sp)
 5085040:	a8803fcc 	andi	r2,r21,255
 5085044:	1080201c 	xori	r2,r2,128
 5085048:	10bfe004 	addi	r2,r2,-128
 508504c:	10000326 	beq	r2,zero,508505c <___vfprintf_internal_r+0x66c>
 5085050:	db012b17 	ldw	r12,1196(sp)
 5085054:	63000044 	addi	r12,r12,1
 5085058:	db012b15 	stw	r12,1196(sp)
 508505c:	88c0008c 	andi	r3,r17,2
 5085060:	d8c12c15 	stw	r3,1200(sp)
 5085064:	18000326 	beq	r3,zero,5085074 <___vfprintf_internal_r+0x684>
 5085068:	dac12b17 	ldw	r11,1196(sp)
 508506c:	5ac00084 	addi	r11,r11,2
 5085070:	dac12b15 	stw	r11,1196(sp)
 5085074:	8b00210c 	andi	r12,r17,132
 5085078:	db013015 	stw	r12,1216(sp)
 508507c:	6001c01e 	bne	r12,zero,5085780 <___vfprintf_internal_r+0xd90>
 5085080:	dac12e17 	ldw	r11,1208(sp)
 5085084:	db012b17 	ldw	r12,1196(sp)
 5085088:	5b39c83a 	sub	fp,r11,r12
 508508c:	0701bc0e 	bge	zero,fp,5085780 <___vfprintf_internal_r+0xd90>
 5085090:	02400404 	movi	r9,16
 5085094:	d8c12017 	ldw	r3,1152(sp)
 5085098:	d8811f17 	ldw	r2,1148(sp)
 508509c:	4f05220e 	bge	r9,fp,5086528 <___vfprintf_internal_r+0x1b38>
 50850a0:	01414274 	movhi	r5,1289
 50850a4:	2954f584 	addi	r5,r5,21462
 50850a8:	d9413615 	stw	r5,1240(sp)
 50850ac:	482b883a 	mov	r21,r9
 50850b0:	04c001c4 	movi	r19,7
 50850b4:	00000306 	br	50850c4 <___vfprintf_internal_r+0x6d4>
 50850b8:	e73ffc04 	addi	fp,fp,-16
 50850bc:	42000204 	addi	r8,r8,8
 50850c0:	af00130e 	bge	r21,fp,5085110 <___vfprintf_internal_r+0x720>
 50850c4:	02c14274 	movhi	r11,1289
 50850c8:	18c00404 	addi	r3,r3,16
 50850cc:	10800044 	addi	r2,r2,1
 50850d0:	5ad4f584 	addi	r11,r11,21462
 50850d4:	42c00015 	stw	r11,0(r8)
 50850d8:	45400115 	stw	r21,4(r8)
 50850dc:	d8c12015 	stw	r3,1152(sp)
 50850e0:	d8811f15 	stw	r2,1148(sp)
 50850e4:	98bff40e 	bge	r19,r2,50850b8 <__alt_data_end+0xfffb6eb8>
 50850e8:	b009883a 	mov	r4,r22
 50850ec:	b80b883a 	mov	r5,r23
 50850f0:	d9811e04 	addi	r6,sp,1144
 50850f4:	508cf980 	call	508cf98 <__sprint_r>
 50850f8:	103f541e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50850fc:	e73ffc04 	addi	fp,fp,-16
 5085100:	d8c12017 	ldw	r3,1152(sp)
 5085104:	d8811f17 	ldw	r2,1148(sp)
 5085108:	da000404 	addi	r8,sp,16
 508510c:	af3fed16 	blt	r21,fp,50850c4 <__alt_data_end+0xfffb6ec4>
 5085110:	db013617 	ldw	r12,1240(sp)
 5085114:	e0c7883a 	add	r3,fp,r3
 5085118:	10800044 	addi	r2,r2,1
 508511c:	43000015 	stw	r12,0(r8)
 5085120:	47000115 	stw	fp,4(r8)
 5085124:	d8c12015 	stw	r3,1152(sp)
 5085128:	d8811f15 	stw	r2,1148(sp)
 508512c:	010001c4 	movi	r4,7
 5085130:	2082f416 	blt	r4,r2,5085d04 <___vfprintf_internal_r+0x1314>
 5085134:	d8812787 	ldb	r2,1182(sp)
 5085138:	42000204 	addi	r8,r8,8
 508513c:	10000c26 	beq	r2,zero,5085170 <___vfprintf_internal_r+0x780>
 5085140:	d8811f17 	ldw	r2,1148(sp)
 5085144:	d9012784 	addi	r4,sp,1182
 5085148:	18c00044 	addi	r3,r3,1
 508514c:	10800044 	addi	r2,r2,1
 5085150:	41000015 	stw	r4,0(r8)
 5085154:	01000044 	movi	r4,1
 5085158:	41000115 	stw	r4,4(r8)
 508515c:	d8c12015 	stw	r3,1152(sp)
 5085160:	d8811f15 	stw	r2,1148(sp)
 5085164:	010001c4 	movi	r4,7
 5085168:	20828d16 	blt	r4,r2,5085ba0 <___vfprintf_internal_r+0x11b0>
 508516c:	42000204 	addi	r8,r8,8
 5085170:	dac12c17 	ldw	r11,1200(sp)
 5085174:	58000c26 	beq	r11,zero,50851a8 <___vfprintf_internal_r+0x7b8>
 5085178:	d8811f17 	ldw	r2,1148(sp)
 508517c:	d9012704 	addi	r4,sp,1180
 5085180:	18c00084 	addi	r3,r3,2
 5085184:	10800044 	addi	r2,r2,1
 5085188:	41000015 	stw	r4,0(r8)
 508518c:	01000084 	movi	r4,2
 5085190:	41000115 	stw	r4,4(r8)
 5085194:	d8c12015 	stw	r3,1152(sp)
 5085198:	d8811f15 	stw	r2,1148(sp)
 508519c:	010001c4 	movi	r4,7
 50851a0:	20828716 	blt	r4,r2,5085bc0 <___vfprintf_internal_r+0x11d0>
 50851a4:	42000204 	addi	r8,r8,8
 50851a8:	db013017 	ldw	r12,1216(sp)
 50851ac:	00802004 	movi	r2,128
 50851b0:	6081e926 	beq	r12,r2,5085958 <___vfprintf_internal_r+0xf68>
 50851b4:	db013217 	ldw	r12,1224(sp)
 50851b8:	64abc83a 	sub	r21,r12,r18
 50851bc:	0540260e 	bge	zero,r21,5085258 <___vfprintf_internal_r+0x868>
 50851c0:	07000404 	movi	fp,16
 50851c4:	d8811f17 	ldw	r2,1148(sp)
 50851c8:	e5443d0e 	bge	fp,r21,50862c0 <___vfprintf_internal_r+0x18d0>
 50851cc:	01414274 	movhi	r5,1289
 50851d0:	2954f184 	addi	r5,r5,21446
 50851d4:	d9412c15 	stw	r5,1200(sp)
 50851d8:	04c001c4 	movi	r19,7
 50851dc:	00000306 	br	50851ec <___vfprintf_internal_r+0x7fc>
 50851e0:	ad7ffc04 	addi	r21,r21,-16
 50851e4:	42000204 	addi	r8,r8,8
 50851e8:	e540110e 	bge	fp,r21,5085230 <___vfprintf_internal_r+0x840>
 50851ec:	18c00404 	addi	r3,r3,16
 50851f0:	10800044 	addi	r2,r2,1
 50851f4:	45000015 	stw	r20,0(r8)
 50851f8:	47000115 	stw	fp,4(r8)
 50851fc:	d8c12015 	stw	r3,1152(sp)
 5085200:	d8811f15 	stw	r2,1148(sp)
 5085204:	98bff60e 	bge	r19,r2,50851e0 <__alt_data_end+0xfffb6fe0>
 5085208:	b009883a 	mov	r4,r22
 508520c:	b80b883a 	mov	r5,r23
 5085210:	d9811e04 	addi	r6,sp,1144
 5085214:	508cf980 	call	508cf98 <__sprint_r>
 5085218:	103f0c1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 508521c:	ad7ffc04 	addi	r21,r21,-16
 5085220:	d8c12017 	ldw	r3,1152(sp)
 5085224:	d8811f17 	ldw	r2,1148(sp)
 5085228:	da000404 	addi	r8,sp,16
 508522c:	e57fef16 	blt	fp,r21,50851ec <__alt_data_end+0xfffb6fec>
 5085230:	dac12c17 	ldw	r11,1200(sp)
 5085234:	1d47883a 	add	r3,r3,r21
 5085238:	10800044 	addi	r2,r2,1
 508523c:	42c00015 	stw	r11,0(r8)
 5085240:	45400115 	stw	r21,4(r8)
 5085244:	d8c12015 	stw	r3,1152(sp)
 5085248:	d8811f15 	stw	r2,1148(sp)
 508524c:	010001c4 	movi	r4,7
 5085250:	20824b16 	blt	r4,r2,5085b80 <___vfprintf_internal_r+0x1190>
 5085254:	42000204 	addi	r8,r8,8
 5085258:	8880400c 	andi	r2,r17,256
 508525c:	1001761e 	bne	r2,zero,5085838 <___vfprintf_internal_r+0xe48>
 5085260:	d8811f17 	ldw	r2,1148(sp)
 5085264:	db013117 	ldw	r12,1220(sp)
 5085268:	1c87883a 	add	r3,r3,r18
 508526c:	10800044 	addi	r2,r2,1
 5085270:	43000015 	stw	r12,0(r8)
 5085274:	44800115 	stw	r18,4(r8)
 5085278:	d8c12015 	stw	r3,1152(sp)
 508527c:	d8811f15 	stw	r2,1148(sp)
 5085280:	010001c4 	movi	r4,7
 5085284:	20822616 	blt	r4,r2,5085b20 <___vfprintf_internal_r+0x1130>
 5085288:	42000204 	addi	r8,r8,8
 508528c:	8c40010c 	andi	r17,r17,4
 5085290:	88003126 	beq	r17,zero,5085358 <___vfprintf_internal_r+0x968>
 5085294:	db012e17 	ldw	r12,1208(sp)
 5085298:	dac12b17 	ldw	r11,1196(sp)
 508529c:	62e1c83a 	sub	r16,r12,r11
 50852a0:	04002d0e 	bge	zero,r16,5085358 <___vfprintf_internal_r+0x968>
 50852a4:	04400404 	movi	r17,16
 50852a8:	d8811f17 	ldw	r2,1148(sp)
 50852ac:	8c04df0e 	bge	r17,r16,508662c <___vfprintf_internal_r+0x1c3c>
 50852b0:	01014274 	movhi	r4,1289
 50852b4:	2114f584 	addi	r4,r4,21462
 50852b8:	d9013615 	stw	r4,1240(sp)
 50852bc:	048001c4 	movi	r18,7
 50852c0:	00000306 	br	50852d0 <___vfprintf_internal_r+0x8e0>
 50852c4:	843ffc04 	addi	r16,r16,-16
 50852c8:	42000204 	addi	r8,r8,8
 50852cc:	8c00130e 	bge	r17,r16,508531c <___vfprintf_internal_r+0x92c>
 50852d0:	01414274 	movhi	r5,1289
 50852d4:	18c00404 	addi	r3,r3,16
 50852d8:	10800044 	addi	r2,r2,1
 50852dc:	2954f584 	addi	r5,r5,21462
 50852e0:	41400015 	stw	r5,0(r8)
 50852e4:	44400115 	stw	r17,4(r8)
 50852e8:	d8c12015 	stw	r3,1152(sp)
 50852ec:	d8811f15 	stw	r2,1148(sp)
 50852f0:	90bff40e 	bge	r18,r2,50852c4 <__alt_data_end+0xfffb70c4>
 50852f4:	b009883a 	mov	r4,r22
 50852f8:	b80b883a 	mov	r5,r23
 50852fc:	d9811e04 	addi	r6,sp,1144
 5085300:	508cf980 	call	508cf98 <__sprint_r>
 5085304:	103ed11e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085308:	843ffc04 	addi	r16,r16,-16
 508530c:	d8c12017 	ldw	r3,1152(sp)
 5085310:	d8811f17 	ldw	r2,1148(sp)
 5085314:	da000404 	addi	r8,sp,16
 5085318:	8c3fed16 	blt	r17,r16,50852d0 <__alt_data_end+0xfffb70d0>
 508531c:	dac13617 	ldw	r11,1240(sp)
 5085320:	1c07883a 	add	r3,r3,r16
 5085324:	10800044 	addi	r2,r2,1
 5085328:	42c00015 	stw	r11,0(r8)
 508532c:	44000115 	stw	r16,4(r8)
 5085330:	d8c12015 	stw	r3,1152(sp)
 5085334:	d8811f15 	stw	r2,1148(sp)
 5085338:	010001c4 	movi	r4,7
 508533c:	2080060e 	bge	r4,r2,5085358 <___vfprintf_internal_r+0x968>
 5085340:	b009883a 	mov	r4,r22
 5085344:	b80b883a 	mov	r5,r23
 5085348:	d9811e04 	addi	r6,sp,1144
 508534c:	508cf980 	call	508cf98 <__sprint_r>
 5085350:	103ebe1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085354:	d8c12017 	ldw	r3,1152(sp)
 5085358:	d8812b17 	ldw	r2,1196(sp)
 508535c:	db012e17 	ldw	r12,1208(sp)
 5085360:	1300010e 	bge	r2,r12,5085368 <___vfprintf_internal_r+0x978>
 5085364:	6005883a 	mov	r2,r12
 5085368:	dac12f17 	ldw	r11,1212(sp)
 508536c:	5897883a 	add	r11,r11,r2
 5085370:	dac12f15 	stw	r11,1212(sp)
 5085374:	1801f21e 	bne	r3,zero,5085b40 <___vfprintf_internal_r+0x1150>
 5085378:	d8011f15 	stw	zero,1148(sp)
 508537c:	da000404 	addi	r8,sp,16
 5085380:	003dd806 	br	5084ae4 <__alt_data_end+0xfffb68e4>
 5085384:	8c400414 	ori	r17,r17,16
 5085388:	d8c12a15 	stw	r3,1192(sp)
 508538c:	88c0080c 	andi	r3,r17,32
 5085390:	d8812d17 	ldw	r2,1204(sp)
 5085394:	18004626 	beq	r3,zero,50854b0 <___vfprintf_internal_r+0xac0>
 5085398:	dac12d17 	ldw	r11,1204(sp)
 508539c:	14c00017 	ldw	r19,0(r2)
 50853a0:	17000117 	ldw	fp,4(r2)
 50853a4:	5ac00204 	addi	r11,r11,8
 50853a8:	dac12d15 	stw	r11,1204(sp)
 50853ac:	00800044 	movi	r2,1
 50853b0:	9f06b03a 	or	r3,r19,fp
 50853b4:	003f0006 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 50853b8:	1805883a 	mov	r2,r3
 50853bc:	d8012e15 	stw	zero,1208(sp)
 50853c0:	82fff404 	addi	r11,r16,-48
 50853c4:	0019883a 	mov	r12,zero
 50853c8:	14000007 	ldb	r16,0(r2)
 50853cc:	630002a4 	muli	r12,r12,10
 50853d0:	18c00044 	addi	r3,r3,1
 50853d4:	1805883a 	mov	r2,r3
 50853d8:	62d9883a 	add	r12,r12,r11
 50853dc:	82fff404 	addi	r11,r16,-48
 50853e0:	2afff92e 	bgeu	r5,r11,50853c8 <__alt_data_end+0xfffb71c8>
 50853e4:	db012e15 	stw	r12,1208(sp)
 50853e8:	003de906 	br	5084b90 <__alt_data_end+0xfffb6990>
 50853ec:	8c400414 	ori	r17,r17,16
 50853f0:	d8c12a15 	stw	r3,1192(sp)
 50853f4:	d9812785 	stb	r6,1182(sp)
 50853f8:	8880080c 	andi	r2,r17,32
 50853fc:	d8c12d17 	ldw	r3,1204(sp)
 5085400:	10007a26 	beq	r2,zero,50855ec <___vfprintf_internal_r+0xbfc>
 5085404:	db012d17 	ldw	r12,1204(sp)
 5085408:	18800117 	ldw	r2,4(r3)
 508540c:	1cc00017 	ldw	r19,0(r3)
 5085410:	63000204 	addi	r12,r12,8
 5085414:	db012d15 	stw	r12,1204(sp)
 5085418:	1039883a 	mov	fp,r2
 508541c:	10031016 	blt	r2,zero,5086060 <___vfprintf_internal_r+0x1670>
 5085420:	dd412783 	ldbu	r21,1182(sp)
 5085424:	da413215 	stw	r9,1224(sp)
 5085428:	00800044 	movi	r2,1
 508542c:	9f06b03a 	or	r3,r19,fp
 5085430:	003ee406 	br	5084fc4 <__alt_data_end+0xfffb6dc4>
 5085434:	03014274 	movhi	r12,1289
 5085438:	6314dd04 	addi	r12,r12,21364
 508543c:	d8c12a15 	stw	r3,1192(sp)
 5085440:	d9812785 	stb	r6,1182(sp)
 5085444:	db013b15 	stw	r12,1260(sp)
 5085448:	88c0080c 	andi	r3,r17,32
 508544c:	d8812d17 	ldw	r2,1204(sp)
 5085450:	18002b26 	beq	r3,zero,5085500 <___vfprintf_internal_r+0xb10>
 5085454:	dac12d17 	ldw	r11,1204(sp)
 5085458:	14c00017 	ldw	r19,0(r2)
 508545c:	17000117 	ldw	fp,4(r2)
 5085460:	5ac00204 	addi	r11,r11,8
 5085464:	dac12d15 	stw	r11,1204(sp)
 5085468:	8880004c 	andi	r2,r17,1
 508546c:	10025b26 	beq	r2,zero,5085ddc <___vfprintf_internal_r+0x13ec>
 5085470:	9f06b03a 	or	r3,r19,fp
 5085474:	18037026 	beq	r3,zero,5086238 <___vfprintf_internal_r+0x1848>
 5085478:	00800c04 	movi	r2,48
 508547c:	d8812705 	stb	r2,1180(sp)
 5085480:	dc012745 	stb	r16,1181(sp)
 5085484:	8c400094 	ori	r17,r17,2
 5085488:	00800084 	movi	r2,2
 508548c:	003eca06 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 5085490:	8c400814 	ori	r17,r17,32
 5085494:	1805883a 	mov	r2,r3
 5085498:	1c000007 	ldb	r16,0(r3)
 508549c:	003dbb06 	br	5084b8c <__alt_data_end+0xfffb698c>
 50854a0:	d8c12a15 	stw	r3,1192(sp)
 50854a4:	88c0080c 	andi	r3,r17,32
 50854a8:	d8812d17 	ldw	r2,1204(sp)
 50854ac:	183fba1e 	bne	r3,zero,5085398 <__alt_data_end+0xfffb7198>
 50854b0:	88c0040c 	andi	r3,r17,16
 50854b4:	18024c1e 	bne	r3,zero,5085de8 <___vfprintf_internal_r+0x13f8>
 50854b8:	88c0100c 	andi	r3,r17,64
 50854bc:	18024a26 	beq	r3,zero,5085de8 <___vfprintf_internal_r+0x13f8>
 50854c0:	dac12d17 	ldw	r11,1204(sp)
 50854c4:	14c0000b 	ldhu	r19,0(r2)
 50854c8:	0039883a 	mov	fp,zero
 50854cc:	5ac00104 	addi	r11,r11,4
 50854d0:	dac12d15 	stw	r11,1204(sp)
 50854d4:	00800044 	movi	r2,1
 50854d8:	9807883a 	mov	r3,r19
 50854dc:	003eb606 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 50854e0:	00814274 	movhi	r2,1289
 50854e4:	1094e204 	addi	r2,r2,21384
 50854e8:	d8c12a15 	stw	r3,1192(sp)
 50854ec:	d8813b15 	stw	r2,1260(sp)
 50854f0:	d9812785 	stb	r6,1182(sp)
 50854f4:	88c0080c 	andi	r3,r17,32
 50854f8:	d8812d17 	ldw	r2,1204(sp)
 50854fc:	183fd51e 	bne	r3,zero,5085454 <__alt_data_end+0xfffb7254>
 5085500:	88c0040c 	andi	r3,r17,16
 5085504:	18034126 	beq	r3,zero,508620c <___vfprintf_internal_r+0x181c>
 5085508:	db012d17 	ldw	r12,1204(sp)
 508550c:	14c00017 	ldw	r19,0(r2)
 5085510:	0039883a 	mov	fp,zero
 5085514:	63000104 	addi	r12,r12,4
 5085518:	db012d15 	stw	r12,1204(sp)
 508551c:	003fd206 	br	5085468 <__alt_data_end+0xfffb7268>
 5085520:	1c000007 	ldb	r16,0(r3)
 5085524:	81c3d626 	beq	r16,r7,5086480 <___vfprintf_internal_r+0x1a90>
 5085528:	8c400414 	ori	r17,r17,16
 508552c:	1805883a 	mov	r2,r3
 5085530:	003d9606 	br	5084b8c <__alt_data_end+0xfffb698c>
 5085534:	d8c12a15 	stw	r3,1192(sp)
 5085538:	d9812785 	stb	r6,1182(sp)
 508553c:	8880080c 	andi	r2,r17,32
 5085540:	10033f26 	beq	r2,zero,5086240 <___vfprintf_internal_r+0x1850>
 5085544:	db012d17 	ldw	r12,1204(sp)
 5085548:	dac12f17 	ldw	r11,1212(sp)
 508554c:	60800017 	ldw	r2,0(r12)
 5085550:	5807d7fa 	srai	r3,r11,31
 5085554:	63000104 	addi	r12,r12,4
 5085558:	db012d15 	stw	r12,1204(sp)
 508555c:	12c00015 	stw	r11,0(r2)
 5085560:	10c00115 	stw	r3,4(r2)
 5085564:	003d5f06 	br	5084ae4 <__alt_data_end+0xfffb68e4>
 5085568:	d8c12a15 	stw	r3,1192(sp)
 508556c:	88c0080c 	andi	r3,r17,32
 5085570:	d8812d17 	ldw	r2,1204(sp)
 5085574:	183e891e 	bne	r3,zero,5084f9c <__alt_data_end+0xfffb6d9c>
 5085578:	88c0040c 	andi	r3,r17,16
 508557c:	1801ea1e 	bne	r3,zero,5085d28 <___vfprintf_internal_r+0x1338>
 5085580:	88c0100c 	andi	r3,r17,64
 5085584:	1801e826 	beq	r3,zero,5085d28 <___vfprintf_internal_r+0x1338>
 5085588:	db012d17 	ldw	r12,1204(sp)
 508558c:	14c0000b 	ldhu	r19,0(r2)
 5085590:	0039883a 	mov	fp,zero
 5085594:	63000104 	addi	r12,r12,4
 5085598:	db012d15 	stw	r12,1204(sp)
 508559c:	0005883a 	mov	r2,zero
 50855a0:	9807883a 	mov	r3,r19
 50855a4:	003e8406 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 50855a8:	30803fcc 	andi	r2,r6,255
 50855ac:	1080201c 	xori	r2,r2,128
 50855b0:	10bfe004 	addi	r2,r2,-128
 50855b4:	10031d1e 	bne	r2,zero,508622c <___vfprintf_internal_r+0x183c>
 50855b8:	1805883a 	mov	r2,r3
 50855bc:	01800804 	movi	r6,32
 50855c0:	1c000007 	ldb	r16,0(r3)
 50855c4:	003d7106 	br	5084b8c <__alt_data_end+0xfffb698c>
 50855c8:	8c400054 	ori	r17,r17,1
 50855cc:	1805883a 	mov	r2,r3
 50855d0:	1c000007 	ldb	r16,0(r3)
 50855d4:	003d6d06 	br	5084b8c <__alt_data_end+0xfffb698c>
 50855d8:	d8c12a15 	stw	r3,1192(sp)
 50855dc:	d9812785 	stb	r6,1182(sp)
 50855e0:	8880080c 	andi	r2,r17,32
 50855e4:	d8c12d17 	ldw	r3,1204(sp)
 50855e8:	103f861e 	bne	r2,zero,5085404 <__alt_data_end+0xfffb7204>
 50855ec:	8880040c 	andi	r2,r17,16
 50855f0:	1001f31e 	bne	r2,zero,5085dc0 <___vfprintf_internal_r+0x13d0>
 50855f4:	8880100c 	andi	r2,r17,64
 50855f8:	1001f126 	beq	r2,zero,5085dc0 <___vfprintf_internal_r+0x13d0>
 50855fc:	1cc0000f 	ldh	r19,0(r3)
 5085600:	db012d17 	ldw	r12,1204(sp)
 5085604:	9839d7fa 	srai	fp,r19,31
 5085608:	63000104 	addi	r12,r12,4
 508560c:	db012d15 	stw	r12,1204(sp)
 5085610:	e005883a 	mov	r2,fp
 5085614:	003f8106 	br	508541c <__alt_data_end+0xfffb721c>
 5085618:	8c401014 	ori	r17,r17,64
 508561c:	1805883a 	mov	r2,r3
 5085620:	1c000007 	ldb	r16,0(r3)
 5085624:	003d5906 	br	5084b8c <__alt_data_end+0xfffb698c>
 5085628:	db012d17 	ldw	r12,1204(sp)
 508562c:	d8c12a15 	stw	r3,1192(sp)
 5085630:	00c00044 	movi	r3,1
 5085634:	60800017 	ldw	r2,0(r12)
 5085638:	63000104 	addi	r12,r12,4
 508563c:	d8c12b15 	stw	r3,1196(sp)
 5085640:	d8012785 	stb	zero,1182(sp)
 5085644:	d8810405 	stb	r2,1040(sp)
 5085648:	db012d15 	stw	r12,1204(sp)
 508564c:	dac10404 	addi	r11,sp,1040
 5085650:	1825883a 	mov	r18,r3
 5085654:	d8013215 	stw	zero,1224(sp)
 5085658:	d8013415 	stw	zero,1232(sp)
 508565c:	dac13115 	stw	r11,1220(sp)
 5085660:	0005883a 	mov	r2,zero
 5085664:	003e7d06 	br	508505c <__alt_data_end+0xfffb6e5c>
 5085668:	db012d17 	ldw	r12,1204(sp)
 508566c:	00800c04 	movi	r2,48
 5085670:	d8812705 	stb	r2,1180(sp)
 5085674:	64c00017 	ldw	r19,0(r12)
 5085678:	00801e04 	movi	r2,120
 508567c:	d8812745 	stb	r2,1181(sp)
 5085680:	00814274 	movhi	r2,1289
 5085684:	1094e204 	addi	r2,r2,21384
 5085688:	63000104 	addi	r12,r12,4
 508568c:	d8c12a15 	stw	r3,1192(sp)
 5085690:	d8813b15 	stw	r2,1260(sp)
 5085694:	0039883a 	mov	fp,zero
 5085698:	8c400094 	ori	r17,r17,2
 508569c:	db012d15 	stw	r12,1204(sp)
 50856a0:	00800084 	movi	r2,2
 50856a4:	04001e04 	movi	r16,120
 50856a8:	9807883a 	mov	r3,r19
 50856ac:	003e4206 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 50856b0:	dac12d17 	ldw	r11,1204(sp)
 50856b4:	db012d17 	ldw	r12,1204(sp)
 50856b8:	d8c12a15 	stw	r3,1192(sp)
 50856bc:	5ac00017 	ldw	r11,0(r11)
 50856c0:	d8012785 	stb	zero,1182(sp)
 50856c4:	64c00104 	addi	r19,r12,4
 50856c8:	dac13115 	stw	r11,1220(sp)
 50856cc:	5803e826 	beq	r11,zero,5086670 <___vfprintf_internal_r+0x1c80>
 50856d0:	d9013117 	ldw	r4,1220(sp)
 50856d4:	48037a16 	blt	r9,zero,50864c0 <___vfprintf_internal_r+0x1ad0>
 50856d8:	480d883a 	mov	r6,r9
 50856dc:	000b883a 	mov	r5,zero
 50856e0:	da013f15 	stw	r8,1276(sp)
 50856e4:	da413e15 	stw	r9,1272(sp)
 50856e8:	5089ff80 	call	5089ff8 <memchr>
 50856ec:	da013f17 	ldw	r8,1276(sp)
 50856f0:	da413e17 	ldw	r9,1272(sp)
 50856f4:	10044426 	beq	r2,zero,5086808 <___vfprintf_internal_r+0x1e18>
 50856f8:	d8c13117 	ldw	r3,1220(sp)
 50856fc:	10e5c83a 	sub	r18,r2,r3
 5085700:	4c834416 	blt	r9,r18,5086414 <___vfprintf_internal_r+0x1a24>
 5085704:	9005883a 	mov	r2,r18
 5085708:	90037216 	blt	r18,zero,50864d4 <___vfprintf_internal_r+0x1ae4>
 508570c:	dd412783 	ldbu	r21,1182(sp)
 5085710:	d8812b15 	stw	r2,1196(sp)
 5085714:	dcc12d15 	stw	r19,1204(sp)
 5085718:	d8013215 	stw	zero,1224(sp)
 508571c:	d8013415 	stw	zero,1232(sp)
 5085720:	003e4706 	br	5085040 <__alt_data_end+0xfffb6e40>
 5085724:	dac12d17 	ldw	r11,1204(sp)
 5085728:	db012d17 	ldw	r12,1204(sp)
 508572c:	5ac00017 	ldw	r11,0(r11)
 5085730:	dac12e15 	stw	r11,1208(sp)
 5085734:	62c00104 	addi	r11,r12,4
 5085738:	db012e17 	ldw	r12,1208(sp)
 508573c:	60034a16 	blt	r12,zero,5086468 <___vfprintf_internal_r+0x1a78>
 5085740:	dac12d15 	stw	r11,1204(sp)
 5085744:	1805883a 	mov	r2,r3
 5085748:	1c000007 	ldb	r16,0(r3)
 508574c:	003d0f06 	br	5084b8c <__alt_data_end+0xfffb698c>
 5085750:	1805883a 	mov	r2,r3
 5085754:	01800ac4 	movi	r6,43
 5085758:	1c000007 	ldb	r16,0(r3)
 508575c:	003d0b06 	br	5084b8c <__alt_data_end+0xfffb698c>
 5085760:	d8c12a15 	stw	r3,1192(sp)
 5085764:	d9812785 	stb	r6,1182(sp)
 5085768:	803db226 	beq	r16,zero,5084e34 <__alt_data_end+0xfffb6c34>
 508576c:	00c00044 	movi	r3,1
 5085770:	d8c12b15 	stw	r3,1196(sp)
 5085774:	dc010405 	stb	r16,1040(sp)
 5085778:	d8012785 	stb	zero,1182(sp)
 508577c:	003fb306 	br	508564c <__alt_data_end+0xfffb744c>
 5085780:	d8c12017 	ldw	r3,1152(sp)
 5085784:	003e6d06 	br	508513c <__alt_data_end+0xfffb6f3c>
 5085788:	10803fcc 	andi	r2,r2,255
 508578c:	00c00044 	movi	r3,1
 5085790:	10fe141e 	bne	r2,r3,5084fe4 <__alt_data_end+0xfffb6de4>
 5085794:	e000021e 	bne	fp,zero,50857a0 <___vfprintf_internal_r+0xdb0>
 5085798:	00800244 	movi	r2,9
 508579c:	14c0202e 	bgeu	r2,r19,5085820 <___vfprintf_internal_r+0xe30>
 50857a0:	dc012b15 	stw	r16,1196(sp)
 50857a4:	dc412c15 	stw	r17,1200(sp)
 50857a8:	9821883a 	mov	r16,r19
 50857ac:	e023883a 	mov	r17,fp
 50857b0:	dc810e04 	addi	r18,sp,1080
 50857b4:	4027883a 	mov	r19,r8
 50857b8:	4839883a 	mov	fp,r9
 50857bc:	8009883a 	mov	r4,r16
 50857c0:	880b883a 	mov	r5,r17
 50857c4:	01800284 	movi	r6,10
 50857c8:	000f883a 	mov	r7,zero
 50857cc:	508f2280 	call	508f228 <__umoddi3>
 50857d0:	10800c04 	addi	r2,r2,48
 50857d4:	94bfffc4 	addi	r18,r18,-1
 50857d8:	8009883a 	mov	r4,r16
 50857dc:	880b883a 	mov	r5,r17
 50857e0:	01800284 	movi	r6,10
 50857e4:	000f883a 	mov	r7,zero
 50857e8:	90800005 	stb	r2,0(r18)
 50857ec:	508ec680 	call	508ec68 <__udivdi3>
 50857f0:	1021883a 	mov	r16,r2
 50857f4:	10c4b03a 	or	r2,r2,r3
 50857f8:	1823883a 	mov	r17,r3
 50857fc:	103fef1e 	bne	r2,zero,50857bc <__alt_data_end+0xfffb75bc>
 5085800:	dac12817 	ldw	r11,1184(sp)
 5085804:	dc813115 	stw	r18,1220(sp)
 5085808:	dc012b17 	ldw	r16,1196(sp)
 508580c:	9811883a 	mov	r8,r19
 5085810:	dc412c17 	ldw	r17,1200(sp)
 5085814:	e013883a 	mov	r9,fp
 5085818:	5ca5c83a 	sub	r18,r11,r18
 508581c:	003e0306 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085820:	9cc00c04 	addi	r19,r19,48
 5085824:	d8c10dc4 	addi	r3,sp,1079
 5085828:	dcc10dc5 	stb	r19,1079(sp)
 508582c:	dc813c17 	ldw	r18,1264(sp)
 5085830:	d8c13115 	stw	r3,1220(sp)
 5085834:	003dfd06 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085838:	00801944 	movi	r2,101
 508583c:	1400710e 	bge	r2,r16,5085a04 <___vfprintf_internal_r+0x1014>
 5085840:	d9013717 	ldw	r4,1244(sp)
 5085844:	d9413917 	ldw	r5,1252(sp)
 5085848:	000d883a 	mov	r6,zero
 508584c:	000f883a 	mov	r7,zero
 5085850:	d8c13d15 	stw	r3,1268(sp)
 5085854:	da013f15 	stw	r8,1276(sp)
 5085858:	50909200 	call	5090920 <__eqdf2>
 508585c:	d8c13d17 	ldw	r3,1268(sp)
 5085860:	da013f17 	ldw	r8,1276(sp)
 5085864:	1000ef1e 	bne	r2,zero,5085c24 <___vfprintf_internal_r+0x1234>
 5085868:	d8811f17 	ldw	r2,1148(sp)
 508586c:	01014274 	movhi	r4,1289
 5085870:	2114e904 	addi	r4,r4,21412
 5085874:	18c00044 	addi	r3,r3,1
 5085878:	10800044 	addi	r2,r2,1
 508587c:	41000015 	stw	r4,0(r8)
 5085880:	01000044 	movi	r4,1
 5085884:	41000115 	stw	r4,4(r8)
 5085888:	d8c12015 	stw	r3,1152(sp)
 508588c:	d8811f15 	stw	r2,1148(sp)
 5085890:	010001c4 	movi	r4,7
 5085894:	20828e16 	blt	r4,r2,50862d0 <___vfprintf_internal_r+0x18e0>
 5085898:	42000204 	addi	r8,r8,8
 508589c:	d8812617 	ldw	r2,1176(sp)
 50858a0:	dac13317 	ldw	r11,1228(sp)
 50858a4:	12c00216 	blt	r2,r11,50858b0 <___vfprintf_internal_r+0xec0>
 50858a8:	8880004c 	andi	r2,r17,1
 50858ac:	103e7726 	beq	r2,zero,508528c <__alt_data_end+0xfffb708c>
 50858b0:	db013817 	ldw	r12,1248(sp)
 50858b4:	d8811f17 	ldw	r2,1148(sp)
 50858b8:	dac13517 	ldw	r11,1236(sp)
 50858bc:	1b07883a 	add	r3,r3,r12
 50858c0:	10800044 	addi	r2,r2,1
 50858c4:	42c00015 	stw	r11,0(r8)
 50858c8:	43000115 	stw	r12,4(r8)
 50858cc:	d8c12015 	stw	r3,1152(sp)
 50858d0:	d8811f15 	stw	r2,1148(sp)
 50858d4:	010001c4 	movi	r4,7
 50858d8:	2082ed16 	blt	r4,r2,5086490 <___vfprintf_internal_r+0x1aa0>
 50858dc:	42000204 	addi	r8,r8,8
 50858e0:	db013317 	ldw	r12,1228(sp)
 50858e4:	643fffc4 	addi	r16,r12,-1
 50858e8:	043e680e 	bge	zero,r16,508528c <__alt_data_end+0xfffb708c>
 50858ec:	04800404 	movi	r18,16
 50858f0:	d8811f17 	ldw	r2,1148(sp)
 50858f4:	94007e0e 	bge	r18,r16,5085af0 <___vfprintf_internal_r+0x1100>
 50858f8:	01414274 	movhi	r5,1289
 50858fc:	2954f184 	addi	r5,r5,21446
 5085900:	d9412c15 	stw	r5,1200(sp)
 5085904:	054001c4 	movi	r21,7
 5085908:	00000306 	br	5085918 <___vfprintf_internal_r+0xf28>
 508590c:	42000204 	addi	r8,r8,8
 5085910:	843ffc04 	addi	r16,r16,-16
 5085914:	9400790e 	bge	r18,r16,5085afc <___vfprintf_internal_r+0x110c>
 5085918:	18c00404 	addi	r3,r3,16
 508591c:	10800044 	addi	r2,r2,1
 5085920:	45000015 	stw	r20,0(r8)
 5085924:	44800115 	stw	r18,4(r8)
 5085928:	d8c12015 	stw	r3,1152(sp)
 508592c:	d8811f15 	stw	r2,1148(sp)
 5085930:	a8bff60e 	bge	r21,r2,508590c <__alt_data_end+0xfffb770c>
 5085934:	b009883a 	mov	r4,r22
 5085938:	b80b883a 	mov	r5,r23
 508593c:	d9811e04 	addi	r6,sp,1144
 5085940:	508cf980 	call	508cf98 <__sprint_r>
 5085944:	103d411e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085948:	d8c12017 	ldw	r3,1152(sp)
 508594c:	d8811f17 	ldw	r2,1148(sp)
 5085950:	da000404 	addi	r8,sp,16
 5085954:	003fee06 	br	5085910 <__alt_data_end+0xfffb7710>
 5085958:	dac12e17 	ldw	r11,1208(sp)
 508595c:	db012b17 	ldw	r12,1196(sp)
 5085960:	5b2bc83a 	sub	r21,r11,r12
 5085964:	057e130e 	bge	zero,r21,50851b4 <__alt_data_end+0xfffb6fb4>
 5085968:	07000404 	movi	fp,16
 508596c:	d8811f17 	ldw	r2,1148(sp)
 5085970:	e543640e 	bge	fp,r21,5086704 <___vfprintf_internal_r+0x1d14>
 5085974:	01414274 	movhi	r5,1289
 5085978:	2954f184 	addi	r5,r5,21446
 508597c:	d9412c15 	stw	r5,1200(sp)
 5085980:	04c001c4 	movi	r19,7
 5085984:	00000306 	br	5085994 <___vfprintf_internal_r+0xfa4>
 5085988:	ad7ffc04 	addi	r21,r21,-16
 508598c:	42000204 	addi	r8,r8,8
 5085990:	e540110e 	bge	fp,r21,50859d8 <___vfprintf_internal_r+0xfe8>
 5085994:	18c00404 	addi	r3,r3,16
 5085998:	10800044 	addi	r2,r2,1
 508599c:	45000015 	stw	r20,0(r8)
 50859a0:	47000115 	stw	fp,4(r8)
 50859a4:	d8c12015 	stw	r3,1152(sp)
 50859a8:	d8811f15 	stw	r2,1148(sp)
 50859ac:	98bff60e 	bge	r19,r2,5085988 <__alt_data_end+0xfffb7788>
 50859b0:	b009883a 	mov	r4,r22
 50859b4:	b80b883a 	mov	r5,r23
 50859b8:	d9811e04 	addi	r6,sp,1144
 50859bc:	508cf980 	call	508cf98 <__sprint_r>
 50859c0:	103d221e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50859c4:	ad7ffc04 	addi	r21,r21,-16
 50859c8:	d8c12017 	ldw	r3,1152(sp)
 50859cc:	d8811f17 	ldw	r2,1148(sp)
 50859d0:	da000404 	addi	r8,sp,16
 50859d4:	e57fef16 	blt	fp,r21,5085994 <__alt_data_end+0xfffb7794>
 50859d8:	dac12c17 	ldw	r11,1200(sp)
 50859dc:	1d47883a 	add	r3,r3,r21
 50859e0:	10800044 	addi	r2,r2,1
 50859e4:	42c00015 	stw	r11,0(r8)
 50859e8:	45400115 	stw	r21,4(r8)
 50859ec:	d8c12015 	stw	r3,1152(sp)
 50859f0:	d8811f15 	stw	r2,1148(sp)
 50859f4:	010001c4 	movi	r4,7
 50859f8:	20819116 	blt	r4,r2,5086040 <___vfprintf_internal_r+0x1650>
 50859fc:	42000204 	addi	r8,r8,8
 5085a00:	003dec06 	br	50851b4 <__alt_data_end+0xfffb6fb4>
 5085a04:	db013317 	ldw	r12,1228(sp)
 5085a08:	00800044 	movi	r2,1
 5085a0c:	18c00044 	addi	r3,r3,1
 5085a10:	1301530e 	bge	r2,r12,5085f60 <___vfprintf_internal_r+0x1570>
 5085a14:	dc011f17 	ldw	r16,1148(sp)
 5085a18:	dac13117 	ldw	r11,1220(sp)
 5085a1c:	00800044 	movi	r2,1
 5085a20:	84000044 	addi	r16,r16,1
 5085a24:	40800115 	stw	r2,4(r8)
 5085a28:	42c00015 	stw	r11,0(r8)
 5085a2c:	d8c12015 	stw	r3,1152(sp)
 5085a30:	dc011f15 	stw	r16,1148(sp)
 5085a34:	008001c4 	movi	r2,7
 5085a38:	14016b16 	blt	r2,r16,5085fe8 <___vfprintf_internal_r+0x15f8>
 5085a3c:	42000204 	addi	r8,r8,8
 5085a40:	db013817 	ldw	r12,1248(sp)
 5085a44:	dac13517 	ldw	r11,1236(sp)
 5085a48:	84000044 	addi	r16,r16,1
 5085a4c:	1b07883a 	add	r3,r3,r12
 5085a50:	42c00015 	stw	r11,0(r8)
 5085a54:	43000115 	stw	r12,4(r8)
 5085a58:	d8c12015 	stw	r3,1152(sp)
 5085a5c:	dc011f15 	stw	r16,1148(sp)
 5085a60:	008001c4 	movi	r2,7
 5085a64:	14016916 	blt	r2,r16,508600c <___vfprintf_internal_r+0x161c>
 5085a68:	44800204 	addi	r18,r8,8
 5085a6c:	d9013717 	ldw	r4,1244(sp)
 5085a70:	d9413917 	ldw	r5,1252(sp)
 5085a74:	000d883a 	mov	r6,zero
 5085a78:	000f883a 	mov	r7,zero
 5085a7c:	d8c13d15 	stw	r3,1268(sp)
 5085a80:	50909200 	call	5090920 <__eqdf2>
 5085a84:	d8c13d17 	ldw	r3,1268(sp)
 5085a88:	db013317 	ldw	r12,1228(sp)
 5085a8c:	1000ae26 	beq	r2,zero,5085d48 <___vfprintf_internal_r+0x1358>
 5085a90:	dac13117 	ldw	r11,1220(sp)
 5085a94:	60bfffc4 	addi	r2,r12,-1
 5085a98:	1887883a 	add	r3,r3,r2
 5085a9c:	59000044 	addi	r4,r11,1
 5085aa0:	84000044 	addi	r16,r16,1
 5085aa4:	90800115 	stw	r2,4(r18)
 5085aa8:	91000015 	stw	r4,0(r18)
 5085aac:	d8c12015 	stw	r3,1152(sp)
 5085ab0:	dc011f15 	stw	r16,1148(sp)
 5085ab4:	008001c4 	movi	r2,7
 5085ab8:	14014216 	blt	r2,r16,5085fc4 <___vfprintf_internal_r+0x15d4>
 5085abc:	94800204 	addi	r18,r18,8
 5085ac0:	dac13a17 	ldw	r11,1256(sp)
 5085ac4:	dd4122c4 	addi	r21,sp,1163
 5085ac8:	84000044 	addi	r16,r16,1
 5085acc:	58c7883a 	add	r3,r11,r3
 5085ad0:	95400015 	stw	r21,0(r18)
 5085ad4:	92c00115 	stw	r11,4(r18)
 5085ad8:	d8c12015 	stw	r3,1152(sp)
 5085adc:	dc011f15 	stw	r16,1148(sp)
 5085ae0:	008001c4 	movi	r2,7
 5085ae4:	14000e16 	blt	r2,r16,5085b20 <___vfprintf_internal_r+0x1130>
 5085ae8:	92000204 	addi	r8,r18,8
 5085aec:	003de706 	br	508528c <__alt_data_end+0xfffb708c>
 5085af0:	01014274 	movhi	r4,1289
 5085af4:	2114f184 	addi	r4,r4,21446
 5085af8:	d9012c15 	stw	r4,1200(sp)
 5085afc:	dac12c17 	ldw	r11,1200(sp)
 5085b00:	1c07883a 	add	r3,r3,r16
 5085b04:	44000115 	stw	r16,4(r8)
 5085b08:	42c00015 	stw	r11,0(r8)
 5085b0c:	10800044 	addi	r2,r2,1
 5085b10:	d8c12015 	stw	r3,1152(sp)
 5085b14:	d8811f15 	stw	r2,1148(sp)
 5085b18:	010001c4 	movi	r4,7
 5085b1c:	20bdda0e 	bge	r4,r2,5085288 <__alt_data_end+0xfffb7088>
 5085b20:	b009883a 	mov	r4,r22
 5085b24:	b80b883a 	mov	r5,r23
 5085b28:	d9811e04 	addi	r6,sp,1144
 5085b2c:	508cf980 	call	508cf98 <__sprint_r>
 5085b30:	103cc61e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085b34:	d8c12017 	ldw	r3,1152(sp)
 5085b38:	da000404 	addi	r8,sp,16
 5085b3c:	003dd306 	br	508528c <__alt_data_end+0xfffb708c>
 5085b40:	b009883a 	mov	r4,r22
 5085b44:	b80b883a 	mov	r5,r23
 5085b48:	d9811e04 	addi	r6,sp,1144
 5085b4c:	508cf980 	call	508cf98 <__sprint_r>
 5085b50:	103e0926 	beq	r2,zero,5085378 <__alt_data_end+0xfffb7178>
 5085b54:	003cbd06 	br	5084e4c <__alt_data_end+0xfffb6c4c>
 5085b58:	10803fcc 	andi	r2,r2,255
 5085b5c:	1000651e 	bne	r2,zero,5085cf4 <___vfprintf_internal_r+0x1304>
 5085b60:	8880004c 	andi	r2,r17,1
 5085b64:	10013226 	beq	r2,zero,5086030 <___vfprintf_internal_r+0x1640>
 5085b68:	00800c04 	movi	r2,48
 5085b6c:	d8c10dc4 	addi	r3,sp,1079
 5085b70:	d8810dc5 	stb	r2,1079(sp)
 5085b74:	dc813c17 	ldw	r18,1264(sp)
 5085b78:	d8c13115 	stw	r3,1220(sp)
 5085b7c:	003d2b06 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085b80:	b009883a 	mov	r4,r22
 5085b84:	b80b883a 	mov	r5,r23
 5085b88:	d9811e04 	addi	r6,sp,1144
 5085b8c:	508cf980 	call	508cf98 <__sprint_r>
 5085b90:	103cae1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085b94:	d8c12017 	ldw	r3,1152(sp)
 5085b98:	da000404 	addi	r8,sp,16
 5085b9c:	003dae06 	br	5085258 <__alt_data_end+0xfffb7058>
 5085ba0:	b009883a 	mov	r4,r22
 5085ba4:	b80b883a 	mov	r5,r23
 5085ba8:	d9811e04 	addi	r6,sp,1144
 5085bac:	508cf980 	call	508cf98 <__sprint_r>
 5085bb0:	103ca61e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085bb4:	d8c12017 	ldw	r3,1152(sp)
 5085bb8:	da000404 	addi	r8,sp,16
 5085bbc:	003d6c06 	br	5085170 <__alt_data_end+0xfffb6f70>
 5085bc0:	b009883a 	mov	r4,r22
 5085bc4:	b80b883a 	mov	r5,r23
 5085bc8:	d9811e04 	addi	r6,sp,1144
 5085bcc:	508cf980 	call	508cf98 <__sprint_r>
 5085bd0:	103c9e1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085bd4:	d8c12017 	ldw	r3,1152(sp)
 5085bd8:	da000404 	addi	r8,sp,16
 5085bdc:	003d7206 	br	50851a8 <__alt_data_end+0xfffb6fa8>
 5085be0:	d9413b17 	ldw	r5,1260(sp)
 5085be4:	d8c10e04 	addi	r3,sp,1080
 5085be8:	988003cc 	andi	r2,r19,15
 5085bec:	e008973a 	slli	r4,fp,28
 5085bf0:	2885883a 	add	r2,r5,r2
 5085bf4:	9826d13a 	srli	r19,r19,4
 5085bf8:	10800003 	ldbu	r2,0(r2)
 5085bfc:	e038d13a 	srli	fp,fp,4
 5085c00:	18ffffc4 	addi	r3,r3,-1
 5085c04:	24e6b03a 	or	r19,r4,r19
 5085c08:	18800005 	stb	r2,0(r3)
 5085c0c:	9f04b03a 	or	r2,r19,fp
 5085c10:	103ff51e 	bne	r2,zero,5085be8 <__alt_data_end+0xfffb79e8>
 5085c14:	db012817 	ldw	r12,1184(sp)
 5085c18:	d8c13115 	stw	r3,1220(sp)
 5085c1c:	60e5c83a 	sub	r18,r12,r3
 5085c20:	003d0206 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085c24:	dc012617 	ldw	r16,1176(sp)
 5085c28:	0401b10e 	bge	zero,r16,50862f0 <___vfprintf_internal_r+0x1900>
 5085c2c:	db013117 	ldw	r12,1220(sp)
 5085c30:	dac13317 	ldw	r11,1228(sp)
 5085c34:	62e1883a 	add	r16,r12,r11
 5085c38:	db013417 	ldw	r12,1232(sp)
 5085c3c:	5825883a 	mov	r18,r11
 5085c40:	62c0010e 	bge	r12,r11,5085c48 <___vfprintf_internal_r+0x1258>
 5085c44:	6025883a 	mov	r18,r12
 5085c48:	04800b0e 	bge	zero,r18,5085c78 <___vfprintf_internal_r+0x1288>
 5085c4c:	d8811f17 	ldw	r2,1148(sp)
 5085c50:	dac13117 	ldw	r11,1220(sp)
 5085c54:	1c87883a 	add	r3,r3,r18
 5085c58:	10800044 	addi	r2,r2,1
 5085c5c:	42c00015 	stw	r11,0(r8)
 5085c60:	44800115 	stw	r18,4(r8)
 5085c64:	d8c12015 	stw	r3,1152(sp)
 5085c68:	d8811f15 	stw	r2,1148(sp)
 5085c6c:	010001c4 	movi	r4,7
 5085c70:	20824f16 	blt	r4,r2,50865b0 <___vfprintf_internal_r+0x1bc0>
 5085c74:	42000204 	addi	r8,r8,8
 5085c78:	90024b16 	blt	r18,zero,50865a8 <___vfprintf_internal_r+0x1bb8>
 5085c7c:	db013417 	ldw	r12,1232(sp)
 5085c80:	64a5c83a 	sub	r18,r12,r18
 5085c84:	0480730e 	bge	zero,r18,5085e54 <___vfprintf_internal_r+0x1464>
 5085c88:	05400404 	movi	r21,16
 5085c8c:	d8811f17 	ldw	r2,1148(sp)
 5085c90:	ac817d0e 	bge	r21,r18,5086288 <___vfprintf_internal_r+0x1898>
 5085c94:	01414274 	movhi	r5,1289
 5085c98:	2954f184 	addi	r5,r5,21446
 5085c9c:	d9412c15 	stw	r5,1200(sp)
 5085ca0:	070001c4 	movi	fp,7
 5085ca4:	00000306 	br	5085cb4 <___vfprintf_internal_r+0x12c4>
 5085ca8:	42000204 	addi	r8,r8,8
 5085cac:	94bffc04 	addi	r18,r18,-16
 5085cb0:	ac81780e 	bge	r21,r18,5086294 <___vfprintf_internal_r+0x18a4>
 5085cb4:	18c00404 	addi	r3,r3,16
 5085cb8:	10800044 	addi	r2,r2,1
 5085cbc:	45000015 	stw	r20,0(r8)
 5085cc0:	45400115 	stw	r21,4(r8)
 5085cc4:	d8c12015 	stw	r3,1152(sp)
 5085cc8:	d8811f15 	stw	r2,1148(sp)
 5085ccc:	e0bff60e 	bge	fp,r2,5085ca8 <__alt_data_end+0xfffb7aa8>
 5085cd0:	b009883a 	mov	r4,r22
 5085cd4:	b80b883a 	mov	r5,r23
 5085cd8:	d9811e04 	addi	r6,sp,1144
 5085cdc:	508cf980 	call	508cf98 <__sprint_r>
 5085ce0:	103c5a1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085ce4:	d8c12017 	ldw	r3,1152(sp)
 5085ce8:	d8811f17 	ldw	r2,1148(sp)
 5085cec:	da000404 	addi	r8,sp,16
 5085cf0:	003fee06 	br	5085cac <__alt_data_end+0xfffb7aac>
 5085cf4:	dac10e04 	addi	r11,sp,1080
 5085cf8:	0025883a 	mov	r18,zero
 5085cfc:	dac13115 	stw	r11,1220(sp)
 5085d00:	003cca06 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085d04:	b009883a 	mov	r4,r22
 5085d08:	b80b883a 	mov	r5,r23
 5085d0c:	d9811e04 	addi	r6,sp,1144
 5085d10:	508cf980 	call	508cf98 <__sprint_r>
 5085d14:	103c4d1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085d18:	d8c12017 	ldw	r3,1152(sp)
 5085d1c:	d8812787 	ldb	r2,1182(sp)
 5085d20:	da000404 	addi	r8,sp,16
 5085d24:	003d0506 	br	508513c <__alt_data_end+0xfffb6f3c>
 5085d28:	dac12d17 	ldw	r11,1204(sp)
 5085d2c:	14c00017 	ldw	r19,0(r2)
 5085d30:	0039883a 	mov	fp,zero
 5085d34:	5ac00104 	addi	r11,r11,4
 5085d38:	dac12d15 	stw	r11,1204(sp)
 5085d3c:	0005883a 	mov	r2,zero
 5085d40:	9807883a 	mov	r3,r19
 5085d44:	003c9c06 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 5085d48:	657fffc4 	addi	r21,r12,-1
 5085d4c:	057f5c0e 	bge	zero,r21,5085ac0 <__alt_data_end+0xfffb78c0>
 5085d50:	07000404 	movi	fp,16
 5085d54:	e5408f0e 	bge	fp,r21,5085f94 <___vfprintf_internal_r+0x15a4>
 5085d58:	01014274 	movhi	r4,1289
 5085d5c:	2114f184 	addi	r4,r4,21446
 5085d60:	d9012c15 	stw	r4,1200(sp)
 5085d64:	01c001c4 	movi	r7,7
 5085d68:	00000306 	br	5085d78 <___vfprintf_internal_r+0x1388>
 5085d6c:	94800204 	addi	r18,r18,8
 5085d70:	ad7ffc04 	addi	r21,r21,-16
 5085d74:	e5408a0e 	bge	fp,r21,5085fa0 <___vfprintf_internal_r+0x15b0>
 5085d78:	18c00404 	addi	r3,r3,16
 5085d7c:	84000044 	addi	r16,r16,1
 5085d80:	95000015 	stw	r20,0(r18)
 5085d84:	97000115 	stw	fp,4(r18)
 5085d88:	d8c12015 	stw	r3,1152(sp)
 5085d8c:	dc011f15 	stw	r16,1148(sp)
 5085d90:	3c3ff60e 	bge	r7,r16,5085d6c <__alt_data_end+0xfffb7b6c>
 5085d94:	b009883a 	mov	r4,r22
 5085d98:	b80b883a 	mov	r5,r23
 5085d9c:	d9811e04 	addi	r6,sp,1144
 5085da0:	d9c13d15 	stw	r7,1268(sp)
 5085da4:	508cf980 	call	508cf98 <__sprint_r>
 5085da8:	d9c13d17 	ldw	r7,1268(sp)
 5085dac:	103c271e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085db0:	d8c12017 	ldw	r3,1152(sp)
 5085db4:	dc011f17 	ldw	r16,1148(sp)
 5085db8:	dc800404 	addi	r18,sp,16
 5085dbc:	003fec06 	br	5085d70 <__alt_data_end+0xfffb7b70>
 5085dc0:	1cc00017 	ldw	r19,0(r3)
 5085dc4:	dac12d17 	ldw	r11,1204(sp)
 5085dc8:	9839d7fa 	srai	fp,r19,31
 5085dcc:	5ac00104 	addi	r11,r11,4
 5085dd0:	dac12d15 	stw	r11,1204(sp)
 5085dd4:	e005883a 	mov	r2,fp
 5085dd8:	003d9006 	br	508541c <__alt_data_end+0xfffb721c>
 5085ddc:	00800084 	movi	r2,2
 5085de0:	9f06b03a 	or	r3,r19,fp
 5085de4:	003c7406 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 5085de8:	db012d17 	ldw	r12,1204(sp)
 5085dec:	14c00017 	ldw	r19,0(r2)
 5085df0:	0039883a 	mov	fp,zero
 5085df4:	63000104 	addi	r12,r12,4
 5085df8:	db012d15 	stw	r12,1204(sp)
 5085dfc:	00800044 	movi	r2,1
 5085e00:	9807883a 	mov	r3,r19
 5085e04:	003c6c06 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 5085e08:	10803fcc 	andi	r2,r2,255
 5085e0c:	1080201c 	xori	r2,r2,128
 5085e10:	10bfe004 	addi	r2,r2,-128
 5085e14:	01000c04 	movi	r4,48
 5085e18:	1101a526 	beq	r2,r4,50864b0 <___vfprintf_internal_r+0x1ac0>
 5085e1c:	dac13117 	ldw	r11,1220(sp)
 5085e20:	db012817 	ldw	r12,1184(sp)
 5085e24:	193fffc5 	stb	r4,-1(r3)
 5085e28:	5affffc4 	addi	r11,r11,-1
 5085e2c:	dac13115 	stw	r11,1220(sp)
 5085e30:	62e5c83a 	sub	r18,r12,r11
 5085e34:	003c7d06 	br	508502c <__alt_data_end+0xfffb6e2c>
 5085e38:	b009883a 	mov	r4,r22
 5085e3c:	b80b883a 	mov	r5,r23
 5085e40:	d9811e04 	addi	r6,sp,1144
 5085e44:	508cf980 	call	508cf98 <__sprint_r>
 5085e48:	103c001e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085e4c:	d8c12017 	ldw	r3,1152(sp)
 5085e50:	da000404 	addi	r8,sp,16
 5085e54:	db013117 	ldw	r12,1220(sp)
 5085e58:	dac13417 	ldw	r11,1232(sp)
 5085e5c:	d8812617 	ldw	r2,1176(sp)
 5085e60:	62e5883a 	add	r18,r12,r11
 5085e64:	db013317 	ldw	r12,1228(sp)
 5085e68:	13000216 	blt	r2,r12,5085e74 <___vfprintf_internal_r+0x1484>
 5085e6c:	8900004c 	andi	r4,r17,1
 5085e70:	20000c26 	beq	r4,zero,5085ea4 <___vfprintf_internal_r+0x14b4>
 5085e74:	dac13817 	ldw	r11,1248(sp)
 5085e78:	d9011f17 	ldw	r4,1148(sp)
 5085e7c:	db013517 	ldw	r12,1236(sp)
 5085e80:	1ac7883a 	add	r3,r3,r11
 5085e84:	21000044 	addi	r4,r4,1
 5085e88:	43000015 	stw	r12,0(r8)
 5085e8c:	42c00115 	stw	r11,4(r8)
 5085e90:	d8c12015 	stw	r3,1152(sp)
 5085e94:	d9011f15 	stw	r4,1148(sp)
 5085e98:	014001c4 	movi	r5,7
 5085e9c:	2901cc16 	blt	r5,r4,50865d0 <___vfprintf_internal_r+0x1be0>
 5085ea0:	42000204 	addi	r8,r8,8
 5085ea4:	dac13317 	ldw	r11,1228(sp)
 5085ea8:	8489c83a 	sub	r4,r16,r18
 5085eac:	5885c83a 	sub	r2,r11,r2
 5085eb0:	1021883a 	mov	r16,r2
 5085eb4:	2080010e 	bge	r4,r2,5085ebc <___vfprintf_internal_r+0x14cc>
 5085eb8:	2021883a 	mov	r16,r4
 5085ebc:	04000a0e 	bge	zero,r16,5085ee8 <___vfprintf_internal_r+0x14f8>
 5085ec0:	d9011f17 	ldw	r4,1148(sp)
 5085ec4:	1c07883a 	add	r3,r3,r16
 5085ec8:	44800015 	stw	r18,0(r8)
 5085ecc:	21000044 	addi	r4,r4,1
 5085ed0:	44000115 	stw	r16,4(r8)
 5085ed4:	d8c12015 	stw	r3,1152(sp)
 5085ed8:	d9011f15 	stw	r4,1148(sp)
 5085edc:	014001c4 	movi	r5,7
 5085ee0:	2901d616 	blt	r5,r4,508663c <___vfprintf_internal_r+0x1c4c>
 5085ee4:	42000204 	addi	r8,r8,8
 5085ee8:	8001df16 	blt	r16,zero,5086668 <___vfprintf_internal_r+0x1c78>
 5085eec:	1421c83a 	sub	r16,r2,r16
 5085ef0:	043ce60e 	bge	zero,r16,508528c <__alt_data_end+0xfffb708c>
 5085ef4:	04800404 	movi	r18,16
 5085ef8:	d8811f17 	ldw	r2,1148(sp)
 5085efc:	943efc0e 	bge	r18,r16,5085af0 <__alt_data_end+0xfffb78f0>
 5085f00:	01414274 	movhi	r5,1289
 5085f04:	2954f184 	addi	r5,r5,21446
 5085f08:	d9412c15 	stw	r5,1200(sp)
 5085f0c:	054001c4 	movi	r21,7
 5085f10:	00000306 	br	5085f20 <___vfprintf_internal_r+0x1530>
 5085f14:	42000204 	addi	r8,r8,8
 5085f18:	843ffc04 	addi	r16,r16,-16
 5085f1c:	943ef70e 	bge	r18,r16,5085afc <__alt_data_end+0xfffb78fc>
 5085f20:	18c00404 	addi	r3,r3,16
 5085f24:	10800044 	addi	r2,r2,1
 5085f28:	45000015 	stw	r20,0(r8)
 5085f2c:	44800115 	stw	r18,4(r8)
 5085f30:	d8c12015 	stw	r3,1152(sp)
 5085f34:	d8811f15 	stw	r2,1148(sp)
 5085f38:	a8bff60e 	bge	r21,r2,5085f14 <__alt_data_end+0xfffb7d14>
 5085f3c:	b009883a 	mov	r4,r22
 5085f40:	b80b883a 	mov	r5,r23
 5085f44:	d9811e04 	addi	r6,sp,1144
 5085f48:	508cf980 	call	508cf98 <__sprint_r>
 5085f4c:	103bbf1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085f50:	d8c12017 	ldw	r3,1152(sp)
 5085f54:	d8811f17 	ldw	r2,1148(sp)
 5085f58:	da000404 	addi	r8,sp,16
 5085f5c:	003fee06 	br	5085f18 <__alt_data_end+0xfffb7d18>
 5085f60:	8888703a 	and	r4,r17,r2
 5085f64:	203eab1e 	bne	r4,zero,5085a14 <__alt_data_end+0xfffb7814>
 5085f68:	dc011f17 	ldw	r16,1148(sp)
 5085f6c:	db013117 	ldw	r12,1220(sp)
 5085f70:	40800115 	stw	r2,4(r8)
 5085f74:	84000044 	addi	r16,r16,1
 5085f78:	43000015 	stw	r12,0(r8)
 5085f7c:	d8c12015 	stw	r3,1152(sp)
 5085f80:	dc011f15 	stw	r16,1148(sp)
 5085f84:	008001c4 	movi	r2,7
 5085f88:	14000e16 	blt	r2,r16,5085fc4 <___vfprintf_internal_r+0x15d4>
 5085f8c:	44800204 	addi	r18,r8,8
 5085f90:	003ecb06 	br	5085ac0 <__alt_data_end+0xfffb78c0>
 5085f94:	00814274 	movhi	r2,1289
 5085f98:	1094f184 	addi	r2,r2,21446
 5085f9c:	d8812c15 	stw	r2,1200(sp)
 5085fa0:	dac12c17 	ldw	r11,1200(sp)
 5085fa4:	1d47883a 	add	r3,r3,r21
 5085fa8:	84000044 	addi	r16,r16,1
 5085fac:	92c00015 	stw	r11,0(r18)
 5085fb0:	95400115 	stw	r21,4(r18)
 5085fb4:	d8c12015 	stw	r3,1152(sp)
 5085fb8:	dc011f15 	stw	r16,1148(sp)
 5085fbc:	008001c4 	movi	r2,7
 5085fc0:	143ebe0e 	bge	r2,r16,5085abc <__alt_data_end+0xfffb78bc>
 5085fc4:	b009883a 	mov	r4,r22
 5085fc8:	b80b883a 	mov	r5,r23
 5085fcc:	d9811e04 	addi	r6,sp,1144
 5085fd0:	508cf980 	call	508cf98 <__sprint_r>
 5085fd4:	103b9d1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085fd8:	d8c12017 	ldw	r3,1152(sp)
 5085fdc:	dc011f17 	ldw	r16,1148(sp)
 5085fe0:	dc800404 	addi	r18,sp,16
 5085fe4:	003eb606 	br	5085ac0 <__alt_data_end+0xfffb78c0>
 5085fe8:	b009883a 	mov	r4,r22
 5085fec:	b80b883a 	mov	r5,r23
 5085ff0:	d9811e04 	addi	r6,sp,1144
 5085ff4:	508cf980 	call	508cf98 <__sprint_r>
 5085ff8:	103b941e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5085ffc:	d8c12017 	ldw	r3,1152(sp)
 5086000:	dc011f17 	ldw	r16,1148(sp)
 5086004:	da000404 	addi	r8,sp,16
 5086008:	003e8d06 	br	5085a40 <__alt_data_end+0xfffb7840>
 508600c:	b009883a 	mov	r4,r22
 5086010:	b80b883a 	mov	r5,r23
 5086014:	d9811e04 	addi	r6,sp,1144
 5086018:	508cf980 	call	508cf98 <__sprint_r>
 508601c:	103b8b1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5086020:	d8c12017 	ldw	r3,1152(sp)
 5086024:	dc011f17 	ldw	r16,1148(sp)
 5086028:	dc800404 	addi	r18,sp,16
 508602c:	003e8f06 	br	5085a6c <__alt_data_end+0xfffb786c>
 5086030:	db010e04 	addi	r12,sp,1080
 5086034:	0025883a 	mov	r18,zero
 5086038:	db013115 	stw	r12,1220(sp)
 508603c:	003bfb06 	br	508502c <__alt_data_end+0xfffb6e2c>
 5086040:	b009883a 	mov	r4,r22
 5086044:	b80b883a 	mov	r5,r23
 5086048:	d9811e04 	addi	r6,sp,1144
 508604c:	508cf980 	call	508cf98 <__sprint_r>
 5086050:	103b7e1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5086054:	d8c12017 	ldw	r3,1152(sp)
 5086058:	da000404 	addi	r8,sp,16
 508605c:	003c5506 	br	50851b4 <__alt_data_end+0xfffb6fb4>
 5086060:	04e7c83a 	sub	r19,zero,r19
 5086064:	9804c03a 	cmpne	r2,r19,zero
 5086068:	0739c83a 	sub	fp,zero,fp
 508606c:	e0b9c83a 	sub	fp,fp,r2
 5086070:	05400b44 	movi	r21,45
 5086074:	dd412785 	stb	r21,1182(sp)
 5086078:	da413215 	stw	r9,1224(sp)
 508607c:	00800044 	movi	r2,1
 5086080:	9f06b03a 	or	r3,r19,fp
 5086084:	003bcf06 	br	5084fc4 <__alt_data_end+0xfffb6dc4>
 5086088:	da013f15 	stw	r8,1276(sp)
 508608c:	da413e15 	stw	r9,1272(sp)
 5086090:	508b9c40 	call	508b9c4 <__fpclassifyd>
 5086094:	da013f17 	ldw	r8,1276(sp)
 5086098:	da413e17 	ldw	r9,1272(sp)
 508609c:	1000ce26 	beq	r2,zero,50863d8 <___vfprintf_internal_r+0x19e8>
 50860a0:	057ff7c4 	movi	r21,-33
 50860a4:	00bfffc4 	movi	r2,-1
 50860a8:	856a703a 	and	r21,r16,r21
 50860ac:	4881f026 	beq	r9,r2,5086870 <___vfprintf_internal_r+0x1e80>
 50860b0:	008011c4 	movi	r2,71
 50860b4:	a881e526 	beq	r21,r2,508684c <___vfprintf_internal_r+0x1e5c>
 50860b8:	db013917 	ldw	r12,1252(sp)
 50860bc:	8ac04014 	ori	r11,r17,256
 50860c0:	dac12d15 	stw	r11,1204(sp)
 50860c4:	6001e416 	blt	r12,zero,5086858 <___vfprintf_internal_r+0x1e68>
 50860c8:	dc813917 	ldw	r18,1252(sp)
 50860cc:	d8012b05 	stb	zero,1196(sp)
 50860d0:	00801984 	movi	r2,102
 50860d4:	80811826 	beq	r16,r2,5086538 <___vfprintf_internal_r+0x1b48>
 50860d8:	00801184 	movi	r2,70
 50860dc:	80811626 	beq	r16,r2,5086538 <___vfprintf_internal_r+0x1b48>
 50860e0:	00801144 	movi	r2,69
 50860e4:	a881e026 	beq	r21,r2,5086868 <___vfprintf_internal_r+0x1e78>
 50860e8:	4839883a 	mov	fp,r9
 50860ec:	d8812604 	addi	r2,sp,1176
 50860f0:	d8800115 	stw	r2,4(sp)
 50860f4:	d9413717 	ldw	r5,1244(sp)
 50860f8:	d8812504 	addi	r2,sp,1172
 50860fc:	d8800215 	stw	r2,8(sp)
 5086100:	d8812104 	addi	r2,sp,1156
 5086104:	df000015 	stw	fp,0(sp)
 5086108:	d8800315 	stw	r2,12(sp)
 508610c:	b009883a 	mov	r4,r22
 5086110:	900d883a 	mov	r6,r18
 5086114:	01c00084 	movi	r7,2
 5086118:	da013f15 	stw	r8,1276(sp)
 508611c:	da413e15 	stw	r9,1272(sp)
 5086120:	5086e700 	call	5086e70 <_dtoa_r>
 5086124:	d8813115 	stw	r2,1220(sp)
 5086128:	008019c4 	movi	r2,103
 508612c:	da013f17 	ldw	r8,1276(sp)
 5086130:	da413e17 	ldw	r9,1272(sp)
 5086134:	80800226 	beq	r16,r2,5086140 <___vfprintf_internal_r+0x1750>
 5086138:	008011c4 	movi	r2,71
 508613c:	8081101e 	bne	r16,r2,5086580 <___vfprintf_internal_r+0x1b90>
 5086140:	8880004c 	andi	r2,r17,1
 5086144:	1001df26 	beq	r2,zero,50868c4 <___vfprintf_internal_r+0x1ed4>
 5086148:	db013117 	ldw	r12,1220(sp)
 508614c:	6715883a 	add	r10,r12,fp
 5086150:	d9013717 	ldw	r4,1244(sp)
 5086154:	900b883a 	mov	r5,r18
 5086158:	000d883a 	mov	r6,zero
 508615c:	000f883a 	mov	r7,zero
 5086160:	da013f15 	stw	r8,1276(sp)
 5086164:	da413e15 	stw	r9,1272(sp)
 5086168:	da813d15 	stw	r10,1268(sp)
 508616c:	50909200 	call	5090920 <__eqdf2>
 5086170:	da013f17 	ldw	r8,1276(sp)
 5086174:	da413e17 	ldw	r9,1272(sp)
 5086178:	da813d17 	ldw	r10,1268(sp)
 508617c:	10016526 	beq	r2,zero,5086714 <___vfprintf_internal_r+0x1d24>
 5086180:	d8812117 	ldw	r2,1156(sp)
 5086184:	1280062e 	bgeu	r2,r10,50861a0 <___vfprintf_internal_r+0x17b0>
 5086188:	01000c04 	movi	r4,48
 508618c:	10c00044 	addi	r3,r2,1
 5086190:	d8c12115 	stw	r3,1156(sp)
 5086194:	11000005 	stb	r4,0(r2)
 5086198:	d8812117 	ldw	r2,1156(sp)
 508619c:	12bffb36 	bltu	r2,r10,508618c <__alt_data_end+0xfffb7f8c>
 50861a0:	db013117 	ldw	r12,1220(sp)
 50861a4:	1305c83a 	sub	r2,r2,r12
 50861a8:	d8813315 	stw	r2,1228(sp)
 50861ac:	008011c4 	movi	r2,71
 50861b0:	a8814a26 	beq	r21,r2,50866dc <___vfprintf_internal_r+0x1cec>
 50861b4:	00801944 	movi	r2,101
 50861b8:	14020a0e 	bge	r2,r16,50869e4 <___vfprintf_internal_r+0x1ff4>
 50861bc:	00801984 	movi	r2,102
 50861c0:	8081b626 	beq	r16,r2,508689c <___vfprintf_internal_r+0x1eac>
 50861c4:	db012617 	ldw	r12,1176(sp)
 50861c8:	db013415 	stw	r12,1232(sp)
 50861cc:	db013417 	ldw	r12,1232(sp)
 50861d0:	dac13317 	ldw	r11,1228(sp)
 50861d4:	62c1a816 	blt	r12,r11,5086878 <___vfprintf_internal_r+0x1e88>
 50861d8:	8c40004c 	andi	r17,r17,1
 50861dc:	8801ca1e 	bne	r17,zero,5086908 <___vfprintf_internal_r+0x1f18>
 50861e0:	6005883a 	mov	r2,r12
 50861e4:	6001b516 	blt	r12,zero,50868bc <___vfprintf_internal_r+0x1ecc>
 50861e8:	dc813417 	ldw	r18,1232(sp)
 50861ec:	df012b07 	ldb	fp,1196(sp)
 50861f0:	e001321e 	bne	fp,zero,50866bc <___vfprintf_internal_r+0x1ccc>
 50861f4:	dc412d17 	ldw	r17,1204(sp)
 50861f8:	dd412783 	ldbu	r21,1182(sp)
 50861fc:	d8812b15 	stw	r2,1196(sp)
 5086200:	dcc12d15 	stw	r19,1204(sp)
 5086204:	d8013215 	stw	zero,1224(sp)
 5086208:	003b8d06 	br	5085040 <__alt_data_end+0xfffb6e40>
 508620c:	88c0100c 	andi	r3,r17,64
 5086210:	18008226 	beq	r3,zero,508641c <___vfprintf_internal_r+0x1a2c>
 5086214:	dac12d17 	ldw	r11,1204(sp)
 5086218:	14c0000b 	ldhu	r19,0(r2)
 508621c:	0039883a 	mov	fp,zero
 5086220:	5ac00104 	addi	r11,r11,4
 5086224:	dac12d15 	stw	r11,1204(sp)
 5086228:	003c8f06 	br	5085468 <__alt_data_end+0xfffb7268>
 508622c:	1c000007 	ldb	r16,0(r3)
 5086230:	1805883a 	mov	r2,r3
 5086234:	003a5506 	br	5084b8c <__alt_data_end+0xfffb698c>
 5086238:	00800084 	movi	r2,2
 508623c:	003b5e06 	br	5084fb8 <__alt_data_end+0xfffb6db8>
 5086240:	8880040c 	andi	r2,r17,16
 5086244:	1000091e 	bne	r2,zero,508626c <___vfprintf_internal_r+0x187c>
 5086248:	8c40100c 	andi	r17,r17,64
 508624c:	88000726 	beq	r17,zero,508626c <___vfprintf_internal_r+0x187c>
 5086250:	db012d17 	ldw	r12,1204(sp)
 5086254:	dac12f17 	ldw	r11,1212(sp)
 5086258:	60800017 	ldw	r2,0(r12)
 508625c:	63000104 	addi	r12,r12,4
 5086260:	db012d15 	stw	r12,1204(sp)
 5086264:	12c0000d 	sth	r11,0(r2)
 5086268:	003a1e06 	br	5084ae4 <__alt_data_end+0xfffb68e4>
 508626c:	db012d17 	ldw	r12,1204(sp)
 5086270:	dac12f17 	ldw	r11,1212(sp)
 5086274:	60800017 	ldw	r2,0(r12)
 5086278:	63000104 	addi	r12,r12,4
 508627c:	db012d15 	stw	r12,1204(sp)
 5086280:	12c00015 	stw	r11,0(r2)
 5086284:	003a1706 	br	5084ae4 <__alt_data_end+0xfffb68e4>
 5086288:	01014274 	movhi	r4,1289
 508628c:	2114f184 	addi	r4,r4,21446
 5086290:	d9012c15 	stw	r4,1200(sp)
 5086294:	dac12c17 	ldw	r11,1200(sp)
 5086298:	1c87883a 	add	r3,r3,r18
 508629c:	10800044 	addi	r2,r2,1
 50862a0:	42c00015 	stw	r11,0(r8)
 50862a4:	44800115 	stw	r18,4(r8)
 50862a8:	d8c12015 	stw	r3,1152(sp)
 50862ac:	d8811f15 	stw	r2,1148(sp)
 50862b0:	010001c4 	movi	r4,7
 50862b4:	20bee016 	blt	r4,r2,5085e38 <__alt_data_end+0xfffb7c38>
 50862b8:	42000204 	addi	r8,r8,8
 50862bc:	003ee506 	br	5085e54 <__alt_data_end+0xfffb7c54>
 50862c0:	01014274 	movhi	r4,1289
 50862c4:	2114f184 	addi	r4,r4,21446
 50862c8:	d9012c15 	stw	r4,1200(sp)
 50862cc:	003bd806 	br	5085230 <__alt_data_end+0xfffb7030>
 50862d0:	b009883a 	mov	r4,r22
 50862d4:	b80b883a 	mov	r5,r23
 50862d8:	d9811e04 	addi	r6,sp,1144
 50862dc:	508cf980 	call	508cf98 <__sprint_r>
 50862e0:	103ada1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50862e4:	d8c12017 	ldw	r3,1152(sp)
 50862e8:	da000404 	addi	r8,sp,16
 50862ec:	003d6b06 	br	508589c <__alt_data_end+0xfffb769c>
 50862f0:	d8811f17 	ldw	r2,1148(sp)
 50862f4:	03014274 	movhi	r12,1289
 50862f8:	01000044 	movi	r4,1
 50862fc:	18c00044 	addi	r3,r3,1
 5086300:	10800044 	addi	r2,r2,1
 5086304:	6314e904 	addi	r12,r12,21412
 5086308:	41000115 	stw	r4,4(r8)
 508630c:	43000015 	stw	r12,0(r8)
 5086310:	d8c12015 	stw	r3,1152(sp)
 5086314:	d8811f15 	stw	r2,1148(sp)
 5086318:	010001c4 	movi	r4,7
 508631c:	20804916 	blt	r4,r2,5086444 <___vfprintf_internal_r+0x1a54>
 5086320:	42000204 	addi	r8,r8,8
 5086324:	8000041e 	bne	r16,zero,5086338 <___vfprintf_internal_r+0x1948>
 5086328:	dac13317 	ldw	r11,1228(sp)
 508632c:	5800021e 	bne	r11,zero,5086338 <___vfprintf_internal_r+0x1948>
 5086330:	8880004c 	andi	r2,r17,1
 5086334:	103bd526 	beq	r2,zero,508528c <__alt_data_end+0xfffb708c>
 5086338:	db013817 	ldw	r12,1248(sp)
 508633c:	d8811f17 	ldw	r2,1148(sp)
 5086340:	dac13517 	ldw	r11,1236(sp)
 5086344:	1b07883a 	add	r3,r3,r12
 5086348:	10800044 	addi	r2,r2,1
 508634c:	42c00015 	stw	r11,0(r8)
 5086350:	43000115 	stw	r12,4(r8)
 5086354:	d8c12015 	stw	r3,1152(sp)
 5086358:	d8811f15 	stw	r2,1148(sp)
 508635c:	010001c4 	movi	r4,7
 5086360:	20813016 	blt	r4,r2,5086824 <___vfprintf_internal_r+0x1e34>
 5086364:	42000204 	addi	r8,r8,8
 5086368:	0421c83a 	sub	r16,zero,r16
 508636c:	0400630e 	bge	zero,r16,50864fc <___vfprintf_internal_r+0x1b0c>
 5086370:	04800404 	movi	r18,16
 5086374:	94009f0e 	bge	r18,r16,50865f4 <___vfprintf_internal_r+0x1c04>
 5086378:	01014274 	movhi	r4,1289
 508637c:	2114f184 	addi	r4,r4,21446
 5086380:	d9012c15 	stw	r4,1200(sp)
 5086384:	054001c4 	movi	r21,7
 5086388:	00000306 	br	5086398 <___vfprintf_internal_r+0x19a8>
 508638c:	42000204 	addi	r8,r8,8
 5086390:	843ffc04 	addi	r16,r16,-16
 5086394:	94009a0e 	bge	r18,r16,5086600 <___vfprintf_internal_r+0x1c10>
 5086398:	18c00404 	addi	r3,r3,16
 508639c:	10800044 	addi	r2,r2,1
 50863a0:	45000015 	stw	r20,0(r8)
 50863a4:	44800115 	stw	r18,4(r8)
 50863a8:	d8c12015 	stw	r3,1152(sp)
 50863ac:	d8811f15 	stw	r2,1148(sp)
 50863b0:	a8bff60e 	bge	r21,r2,508638c <__alt_data_end+0xfffb818c>
 50863b4:	b009883a 	mov	r4,r22
 50863b8:	b80b883a 	mov	r5,r23
 50863bc:	d9811e04 	addi	r6,sp,1144
 50863c0:	508cf980 	call	508cf98 <__sprint_r>
 50863c4:	103aa11e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50863c8:	d8c12017 	ldw	r3,1152(sp)
 50863cc:	d8811f17 	ldw	r2,1148(sp)
 50863d0:	da000404 	addi	r8,sp,16
 50863d4:	003fee06 	br	5086390 <__alt_data_end+0xfffb8190>
 50863d8:	008011c4 	movi	r2,71
 50863dc:	1400b316 	blt	r2,r16,50866ac <___vfprintf_internal_r+0x1cbc>
 50863e0:	03014274 	movhi	r12,1289
 50863e4:	6314db04 	addi	r12,r12,21356
 50863e8:	db013115 	stw	r12,1220(sp)
 50863ec:	00c000c4 	movi	r3,3
 50863f0:	00bfdfc4 	movi	r2,-129
 50863f4:	d8c12b15 	stw	r3,1196(sp)
 50863f8:	88a2703a 	and	r17,r17,r2
 50863fc:	dd412783 	ldbu	r21,1182(sp)
 5086400:	dcc12d15 	stw	r19,1204(sp)
 5086404:	1825883a 	mov	r18,r3
 5086408:	d8013215 	stw	zero,1224(sp)
 508640c:	d8013415 	stw	zero,1232(sp)
 5086410:	003b0b06 	br	5085040 <__alt_data_end+0xfffb6e40>
 5086414:	4825883a 	mov	r18,r9
 5086418:	003cba06 	br	5085704 <__alt_data_end+0xfffb7504>
 508641c:	db012d17 	ldw	r12,1204(sp)
 5086420:	14c00017 	ldw	r19,0(r2)
 5086424:	0039883a 	mov	fp,zero
 5086428:	63000104 	addi	r12,r12,4
 508642c:	db012d15 	stw	r12,1204(sp)
 5086430:	003c0d06 	br	5085468 <__alt_data_end+0xfffb7268>
 5086434:	00814274 	movhi	r2,1289
 5086438:	1094d904 	addi	r2,r2,21348
 508643c:	d8813115 	stw	r2,1220(sp)
 5086440:	003ac406 	br	5084f54 <__alt_data_end+0xfffb6d54>
 5086444:	b009883a 	mov	r4,r22
 5086448:	b80b883a 	mov	r5,r23
 508644c:	d9811e04 	addi	r6,sp,1144
 5086450:	508cf980 	call	508cf98 <__sprint_r>
 5086454:	103a7d1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5086458:	dc012617 	ldw	r16,1176(sp)
 508645c:	d8c12017 	ldw	r3,1152(sp)
 5086460:	da000404 	addi	r8,sp,16
 5086464:	003faf06 	br	5086324 <__alt_data_end+0xfffb8124>
 5086468:	db012e17 	ldw	r12,1208(sp)
 508646c:	1805883a 	mov	r2,r3
 5086470:	dac12d15 	stw	r11,1204(sp)
 5086474:	0319c83a 	sub	r12,zero,r12
 5086478:	db012e15 	stw	r12,1208(sp)
 508647c:	003a7e06 	br	5084e78 <__alt_data_end+0xfffb6c78>
 5086480:	18800044 	addi	r2,r3,1
 5086484:	8c400814 	ori	r17,r17,32
 5086488:	1c000047 	ldb	r16,1(r3)
 508648c:	0039bf06 	br	5084b8c <__alt_data_end+0xfffb698c>
 5086490:	b009883a 	mov	r4,r22
 5086494:	b80b883a 	mov	r5,r23
 5086498:	d9811e04 	addi	r6,sp,1144
 508649c:	508cf980 	call	508cf98 <__sprint_r>
 50864a0:	103a6a1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50864a4:	d8c12017 	ldw	r3,1152(sp)
 50864a8:	da000404 	addi	r8,sp,16
 50864ac:	003d0c06 	br	50858e0 <__alt_data_end+0xfffb76e0>
 50864b0:	db012817 	ldw	r12,1184(sp)
 50864b4:	d8c13117 	ldw	r3,1220(sp)
 50864b8:	60e5c83a 	sub	r18,r12,r3
 50864bc:	003adb06 	br	508502c <__alt_data_end+0xfffb6e2c>
 50864c0:	da013f15 	stw	r8,1276(sp)
 50864c4:	50829c80 	call	50829c8 <strlen>
 50864c8:	1025883a 	mov	r18,r2
 50864cc:	da013f17 	ldw	r8,1276(sp)
 50864d0:	903c8e0e 	bge	r18,zero,508570c <__alt_data_end+0xfffb750c>
 50864d4:	0005883a 	mov	r2,zero
 50864d8:	003c8c06 	br	508570c <__alt_data_end+0xfffb750c>
 50864dc:	b009883a 	mov	r4,r22
 50864e0:	b80b883a 	mov	r5,r23
 50864e4:	d9811e04 	addi	r6,sp,1144
 50864e8:	508cf980 	call	508cf98 <__sprint_r>
 50864ec:	103a571e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50864f0:	d8c12017 	ldw	r3,1152(sp)
 50864f4:	d8811f17 	ldw	r2,1148(sp)
 50864f8:	da000404 	addi	r8,sp,16
 50864fc:	db013317 	ldw	r12,1228(sp)
 5086500:	dac13117 	ldw	r11,1220(sp)
 5086504:	10800044 	addi	r2,r2,1
 5086508:	60c7883a 	add	r3,r12,r3
 508650c:	42c00015 	stw	r11,0(r8)
 5086510:	43000115 	stw	r12,4(r8)
 5086514:	d8c12015 	stw	r3,1152(sp)
 5086518:	d8811f15 	stw	r2,1148(sp)
 508651c:	010001c4 	movi	r4,7
 5086520:	20bb590e 	bge	r4,r2,5085288 <__alt_data_end+0xfffb7088>
 5086524:	003d7e06 	br	5085b20 <__alt_data_end+0xfffb7920>
 5086528:	01014274 	movhi	r4,1289
 508652c:	2114f584 	addi	r4,r4,21462
 5086530:	d9013615 	stw	r4,1240(sp)
 5086534:	003af606 	br	5085110 <__alt_data_end+0xfffb6f10>
 5086538:	d8812604 	addi	r2,sp,1176
 508653c:	d8800115 	stw	r2,4(sp)
 5086540:	d9413717 	ldw	r5,1244(sp)
 5086544:	d8812504 	addi	r2,sp,1172
 5086548:	d8800215 	stw	r2,8(sp)
 508654c:	d8812104 	addi	r2,sp,1156
 5086550:	da400015 	stw	r9,0(sp)
 5086554:	d8800315 	stw	r2,12(sp)
 5086558:	b009883a 	mov	r4,r22
 508655c:	900d883a 	mov	r6,r18
 5086560:	01c000c4 	movi	r7,3
 5086564:	da013f15 	stw	r8,1276(sp)
 5086568:	da413e15 	stw	r9,1272(sp)
 508656c:	5086e700 	call	5086e70 <_dtoa_r>
 5086570:	da413e17 	ldw	r9,1272(sp)
 5086574:	da013f17 	ldw	r8,1276(sp)
 5086578:	d8813115 	stw	r2,1220(sp)
 508657c:	4839883a 	mov	fp,r9
 5086580:	dac13117 	ldw	r11,1220(sp)
 5086584:	00801184 	movi	r2,70
 5086588:	5f15883a 	add	r10,r11,fp
 508658c:	a8bef01e 	bne	r21,r2,5086150 <__alt_data_end+0xfffb7f50>
 5086590:	59000007 	ldb	r4,0(r11)
 5086594:	00800c04 	movi	r2,48
 5086598:	2080e026 	beq	r4,r2,508691c <___vfprintf_internal_r+0x1f2c>
 508659c:	d8c12617 	ldw	r3,1176(sp)
 50865a0:	50d5883a 	add	r10,r10,r3
 50865a4:	003eea06 	br	5086150 <__alt_data_end+0xfffb7f50>
 50865a8:	0025883a 	mov	r18,zero
 50865ac:	003db306 	br	5085c7c <__alt_data_end+0xfffb7a7c>
 50865b0:	b009883a 	mov	r4,r22
 50865b4:	b80b883a 	mov	r5,r23
 50865b8:	d9811e04 	addi	r6,sp,1144
 50865bc:	508cf980 	call	508cf98 <__sprint_r>
 50865c0:	103a221e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50865c4:	d8c12017 	ldw	r3,1152(sp)
 50865c8:	da000404 	addi	r8,sp,16
 50865cc:	003daa06 	br	5085c78 <__alt_data_end+0xfffb7a78>
 50865d0:	b009883a 	mov	r4,r22
 50865d4:	b80b883a 	mov	r5,r23
 50865d8:	d9811e04 	addi	r6,sp,1144
 50865dc:	508cf980 	call	508cf98 <__sprint_r>
 50865e0:	103a1a1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 50865e4:	d8812617 	ldw	r2,1176(sp)
 50865e8:	d8c12017 	ldw	r3,1152(sp)
 50865ec:	da000404 	addi	r8,sp,16
 50865f0:	003e2c06 	br	5085ea4 <__alt_data_end+0xfffb7ca4>
 50865f4:	03014274 	movhi	r12,1289
 50865f8:	6314f184 	addi	r12,r12,21446
 50865fc:	db012c15 	stw	r12,1200(sp)
 5086600:	dac12c17 	ldw	r11,1200(sp)
 5086604:	1c07883a 	add	r3,r3,r16
 5086608:	10800044 	addi	r2,r2,1
 508660c:	42c00015 	stw	r11,0(r8)
 5086610:	44000115 	stw	r16,4(r8)
 5086614:	d8c12015 	stw	r3,1152(sp)
 5086618:	d8811f15 	stw	r2,1148(sp)
 508661c:	010001c4 	movi	r4,7
 5086620:	20bfae16 	blt	r4,r2,50864dc <__alt_data_end+0xfffb82dc>
 5086624:	42000204 	addi	r8,r8,8
 5086628:	003fb406 	br	50864fc <__alt_data_end+0xfffb82fc>
 508662c:	03014274 	movhi	r12,1289
 5086630:	6314f584 	addi	r12,r12,21462
 5086634:	db013615 	stw	r12,1240(sp)
 5086638:	003b3806 	br	508531c <__alt_data_end+0xfffb711c>
 508663c:	b009883a 	mov	r4,r22
 5086640:	b80b883a 	mov	r5,r23
 5086644:	d9811e04 	addi	r6,sp,1144
 5086648:	508cf980 	call	508cf98 <__sprint_r>
 508664c:	1039ff1e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5086650:	d8812617 	ldw	r2,1176(sp)
 5086654:	db013317 	ldw	r12,1228(sp)
 5086658:	d8c12017 	ldw	r3,1152(sp)
 508665c:	da000404 	addi	r8,sp,16
 5086660:	6085c83a 	sub	r2,r12,r2
 5086664:	003e2006 	br	5085ee8 <__alt_data_end+0xfffb7ce8>
 5086668:	0021883a 	mov	r16,zero
 508666c:	003e1f06 	br	5085eec <__alt_data_end+0xfffb7cec>
 5086670:	00800184 	movi	r2,6
 5086674:	1240012e 	bgeu	r2,r9,508667c <___vfprintf_internal_r+0x1c8c>
 5086678:	1013883a 	mov	r9,r2
 508667c:	4825883a 	mov	r18,r9
 5086680:	4805883a 	mov	r2,r9
 5086684:	48009e16 	blt	r9,zero,5086900 <___vfprintf_internal_r+0x1f10>
 5086688:	d8812b15 	stw	r2,1196(sp)
 508668c:	00814274 	movhi	r2,1289
 5086690:	1094e704 	addi	r2,r2,21404
 5086694:	d8813115 	stw	r2,1220(sp)
 5086698:	dcc12d15 	stw	r19,1204(sp)
 508669c:	d8013215 	stw	zero,1224(sp)
 50866a0:	d8013415 	stw	zero,1232(sp)
 50866a4:	0005883a 	mov	r2,zero
 50866a8:	003a6c06 	br	508505c <__alt_data_end+0xfffb6e5c>
 50866ac:	00814274 	movhi	r2,1289
 50866b0:	1094dc04 	addi	r2,r2,21360
 50866b4:	d8813115 	stw	r2,1220(sp)
 50866b8:	003f4c06 	br	50863ec <__alt_data_end+0xfffb81ec>
 50866bc:	00c00b44 	movi	r3,45
 50866c0:	d8812b15 	stw	r2,1196(sp)
 50866c4:	dc412d17 	ldw	r17,1204(sp)
 50866c8:	d8c12785 	stb	r3,1182(sp)
 50866cc:	dcc12d15 	stw	r19,1204(sp)
 50866d0:	d8013215 	stw	zero,1224(sp)
 50866d4:	00800b44 	movi	r2,45
 50866d8:	003a5d06 	br	5085050 <__alt_data_end+0xfffb6e50>
 50866dc:	d8c12617 	ldw	r3,1176(sp)
 50866e0:	00bfff44 	movi	r2,-3
 50866e4:	18800d16 	blt	r3,r2,508671c <___vfprintf_internal_r+0x1d2c>
 50866e8:	48c00c16 	blt	r9,r3,508671c <___vfprintf_internal_r+0x1d2c>
 50866ec:	d8c13415 	stw	r3,1232(sp)
 50866f0:	040019c4 	movi	r16,103
 50866f4:	003eb506 	br	50861cc <__alt_data_end+0xfffb7fcc>
 50866f8:	05400b44 	movi	r21,45
 50866fc:	dd412785 	stb	r21,1182(sp)
 5086700:	003a0f06 	br	5084f40 <__alt_data_end+0xfffb6d40>
 5086704:	01014274 	movhi	r4,1289
 5086708:	2114f184 	addi	r4,r4,21446
 508670c:	d9012c15 	stw	r4,1200(sp)
 5086710:	003cb106 	br	50859d8 <__alt_data_end+0xfffb77d8>
 5086714:	5005883a 	mov	r2,r10
 5086718:	003ea106 	br	50861a0 <__alt_data_end+0xfffb7fa0>
 508671c:	843fff84 	addi	r16,r16,-2
 5086720:	1f3fffc4 	addi	fp,r3,-1
 5086724:	df012615 	stw	fp,1176(sp)
 5086728:	dc0122c5 	stb	r16,1163(sp)
 508672c:	e0009516 	blt	fp,zero,5086984 <___vfprintf_internal_r+0x1f94>
 5086730:	00800ac4 	movi	r2,43
 5086734:	d8812305 	stb	r2,1164(sp)
 5086738:	00800244 	movi	r2,9
 508673c:	1700690e 	bge	r2,fp,50868e4 <___vfprintf_internal_r+0x1ef4>
 5086740:	dd4122c4 	addi	r21,sp,1163
 5086744:	dc012c15 	stw	r16,1200(sp)
 5086748:	8825883a 	mov	r18,r17
 508674c:	a821883a 	mov	r16,r21
 5086750:	4023883a 	mov	r17,r8
 5086754:	e009883a 	mov	r4,fp
 5086758:	01400284 	movi	r5,10
 508675c:	50827640 	call	5082764 <__modsi3>
 5086760:	10800c04 	addi	r2,r2,48
 5086764:	843fffc4 	addi	r16,r16,-1
 5086768:	e009883a 	mov	r4,fp
 508676c:	01400284 	movi	r5,10
 5086770:	80800005 	stb	r2,0(r16)
 5086774:	50827100 	call	5082710 <__divsi3>
 5086778:	1039883a 	mov	fp,r2
 508677c:	00800244 	movi	r2,9
 5086780:	173ff416 	blt	r2,fp,5086754 <__alt_data_end+0xfffb8554>
 5086784:	8811883a 	mov	r8,r17
 5086788:	e0800c04 	addi	r2,fp,48
 508678c:	9023883a 	mov	r17,r18
 5086790:	8025883a 	mov	r18,r16
 5086794:	913fffc4 	addi	r4,r18,-1
 5086798:	90bfffc5 	stb	r2,-1(r18)
 508679c:	dc012c17 	ldw	r16,1200(sp)
 50867a0:	25408e2e 	bgeu	r4,r21,50869dc <___vfprintf_internal_r+0x1fec>
 50867a4:	d9412384 	addi	r5,sp,1166
 50867a8:	2c8bc83a 	sub	r5,r5,r18
 50867ac:	d8c12344 	addi	r3,sp,1165
 50867b0:	a94b883a 	add	r5,r21,r5
 50867b4:	00000106 	br	50867bc <___vfprintf_internal_r+0x1dcc>
 50867b8:	20800003 	ldbu	r2,0(r4)
 50867bc:	18800005 	stb	r2,0(r3)
 50867c0:	18c00044 	addi	r3,r3,1
 50867c4:	21000044 	addi	r4,r4,1
 50867c8:	197ffb1e 	bne	r3,r5,50867b8 <__alt_data_end+0xfffb85b8>
 50867cc:	d8812304 	addi	r2,sp,1164
 50867d0:	1485c83a 	sub	r2,r2,r18
 50867d4:	d8c12344 	addi	r3,sp,1165
 50867d8:	1885883a 	add	r2,r3,r2
 50867dc:	dac13317 	ldw	r11,1228(sp)
 50867e0:	156bc83a 	sub	r21,r2,r21
 50867e4:	dd413a15 	stw	r21,1256(sp)
 50867e8:	00800044 	movi	r2,1
 50867ec:	5d65883a 	add	r18,r11,r21
 50867f0:	12c0770e 	bge	r2,r11,50869d0 <___vfprintf_internal_r+0x1fe0>
 50867f4:	94800044 	addi	r18,r18,1
 50867f8:	9005883a 	mov	r2,r18
 50867fc:	90007216 	blt	r18,zero,50869c8 <___vfprintf_internal_r+0x1fd8>
 5086800:	d8013415 	stw	zero,1232(sp)
 5086804:	003e7906 	br	50861ec <__alt_data_end+0xfffb7fec>
 5086808:	da412b15 	stw	r9,1196(sp)
 508680c:	dd412783 	ldbu	r21,1182(sp)
 5086810:	4825883a 	mov	r18,r9
 5086814:	dcc12d15 	stw	r19,1204(sp)
 5086818:	d8013215 	stw	zero,1224(sp)
 508681c:	d8013415 	stw	zero,1232(sp)
 5086820:	003a0706 	br	5085040 <__alt_data_end+0xfffb6e40>
 5086824:	b009883a 	mov	r4,r22
 5086828:	b80b883a 	mov	r5,r23
 508682c:	d9811e04 	addi	r6,sp,1144
 5086830:	508cf980 	call	508cf98 <__sprint_r>
 5086834:	1039851e 	bne	r2,zero,5084e4c <__alt_data_end+0xfffb6c4c>
 5086838:	dc012617 	ldw	r16,1176(sp)
 508683c:	d8c12017 	ldw	r3,1152(sp)
 5086840:	d8811f17 	ldw	r2,1148(sp)
 5086844:	da000404 	addi	r8,sp,16
 5086848:	003ec706 	br	5086368 <__alt_data_end+0xfffb8168>
 508684c:	483e1a1e 	bne	r9,zero,50860b8 <__alt_data_end+0xfffb7eb8>
 5086850:	9013883a 	mov	r9,r18
 5086854:	003e1806 	br	50860b8 <__alt_data_end+0xfffb7eb8>
 5086858:	00c00b44 	movi	r3,45
 508685c:	64a0003c 	xorhi	r18,r12,32768
 5086860:	d8c12b05 	stb	r3,1196(sp)
 5086864:	003e1a06 	br	50860d0 <__alt_data_end+0xfffb7ed0>
 5086868:	4f000044 	addi	fp,r9,1
 508686c:	003e1f06 	br	50860ec <__alt_data_end+0xfffb7eec>
 5086870:	02400184 	movi	r9,6
 5086874:	003e1006 	br	50860b8 <__alt_data_end+0xfffb7eb8>
 5086878:	d8c13417 	ldw	r3,1232(sp)
 508687c:	00c04b0e 	bge	zero,r3,50869ac <___vfprintf_internal_r+0x1fbc>
 5086880:	04800044 	movi	r18,1
 5086884:	dac13317 	ldw	r11,1228(sp)
 5086888:	92e5883a 	add	r18,r18,r11
 508688c:	9005883a 	mov	r2,r18
 5086890:	903e560e 	bge	r18,zero,50861ec <__alt_data_end+0xfffb7fec>
 5086894:	0005883a 	mov	r2,zero
 5086898:	003e5406 	br	50861ec <__alt_data_end+0xfffb7fec>
 508689c:	d8c12617 	ldw	r3,1176(sp)
 50868a0:	d8c13415 	stw	r3,1232(sp)
 50868a4:	00c03b0e 	bge	zero,r3,5086994 <___vfprintf_internal_r+0x1fa4>
 50868a8:	4800081e 	bne	r9,zero,50868cc <___vfprintf_internal_r+0x1edc>
 50868ac:	8c40004c 	andi	r17,r17,1
 50868b0:	8800061e 	bne	r17,zero,50868cc <___vfprintf_internal_r+0x1edc>
 50868b4:	1805883a 	mov	r2,r3
 50868b8:	183e4b0e 	bge	r3,zero,50861e8 <__alt_data_end+0xfffb7fe8>
 50868bc:	0005883a 	mov	r2,zero
 50868c0:	003e4906 	br	50861e8 <__alt_data_end+0xfffb7fe8>
 50868c4:	d8812117 	ldw	r2,1156(sp)
 50868c8:	003e3506 	br	50861a0 <__alt_data_end+0xfffb7fa0>
 50868cc:	dac13417 	ldw	r11,1232(sp)
 50868d0:	4a400044 	addi	r9,r9,1
 50868d4:	5a65883a 	add	r18,r11,r9
 50868d8:	9005883a 	mov	r2,r18
 50868dc:	903e430e 	bge	r18,zero,50861ec <__alt_data_end+0xfffb7fec>
 50868e0:	003fec06 	br	5086894 <__alt_data_end+0xfffb8694>
 50868e4:	00800c04 	movi	r2,48
 50868e8:	e0c00c04 	addi	r3,fp,48
 50868ec:	d8812345 	stb	r2,1165(sp)
 50868f0:	d8c12385 	stb	r3,1166(sp)
 50868f4:	d88123c4 	addi	r2,sp,1167
 50868f8:	dd4122c4 	addi	r21,sp,1163
 50868fc:	003fb706 	br	50867dc <__alt_data_end+0xfffb85dc>
 5086900:	0005883a 	mov	r2,zero
 5086904:	003f6006 	br	5086688 <__alt_data_end+0xfffb8488>
 5086908:	db013417 	ldw	r12,1232(sp)
 508690c:	64800044 	addi	r18,r12,1
 5086910:	9005883a 	mov	r2,r18
 5086914:	903e350e 	bge	r18,zero,50861ec <__alt_data_end+0xfffb7fec>
 5086918:	003fde06 	br	5086894 <__alt_data_end+0xfffb8694>
 508691c:	d9013717 	ldw	r4,1244(sp)
 5086920:	900b883a 	mov	r5,r18
 5086924:	000d883a 	mov	r6,zero
 5086928:	000f883a 	mov	r7,zero
 508692c:	da013f15 	stw	r8,1276(sp)
 5086930:	da413e15 	stw	r9,1272(sp)
 5086934:	da813d15 	stw	r10,1268(sp)
 5086938:	50909200 	call	5090920 <__eqdf2>
 508693c:	da013f17 	ldw	r8,1276(sp)
 5086940:	da413e17 	ldw	r9,1272(sp)
 5086944:	da813d17 	ldw	r10,1268(sp)
 5086948:	103f1426 	beq	r2,zero,508659c <__alt_data_end+0xfffb839c>
 508694c:	00800044 	movi	r2,1
 5086950:	1707c83a 	sub	r3,r2,fp
 5086954:	d8c12615 	stw	r3,1176(sp)
 5086958:	003f1106 	br	50865a0 <__alt_data_end+0xfffb83a0>
 508695c:	dac12d17 	ldw	r11,1204(sp)
 5086960:	5a400017 	ldw	r9,0(r11)
 5086964:	5ac00104 	addi	r11,r11,4
 5086968:	dac12d15 	stw	r11,1204(sp)
 508696c:	483ec60e 	bge	r9,zero,5086488 <__alt_data_end+0xfffb8288>
 5086970:	027fffc4 	movi	r9,-1
 5086974:	1c000047 	ldb	r16,1(r3)
 5086978:	00388406 	br	5084b8c <__alt_data_end+0xfffb698c>
 508697c:	043fffc4 	movi	r16,-1
 5086980:	00391006 	br	5084dc4 <__alt_data_end+0xfffb6bc4>
 5086984:	00800b44 	movi	r2,45
 5086988:	0739c83a 	sub	fp,zero,fp
 508698c:	d8812305 	stb	r2,1164(sp)
 5086990:	003f6906 	br	5086738 <__alt_data_end+0xfffb8538>
 5086994:	4800081e 	bne	r9,zero,50869b8 <___vfprintf_internal_r+0x1fc8>
 5086998:	8c40004c 	andi	r17,r17,1
 508699c:	8800061e 	bne	r17,zero,50869b8 <___vfprintf_internal_r+0x1fc8>
 50869a0:	00800044 	movi	r2,1
 50869a4:	1025883a 	mov	r18,r2
 50869a8:	003e1006 	br	50861ec <__alt_data_end+0xfffb7fec>
 50869ac:	04800084 	movi	r18,2
 50869b0:	90e5c83a 	sub	r18,r18,r3
 50869b4:	003fb306 	br	5086884 <__alt_data_end+0xfffb8684>
 50869b8:	4c800084 	addi	r18,r9,2
 50869bc:	9005883a 	mov	r2,r18
 50869c0:	903e0a0e 	bge	r18,zero,50861ec <__alt_data_end+0xfffb7fec>
 50869c4:	003fb306 	br	5086894 <__alt_data_end+0xfffb8694>
 50869c8:	0005883a 	mov	r2,zero
 50869cc:	003f8c06 	br	5086800 <__alt_data_end+0xfffb8600>
 50869d0:	88a2703a 	and	r17,r17,r2
 50869d4:	883f8826 	beq	r17,zero,50867f8 <__alt_data_end+0xfffb85f8>
 50869d8:	003f8606 	br	50867f4 <__alt_data_end+0xfffb85f4>
 50869dc:	d8812344 	addi	r2,sp,1165
 50869e0:	003f7e06 	br	50867dc <__alt_data_end+0xfffb85dc>
 50869e4:	d8c12617 	ldw	r3,1176(sp)
 50869e8:	003f4d06 	br	5086720 <__alt_data_end+0xfffb8520>

050869ec <__vfprintf_internal>:
 50869ec:	2007883a 	mov	r3,r4
 50869f0:	01014274 	movhi	r4,1289
 50869f4:	211c5604 	addi	r4,r4,29016
 50869f8:	21000017 	ldw	r4,0(r4)
 50869fc:	2805883a 	mov	r2,r5
 5086a00:	300f883a 	mov	r7,r6
 5086a04:	180b883a 	mov	r5,r3
 5086a08:	100d883a 	mov	r6,r2
 5086a0c:	50849f01 	jmpi	50849f0 <___vfprintf_internal_r>

05086a10 <_vsnprintf_r>:
 5086a10:	3005883a 	mov	r2,r6
 5086a14:	30003616 	blt	r6,zero,5086af0 <_vsnprintf_r+0xe0>
 5086a18:	deffe404 	addi	sp,sp,-112
 5086a1c:	00c08204 	movi	r3,520
 5086a20:	dc001a15 	stw	r16,104(sp)
 5086a24:	dfc01b15 	stw	ra,108(sp)
 5086a28:	d8c0030d 	sth	r3,12(sp)
 5086a2c:	d9400015 	stw	r5,0(sp)
 5086a30:	d9400415 	stw	r5,16(sp)
 5086a34:	380d883a 	mov	r6,r7
 5086a38:	2021883a 	mov	r16,r4
 5086a3c:	10001326 	beq	r2,zero,5086a8c <_vsnprintf_r+0x7c>
 5086a40:	00c14274 	movhi	r3,1289
 5086a44:	18dc5604 	addi	r3,r3,29016
 5086a48:	19000017 	ldw	r4,0(r3)
 5086a4c:	d9c01c17 	ldw	r7,112(sp)
 5086a50:	10bfffc4 	addi	r2,r2,-1
 5086a54:	d8800215 	stw	r2,8(sp)
 5086a58:	d8800515 	stw	r2,20(sp)
 5086a5c:	d80b883a 	mov	r5,sp
 5086a60:	00bfffc4 	movi	r2,-1
 5086a64:	d880038d 	sth	r2,14(sp)
 5086a68:	5082a600 	call	5082a60 <___svfprintf_internal_r>
 5086a6c:	00ffffc4 	movi	r3,-1
 5086a70:	10c01c16 	blt	r2,r3,5086ae4 <_vsnprintf_r+0xd4>
 5086a74:	d8c00017 	ldw	r3,0(sp)
 5086a78:	18000005 	stb	zero,0(r3)
 5086a7c:	dfc01b17 	ldw	ra,108(sp)
 5086a80:	dc001a17 	ldw	r16,104(sp)
 5086a84:	dec01c04 	addi	sp,sp,112
 5086a88:	f800283a 	ret
 5086a8c:	00814274 	movhi	r2,1289
 5086a90:	109c5604 	addi	r2,r2,29016
 5086a94:	11000017 	ldw	r4,0(r2)
 5086a98:	d9c01c17 	ldw	r7,112(sp)
 5086a9c:	00bfffc4 	movi	r2,-1
 5086aa0:	d80b883a 	mov	r5,sp
 5086aa4:	d8000215 	stw	zero,8(sp)
 5086aa8:	d8000515 	stw	zero,20(sp)
 5086aac:	d880038d 	sth	r2,14(sp)
 5086ab0:	5082a600 	call	5082a60 <___svfprintf_internal_r>
 5086ab4:	00ffffc4 	movi	r3,-1
 5086ab8:	10c00416 	blt	r2,r3,5086acc <_vsnprintf_r+0xbc>
 5086abc:	dfc01b17 	ldw	ra,108(sp)
 5086ac0:	dc001a17 	ldw	r16,104(sp)
 5086ac4:	dec01c04 	addi	sp,sp,112
 5086ac8:	f800283a 	ret
 5086acc:	00c022c4 	movi	r3,139
 5086ad0:	80c00015 	stw	r3,0(r16)
 5086ad4:	dfc01b17 	ldw	ra,108(sp)
 5086ad8:	dc001a17 	ldw	r16,104(sp)
 5086adc:	dec01c04 	addi	sp,sp,112
 5086ae0:	f800283a 	ret
 5086ae4:	00c022c4 	movi	r3,139
 5086ae8:	80c00015 	stw	r3,0(r16)
 5086aec:	003fe106 	br	5086a74 <__alt_data_end+0xfffb8874>
 5086af0:	008022c4 	movi	r2,139
 5086af4:	20800015 	stw	r2,0(r4)
 5086af8:	00bfffc4 	movi	r2,-1
 5086afc:	f800283a 	ret

05086b00 <vsnprintf>:
 5086b00:	00814274 	movhi	r2,1289
 5086b04:	109c5604 	addi	r2,r2,29016
 5086b08:	2011883a 	mov	r8,r4
 5086b0c:	11000017 	ldw	r4,0(r2)
 5086b10:	defffe04 	addi	sp,sp,-8
 5086b14:	2807883a 	mov	r3,r5
 5086b18:	3005883a 	mov	r2,r6
 5086b1c:	d9c00015 	stw	r7,0(sp)
 5086b20:	400b883a 	mov	r5,r8
 5086b24:	180d883a 	mov	r6,r3
 5086b28:	100f883a 	mov	r7,r2
 5086b2c:	dfc00115 	stw	ra,4(sp)
 5086b30:	5086a100 	call	5086a10 <_vsnprintf_r>
 5086b34:	dfc00117 	ldw	ra,4(sp)
 5086b38:	dec00204 	addi	sp,sp,8
 5086b3c:	f800283a 	ret

05086b40 <__swsetup_r>:
 5086b40:	00814274 	movhi	r2,1289
 5086b44:	defffd04 	addi	sp,sp,-12
 5086b48:	109c5604 	addi	r2,r2,29016
 5086b4c:	dc400115 	stw	r17,4(sp)
 5086b50:	2023883a 	mov	r17,r4
 5086b54:	11000017 	ldw	r4,0(r2)
 5086b58:	dc000015 	stw	r16,0(sp)
 5086b5c:	dfc00215 	stw	ra,8(sp)
 5086b60:	2821883a 	mov	r16,r5
 5086b64:	20000226 	beq	r4,zero,5086b70 <__swsetup_r+0x30>
 5086b68:	20c00e17 	ldw	r3,56(r4)
 5086b6c:	18002e26 	beq	r3,zero,5086c28 <__swsetup_r+0xe8>
 5086b70:	8080030b 	ldhu	r2,12(r16)
 5086b74:	10c0020c 	andi	r3,r2,8
 5086b78:	100d883a 	mov	r6,r2
 5086b7c:	18000f26 	beq	r3,zero,5086bbc <__swsetup_r+0x7c>
 5086b80:	80c00417 	ldw	r3,16(r16)
 5086b84:	18001526 	beq	r3,zero,5086bdc <__swsetup_r+0x9c>
 5086b88:	1100004c 	andi	r4,r2,1
 5086b8c:	20001c1e 	bne	r4,zero,5086c00 <__swsetup_r+0xc0>
 5086b90:	1080008c 	andi	r2,r2,2
 5086b94:	1000261e 	bne	r2,zero,5086c30 <__swsetup_r+0xf0>
 5086b98:	80800517 	ldw	r2,20(r16)
 5086b9c:	80800215 	stw	r2,8(r16)
 5086ba0:	18001c26 	beq	r3,zero,5086c14 <__swsetup_r+0xd4>
 5086ba4:	0005883a 	mov	r2,zero
 5086ba8:	dfc00217 	ldw	ra,8(sp)
 5086bac:	dc400117 	ldw	r17,4(sp)
 5086bb0:	dc000017 	ldw	r16,0(sp)
 5086bb4:	dec00304 	addi	sp,sp,12
 5086bb8:	f800283a 	ret
 5086bbc:	3080040c 	andi	r2,r6,16
 5086bc0:	10001726 	beq	r2,zero,5086c20 <__swsetup_r+0xe0>
 5086bc4:	3080010c 	andi	r2,r6,4
 5086bc8:	10001b1e 	bne	r2,zero,5086c38 <__swsetup_r+0xf8>
 5086bcc:	80c00417 	ldw	r3,16(r16)
 5086bd0:	30800214 	ori	r2,r6,8
 5086bd4:	8080030d 	sth	r2,12(r16)
 5086bd8:	183feb1e 	bne	r3,zero,5086b88 <__alt_data_end+0xfffb8988>
 5086bdc:	1140a00c 	andi	r5,r2,640
 5086be0:	01008004 	movi	r4,512
 5086be4:	293fe826 	beq	r5,r4,5086b88 <__alt_data_end+0xfffb8988>
 5086be8:	8809883a 	mov	r4,r17
 5086bec:	800b883a 	mov	r5,r16
 5086bf0:	50896980 	call	5089698 <__smakebuf_r>
 5086bf4:	8080030b 	ldhu	r2,12(r16)
 5086bf8:	80c00417 	ldw	r3,16(r16)
 5086bfc:	003fe206 	br	5086b88 <__alt_data_end+0xfffb8988>
 5086c00:	80800517 	ldw	r2,20(r16)
 5086c04:	80000215 	stw	zero,8(r16)
 5086c08:	0085c83a 	sub	r2,zero,r2
 5086c0c:	80800615 	stw	r2,24(r16)
 5086c10:	183fe41e 	bne	r3,zero,5086ba4 <__alt_data_end+0xfffb89a4>
 5086c14:	8080030b 	ldhu	r2,12(r16)
 5086c18:	1080200c 	andi	r2,r2,128
 5086c1c:	103fe226 	beq	r2,zero,5086ba8 <__alt_data_end+0xfffb89a8>
 5086c20:	00bfffc4 	movi	r2,-1
 5086c24:	003fe006 	br	5086ba8 <__alt_data_end+0xfffb89a8>
 5086c28:	5088b400 	call	5088b40 <__sinit>
 5086c2c:	003fd006 	br	5086b70 <__alt_data_end+0xfffb8970>
 5086c30:	0005883a 	mov	r2,zero
 5086c34:	003fd906 	br	5086b9c <__alt_data_end+0xfffb899c>
 5086c38:	81400c17 	ldw	r5,48(r16)
 5086c3c:	28000626 	beq	r5,zero,5086c58 <__swsetup_r+0x118>
 5086c40:	80801004 	addi	r2,r16,64
 5086c44:	28800326 	beq	r5,r2,5086c54 <__swsetup_r+0x114>
 5086c48:	8809883a 	mov	r4,r17
 5086c4c:	5088cb40 	call	5088cb4 <_free_r>
 5086c50:	8180030b 	ldhu	r6,12(r16)
 5086c54:	80000c15 	stw	zero,48(r16)
 5086c58:	80c00417 	ldw	r3,16(r16)
 5086c5c:	00bff6c4 	movi	r2,-37
 5086c60:	118c703a 	and	r6,r2,r6
 5086c64:	80000115 	stw	zero,4(r16)
 5086c68:	80c00015 	stw	r3,0(r16)
 5086c6c:	003fd806 	br	5086bd0 <__alt_data_end+0xfffb89d0>

05086c70 <quorem>:
 5086c70:	defff704 	addi	sp,sp,-36
 5086c74:	dc800215 	stw	r18,8(sp)
 5086c78:	20800417 	ldw	r2,16(r4)
 5086c7c:	2c800417 	ldw	r18,16(r5)
 5086c80:	dfc00815 	stw	ra,32(sp)
 5086c84:	ddc00715 	stw	r23,28(sp)
 5086c88:	dd800615 	stw	r22,24(sp)
 5086c8c:	dd400515 	stw	r21,20(sp)
 5086c90:	dd000415 	stw	r20,16(sp)
 5086c94:	dcc00315 	stw	r19,12(sp)
 5086c98:	dc400115 	stw	r17,4(sp)
 5086c9c:	dc000015 	stw	r16,0(sp)
 5086ca0:	14807116 	blt	r2,r18,5086e68 <quorem+0x1f8>
 5086ca4:	94bfffc4 	addi	r18,r18,-1
 5086ca8:	94ad883a 	add	r22,r18,r18
 5086cac:	b5ad883a 	add	r22,r22,r22
 5086cb0:	2c400504 	addi	r17,r5,20
 5086cb4:	8da9883a 	add	r20,r17,r22
 5086cb8:	25400504 	addi	r21,r4,20
 5086cbc:	282f883a 	mov	r23,r5
 5086cc0:	adad883a 	add	r22,r21,r22
 5086cc4:	a1400017 	ldw	r5,0(r20)
 5086cc8:	2021883a 	mov	r16,r4
 5086ccc:	b1000017 	ldw	r4,0(r22)
 5086cd0:	29400044 	addi	r5,r5,1
 5086cd4:	50827c00 	call	50827c0 <__udivsi3>
 5086cd8:	1027883a 	mov	r19,r2
 5086cdc:	10002c26 	beq	r2,zero,5086d90 <quorem+0x120>
 5086ce0:	a813883a 	mov	r9,r21
 5086ce4:	8811883a 	mov	r8,r17
 5086ce8:	0009883a 	mov	r4,zero
 5086cec:	000d883a 	mov	r6,zero
 5086cf0:	41c00017 	ldw	r7,0(r8)
 5086cf4:	49400017 	ldw	r5,0(r9)
 5086cf8:	42000104 	addi	r8,r8,4
 5086cfc:	38bfffcc 	andi	r2,r7,65535
 5086d00:	14c5383a 	mul	r2,r2,r19
 5086d04:	380ed43a 	srli	r7,r7,16
 5086d08:	28ffffcc 	andi	r3,r5,65535
 5086d0c:	2085883a 	add	r2,r4,r2
 5086d10:	1008d43a 	srli	r4,r2,16
 5086d14:	3ccf383a 	mul	r7,r7,r19
 5086d18:	198d883a 	add	r6,r3,r6
 5086d1c:	10ffffcc 	andi	r3,r2,65535
 5086d20:	30c7c83a 	sub	r3,r6,r3
 5086d24:	280ad43a 	srli	r5,r5,16
 5086d28:	21c9883a 	add	r4,r4,r7
 5086d2c:	180dd43a 	srai	r6,r3,16
 5086d30:	20bfffcc 	andi	r2,r4,65535
 5086d34:	288bc83a 	sub	r5,r5,r2
 5086d38:	298b883a 	add	r5,r5,r6
 5086d3c:	280e943a 	slli	r7,r5,16
 5086d40:	18ffffcc 	andi	r3,r3,65535
 5086d44:	2008d43a 	srli	r4,r4,16
 5086d48:	38ceb03a 	or	r7,r7,r3
 5086d4c:	49c00015 	stw	r7,0(r9)
 5086d50:	280dd43a 	srai	r6,r5,16
 5086d54:	4a400104 	addi	r9,r9,4
 5086d58:	a23fe52e 	bgeu	r20,r8,5086cf0 <__alt_data_end+0xfffb8af0>
 5086d5c:	b0800017 	ldw	r2,0(r22)
 5086d60:	10000b1e 	bne	r2,zero,5086d90 <quorem+0x120>
 5086d64:	b0bfff04 	addi	r2,r22,-4
 5086d68:	a880082e 	bgeu	r21,r2,5086d8c <quorem+0x11c>
 5086d6c:	b0ffff17 	ldw	r3,-4(r22)
 5086d70:	18000326 	beq	r3,zero,5086d80 <quorem+0x110>
 5086d74:	00000506 	br	5086d8c <quorem+0x11c>
 5086d78:	10c00017 	ldw	r3,0(r2)
 5086d7c:	1800031e 	bne	r3,zero,5086d8c <quorem+0x11c>
 5086d80:	10bfff04 	addi	r2,r2,-4
 5086d84:	94bfffc4 	addi	r18,r18,-1
 5086d88:	a8bffb36 	bltu	r21,r2,5086d78 <__alt_data_end+0xfffb8b78>
 5086d8c:	84800415 	stw	r18,16(r16)
 5086d90:	8009883a 	mov	r4,r16
 5086d94:	b80b883a 	mov	r5,r23
 5086d98:	508ad580 	call	508ad58 <__mcmp>
 5086d9c:	10002616 	blt	r2,zero,5086e38 <quorem+0x1c8>
 5086da0:	9cc00044 	addi	r19,r19,1
 5086da4:	a80d883a 	mov	r6,r21
 5086da8:	000b883a 	mov	r5,zero
 5086dac:	31000017 	ldw	r4,0(r6)
 5086db0:	88800017 	ldw	r2,0(r17)
 5086db4:	31800104 	addi	r6,r6,4
 5086db8:	20ffffcc 	andi	r3,r4,65535
 5086dbc:	194b883a 	add	r5,r3,r5
 5086dc0:	10ffffcc 	andi	r3,r2,65535
 5086dc4:	28c7c83a 	sub	r3,r5,r3
 5086dc8:	1004d43a 	srli	r2,r2,16
 5086dcc:	2008d43a 	srli	r4,r4,16
 5086dd0:	180bd43a 	srai	r5,r3,16
 5086dd4:	18ffffcc 	andi	r3,r3,65535
 5086dd8:	2089c83a 	sub	r4,r4,r2
 5086ddc:	2149883a 	add	r4,r4,r5
 5086de0:	2004943a 	slli	r2,r4,16
 5086de4:	8c400104 	addi	r17,r17,4
 5086de8:	200bd43a 	srai	r5,r4,16
 5086dec:	10c6b03a 	or	r3,r2,r3
 5086df0:	30ffff15 	stw	r3,-4(r6)
 5086df4:	a47fed2e 	bgeu	r20,r17,5086dac <__alt_data_end+0xfffb8bac>
 5086df8:	9485883a 	add	r2,r18,r18
 5086dfc:	1085883a 	add	r2,r2,r2
 5086e00:	a887883a 	add	r3,r21,r2
 5086e04:	18800017 	ldw	r2,0(r3)
 5086e08:	10000b1e 	bne	r2,zero,5086e38 <quorem+0x1c8>
 5086e0c:	18bfff04 	addi	r2,r3,-4
 5086e10:	a880082e 	bgeu	r21,r2,5086e34 <quorem+0x1c4>
 5086e14:	18ffff17 	ldw	r3,-4(r3)
 5086e18:	18000326 	beq	r3,zero,5086e28 <quorem+0x1b8>
 5086e1c:	00000506 	br	5086e34 <quorem+0x1c4>
 5086e20:	10c00017 	ldw	r3,0(r2)
 5086e24:	1800031e 	bne	r3,zero,5086e34 <quorem+0x1c4>
 5086e28:	10bfff04 	addi	r2,r2,-4
 5086e2c:	94bfffc4 	addi	r18,r18,-1
 5086e30:	a8bffb36 	bltu	r21,r2,5086e20 <__alt_data_end+0xfffb8c20>
 5086e34:	84800415 	stw	r18,16(r16)
 5086e38:	9805883a 	mov	r2,r19
 5086e3c:	dfc00817 	ldw	ra,32(sp)
 5086e40:	ddc00717 	ldw	r23,28(sp)
 5086e44:	dd800617 	ldw	r22,24(sp)
 5086e48:	dd400517 	ldw	r21,20(sp)
 5086e4c:	dd000417 	ldw	r20,16(sp)
 5086e50:	dcc00317 	ldw	r19,12(sp)
 5086e54:	dc800217 	ldw	r18,8(sp)
 5086e58:	dc400117 	ldw	r17,4(sp)
 5086e5c:	dc000017 	ldw	r16,0(sp)
 5086e60:	dec00904 	addi	sp,sp,36
 5086e64:	f800283a 	ret
 5086e68:	0005883a 	mov	r2,zero
 5086e6c:	003ff306 	br	5086e3c <__alt_data_end+0xfffb8c3c>

05086e70 <_dtoa_r>:
 5086e70:	20801017 	ldw	r2,64(r4)
 5086e74:	deffde04 	addi	sp,sp,-136
 5086e78:	dd401d15 	stw	r21,116(sp)
 5086e7c:	dcc01b15 	stw	r19,108(sp)
 5086e80:	dc801a15 	stw	r18,104(sp)
 5086e84:	dc401915 	stw	r17,100(sp)
 5086e88:	dc001815 	stw	r16,96(sp)
 5086e8c:	dfc02115 	stw	ra,132(sp)
 5086e90:	df002015 	stw	fp,128(sp)
 5086e94:	ddc01f15 	stw	r23,124(sp)
 5086e98:	dd801e15 	stw	r22,120(sp)
 5086e9c:	dd001c15 	stw	r20,112(sp)
 5086ea0:	d9c00315 	stw	r7,12(sp)
 5086ea4:	2021883a 	mov	r16,r4
 5086ea8:	302b883a 	mov	r21,r6
 5086eac:	2825883a 	mov	r18,r5
 5086eb0:	dc402417 	ldw	r17,144(sp)
 5086eb4:	3027883a 	mov	r19,r6
 5086eb8:	10000826 	beq	r2,zero,5086edc <_dtoa_r+0x6c>
 5086ebc:	21801117 	ldw	r6,68(r4)
 5086ec0:	00c00044 	movi	r3,1
 5086ec4:	100b883a 	mov	r5,r2
 5086ec8:	1986983a 	sll	r3,r3,r6
 5086ecc:	11800115 	stw	r6,4(r2)
 5086ed0:	10c00215 	stw	r3,8(r2)
 5086ed4:	508a5400 	call	508a540 <_Bfree>
 5086ed8:	80001015 	stw	zero,64(r16)
 5086edc:	a8002d16 	blt	r21,zero,5086f94 <_dtoa_r+0x124>
 5086ee0:	88000015 	stw	zero,0(r17)
 5086ee4:	a8dffc2c 	andhi	r3,r21,32752
 5086ee8:	009ffc34 	movhi	r2,32752
 5086eec:	18801b26 	beq	r3,r2,5086f5c <_dtoa_r+0xec>
 5086ef0:	9009883a 	mov	r4,r18
 5086ef4:	980b883a 	mov	r5,r19
 5086ef8:	000d883a 	mov	r6,zero
 5086efc:	000f883a 	mov	r7,zero
 5086f00:	50909200 	call	5090920 <__eqdf2>
 5086f04:	10002a1e 	bne	r2,zero,5086fb0 <_dtoa_r+0x140>
 5086f08:	d8c02317 	ldw	r3,140(sp)
 5086f0c:	d9002517 	ldw	r4,148(sp)
 5086f10:	00800044 	movi	r2,1
 5086f14:	18800015 	stw	r2,0(r3)
 5086f18:	2001a226 	beq	r4,zero,50875a4 <_dtoa_r+0x734>
 5086f1c:	00814274 	movhi	r2,1289
 5086f20:	1094e944 	addi	r2,r2,21413
 5086f24:	20800015 	stw	r2,0(r4)
 5086f28:	10bfffc4 	addi	r2,r2,-1
 5086f2c:	dfc02117 	ldw	ra,132(sp)
 5086f30:	df002017 	ldw	fp,128(sp)
 5086f34:	ddc01f17 	ldw	r23,124(sp)
 5086f38:	dd801e17 	ldw	r22,120(sp)
 5086f3c:	dd401d17 	ldw	r21,116(sp)
 5086f40:	dd001c17 	ldw	r20,112(sp)
 5086f44:	dcc01b17 	ldw	r19,108(sp)
 5086f48:	dc801a17 	ldw	r18,104(sp)
 5086f4c:	dc401917 	ldw	r17,100(sp)
 5086f50:	dc001817 	ldw	r16,96(sp)
 5086f54:	dec02204 	addi	sp,sp,136
 5086f58:	f800283a 	ret
 5086f5c:	d8c02317 	ldw	r3,140(sp)
 5086f60:	0089c3c4 	movi	r2,9999
 5086f64:	18800015 	stw	r2,0(r3)
 5086f68:	90017c26 	beq	r18,zero,508755c <_dtoa_r+0x6ec>
 5086f6c:	00814274 	movhi	r2,1289
 5086f70:	1094fd04 	addi	r2,r2,21492
 5086f74:	d9002517 	ldw	r4,148(sp)
 5086f78:	203fec26 	beq	r4,zero,5086f2c <__alt_data_end+0xfffb8d2c>
 5086f7c:	10c000c7 	ldb	r3,3(r2)
 5086f80:	18017d1e 	bne	r3,zero,5087578 <_dtoa_r+0x708>
 5086f84:	10c000c4 	addi	r3,r2,3
 5086f88:	d9802517 	ldw	r6,148(sp)
 5086f8c:	30c00015 	stw	r3,0(r6)
 5086f90:	003fe606 	br	5086f2c <__alt_data_end+0xfffb8d2c>
 5086f94:	04e00034 	movhi	r19,32768
 5086f98:	9cffffc4 	addi	r19,r19,-1
 5086f9c:	00800044 	movi	r2,1
 5086fa0:	ace6703a 	and	r19,r21,r19
 5086fa4:	88800015 	stw	r2,0(r17)
 5086fa8:	982b883a 	mov	r21,r19
 5086fac:	003fcd06 	br	5086ee4 <__alt_data_end+0xfffb8ce4>
 5086fb0:	d8800204 	addi	r2,sp,8
 5086fb4:	a822d53a 	srli	r17,r21,20
 5086fb8:	d8800015 	stw	r2,0(sp)
 5086fbc:	8009883a 	mov	r4,r16
 5086fc0:	900b883a 	mov	r5,r18
 5086fc4:	980d883a 	mov	r6,r19
 5086fc8:	d9c00104 	addi	r7,sp,4
 5086fcc:	508b0cc0 	call	508b0cc <__d2b>
 5086fd0:	1039883a 	mov	fp,r2
 5086fd4:	88016a1e 	bne	r17,zero,5087580 <_dtoa_r+0x710>
 5086fd8:	dd000217 	ldw	r20,8(sp)
 5086fdc:	dc400117 	ldw	r17,4(sp)
 5086fe0:	00befbc4 	movi	r2,-1041
 5086fe4:	a463883a 	add	r17,r20,r17
 5086fe8:	8882ea16 	blt	r17,r2,5087b94 <_dtoa_r+0xd24>
 5086fec:	00bf0384 	movi	r2,-1010
 5086ff0:	1445c83a 	sub	r2,r2,r17
 5086ff4:	89010484 	addi	r4,r17,1042
 5086ff8:	a8aa983a 	sll	r21,r21,r2
 5086ffc:	9108d83a 	srl	r4,r18,r4
 5087000:	a908b03a 	or	r4,r21,r4
 5087004:	5091cb00 	call	5091cb0 <__floatunsidf>
 5087008:	017f8434 	movhi	r5,65040
 508700c:	01800044 	movi	r6,1
 5087010:	1009883a 	mov	r4,r2
 5087014:	194b883a 	add	r5,r3,r5
 5087018:	8c7fffc4 	addi	r17,r17,-1
 508701c:	d9800f15 	stw	r6,60(sp)
 5087020:	000d883a 	mov	r6,zero
 5087024:	01cffe34 	movhi	r7,16376
 5087028:	50912880 	call	5091288 <__subdf3>
 508702c:	0198dbf4 	movhi	r6,25455
 5087030:	01cff4f4 	movhi	r7,16339
 5087034:	1009883a 	mov	r4,r2
 5087038:	180b883a 	mov	r5,r3
 508703c:	3190d844 	addi	r6,r6,17249
 5087040:	39e1e9c4 	addi	r7,r7,-30809
 5087044:	5090b640 	call	5090b64 <__muldf3>
 5087048:	01a2d874 	movhi	r6,35681
 508704c:	01cff1f4 	movhi	r7,16327
 5087050:	180b883a 	mov	r5,r3
 5087054:	31b22cc4 	addi	r6,r6,-14157
 5087058:	39e28a04 	addi	r7,r7,-30168
 508705c:	1009883a 	mov	r4,r2
 5087060:	508f7b80 	call	508f7b8 <__adddf3>
 5087064:	8809883a 	mov	r4,r17
 5087068:	102d883a 	mov	r22,r2
 508706c:	182b883a 	mov	r21,r3
 5087070:	5091be00 	call	5091be0 <__floatsidf>
 5087074:	019427f4 	movhi	r6,20639
 5087078:	01cff4f4 	movhi	r7,16339
 508707c:	1009883a 	mov	r4,r2
 5087080:	180b883a 	mov	r5,r3
 5087084:	319e7ec4 	addi	r6,r6,31227
 5087088:	39d104c4 	addi	r7,r7,17427
 508708c:	5090b640 	call	5090b64 <__muldf3>
 5087090:	b009883a 	mov	r4,r22
 5087094:	a80b883a 	mov	r5,r21
 5087098:	100d883a 	mov	r6,r2
 508709c:	180f883a 	mov	r7,r3
 50870a0:	508f7b80 	call	508f7b8 <__adddf3>
 50870a4:	1009883a 	mov	r4,r2
 50870a8:	180b883a 	mov	r5,r3
 50870ac:	102d883a 	mov	r22,r2
 50870b0:	182b883a 	mov	r21,r3
 50870b4:	5091b580 	call	5091b58 <__fixdfsi>
 50870b8:	b009883a 	mov	r4,r22
 50870bc:	a80b883a 	mov	r5,r21
 50870c0:	000d883a 	mov	r6,zero
 50870c4:	000f883a 	mov	r7,zero
 50870c8:	d8800515 	stw	r2,20(sp)
 50870cc:	5090a840 	call	5090a84 <__ledf2>
 50870d0:	10023116 	blt	r2,zero,5087998 <_dtoa_r+0xb28>
 50870d4:	d8c00517 	ldw	r3,20(sp)
 50870d8:	00800584 	movi	r2,22
 50870dc:	10c21f36 	bltu	r2,r3,508795c <_dtoa_r+0xaec>
 50870e0:	180490fa 	slli	r2,r3,3
 50870e4:	00c14274 	movhi	r3,1289
 50870e8:	18d51904 	addi	r3,r3,21604
 50870ec:	1885883a 	add	r2,r3,r2
 50870f0:	11000017 	ldw	r4,0(r2)
 50870f4:	11400117 	ldw	r5,4(r2)
 50870f8:	900d883a 	mov	r6,r18
 50870fc:	980f883a 	mov	r7,r19
 5087100:	50909a40 	call	50909a4 <__gedf2>
 5087104:	0082a70e 	bge	zero,r2,5087ba4 <_dtoa_r+0xd34>
 5087108:	d9000517 	ldw	r4,20(sp)
 508710c:	d8000c15 	stw	zero,48(sp)
 5087110:	213fffc4 	addi	r4,r4,-1
 5087114:	d9000515 	stw	r4,20(sp)
 5087118:	a463c83a 	sub	r17,r20,r17
 508711c:	8dbfffc4 	addi	r22,r17,-1
 5087120:	b0021916 	blt	r22,zero,5087988 <_dtoa_r+0xb18>
 5087124:	d8000815 	stw	zero,32(sp)
 5087128:	d8800517 	ldw	r2,20(sp)
 508712c:	10020e16 	blt	r2,zero,5087968 <_dtoa_r+0xaf8>
 5087130:	b0ad883a 	add	r22,r22,r2
 5087134:	d8800a15 	stw	r2,40(sp)
 5087138:	d8000915 	stw	zero,36(sp)
 508713c:	d8c00317 	ldw	r3,12(sp)
 5087140:	00800244 	movi	r2,9
 5087144:	10c11a36 	bltu	r2,r3,50875b0 <_dtoa_r+0x740>
 5087148:	00800144 	movi	r2,5
 508714c:	10c4fc0e 	bge	r2,r3,5088540 <_dtoa_r+0x16d0>
 5087150:	18ffff04 	addi	r3,r3,-4
 5087154:	d8c00315 	stw	r3,12(sp)
 5087158:	0029883a 	mov	r20,zero
 508715c:	d9800317 	ldw	r6,12(sp)
 5087160:	008000c4 	movi	r2,3
 5087164:	3083bd26 	beq	r6,r2,508805c <_dtoa_r+0x11ec>
 5087168:	1183670e 	bge	r2,r6,5087f08 <_dtoa_r+0x1098>
 508716c:	d8c00317 	ldw	r3,12(sp)
 5087170:	00800104 	movi	r2,4
 5087174:	1882e726 	beq	r3,r2,5087d14 <_dtoa_r+0xea4>
 5087178:	00800144 	movi	r2,5
 508717c:	1884f21e 	bne	r3,r2,5088548 <_dtoa_r+0x16d8>
 5087180:	00800044 	movi	r2,1
 5087184:	d8800b15 	stw	r2,44(sp)
 5087188:	d8c02217 	ldw	r3,136(sp)
 508718c:	d9000517 	ldw	r4,20(sp)
 5087190:	1907883a 	add	r3,r3,r4
 5087194:	19800044 	addi	r6,r3,1
 5087198:	d8c00d15 	stw	r3,52(sp)
 508719c:	d9800615 	stw	r6,24(sp)
 50871a0:	0183c30e 	bge	zero,r6,50880b0 <_dtoa_r+0x1240>
 50871a4:	d9800617 	ldw	r6,24(sp)
 50871a8:	3023883a 	mov	r17,r6
 50871ac:	80001115 	stw	zero,68(r16)
 50871b0:	008005c4 	movi	r2,23
 50871b4:	1184f62e 	bgeu	r2,r6,5088590 <_dtoa_r+0x1720>
 50871b8:	00c00044 	movi	r3,1
 50871bc:	00800104 	movi	r2,4
 50871c0:	1085883a 	add	r2,r2,r2
 50871c4:	11000504 	addi	r4,r2,20
 50871c8:	180b883a 	mov	r5,r3
 50871cc:	18c00044 	addi	r3,r3,1
 50871d0:	313ffb2e 	bgeu	r6,r4,50871c0 <__alt_data_end+0xfffb8fc0>
 50871d4:	81401115 	stw	r5,68(r16)
 50871d8:	8009883a 	mov	r4,r16
 50871dc:	508a4980 	call	508a498 <_Balloc>
 50871e0:	d8800715 	stw	r2,28(sp)
 50871e4:	80801015 	stw	r2,64(r16)
 50871e8:	00800384 	movi	r2,14
 50871ec:	1440fd36 	bltu	r2,r17,50875e4 <_dtoa_r+0x774>
 50871f0:	a000fc26 	beq	r20,zero,50875e4 <_dtoa_r+0x774>
 50871f4:	d8800517 	ldw	r2,20(sp)
 50871f8:	0083b90e 	bge	zero,r2,50880e0 <_dtoa_r+0x1270>
 50871fc:	d8c00517 	ldw	r3,20(sp)
 5087200:	108003cc 	andi	r2,r2,15
 5087204:	100490fa 	slli	r2,r2,3
 5087208:	182fd13a 	srai	r23,r3,4
 508720c:	00c14274 	movhi	r3,1289
 5087210:	18d51904 	addi	r3,r3,21604
 5087214:	1885883a 	add	r2,r3,r2
 5087218:	b8c0040c 	andi	r3,r23,16
 508721c:	12c00017 	ldw	r11,0(r2)
 5087220:	12800117 	ldw	r10,4(r2)
 5087224:	18039726 	beq	r3,zero,5088084 <_dtoa_r+0x1214>
 5087228:	00814274 	movhi	r2,1289
 508722c:	10950f04 	addi	r2,r2,21564
 5087230:	11800817 	ldw	r6,32(r2)
 5087234:	11c00917 	ldw	r7,36(r2)
 5087238:	9009883a 	mov	r4,r18
 508723c:	980b883a 	mov	r5,r19
 5087240:	da801615 	stw	r10,88(sp)
 5087244:	dac01515 	stw	r11,84(sp)
 5087248:	50900540 	call	5090054 <__divdf3>
 508724c:	da801617 	ldw	r10,88(sp)
 5087250:	dac01517 	ldw	r11,84(sp)
 5087254:	bdc003cc 	andi	r23,r23,15
 5087258:	044000c4 	movi	r17,3
 508725c:	d8800e15 	stw	r2,56(sp)
 5087260:	182b883a 	mov	r21,r3
 5087264:	b8001126 	beq	r23,zero,50872ac <_dtoa_r+0x43c>
 5087268:	05014274 	movhi	r20,1289
 508726c:	a5150f04 	addi	r20,r20,21564
 5087270:	5805883a 	mov	r2,r11
 5087274:	5007883a 	mov	r3,r10
 5087278:	b980004c 	andi	r6,r23,1
 508727c:	1009883a 	mov	r4,r2
 5087280:	b82fd07a 	srai	r23,r23,1
 5087284:	180b883a 	mov	r5,r3
 5087288:	30000426 	beq	r6,zero,508729c <_dtoa_r+0x42c>
 508728c:	a1800017 	ldw	r6,0(r20)
 5087290:	a1c00117 	ldw	r7,4(r20)
 5087294:	8c400044 	addi	r17,r17,1
 5087298:	5090b640 	call	5090b64 <__muldf3>
 508729c:	a5000204 	addi	r20,r20,8
 50872a0:	b83ff51e 	bne	r23,zero,5087278 <__alt_data_end+0xfffb9078>
 50872a4:	1017883a 	mov	r11,r2
 50872a8:	1815883a 	mov	r10,r3
 50872ac:	d9000e17 	ldw	r4,56(sp)
 50872b0:	a80b883a 	mov	r5,r21
 50872b4:	580d883a 	mov	r6,r11
 50872b8:	500f883a 	mov	r7,r10
 50872bc:	50900540 	call	5090054 <__divdf3>
 50872c0:	1029883a 	mov	r20,r2
 50872c4:	182b883a 	mov	r21,r3
 50872c8:	d9800c17 	ldw	r6,48(sp)
 50872cc:	30000626 	beq	r6,zero,50872e8 <_dtoa_r+0x478>
 50872d0:	a009883a 	mov	r4,r20
 50872d4:	a80b883a 	mov	r5,r21
 50872d8:	000d883a 	mov	r6,zero
 50872dc:	01cffc34 	movhi	r7,16368
 50872e0:	5090a840 	call	5090a84 <__ledf2>
 50872e4:	10043216 	blt	r2,zero,50883b0 <_dtoa_r+0x1540>
 50872e8:	8809883a 	mov	r4,r17
 50872ec:	5091be00 	call	5091be0 <__floatsidf>
 50872f0:	1009883a 	mov	r4,r2
 50872f4:	180b883a 	mov	r5,r3
 50872f8:	a00d883a 	mov	r6,r20
 50872fc:	a80f883a 	mov	r7,r21
 5087300:	5090b640 	call	5090b64 <__muldf3>
 5087304:	000d883a 	mov	r6,zero
 5087308:	1009883a 	mov	r4,r2
 508730c:	180b883a 	mov	r5,r3
 5087310:	01d00734 	movhi	r7,16412
 5087314:	508f7b80 	call	508f7b8 <__adddf3>
 5087318:	1023883a 	mov	r17,r2
 508731c:	d9800617 	ldw	r6,24(sp)
 5087320:	00bf3034 	movhi	r2,64704
 5087324:	1885883a 	add	r2,r3,r2
 5087328:	d8800e15 	stw	r2,56(sp)
 508732c:	30032e26 	beq	r6,zero,5087fe8 <_dtoa_r+0x1178>
 5087330:	d8c00517 	ldw	r3,20(sp)
 5087334:	da800617 	ldw	r10,24(sp)
 5087338:	d8c01215 	stw	r3,72(sp)
 508733c:	d9000b17 	ldw	r4,44(sp)
 5087340:	2003b026 	beq	r4,zero,5088204 <_dtoa_r+0x1394>
 5087344:	50bfffc4 	addi	r2,r10,-1
 5087348:	100490fa 	slli	r2,r2,3
 508734c:	00c14274 	movhi	r3,1289
 5087350:	18d51904 	addi	r3,r3,21604
 5087354:	1885883a 	add	r2,r3,r2
 5087358:	11800017 	ldw	r6,0(r2)
 508735c:	11c00117 	ldw	r7,4(r2)
 5087360:	d8800717 	ldw	r2,28(sp)
 5087364:	0009883a 	mov	r4,zero
 5087368:	014ff834 	movhi	r5,16352
 508736c:	da801615 	stw	r10,88(sp)
 5087370:	15c00044 	addi	r23,r2,1
 5087374:	50900540 	call	5090054 <__divdf3>
 5087378:	d9c00e17 	ldw	r7,56(sp)
 508737c:	880d883a 	mov	r6,r17
 5087380:	1009883a 	mov	r4,r2
 5087384:	180b883a 	mov	r5,r3
 5087388:	50912880 	call	5091288 <__subdf3>
 508738c:	a80b883a 	mov	r5,r21
 5087390:	a009883a 	mov	r4,r20
 5087394:	d8c01015 	stw	r3,64(sp)
 5087398:	d8800e15 	stw	r2,56(sp)
 508739c:	5091b580 	call	5091b58 <__fixdfsi>
 50873a0:	1009883a 	mov	r4,r2
 50873a4:	d8801715 	stw	r2,92(sp)
 50873a8:	5091be00 	call	5091be0 <__floatsidf>
 50873ac:	a009883a 	mov	r4,r20
 50873b0:	a80b883a 	mov	r5,r21
 50873b4:	100d883a 	mov	r6,r2
 50873b8:	180f883a 	mov	r7,r3
 50873bc:	50912880 	call	5091288 <__subdf3>
 50873c0:	da001717 	ldw	r8,92(sp)
 50873c4:	1829883a 	mov	r20,r3
 50873c8:	d8c00717 	ldw	r3,28(sp)
 50873cc:	d9000e17 	ldw	r4,56(sp)
 50873d0:	d9401017 	ldw	r5,64(sp)
 50873d4:	42000c04 	addi	r8,r8,48
 50873d8:	1023883a 	mov	r17,r2
 50873dc:	1a000005 	stb	r8,0(r3)
 50873e0:	880d883a 	mov	r6,r17
 50873e4:	a00f883a 	mov	r7,r20
 50873e8:	402b883a 	mov	r21,r8
 50873ec:	50909a40 	call	50909a4 <__gedf2>
 50873f0:	00844516 	blt	zero,r2,5088508 <_dtoa_r+0x1698>
 50873f4:	0009883a 	mov	r4,zero
 50873f8:	014ffc34 	movhi	r5,16368
 50873fc:	880d883a 	mov	r6,r17
 5087400:	a00f883a 	mov	r7,r20
 5087404:	50912880 	call	5091288 <__subdf3>
 5087408:	d9000e17 	ldw	r4,56(sp)
 508740c:	d9401017 	ldw	r5,64(sp)
 5087410:	100d883a 	mov	r6,r2
 5087414:	180f883a 	mov	r7,r3
 5087418:	50909a40 	call	50909a4 <__gedf2>
 508741c:	da801617 	ldw	r10,88(sp)
 5087420:	00843616 	blt	zero,r2,50884fc <_dtoa_r+0x168c>
 5087424:	00800044 	movi	r2,1
 5087428:	12806e0e 	bge	r2,r10,50875e4 <_dtoa_r+0x774>
 508742c:	d9000717 	ldw	r4,28(sp)
 5087430:	dd801315 	stw	r22,76(sp)
 5087434:	dc001115 	stw	r16,68(sp)
 5087438:	2295883a 	add	r10,r4,r10
 508743c:	dcc01415 	stw	r19,80(sp)
 5087440:	502d883a 	mov	r22,r10
 5087444:	dcc01017 	ldw	r19,64(sp)
 5087448:	b821883a 	mov	r16,r23
 508744c:	dc801015 	stw	r18,64(sp)
 5087450:	dc800e17 	ldw	r18,56(sp)
 5087454:	00000906 	br	508747c <_dtoa_r+0x60c>
 5087458:	50912880 	call	5091288 <__subdf3>
 508745c:	1009883a 	mov	r4,r2
 5087460:	180b883a 	mov	r5,r3
 5087464:	900d883a 	mov	r6,r18
 5087468:	980f883a 	mov	r7,r19
 508746c:	5090a840 	call	5090a84 <__ledf2>
 5087470:	10040e16 	blt	r2,zero,50884ac <_dtoa_r+0x163c>
 5087474:	b821883a 	mov	r16,r23
 5087478:	bd841026 	beq	r23,r22,50884bc <_dtoa_r+0x164c>
 508747c:	9009883a 	mov	r4,r18
 5087480:	980b883a 	mov	r5,r19
 5087484:	000d883a 	mov	r6,zero
 5087488:	01d00934 	movhi	r7,16420
 508748c:	5090b640 	call	5090b64 <__muldf3>
 5087490:	000d883a 	mov	r6,zero
 5087494:	01d00934 	movhi	r7,16420
 5087498:	8809883a 	mov	r4,r17
 508749c:	a00b883a 	mov	r5,r20
 50874a0:	1025883a 	mov	r18,r2
 50874a4:	1827883a 	mov	r19,r3
 50874a8:	5090b640 	call	5090b64 <__muldf3>
 50874ac:	180b883a 	mov	r5,r3
 50874b0:	1009883a 	mov	r4,r2
 50874b4:	1823883a 	mov	r17,r3
 50874b8:	1029883a 	mov	r20,r2
 50874bc:	5091b580 	call	5091b58 <__fixdfsi>
 50874c0:	1009883a 	mov	r4,r2
 50874c4:	102b883a 	mov	r21,r2
 50874c8:	5091be00 	call	5091be0 <__floatsidf>
 50874cc:	a009883a 	mov	r4,r20
 50874d0:	880b883a 	mov	r5,r17
 50874d4:	100d883a 	mov	r6,r2
 50874d8:	180f883a 	mov	r7,r3
 50874dc:	50912880 	call	5091288 <__subdf3>
 50874e0:	ad400c04 	addi	r21,r21,48
 50874e4:	1009883a 	mov	r4,r2
 50874e8:	180b883a 	mov	r5,r3
 50874ec:	900d883a 	mov	r6,r18
 50874f0:	980f883a 	mov	r7,r19
 50874f4:	85400005 	stb	r21,0(r16)
 50874f8:	1023883a 	mov	r17,r2
 50874fc:	1829883a 	mov	r20,r3
 5087500:	5090a840 	call	5090a84 <__ledf2>
 5087504:	bdc00044 	addi	r23,r23,1
 5087508:	0009883a 	mov	r4,zero
 508750c:	014ffc34 	movhi	r5,16368
 5087510:	880d883a 	mov	r6,r17
 5087514:	a00f883a 	mov	r7,r20
 5087518:	103fcf0e 	bge	r2,zero,5087458 <__alt_data_end+0xfffb9258>
 508751c:	d9801217 	ldw	r6,72(sp)
 5087520:	dc001117 	ldw	r16,68(sp)
 5087524:	d9800515 	stw	r6,20(sp)
 5087528:	8009883a 	mov	r4,r16
 508752c:	e00b883a 	mov	r5,fp
 5087530:	508a5400 	call	508a540 <_Bfree>
 5087534:	d8c00517 	ldw	r3,20(sp)
 5087538:	d9002317 	ldw	r4,140(sp)
 508753c:	d9802517 	ldw	r6,148(sp)
 5087540:	b8000005 	stb	zero,0(r23)
 5087544:	18800044 	addi	r2,r3,1
 5087548:	20800015 	stw	r2,0(r4)
 508754c:	30027226 	beq	r6,zero,5087f18 <_dtoa_r+0x10a8>
 5087550:	35c00015 	stw	r23,0(r6)
 5087554:	d8800717 	ldw	r2,28(sp)
 5087558:	003e7406 	br	5086f2c <__alt_data_end+0xfffb8d2c>
 508755c:	00800434 	movhi	r2,16
 5087560:	10bfffc4 	addi	r2,r2,-1
 5087564:	a8aa703a 	and	r21,r21,r2
 5087568:	a83e801e 	bne	r21,zero,5086f6c <__alt_data_end+0xfffb8d6c>
 508756c:	00814274 	movhi	r2,1289
 5087570:	1094fa04 	addi	r2,r2,21480
 5087574:	003e7f06 	br	5086f74 <__alt_data_end+0xfffb8d74>
 5087578:	10c00204 	addi	r3,r2,8
 508757c:	003e8206 	br	5086f88 <__alt_data_end+0xfffb8d88>
 5087580:	01400434 	movhi	r5,16
 5087584:	297fffc4 	addi	r5,r5,-1
 5087588:	994a703a 	and	r5,r19,r5
 508758c:	9009883a 	mov	r4,r18
 5087590:	8c7f0044 	addi	r17,r17,-1023
 5087594:	294ffc34 	orhi	r5,r5,16368
 5087598:	dd000217 	ldw	r20,8(sp)
 508759c:	d8000f15 	stw	zero,60(sp)
 50875a0:	003e9f06 	br	5087020 <__alt_data_end+0xfffb8e20>
 50875a4:	00814274 	movhi	r2,1289
 50875a8:	1094e904 	addi	r2,r2,21412
 50875ac:	003e5f06 	br	5086f2c <__alt_data_end+0xfffb8d2c>
 50875b0:	80001115 	stw	zero,68(r16)
 50875b4:	8009883a 	mov	r4,r16
 50875b8:	000b883a 	mov	r5,zero
 50875bc:	508a4980 	call	508a498 <_Balloc>
 50875c0:	01bfffc4 	movi	r6,-1
 50875c4:	d8800715 	stw	r2,28(sp)
 50875c8:	80801015 	stw	r2,64(r16)
 50875cc:	00800044 	movi	r2,1
 50875d0:	d9800615 	stw	r6,24(sp)
 50875d4:	d8800b15 	stw	r2,44(sp)
 50875d8:	d8002215 	stw	zero,136(sp)
 50875dc:	d9800d15 	stw	r6,52(sp)
 50875e0:	d8000315 	stw	zero,12(sp)
 50875e4:	d8800117 	ldw	r2,4(sp)
 50875e8:	10008e16 	blt	r2,zero,5087824 <_dtoa_r+0x9b4>
 50875ec:	d9000517 	ldw	r4,20(sp)
 50875f0:	00c00384 	movi	r3,14
 50875f4:	19008b16 	blt	r3,r4,5087824 <_dtoa_r+0x9b4>
 50875f8:	200490fa 	slli	r2,r4,3
 50875fc:	00c14274 	movhi	r3,1289
 5087600:	d9802217 	ldw	r6,136(sp)
 5087604:	18d51904 	addi	r3,r3,21604
 5087608:	1885883a 	add	r2,r3,r2
 508760c:	14400017 	ldw	r17,0(r2)
 5087610:	15000117 	ldw	r20,4(r2)
 5087614:	3001c716 	blt	r6,zero,5087d34 <_dtoa_r+0xec4>
 5087618:	880d883a 	mov	r6,r17
 508761c:	a00f883a 	mov	r7,r20
 5087620:	9009883a 	mov	r4,r18
 5087624:	980b883a 	mov	r5,r19
 5087628:	50900540 	call	5090054 <__divdf3>
 508762c:	180b883a 	mov	r5,r3
 5087630:	1009883a 	mov	r4,r2
 5087634:	5091b580 	call	5091b58 <__fixdfsi>
 5087638:	1009883a 	mov	r4,r2
 508763c:	102d883a 	mov	r22,r2
 5087640:	5091be00 	call	5091be0 <__floatsidf>
 5087644:	1009883a 	mov	r4,r2
 5087648:	180b883a 	mov	r5,r3
 508764c:	880d883a 	mov	r6,r17
 5087650:	a00f883a 	mov	r7,r20
 5087654:	5090b640 	call	5090b64 <__muldf3>
 5087658:	9009883a 	mov	r4,r18
 508765c:	980b883a 	mov	r5,r19
 5087660:	100d883a 	mov	r6,r2
 5087664:	180f883a 	mov	r7,r3
 5087668:	50912880 	call	5091288 <__subdf3>
 508766c:	d9000717 	ldw	r4,28(sp)
 5087670:	d9800617 	ldw	r6,24(sp)
 5087674:	180b883a 	mov	r5,r3
 5087678:	b0c00c04 	addi	r3,r22,48
 508767c:	20c00005 	stb	r3,0(r4)
 5087680:	25c00044 	addi	r23,r4,1
 5087684:	01000044 	movi	r4,1
 5087688:	1011883a 	mov	r8,r2
 508768c:	2807883a 	mov	r3,r5
 5087690:	31003d26 	beq	r6,r4,5087788 <_dtoa_r+0x918>
 5087694:	000d883a 	mov	r6,zero
 5087698:	01d00934 	movhi	r7,16420
 508769c:	1009883a 	mov	r4,r2
 50876a0:	5090b640 	call	5090b64 <__muldf3>
 50876a4:	1009883a 	mov	r4,r2
 50876a8:	180b883a 	mov	r5,r3
 50876ac:	000d883a 	mov	r6,zero
 50876b0:	000f883a 	mov	r7,zero
 50876b4:	1027883a 	mov	r19,r2
 50876b8:	182b883a 	mov	r21,r3
 50876bc:	50909200 	call	5090920 <__eqdf2>
 50876c0:	103f9926 	beq	r2,zero,5087528 <__alt_data_end+0xfffb9328>
 50876c4:	d8c00617 	ldw	r3,24(sp)
 50876c8:	d9000717 	ldw	r4,28(sp)
 50876cc:	b825883a 	mov	r18,r23
 50876d0:	18bfffc4 	addi	r2,r3,-1
 50876d4:	20ad883a 	add	r22,r4,r2
 50876d8:	dc000315 	stw	r16,12(sp)
 50876dc:	00000a06 	br	5087708 <_dtoa_r+0x898>
 50876e0:	5090b640 	call	5090b64 <__muldf3>
 50876e4:	1009883a 	mov	r4,r2
 50876e8:	180b883a 	mov	r5,r3
 50876ec:	000d883a 	mov	r6,zero
 50876f0:	000f883a 	mov	r7,zero
 50876f4:	1027883a 	mov	r19,r2
 50876f8:	182b883a 	mov	r21,r3
 50876fc:	b825883a 	mov	r18,r23
 5087700:	50909200 	call	5090920 <__eqdf2>
 5087704:	10022626 	beq	r2,zero,5087fa0 <_dtoa_r+0x1130>
 5087708:	880d883a 	mov	r6,r17
 508770c:	a00f883a 	mov	r7,r20
 5087710:	9809883a 	mov	r4,r19
 5087714:	a80b883a 	mov	r5,r21
 5087718:	50900540 	call	5090054 <__divdf3>
 508771c:	180b883a 	mov	r5,r3
 5087720:	1009883a 	mov	r4,r2
 5087724:	5091b580 	call	5091b58 <__fixdfsi>
 5087728:	1009883a 	mov	r4,r2
 508772c:	1021883a 	mov	r16,r2
 5087730:	5091be00 	call	5091be0 <__floatsidf>
 5087734:	1009883a 	mov	r4,r2
 5087738:	180b883a 	mov	r5,r3
 508773c:	880d883a 	mov	r6,r17
 5087740:	a00f883a 	mov	r7,r20
 5087744:	5090b640 	call	5090b64 <__muldf3>
 5087748:	9809883a 	mov	r4,r19
 508774c:	a80b883a 	mov	r5,r21
 5087750:	100d883a 	mov	r6,r2
 5087754:	180f883a 	mov	r7,r3
 5087758:	50912880 	call	5091288 <__subdf3>
 508775c:	82000c04 	addi	r8,r16,48
 5087760:	92000005 	stb	r8,0(r18)
 5087764:	1009883a 	mov	r4,r2
 5087768:	180b883a 	mov	r5,r3
 508776c:	000d883a 	mov	r6,zero
 5087770:	01d00934 	movhi	r7,16420
 5087774:	1011883a 	mov	r8,r2
 5087778:	bdc00044 	addi	r23,r23,1
 508777c:	95bfd81e 	bne	r18,r22,50876e0 <__alt_data_end+0xfffb94e0>
 5087780:	802d883a 	mov	r22,r16
 5087784:	dc000317 	ldw	r16,12(sp)
 5087788:	4009883a 	mov	r4,r8
 508778c:	180b883a 	mov	r5,r3
 5087790:	400d883a 	mov	r6,r8
 5087794:	180f883a 	mov	r7,r3
 5087798:	508f7b80 	call	508f7b8 <__adddf3>
 508779c:	8809883a 	mov	r4,r17
 50877a0:	a00b883a 	mov	r5,r20
 50877a4:	100d883a 	mov	r6,r2
 50877a8:	180f883a 	mov	r7,r3
 50877ac:	1027883a 	mov	r19,r2
 50877b0:	1825883a 	mov	r18,r3
 50877b4:	5090a840 	call	5090a84 <__ledf2>
 50877b8:	10000816 	blt	r2,zero,50877dc <_dtoa_r+0x96c>
 50877bc:	8809883a 	mov	r4,r17
 50877c0:	a00b883a 	mov	r5,r20
 50877c4:	980d883a 	mov	r6,r19
 50877c8:	900f883a 	mov	r7,r18
 50877cc:	50909200 	call	5090920 <__eqdf2>
 50877d0:	103f551e 	bne	r2,zero,5087528 <__alt_data_end+0xfffb9328>
 50877d4:	b580004c 	andi	r22,r22,1
 50877d8:	b03f5326 	beq	r22,zero,5087528 <__alt_data_end+0xfffb9328>
 50877dc:	bd7fffc3 	ldbu	r21,-1(r23)
 50877e0:	b8bfffc4 	addi	r2,r23,-1
 50877e4:	1007883a 	mov	r3,r2
 50877e8:	01400e44 	movi	r5,57
 50877ec:	d9800717 	ldw	r6,28(sp)
 50877f0:	00000506 	br	5087808 <_dtoa_r+0x998>
 50877f4:	18ffffc4 	addi	r3,r3,-1
 50877f8:	30825e26 	beq	r6,r2,5088174 <_dtoa_r+0x1304>
 50877fc:	1d400003 	ldbu	r21,0(r3)
 5087800:	102f883a 	mov	r23,r2
 5087804:	10bfffc4 	addi	r2,r2,-1
 5087808:	a9003fcc 	andi	r4,r21,255
 508780c:	2100201c 	xori	r4,r4,128
 5087810:	213fe004 	addi	r4,r4,-128
 5087814:	217ff726 	beq	r4,r5,50877f4 <__alt_data_end+0xfffb95f4>
 5087818:	aa000044 	addi	r8,r21,1
 508781c:	12000005 	stb	r8,0(r2)
 5087820:	003f4106 	br	5087528 <__alt_data_end+0xfffb9328>
 5087824:	d8c00b17 	ldw	r3,44(sp)
 5087828:	18006726 	beq	r3,zero,50879c8 <_dtoa_r+0xb58>
 508782c:	d9000317 	ldw	r4,12(sp)
 5087830:	00c00044 	movi	r3,1
 5087834:	19016a0e 	bge	r3,r4,5087de0 <_dtoa_r+0xf70>
 5087838:	d8800617 	ldw	r2,24(sp)
 508783c:	d8c00917 	ldw	r3,36(sp)
 5087840:	157fffc4 	addi	r21,r2,-1
 5087844:	1d420716 	blt	r3,r21,5088064 <_dtoa_r+0x11f4>
 5087848:	1d6bc83a 	sub	r21,r3,r21
 508784c:	d8800617 	ldw	r2,24(sp)
 5087850:	1002c716 	blt	r2,zero,5088370 <_dtoa_r+0x1500>
 5087854:	dd000817 	ldw	r20,32(sp)
 5087858:	d8800617 	ldw	r2,24(sp)
 508785c:	d9800817 	ldw	r6,32(sp)
 5087860:	8009883a 	mov	r4,r16
 5087864:	01400044 	movi	r5,1
 5087868:	308d883a 	add	r6,r6,r2
 508786c:	d9800815 	stw	r6,32(sp)
 5087870:	b0ad883a 	add	r22,r22,r2
 5087874:	508a8980 	call	508a898 <__i2b>
 5087878:	1023883a 	mov	r17,r2
 508787c:	a0000826 	beq	r20,zero,50878a0 <_dtoa_r+0xa30>
 5087880:	0580070e 	bge	zero,r22,50878a0 <_dtoa_r+0xa30>
 5087884:	b005883a 	mov	r2,r22
 5087888:	a5812016 	blt	r20,r22,5087d0c <_dtoa_r+0xe9c>
 508788c:	d8c00817 	ldw	r3,32(sp)
 5087890:	a0a9c83a 	sub	r20,r20,r2
 5087894:	b0adc83a 	sub	r22,r22,r2
 5087898:	1887c83a 	sub	r3,r3,r2
 508789c:	d8c00815 	stw	r3,32(sp)
 50878a0:	d9000917 	ldw	r4,36(sp)
 50878a4:	0100140e 	bge	zero,r4,50878f8 <_dtoa_r+0xa88>
 50878a8:	d9800b17 	ldw	r6,44(sp)
 50878ac:	3001e526 	beq	r6,zero,5088044 <_dtoa_r+0x11d4>
 50878b0:	05400e0e 	bge	zero,r21,50878ec <_dtoa_r+0xa7c>
 50878b4:	880b883a 	mov	r5,r17
 50878b8:	8009883a 	mov	r4,r16
 50878bc:	a80d883a 	mov	r6,r21
 50878c0:	508aad00 	call	508aad0 <__pow5mult>
 50878c4:	e00d883a 	mov	r6,fp
 50878c8:	8009883a 	mov	r4,r16
 50878cc:	100b883a 	mov	r5,r2
 50878d0:	1023883a 	mov	r17,r2
 50878d4:	508a8d40 	call	508a8d4 <__multiply>
 50878d8:	102f883a 	mov	r23,r2
 50878dc:	e00b883a 	mov	r5,fp
 50878e0:	8009883a 	mov	r4,r16
 50878e4:	508a5400 	call	508a540 <_Bfree>
 50878e8:	b839883a 	mov	fp,r23
 50878ec:	d8800917 	ldw	r2,36(sp)
 50878f0:	154dc83a 	sub	r6,r2,r21
 50878f4:	3001281e 	bne	r6,zero,5087d98 <_dtoa_r+0xf28>
 50878f8:	05c00044 	movi	r23,1
 50878fc:	8009883a 	mov	r4,r16
 5087900:	b80b883a 	mov	r5,r23
 5087904:	508a8980 	call	508a898 <__i2b>
 5087908:	d8c00a17 	ldw	r3,40(sp)
 508790c:	102b883a 	mov	r21,r2
 5087910:	00c0310e 	bge	zero,r3,50879d8 <_dtoa_r+0xb68>
 5087914:	8009883a 	mov	r4,r16
 5087918:	100b883a 	mov	r5,r2
 508791c:	180d883a 	mov	r6,r3
 5087920:	508aad00 	call	508aad0 <__pow5mult>
 5087924:	d9000317 	ldw	r4,12(sp)
 5087928:	102b883a 	mov	r21,r2
 508792c:	b9011f0e 	bge	r23,r4,5087dac <_dtoa_r+0xf3c>
 5087930:	0027883a 	mov	r19,zero
 5087934:	a8800417 	ldw	r2,16(r21)
 5087938:	10800104 	addi	r2,r2,4
 508793c:	1085883a 	add	r2,r2,r2
 5087940:	1085883a 	add	r2,r2,r2
 5087944:	a885883a 	add	r2,r21,r2
 5087948:	11000017 	ldw	r4,0(r2)
 508794c:	508a7800 	call	508a780 <__hi0bits>
 5087950:	00c00804 	movi	r3,32
 5087954:	1885c83a 	sub	r2,r3,r2
 5087958:	00002506 	br	50879f0 <_dtoa_r+0xb80>
 508795c:	01800044 	movi	r6,1
 5087960:	d9800c15 	stw	r6,48(sp)
 5087964:	003dec06 	br	5087118 <__alt_data_end+0xfffb8f18>
 5087968:	d8c00817 	ldw	r3,32(sp)
 508796c:	d9000517 	ldw	r4,20(sp)
 5087970:	d8000a15 	stw	zero,40(sp)
 5087974:	1907c83a 	sub	r3,r3,r4
 5087978:	010dc83a 	sub	r6,zero,r4
 508797c:	d8c00815 	stw	r3,32(sp)
 5087980:	d9800915 	stw	r6,36(sp)
 5087984:	003ded06 	br	508713c <__alt_data_end+0xfffb8f3c>
 5087988:	05adc83a 	sub	r22,zero,r22
 508798c:	dd800815 	stw	r22,32(sp)
 5087990:	002d883a 	mov	r22,zero
 5087994:	003de406 	br	5087128 <__alt_data_end+0xfffb8f28>
 5087998:	d9000517 	ldw	r4,20(sp)
 508799c:	5091be00 	call	5091be0 <__floatsidf>
 50879a0:	1009883a 	mov	r4,r2
 50879a4:	180b883a 	mov	r5,r3
 50879a8:	b00d883a 	mov	r6,r22
 50879ac:	a80f883a 	mov	r7,r21
 50879b0:	50909200 	call	5090920 <__eqdf2>
 50879b4:	103dc726 	beq	r2,zero,50870d4 <__alt_data_end+0xfffb8ed4>
 50879b8:	d8800517 	ldw	r2,20(sp)
 50879bc:	10bfffc4 	addi	r2,r2,-1
 50879c0:	d8800515 	stw	r2,20(sp)
 50879c4:	003dc306 	br	50870d4 <__alt_data_end+0xfffb8ed4>
 50879c8:	dd400917 	ldw	r21,36(sp)
 50879cc:	dd000817 	ldw	r20,32(sp)
 50879d0:	0023883a 	mov	r17,zero
 50879d4:	003fa906 	br	508787c <__alt_data_end+0xfffb967c>
 50879d8:	d9800317 	ldw	r6,12(sp)
 50879dc:	b981670e 	bge	r23,r6,5087f7c <_dtoa_r+0x110c>
 50879e0:	0027883a 	mov	r19,zero
 50879e4:	d8c00a17 	ldw	r3,40(sp)
 50879e8:	183fd21e 	bne	r3,zero,5087934 <__alt_data_end+0xfffb9734>
 50879ec:	00800044 	movi	r2,1
 50879f0:	1585883a 	add	r2,r2,r22
 50879f4:	108007cc 	andi	r2,r2,31
 50879f8:	10005f26 	beq	r2,zero,5087b78 <_dtoa_r+0xd08>
 50879fc:	00c00804 	movi	r3,32
 5087a00:	1887c83a 	sub	r3,r3,r2
 5087a04:	01000104 	movi	r4,4
 5087a08:	20c2dd0e 	bge	r4,r3,5088580 <_dtoa_r+0x1710>
 5087a0c:	d9000817 	ldw	r4,32(sp)
 5087a10:	00c00704 	movi	r3,28
 5087a14:	1885c83a 	sub	r2,r3,r2
 5087a18:	2089883a 	add	r4,r4,r2
 5087a1c:	d9000815 	stw	r4,32(sp)
 5087a20:	a0a9883a 	add	r20,r20,r2
 5087a24:	b0ad883a 	add	r22,r22,r2
 5087a28:	d8800817 	ldw	r2,32(sp)
 5087a2c:	0080050e 	bge	zero,r2,5087a44 <_dtoa_r+0xbd4>
 5087a30:	e00b883a 	mov	r5,fp
 5087a34:	8009883a 	mov	r4,r16
 5087a38:	100d883a 	mov	r6,r2
 5087a3c:	508ac100 	call	508ac10 <__lshift>
 5087a40:	1039883a 	mov	fp,r2
 5087a44:	0580050e 	bge	zero,r22,5087a5c <_dtoa_r+0xbec>
 5087a48:	a80b883a 	mov	r5,r21
 5087a4c:	8009883a 	mov	r4,r16
 5087a50:	b00d883a 	mov	r6,r22
 5087a54:	508ac100 	call	508ac10 <__lshift>
 5087a58:	102b883a 	mov	r21,r2
 5087a5c:	d8c00c17 	ldw	r3,48(sp)
 5087a60:	1801161e 	bne	r3,zero,5087ebc <_dtoa_r+0x104c>
 5087a64:	d8c00617 	ldw	r3,24(sp)
 5087a68:	00c12d0e 	bge	zero,r3,5087f20 <_dtoa_r+0x10b0>
 5087a6c:	d8c00b17 	ldw	r3,44(sp)
 5087a70:	1800571e 	bne	r3,zero,5087bd0 <_dtoa_r+0xd60>
 5087a74:	dc800717 	ldw	r18,28(sp)
 5087a78:	dcc00617 	ldw	r19,24(sp)
 5087a7c:	9029883a 	mov	r20,r18
 5087a80:	00000206 	br	5087a8c <_dtoa_r+0xc1c>
 5087a84:	508a5680 	call	508a568 <__multadd>
 5087a88:	1039883a 	mov	fp,r2
 5087a8c:	e009883a 	mov	r4,fp
 5087a90:	a80b883a 	mov	r5,r21
 5087a94:	5086c700 	call	5086c70 <quorem>
 5087a98:	10800c04 	addi	r2,r2,48
 5087a9c:	90800005 	stb	r2,0(r18)
 5087aa0:	94800044 	addi	r18,r18,1
 5087aa4:	9507c83a 	sub	r3,r18,r20
 5087aa8:	8009883a 	mov	r4,r16
 5087aac:	e00b883a 	mov	r5,fp
 5087ab0:	01800284 	movi	r6,10
 5087ab4:	000f883a 	mov	r7,zero
 5087ab8:	1cfff216 	blt	r3,r19,5087a84 <__alt_data_end+0xfffb9884>
 5087abc:	1011883a 	mov	r8,r2
 5087ac0:	d8800617 	ldw	r2,24(sp)
 5087ac4:	00822e0e 	bge	zero,r2,5088380 <_dtoa_r+0x1510>
 5087ac8:	d9000717 	ldw	r4,28(sp)
 5087acc:	0025883a 	mov	r18,zero
 5087ad0:	20af883a 	add	r23,r4,r2
 5087ad4:	e00b883a 	mov	r5,fp
 5087ad8:	01800044 	movi	r6,1
 5087adc:	8009883a 	mov	r4,r16
 5087ae0:	da001715 	stw	r8,92(sp)
 5087ae4:	508ac100 	call	508ac10 <__lshift>
 5087ae8:	1009883a 	mov	r4,r2
 5087aec:	a80b883a 	mov	r5,r21
 5087af0:	1039883a 	mov	fp,r2
 5087af4:	508ad580 	call	508ad58 <__mcmp>
 5087af8:	da001717 	ldw	r8,92(sp)
 5087afc:	00816e0e 	bge	zero,r2,50880b8 <_dtoa_r+0x1248>
 5087b00:	b93fffc3 	ldbu	r4,-1(r23)
 5087b04:	b8bfffc4 	addi	r2,r23,-1
 5087b08:	1007883a 	mov	r3,r2
 5087b0c:	01800e44 	movi	r6,57
 5087b10:	d9c00717 	ldw	r7,28(sp)
 5087b14:	00000506 	br	5087b2c <_dtoa_r+0xcbc>
 5087b18:	18ffffc4 	addi	r3,r3,-1
 5087b1c:	38811926 	beq	r7,r2,5087f84 <_dtoa_r+0x1114>
 5087b20:	19000003 	ldbu	r4,0(r3)
 5087b24:	102f883a 	mov	r23,r2
 5087b28:	10bfffc4 	addi	r2,r2,-1
 5087b2c:	21403fcc 	andi	r5,r4,255
 5087b30:	2940201c 	xori	r5,r5,128
 5087b34:	297fe004 	addi	r5,r5,-128
 5087b38:	29bff726 	beq	r5,r6,5087b18 <__alt_data_end+0xfffb9918>
 5087b3c:	21000044 	addi	r4,r4,1
 5087b40:	11000005 	stb	r4,0(r2)
 5087b44:	8009883a 	mov	r4,r16
 5087b48:	a80b883a 	mov	r5,r21
 5087b4c:	508a5400 	call	508a540 <_Bfree>
 5087b50:	883e7526 	beq	r17,zero,5087528 <__alt_data_end+0xfffb9328>
 5087b54:	90000426 	beq	r18,zero,5087b68 <_dtoa_r+0xcf8>
 5087b58:	94400326 	beq	r18,r17,5087b68 <_dtoa_r+0xcf8>
 5087b5c:	8009883a 	mov	r4,r16
 5087b60:	900b883a 	mov	r5,r18
 5087b64:	508a5400 	call	508a540 <_Bfree>
 5087b68:	8009883a 	mov	r4,r16
 5087b6c:	880b883a 	mov	r5,r17
 5087b70:	508a5400 	call	508a540 <_Bfree>
 5087b74:	003e6c06 	br	5087528 <__alt_data_end+0xfffb9328>
 5087b78:	00800704 	movi	r2,28
 5087b7c:	d9800817 	ldw	r6,32(sp)
 5087b80:	a0a9883a 	add	r20,r20,r2
 5087b84:	b0ad883a 	add	r22,r22,r2
 5087b88:	308d883a 	add	r6,r6,r2
 5087b8c:	d9800815 	stw	r6,32(sp)
 5087b90:	003fa506 	br	5087a28 <__alt_data_end+0xfffb9828>
 5087b94:	013efb84 	movi	r4,-1042
 5087b98:	246bc83a 	sub	r21,r4,r17
 5087b9c:	9548983a 	sll	r4,r18,r21
 5087ba0:	003d1806 	br	5087004 <__alt_data_end+0xfffb8e04>
 5087ba4:	d8000c15 	stw	zero,48(sp)
 5087ba8:	003d5b06 	br	5087118 <__alt_data_end+0xfffb8f18>
 5087bac:	880b883a 	mov	r5,r17
 5087bb0:	8009883a 	mov	r4,r16
 5087bb4:	01800284 	movi	r6,10
 5087bb8:	000f883a 	mov	r7,zero
 5087bbc:	508a5680 	call	508a568 <__multadd>
 5087bc0:	1023883a 	mov	r17,r2
 5087bc4:	d8800d17 	ldw	r2,52(sp)
 5087bc8:	0082550e 	bge	zero,r2,5088520 <_dtoa_r+0x16b0>
 5087bcc:	d8800615 	stw	r2,24(sp)
 5087bd0:	0500050e 	bge	zero,r20,5087be8 <_dtoa_r+0xd78>
 5087bd4:	880b883a 	mov	r5,r17
 5087bd8:	8009883a 	mov	r4,r16
 5087bdc:	a00d883a 	mov	r6,r20
 5087be0:	508ac100 	call	508ac10 <__lshift>
 5087be4:	1023883a 	mov	r17,r2
 5087be8:	98016a1e 	bne	r19,zero,5088194 <_dtoa_r+0x1324>
 5087bec:	8829883a 	mov	r20,r17
 5087bf0:	d9000617 	ldw	r4,24(sp)
 5087bf4:	dcc00717 	ldw	r19,28(sp)
 5087bf8:	9480004c 	andi	r18,r18,1
 5087bfc:	20bfffc4 	addi	r2,r4,-1
 5087c00:	9885883a 	add	r2,r19,r2
 5087c04:	d8800415 	stw	r2,16(sp)
 5087c08:	dc800615 	stw	r18,24(sp)
 5087c0c:	e009883a 	mov	r4,fp
 5087c10:	a80b883a 	mov	r5,r21
 5087c14:	5086c700 	call	5086c70 <quorem>
 5087c18:	e009883a 	mov	r4,fp
 5087c1c:	880b883a 	mov	r5,r17
 5087c20:	102f883a 	mov	r23,r2
 5087c24:	508ad580 	call	508ad58 <__mcmp>
 5087c28:	8009883a 	mov	r4,r16
 5087c2c:	a80b883a 	mov	r5,r21
 5087c30:	a00d883a 	mov	r6,r20
 5087c34:	102d883a 	mov	r22,r2
 5087c38:	508adb80 	call	508adb8 <__mdiff>
 5087c3c:	1007883a 	mov	r3,r2
 5087c40:	10800317 	ldw	r2,12(r2)
 5087c44:	bc800c04 	addi	r18,r23,48
 5087c48:	1000971e 	bne	r2,zero,5087ea8 <_dtoa_r+0x1038>
 5087c4c:	180b883a 	mov	r5,r3
 5087c50:	e009883a 	mov	r4,fp
 5087c54:	d8c01515 	stw	r3,84(sp)
 5087c58:	508ad580 	call	508ad58 <__mcmp>
 5087c5c:	d8c01517 	ldw	r3,84(sp)
 5087c60:	8009883a 	mov	r4,r16
 5087c64:	d8801515 	stw	r2,84(sp)
 5087c68:	180b883a 	mov	r5,r3
 5087c6c:	508a5400 	call	508a540 <_Bfree>
 5087c70:	d8801517 	ldw	r2,84(sp)
 5087c74:	1000041e 	bne	r2,zero,5087c88 <_dtoa_r+0xe18>
 5087c78:	d9800317 	ldw	r6,12(sp)
 5087c7c:	3000021e 	bne	r6,zero,5087c88 <_dtoa_r+0xe18>
 5087c80:	d8c00617 	ldw	r3,24(sp)
 5087c84:	18007626 	beq	r3,zero,5087e60 <_dtoa_r+0xff0>
 5087c88:	b0005b16 	blt	r22,zero,5087df8 <_dtoa_r+0xf88>
 5087c8c:	b000041e 	bne	r22,zero,5087ca0 <_dtoa_r+0xe30>
 5087c90:	d9000317 	ldw	r4,12(sp)
 5087c94:	2000021e 	bne	r4,zero,5087ca0 <_dtoa_r+0xe30>
 5087c98:	d8c00617 	ldw	r3,24(sp)
 5087c9c:	18005626 	beq	r3,zero,5087df8 <_dtoa_r+0xf88>
 5087ca0:	00814d16 	blt	zero,r2,50881d8 <_dtoa_r+0x1368>
 5087ca4:	d8c00417 	ldw	r3,16(sp)
 5087ca8:	9d800044 	addi	r22,r19,1
 5087cac:	9c800005 	stb	r18,0(r19)
 5087cb0:	b02f883a 	mov	r23,r22
 5087cb4:	98c14c26 	beq	r19,r3,50881e8 <_dtoa_r+0x1378>
 5087cb8:	e00b883a 	mov	r5,fp
 5087cbc:	8009883a 	mov	r4,r16
 5087cc0:	01800284 	movi	r6,10
 5087cc4:	000f883a 	mov	r7,zero
 5087cc8:	508a5680 	call	508a568 <__multadd>
 5087ccc:	1039883a 	mov	fp,r2
 5087cd0:	8d006d26 	beq	r17,r20,5087e88 <_dtoa_r+0x1018>
 5087cd4:	880b883a 	mov	r5,r17
 5087cd8:	01800284 	movi	r6,10
 5087cdc:	000f883a 	mov	r7,zero
 5087ce0:	8009883a 	mov	r4,r16
 5087ce4:	508a5680 	call	508a568 <__multadd>
 5087ce8:	a00b883a 	mov	r5,r20
 5087cec:	8009883a 	mov	r4,r16
 5087cf0:	01800284 	movi	r6,10
 5087cf4:	000f883a 	mov	r7,zero
 5087cf8:	1023883a 	mov	r17,r2
 5087cfc:	508a5680 	call	508a568 <__multadd>
 5087d00:	1029883a 	mov	r20,r2
 5087d04:	b027883a 	mov	r19,r22
 5087d08:	003fc006 	br	5087c0c <__alt_data_end+0xfffb9a0c>
 5087d0c:	a005883a 	mov	r2,r20
 5087d10:	003ede06 	br	508788c <__alt_data_end+0xfffb968c>
 5087d14:	01000044 	movi	r4,1
 5087d18:	d9000b15 	stw	r4,44(sp)
 5087d1c:	d9802217 	ldw	r6,136(sp)
 5087d20:	0180dc0e 	bge	zero,r6,5088094 <_dtoa_r+0x1224>
 5087d24:	3023883a 	mov	r17,r6
 5087d28:	d9800d15 	stw	r6,52(sp)
 5087d2c:	d9800615 	stw	r6,24(sp)
 5087d30:	003d1e06 	br	50871ac <__alt_data_end+0xfffb8fac>
 5087d34:	d8800617 	ldw	r2,24(sp)
 5087d38:	00be3716 	blt	zero,r2,5087618 <__alt_data_end+0xfffb9418>
 5087d3c:	1000be1e 	bne	r2,zero,5088038 <_dtoa_r+0x11c8>
 5087d40:	8809883a 	mov	r4,r17
 5087d44:	a00b883a 	mov	r5,r20
 5087d48:	000d883a 	mov	r6,zero
 5087d4c:	01d00534 	movhi	r7,16404
 5087d50:	5090b640 	call	5090b64 <__muldf3>
 5087d54:	1009883a 	mov	r4,r2
 5087d58:	180b883a 	mov	r5,r3
 5087d5c:	900d883a 	mov	r6,r18
 5087d60:	980f883a 	mov	r7,r19
 5087d64:	50909a40 	call	50909a4 <__gedf2>
 5087d68:	002b883a 	mov	r21,zero
 5087d6c:	0023883a 	mov	r17,zero
 5087d70:	10007a16 	blt	r2,zero,5087f5c <_dtoa_r+0x10ec>
 5087d74:	d9002217 	ldw	r4,136(sp)
 5087d78:	ddc00717 	ldw	r23,28(sp)
 5087d7c:	0108303a 	nor	r4,zero,r4
 5087d80:	d9000515 	stw	r4,20(sp)
 5087d84:	8009883a 	mov	r4,r16
 5087d88:	a80b883a 	mov	r5,r21
 5087d8c:	508a5400 	call	508a540 <_Bfree>
 5087d90:	883f751e 	bne	r17,zero,5087b68 <__alt_data_end+0xfffb9968>
 5087d94:	003de406 	br	5087528 <__alt_data_end+0xfffb9328>
 5087d98:	e00b883a 	mov	r5,fp
 5087d9c:	8009883a 	mov	r4,r16
 5087da0:	508aad00 	call	508aad0 <__pow5mult>
 5087da4:	1039883a 	mov	fp,r2
 5087da8:	003ed306 	br	50878f8 <__alt_data_end+0xfffb96f8>
 5087dac:	903ee01e 	bne	r18,zero,5087930 <__alt_data_end+0xfffb9730>
 5087db0:	00800434 	movhi	r2,16
 5087db4:	10bfffc4 	addi	r2,r2,-1
 5087db8:	9884703a 	and	r2,r19,r2
 5087dbc:	103f081e 	bne	r2,zero,50879e0 <__alt_data_end+0xfffb97e0>
 5087dc0:	9cdffc2c 	andhi	r19,r19,32752
 5087dc4:	983f0626 	beq	r19,zero,50879e0 <__alt_data_end+0xfffb97e0>
 5087dc8:	d8800817 	ldw	r2,32(sp)
 5087dcc:	b5800044 	addi	r22,r22,1
 5087dd0:	04c00044 	movi	r19,1
 5087dd4:	10800044 	addi	r2,r2,1
 5087dd8:	d8800815 	stw	r2,32(sp)
 5087ddc:	003f0106 	br	50879e4 <__alt_data_end+0xfffb97e4>
 5087de0:	d9800f17 	ldw	r6,60(sp)
 5087de4:	30016826 	beq	r6,zero,5088388 <_dtoa_r+0x1518>
 5087de8:	10810cc4 	addi	r2,r2,1075
 5087dec:	dd400917 	ldw	r21,36(sp)
 5087df0:	dd000817 	ldw	r20,32(sp)
 5087df4:	003e9906 	br	508785c <__alt_data_end+0xfffb965c>
 5087df8:	9011883a 	mov	r8,r18
 5087dfc:	4007883a 	mov	r3,r8
 5087e00:	e02d883a 	mov	r22,fp
 5087e04:	0080100e 	bge	zero,r2,5087e48 <_dtoa_r+0xfd8>
 5087e08:	01800044 	movi	r6,1
 5087e0c:	8009883a 	mov	r4,r16
 5087e10:	e00b883a 	mov	r5,fp
 5087e14:	da001515 	stw	r8,84(sp)
 5087e18:	da001715 	stw	r8,92(sp)
 5087e1c:	508ac100 	call	508ac10 <__lshift>
 5087e20:	1009883a 	mov	r4,r2
 5087e24:	a80b883a 	mov	r5,r21
 5087e28:	102d883a 	mov	r22,r2
 5087e2c:	508ad580 	call	508ad58 <__mcmp>
 5087e30:	d8c01517 	ldw	r3,84(sp)
 5087e34:	da001717 	ldw	r8,92(sp)
 5087e38:	0081a50e 	bge	zero,r2,50884d0 <_dtoa_r+0x1660>
 5087e3c:	00800e44 	movi	r2,57
 5087e40:	40817b26 	beq	r8,r2,5088430 <_dtoa_r+0x15c0>
 5087e44:	40c00044 	addi	r3,r8,1
 5087e48:	8825883a 	mov	r18,r17
 5087e4c:	9dc00044 	addi	r23,r19,1
 5087e50:	98c00005 	stb	r3,0(r19)
 5087e54:	a023883a 	mov	r17,r20
 5087e58:	b039883a 	mov	fp,r22
 5087e5c:	003f3906 	br	5087b44 <__alt_data_end+0xfffb9944>
 5087e60:	00800e44 	movi	r2,57
 5087e64:	9011883a 	mov	r8,r18
 5087e68:	90817226 	beq	r18,r2,5088434 <_dtoa_r+0x15c4>
 5087e6c:	0580010e 	bge	zero,r22,5087e74 <_dtoa_r+0x1004>
 5087e70:	ba000c44 	addi	r8,r23,49
 5087e74:	8825883a 	mov	r18,r17
 5087e78:	9dc00044 	addi	r23,r19,1
 5087e7c:	9a000005 	stb	r8,0(r19)
 5087e80:	a023883a 	mov	r17,r20
 5087e84:	003f2f06 	br	5087b44 <__alt_data_end+0xfffb9944>
 5087e88:	880b883a 	mov	r5,r17
 5087e8c:	8009883a 	mov	r4,r16
 5087e90:	01800284 	movi	r6,10
 5087e94:	000f883a 	mov	r7,zero
 5087e98:	508a5680 	call	508a568 <__multadd>
 5087e9c:	1023883a 	mov	r17,r2
 5087ea0:	1029883a 	mov	r20,r2
 5087ea4:	003f9706 	br	5087d04 <__alt_data_end+0xfffb9b04>
 5087ea8:	8009883a 	mov	r4,r16
 5087eac:	180b883a 	mov	r5,r3
 5087eb0:	508a5400 	call	508a540 <_Bfree>
 5087eb4:	00800044 	movi	r2,1
 5087eb8:	003f7306 	br	5087c88 <__alt_data_end+0xfffb9a88>
 5087ebc:	e009883a 	mov	r4,fp
 5087ec0:	a80b883a 	mov	r5,r21
 5087ec4:	508ad580 	call	508ad58 <__mcmp>
 5087ec8:	103ee60e 	bge	r2,zero,5087a64 <__alt_data_end+0xfffb9864>
 5087ecc:	8009883a 	mov	r4,r16
 5087ed0:	e00b883a 	mov	r5,fp
 5087ed4:	01800284 	movi	r6,10
 5087ed8:	000f883a 	mov	r7,zero
 5087edc:	508a5680 	call	508a568 <__multadd>
 5087ee0:	d9000517 	ldw	r4,20(sp)
 5087ee4:	d9800b17 	ldw	r6,44(sp)
 5087ee8:	1039883a 	mov	fp,r2
 5087eec:	213fffc4 	addi	r4,r4,-1
 5087ef0:	d9000515 	stw	r4,20(sp)
 5087ef4:	303f2d1e 	bne	r6,zero,5087bac <__alt_data_end+0xfffb99ac>
 5087ef8:	d9000d17 	ldw	r4,52(sp)
 5087efc:	0101780e 	bge	zero,r4,50884e0 <_dtoa_r+0x1670>
 5087f00:	d9000615 	stw	r4,24(sp)
 5087f04:	003edb06 	br	5087a74 <__alt_data_end+0xfffb9874>
 5087f08:	00800084 	movi	r2,2
 5087f0c:	30818e1e 	bne	r6,r2,5088548 <_dtoa_r+0x16d8>
 5087f10:	d8000b15 	stw	zero,44(sp)
 5087f14:	003f8106 	br	5087d1c <__alt_data_end+0xfffb9b1c>
 5087f18:	d8800717 	ldw	r2,28(sp)
 5087f1c:	003c0306 	br	5086f2c <__alt_data_end+0xfffb8d2c>
 5087f20:	d9000317 	ldw	r4,12(sp)
 5087f24:	00800084 	movi	r2,2
 5087f28:	113ed00e 	bge	r2,r4,5087a6c <__alt_data_end+0xfffb986c>
 5087f2c:	d8c00617 	ldw	r3,24(sp)
 5087f30:	183f901e 	bne	r3,zero,5087d74 <__alt_data_end+0xfffb9b74>
 5087f34:	a80b883a 	mov	r5,r21
 5087f38:	8009883a 	mov	r4,r16
 5087f3c:	01800144 	movi	r6,5
 5087f40:	000f883a 	mov	r7,zero
 5087f44:	508a5680 	call	508a568 <__multadd>
 5087f48:	e009883a 	mov	r4,fp
 5087f4c:	100b883a 	mov	r5,r2
 5087f50:	102b883a 	mov	r21,r2
 5087f54:	508ad580 	call	508ad58 <__mcmp>
 5087f58:	00bf860e 	bge	zero,r2,5087d74 <__alt_data_end+0xfffb9b74>
 5087f5c:	d9800717 	ldw	r6,28(sp)
 5087f60:	00800c44 	movi	r2,49
 5087f64:	30800005 	stb	r2,0(r6)
 5087f68:	d8800517 	ldw	r2,20(sp)
 5087f6c:	35c00044 	addi	r23,r6,1
 5087f70:	10800044 	addi	r2,r2,1
 5087f74:	d8800515 	stw	r2,20(sp)
 5087f78:	003f8206 	br	5087d84 <__alt_data_end+0xfffb9b84>
 5087f7c:	903e981e 	bne	r18,zero,50879e0 <__alt_data_end+0xfffb97e0>
 5087f80:	003f8b06 	br	5087db0 <__alt_data_end+0xfffb9bb0>
 5087f84:	d9800517 	ldw	r6,20(sp)
 5087f88:	d8c00717 	ldw	r3,28(sp)
 5087f8c:	00800c44 	movi	r2,49
 5087f90:	31800044 	addi	r6,r6,1
 5087f94:	d9800515 	stw	r6,20(sp)
 5087f98:	18800005 	stb	r2,0(r3)
 5087f9c:	003ee906 	br	5087b44 <__alt_data_end+0xfffb9944>
 5087fa0:	dc000317 	ldw	r16,12(sp)
 5087fa4:	003d6006 	br	5087528 <__alt_data_end+0xfffb9328>
 5087fa8:	8809883a 	mov	r4,r17
 5087fac:	5091be00 	call	5091be0 <__floatsidf>
 5087fb0:	a009883a 	mov	r4,r20
 5087fb4:	a80b883a 	mov	r5,r21
 5087fb8:	100d883a 	mov	r6,r2
 5087fbc:	180f883a 	mov	r7,r3
 5087fc0:	5090b640 	call	5090b64 <__muldf3>
 5087fc4:	1009883a 	mov	r4,r2
 5087fc8:	180b883a 	mov	r5,r3
 5087fcc:	000d883a 	mov	r6,zero
 5087fd0:	01d00734 	movhi	r7,16412
 5087fd4:	508f7b80 	call	508f7b8 <__adddf3>
 5087fd8:	1023883a 	mov	r17,r2
 5087fdc:	00bf3034 	movhi	r2,64704
 5087fe0:	1885883a 	add	r2,r3,r2
 5087fe4:	d8800e15 	stw	r2,56(sp)
 5087fe8:	a009883a 	mov	r4,r20
 5087fec:	a80b883a 	mov	r5,r21
 5087ff0:	000d883a 	mov	r6,zero
 5087ff4:	01d00534 	movhi	r7,16404
 5087ff8:	50912880 	call	5091288 <__subdf3>
 5087ffc:	d9c00e17 	ldw	r7,56(sp)
 5088000:	1009883a 	mov	r4,r2
 5088004:	180b883a 	mov	r5,r3
 5088008:	880d883a 	mov	r6,r17
 508800c:	102b883a 	mov	r21,r2
 5088010:	1829883a 	mov	r20,r3
 5088014:	50909a40 	call	50909a4 <__gedf2>
 5088018:	00807716 	blt	zero,r2,50881f8 <_dtoa_r+0x1388>
 508801c:	d8800e17 	ldw	r2,56(sp)
 5088020:	a809883a 	mov	r4,r21
 5088024:	a00b883a 	mov	r5,r20
 5088028:	11e0003c 	xorhi	r7,r2,32768
 508802c:	880d883a 	mov	r6,r17
 5088030:	5090a840 	call	5090a84 <__ledf2>
 5088034:	103d6b0e 	bge	r2,zero,50875e4 <__alt_data_end+0xfffb93e4>
 5088038:	002b883a 	mov	r21,zero
 508803c:	0023883a 	mov	r17,zero
 5088040:	003f4c06 	br	5087d74 <__alt_data_end+0xfffb9b74>
 5088044:	d9800917 	ldw	r6,36(sp)
 5088048:	e00b883a 	mov	r5,fp
 508804c:	8009883a 	mov	r4,r16
 5088050:	508aad00 	call	508aad0 <__pow5mult>
 5088054:	1039883a 	mov	fp,r2
 5088058:	003e2706 	br	50878f8 <__alt_data_end+0xfffb96f8>
 508805c:	d8000b15 	stw	zero,44(sp)
 5088060:	003c4906 	br	5087188 <__alt_data_end+0xfffb8f88>
 5088064:	d9000917 	ldw	r4,36(sp)
 5088068:	d9800a17 	ldw	r6,40(sp)
 508806c:	dd400915 	stw	r21,36(sp)
 5088070:	a905c83a 	sub	r2,r21,r4
 5088074:	308d883a 	add	r6,r6,r2
 5088078:	d9800a15 	stw	r6,40(sp)
 508807c:	002b883a 	mov	r21,zero
 5088080:	003df206 	br	508784c <__alt_data_end+0xfffb964c>
 5088084:	dc800e15 	stw	r18,56(sp)
 5088088:	982b883a 	mov	r21,r19
 508808c:	04400084 	movi	r17,2
 5088090:	003c7406 	br	5087264 <__alt_data_end+0xfffb9064>
 5088094:	04400044 	movi	r17,1
 5088098:	dc400d15 	stw	r17,52(sp)
 508809c:	dc400615 	stw	r17,24(sp)
 50880a0:	dc402215 	stw	r17,136(sp)
 50880a4:	80001115 	stw	zero,68(r16)
 50880a8:	000b883a 	mov	r5,zero
 50880ac:	003c4a06 	br	50871d8 <__alt_data_end+0xfffb8fd8>
 50880b0:	3023883a 	mov	r17,r6
 50880b4:	003ffb06 	br	50880a4 <__alt_data_end+0xfffb9ea4>
 50880b8:	1000021e 	bne	r2,zero,50880c4 <_dtoa_r+0x1254>
 50880bc:	4200004c 	andi	r8,r8,1
 50880c0:	403e8f1e 	bne	r8,zero,5087b00 <__alt_data_end+0xfffb9900>
 50880c4:	01000c04 	movi	r4,48
 50880c8:	00000106 	br	50880d0 <_dtoa_r+0x1260>
 50880cc:	102f883a 	mov	r23,r2
 50880d0:	b8bfffc4 	addi	r2,r23,-1
 50880d4:	10c00007 	ldb	r3,0(r2)
 50880d8:	193ffc26 	beq	r3,r4,50880cc <__alt_data_end+0xfffb9ecc>
 50880dc:	003e9906 	br	5087b44 <__alt_data_end+0xfffb9944>
 50880e0:	d9000517 	ldw	r4,20(sp)
 50880e4:	012fc83a 	sub	r23,zero,r4
 50880e8:	b800ad26 	beq	r23,zero,50883a0 <_dtoa_r+0x1530>
 50880ec:	b88003cc 	andi	r2,r23,15
 50880f0:	100490fa 	slli	r2,r2,3
 50880f4:	00c14274 	movhi	r3,1289
 50880f8:	18d51904 	addi	r3,r3,21604
 50880fc:	1885883a 	add	r2,r3,r2
 5088100:	11800017 	ldw	r6,0(r2)
 5088104:	11c00117 	ldw	r7,4(r2)
 5088108:	b82fd13a 	srai	r23,r23,4
 508810c:	9009883a 	mov	r4,r18
 5088110:	980b883a 	mov	r5,r19
 5088114:	5090b640 	call	5090b64 <__muldf3>
 5088118:	1029883a 	mov	r20,r2
 508811c:	182b883a 	mov	r21,r3
 5088120:	b800f426 	beq	r23,zero,50884f4 <_dtoa_r+0x1684>
 5088124:	02014274 	movhi	r8,1289
 5088128:	42150f04 	addi	r8,r8,21564
 508812c:	8029883a 	mov	r20,r16
 5088130:	04400084 	movi	r17,2
 5088134:	4021883a 	mov	r16,r8
 5088138:	b980004c 	andi	r6,r23,1
 508813c:	1009883a 	mov	r4,r2
 5088140:	b82fd07a 	srai	r23,r23,1
 5088144:	180b883a 	mov	r5,r3
 5088148:	30000426 	beq	r6,zero,508815c <_dtoa_r+0x12ec>
 508814c:	81800017 	ldw	r6,0(r16)
 5088150:	81c00117 	ldw	r7,4(r16)
 5088154:	8c400044 	addi	r17,r17,1
 5088158:	5090b640 	call	5090b64 <__muldf3>
 508815c:	84000204 	addi	r16,r16,8
 5088160:	b83ff51e 	bne	r23,zero,5088138 <__alt_data_end+0xfffb9f38>
 5088164:	a021883a 	mov	r16,r20
 5088168:	182b883a 	mov	r21,r3
 508816c:	1029883a 	mov	r20,r2
 5088170:	003c5506 	br	50872c8 <__alt_data_end+0xfffb90c8>
 5088174:	d9800517 	ldw	r6,20(sp)
 5088178:	d9000717 	ldw	r4,28(sp)
 508817c:	00c00c04 	movi	r3,48
 5088180:	31800044 	addi	r6,r6,1
 5088184:	d9800515 	stw	r6,20(sp)
 5088188:	20c00005 	stb	r3,0(r4)
 508818c:	02000c44 	movi	r8,49
 5088190:	003da206 	br	508781c <__alt_data_end+0xfffb961c>
 5088194:	89400117 	ldw	r5,4(r17)
 5088198:	8009883a 	mov	r4,r16
 508819c:	508a4980 	call	508a498 <_Balloc>
 50881a0:	89800417 	ldw	r6,16(r17)
 50881a4:	11000304 	addi	r4,r2,12
 50881a8:	89400304 	addi	r5,r17,12
 50881ac:	31800084 	addi	r6,r6,2
 50881b0:	318d883a 	add	r6,r6,r6
 50881b4:	318d883a 	add	r6,r6,r6
 50881b8:	1027883a 	mov	r19,r2
 50881bc:	508a0e00 	call	508a0e0 <memcpy>
 50881c0:	8009883a 	mov	r4,r16
 50881c4:	980b883a 	mov	r5,r19
 50881c8:	01800044 	movi	r6,1
 50881cc:	508ac100 	call	508ac10 <__lshift>
 50881d0:	1029883a 	mov	r20,r2
 50881d4:	003e8606 	br	5087bf0 <__alt_data_end+0xfffb99f0>
 50881d8:	00800e44 	movi	r2,57
 50881dc:	90809526 	beq	r18,r2,5088434 <_dtoa_r+0x15c4>
 50881e0:	92000044 	addi	r8,r18,1
 50881e4:	003f2306 	br	5087e74 <__alt_data_end+0xfffb9c74>
 50881e8:	9011883a 	mov	r8,r18
 50881ec:	8825883a 	mov	r18,r17
 50881f0:	a023883a 	mov	r17,r20
 50881f4:	003e3706 	br	5087ad4 <__alt_data_end+0xfffb98d4>
 50881f8:	002b883a 	mov	r21,zero
 50881fc:	0023883a 	mov	r17,zero
 5088200:	003f5606 	br	5087f5c <__alt_data_end+0xfffb9d5c>
 5088204:	51bfffc4 	addi	r6,r10,-1
 5088208:	300490fa 	slli	r2,r6,3
 508820c:	00c14274 	movhi	r3,1289
 5088210:	18d51904 	addi	r3,r3,21604
 5088214:	1885883a 	add	r2,r3,r2
 5088218:	d9c00e17 	ldw	r7,56(sp)
 508821c:	11000017 	ldw	r4,0(r2)
 5088220:	11400117 	ldw	r5,4(r2)
 5088224:	d8800717 	ldw	r2,28(sp)
 5088228:	d9801015 	stw	r6,64(sp)
 508822c:	880d883a 	mov	r6,r17
 5088230:	da801615 	stw	r10,88(sp)
 5088234:	15c00044 	addi	r23,r2,1
 5088238:	5090b640 	call	5090b64 <__muldf3>
 508823c:	a80b883a 	mov	r5,r21
 5088240:	a009883a 	mov	r4,r20
 5088244:	d8c01115 	stw	r3,68(sp)
 5088248:	d8800e15 	stw	r2,56(sp)
 508824c:	5091b580 	call	5091b58 <__fixdfsi>
 5088250:	1009883a 	mov	r4,r2
 5088254:	1023883a 	mov	r17,r2
 5088258:	5091be00 	call	5091be0 <__floatsidf>
 508825c:	a009883a 	mov	r4,r20
 5088260:	a80b883a 	mov	r5,r21
 5088264:	100d883a 	mov	r6,r2
 5088268:	180f883a 	mov	r7,r3
 508826c:	50912880 	call	5091288 <__subdf3>
 5088270:	1813883a 	mov	r9,r3
 5088274:	d8c00717 	ldw	r3,28(sp)
 5088278:	8c400c04 	addi	r17,r17,48
 508827c:	1011883a 	mov	r8,r2
 5088280:	1c400005 	stb	r17,0(r3)
 5088284:	da801617 	ldw	r10,88(sp)
 5088288:	00800044 	movi	r2,1
 508828c:	50802326 	beq	r10,r2,508831c <_dtoa_r+0x14ac>
 5088290:	d8800717 	ldw	r2,28(sp)
 5088294:	b82b883a 	mov	r21,r23
 5088298:	dc001315 	stw	r16,76(sp)
 508829c:	12a9883a 	add	r20,r2,r10
 50882a0:	4807883a 	mov	r3,r9
 50882a4:	4005883a 	mov	r2,r8
 50882a8:	dc801415 	stw	r18,80(sp)
 50882ac:	000d883a 	mov	r6,zero
 50882b0:	01d00934 	movhi	r7,16420
 50882b4:	1009883a 	mov	r4,r2
 50882b8:	180b883a 	mov	r5,r3
 50882bc:	5090b640 	call	5090b64 <__muldf3>
 50882c0:	180b883a 	mov	r5,r3
 50882c4:	1009883a 	mov	r4,r2
 50882c8:	1821883a 	mov	r16,r3
 50882cc:	1025883a 	mov	r18,r2
 50882d0:	5091b580 	call	5091b58 <__fixdfsi>
 50882d4:	1009883a 	mov	r4,r2
 50882d8:	1023883a 	mov	r17,r2
 50882dc:	5091be00 	call	5091be0 <__floatsidf>
 50882e0:	9009883a 	mov	r4,r18
 50882e4:	800b883a 	mov	r5,r16
 50882e8:	100d883a 	mov	r6,r2
 50882ec:	180f883a 	mov	r7,r3
 50882f0:	8c400c04 	addi	r17,r17,48
 50882f4:	50912880 	call	5091288 <__subdf3>
 50882f8:	ad400044 	addi	r21,r21,1
 50882fc:	ac7fffc5 	stb	r17,-1(r21)
 5088300:	ad3fea1e 	bne	r21,r20,50882ac <__alt_data_end+0xfffba0ac>
 5088304:	1813883a 	mov	r9,r3
 5088308:	d8c01017 	ldw	r3,64(sp)
 508830c:	dc001317 	ldw	r16,76(sp)
 5088310:	dc801417 	ldw	r18,80(sp)
 5088314:	1011883a 	mov	r8,r2
 5088318:	b8ef883a 	add	r23,r23,r3
 508831c:	d9000e17 	ldw	r4,56(sp)
 5088320:	d9401117 	ldw	r5,68(sp)
 5088324:	000d883a 	mov	r6,zero
 5088328:	01cff834 	movhi	r7,16352
 508832c:	da001715 	stw	r8,92(sp)
 5088330:	da401515 	stw	r9,84(sp)
 5088334:	508f7b80 	call	508f7b8 <__adddf3>
 5088338:	da001717 	ldw	r8,92(sp)
 508833c:	da401517 	ldw	r9,84(sp)
 5088340:	1009883a 	mov	r4,r2
 5088344:	400d883a 	mov	r6,r8
 5088348:	480f883a 	mov	r7,r9
 508834c:	180b883a 	mov	r5,r3
 5088350:	5090a840 	call	5090a84 <__ledf2>
 5088354:	da001717 	ldw	r8,92(sp)
 5088358:	da401517 	ldw	r9,84(sp)
 508835c:	10003b0e 	bge	r2,zero,508844c <_dtoa_r+0x15dc>
 5088360:	d9001217 	ldw	r4,72(sp)
 5088364:	bd7fffc3 	ldbu	r21,-1(r23)
 5088368:	d9000515 	stw	r4,20(sp)
 508836c:	003d1c06 	br	50877e0 <__alt_data_end+0xfffb95e0>
 5088370:	d8c00817 	ldw	r3,32(sp)
 5088374:	18a9c83a 	sub	r20,r3,r2
 5088378:	0005883a 	mov	r2,zero
 508837c:	003d3706 	br	508785c <__alt_data_end+0xfffb965c>
 5088380:	00800044 	movi	r2,1
 5088384:	003dd006 	br	5087ac8 <__alt_data_end+0xfffb98c8>
 5088388:	d8c00217 	ldw	r3,8(sp)
 508838c:	00800d84 	movi	r2,54
 5088390:	dd400917 	ldw	r21,36(sp)
 5088394:	10c5c83a 	sub	r2,r2,r3
 5088398:	dd000817 	ldw	r20,32(sp)
 508839c:	003d2f06 	br	508785c <__alt_data_end+0xfffb965c>
 50883a0:	9029883a 	mov	r20,r18
 50883a4:	982b883a 	mov	r21,r19
 50883a8:	04400084 	movi	r17,2
 50883ac:	003bc606 	br	50872c8 <__alt_data_end+0xfffb90c8>
 50883b0:	d8800617 	ldw	r2,24(sp)
 50883b4:	103efc26 	beq	r2,zero,5087fa8 <__alt_data_end+0xfffb9da8>
 50883b8:	d8c00d17 	ldw	r3,52(sp)
 50883bc:	00fc890e 	bge	zero,r3,50875e4 <__alt_data_end+0xfffb93e4>
 50883c0:	a80b883a 	mov	r5,r21
 50883c4:	a009883a 	mov	r4,r20
 50883c8:	000d883a 	mov	r6,zero
 50883cc:	01d00934 	movhi	r7,16420
 50883d0:	5090b640 	call	5090b64 <__muldf3>
 50883d4:	89000044 	addi	r4,r17,1
 50883d8:	1029883a 	mov	r20,r2
 50883dc:	182b883a 	mov	r21,r3
 50883e0:	5091be00 	call	5091be0 <__floatsidf>
 50883e4:	a009883a 	mov	r4,r20
 50883e8:	a80b883a 	mov	r5,r21
 50883ec:	100d883a 	mov	r6,r2
 50883f0:	180f883a 	mov	r7,r3
 50883f4:	5090b640 	call	5090b64 <__muldf3>
 50883f8:	1009883a 	mov	r4,r2
 50883fc:	180b883a 	mov	r5,r3
 5088400:	000d883a 	mov	r6,zero
 5088404:	01d00734 	movhi	r7,16412
 5088408:	508f7b80 	call	508f7b8 <__adddf3>
 508840c:	d9000517 	ldw	r4,20(sp)
 5088410:	1023883a 	mov	r17,r2
 5088414:	00bf3034 	movhi	r2,64704
 5088418:	213fffc4 	addi	r4,r4,-1
 508841c:	1885883a 	add	r2,r3,r2
 5088420:	d9001215 	stw	r4,72(sp)
 5088424:	d8800e15 	stw	r2,56(sp)
 5088428:	da800d17 	ldw	r10,52(sp)
 508842c:	003bc306 	br	508733c <__alt_data_end+0xfffb913c>
 5088430:	b039883a 	mov	fp,r22
 5088434:	01000e44 	movi	r4,57
 5088438:	8825883a 	mov	r18,r17
 508843c:	9dc00044 	addi	r23,r19,1
 5088440:	99000005 	stb	r4,0(r19)
 5088444:	a023883a 	mov	r17,r20
 5088448:	003dae06 	br	5087b04 <__alt_data_end+0xfffb9904>
 508844c:	d9800e17 	ldw	r6,56(sp)
 5088450:	d9c01117 	ldw	r7,68(sp)
 5088454:	0009883a 	mov	r4,zero
 5088458:	014ff834 	movhi	r5,16352
 508845c:	da001715 	stw	r8,92(sp)
 5088460:	da401515 	stw	r9,84(sp)
 5088464:	50912880 	call	5091288 <__subdf3>
 5088468:	da001717 	ldw	r8,92(sp)
 508846c:	da401517 	ldw	r9,84(sp)
 5088470:	1009883a 	mov	r4,r2
 5088474:	180b883a 	mov	r5,r3
 5088478:	400d883a 	mov	r6,r8
 508847c:	480f883a 	mov	r7,r9
 5088480:	50909a40 	call	50909a4 <__gedf2>
 5088484:	00bc570e 	bge	zero,r2,50875e4 <__alt_data_end+0xfffb93e4>
 5088488:	01000c04 	movi	r4,48
 508848c:	00000106 	br	5088494 <_dtoa_r+0x1624>
 5088490:	102f883a 	mov	r23,r2
 5088494:	b8bfffc4 	addi	r2,r23,-1
 5088498:	10c00007 	ldb	r3,0(r2)
 508849c:	193ffc26 	beq	r3,r4,5088490 <__alt_data_end+0xfffba290>
 50884a0:	d9801217 	ldw	r6,72(sp)
 50884a4:	d9800515 	stw	r6,20(sp)
 50884a8:	003c1f06 	br	5087528 <__alt_data_end+0xfffb9328>
 50884ac:	d8801217 	ldw	r2,72(sp)
 50884b0:	dc001117 	ldw	r16,68(sp)
 50884b4:	d8800515 	stw	r2,20(sp)
 50884b8:	003cc906 	br	50877e0 <__alt_data_end+0xfffb95e0>
 50884bc:	dd801317 	ldw	r22,76(sp)
 50884c0:	dc001117 	ldw	r16,68(sp)
 50884c4:	dcc01417 	ldw	r19,80(sp)
 50884c8:	dc801017 	ldw	r18,64(sp)
 50884cc:	003c4506 	br	50875e4 <__alt_data_end+0xfffb93e4>
 50884d0:	103e5d1e 	bne	r2,zero,5087e48 <__alt_data_end+0xfffb9c48>
 50884d4:	4080004c 	andi	r2,r8,1
 50884d8:	103e5b26 	beq	r2,zero,5087e48 <__alt_data_end+0xfffb9c48>
 50884dc:	003e5706 	br	5087e3c <__alt_data_end+0xfffb9c3c>
 50884e0:	d8c00317 	ldw	r3,12(sp)
 50884e4:	00800084 	movi	r2,2
 50884e8:	10c00a16 	blt	r2,r3,5088514 <_dtoa_r+0x16a4>
 50884ec:	d9000d17 	ldw	r4,52(sp)
 50884f0:	003e8306 	br	5087f00 <__alt_data_end+0xfffb9d00>
 50884f4:	04400084 	movi	r17,2
 50884f8:	003b7306 	br	50872c8 <__alt_data_end+0xfffb90c8>
 50884fc:	d9801217 	ldw	r6,72(sp)
 5088500:	d9800515 	stw	r6,20(sp)
 5088504:	003cb606 	br	50877e0 <__alt_data_end+0xfffb95e0>
 5088508:	d9001217 	ldw	r4,72(sp)
 508850c:	d9000515 	stw	r4,20(sp)
 5088510:	003c0506 	br	5087528 <__alt_data_end+0xfffb9328>
 5088514:	d9800d17 	ldw	r6,52(sp)
 5088518:	d9800615 	stw	r6,24(sp)
 508851c:	003e8306 	br	5087f2c <__alt_data_end+0xfffb9d2c>
 5088520:	d9800317 	ldw	r6,12(sp)
 5088524:	00800084 	movi	r2,2
 5088528:	11800216 	blt	r2,r6,5088534 <_dtoa_r+0x16c4>
 508852c:	d8800d17 	ldw	r2,52(sp)
 5088530:	003da606 	br	5087bcc <__alt_data_end+0xfffb99cc>
 5088534:	d8800d17 	ldw	r2,52(sp)
 5088538:	d8800615 	stw	r2,24(sp)
 508853c:	003e7b06 	br	5087f2c <__alt_data_end+0xfffb9d2c>
 5088540:	05000044 	movi	r20,1
 5088544:	003b0506 	br	508715c <__alt_data_end+0xfffb8f5c>
 5088548:	8009883a 	mov	r4,r16
 508854c:	80001115 	stw	zero,68(r16)
 5088550:	000b883a 	mov	r5,zero
 5088554:	508a4980 	call	508a498 <_Balloc>
 5088558:	d8800715 	stw	r2,28(sp)
 508855c:	d8c00717 	ldw	r3,28(sp)
 5088560:	00bfffc4 	movi	r2,-1
 5088564:	01000044 	movi	r4,1
 5088568:	d8800615 	stw	r2,24(sp)
 508856c:	80c01015 	stw	r3,64(r16)
 5088570:	d9000b15 	stw	r4,44(sp)
 5088574:	d8002215 	stw	zero,136(sp)
 5088578:	d8800d15 	stw	r2,52(sp)
 508857c:	003c1906 	br	50875e4 <__alt_data_end+0xfffb93e4>
 5088580:	193d2926 	beq	r3,r4,5087a28 <__alt_data_end+0xfffb9828>
 5088584:	00c00f04 	movi	r3,60
 5088588:	1885c83a 	sub	r2,r3,r2
 508858c:	003d7b06 	br	5087b7c <__alt_data_end+0xfffb997c>
 5088590:	000b883a 	mov	r5,zero
 5088594:	003b1006 	br	50871d8 <__alt_data_end+0xfffb8fd8>

05088598 <_fflush_r>:
 5088598:	defffb04 	addi	sp,sp,-20
 508859c:	dcc00315 	stw	r19,12(sp)
 50885a0:	dc000015 	stw	r16,0(sp)
 50885a4:	dfc00415 	stw	ra,16(sp)
 50885a8:	dc800215 	stw	r18,8(sp)
 50885ac:	dc400115 	stw	r17,4(sp)
 50885b0:	2027883a 	mov	r19,r4
 50885b4:	2821883a 	mov	r16,r5
 50885b8:	20000226 	beq	r4,zero,50885c4 <_fflush_r+0x2c>
 50885bc:	20800e17 	ldw	r2,56(r4)
 50885c0:	10005326 	beq	r2,zero,5088710 <_fflush_r+0x178>
 50885c4:	8080030b 	ldhu	r2,12(r16)
 50885c8:	10ffffcc 	andi	r3,r2,65535
 50885cc:	18e0001c 	xori	r3,r3,32768
 50885d0:	18e00004 	addi	r3,r3,-32768
 50885d4:	18002c26 	beq	r3,zero,5088688 <_fflush_r+0xf0>
 50885d8:	10c0020c 	andi	r3,r2,8
 50885dc:	1800321e 	bne	r3,zero,50886a8 <_fflush_r+0x110>
 50885e0:	80c00117 	ldw	r3,4(r16)
 50885e4:	10820014 	ori	r2,r2,2048
 50885e8:	8080030d 	sth	r2,12(r16)
 50885ec:	00c0570e 	bge	zero,r3,508874c <_fflush_r+0x1b4>
 50885f0:	82000a17 	ldw	r8,40(r16)
 50885f4:	40002426 	beq	r8,zero,5088688 <_fflush_r+0xf0>
 50885f8:	9c400017 	ldw	r17,0(r19)
 50885fc:	10c4000c 	andi	r3,r2,4096
 5088600:	98000015 	stw	zero,0(r19)
 5088604:	18004626 	beq	r3,zero,5088720 <_fflush_r+0x188>
 5088608:	81801417 	ldw	r6,80(r16)
 508860c:	10c0010c 	andi	r3,r2,4
 5088610:	18000626 	beq	r3,zero,508862c <_fflush_r+0x94>
 5088614:	80c00117 	ldw	r3,4(r16)
 5088618:	80800c17 	ldw	r2,48(r16)
 508861c:	30cdc83a 	sub	r6,r6,r3
 5088620:	10000226 	beq	r2,zero,508862c <_fflush_r+0x94>
 5088624:	80800f17 	ldw	r2,60(r16)
 5088628:	308dc83a 	sub	r6,r6,r2
 508862c:	81400717 	ldw	r5,28(r16)
 5088630:	9809883a 	mov	r4,r19
 5088634:	000f883a 	mov	r7,zero
 5088638:	403ee83a 	callr	r8
 508863c:	00ffffc4 	movi	r3,-1
 5088640:	10c04526 	beq	r2,r3,5088758 <_fflush_r+0x1c0>
 5088644:	80c0030b 	ldhu	r3,12(r16)
 5088648:	81000417 	ldw	r4,16(r16)
 508864c:	80000115 	stw	zero,4(r16)
 5088650:	197dffcc 	andi	r5,r3,63487
 5088654:	8140030d 	sth	r5,12(r16)
 5088658:	81000015 	stw	r4,0(r16)
 508865c:	18c4000c 	andi	r3,r3,4096
 5088660:	18000126 	beq	r3,zero,5088668 <_fflush_r+0xd0>
 5088664:	80801415 	stw	r2,80(r16)
 5088668:	81400c17 	ldw	r5,48(r16)
 508866c:	9c400015 	stw	r17,0(r19)
 5088670:	28000526 	beq	r5,zero,5088688 <_fflush_r+0xf0>
 5088674:	80801004 	addi	r2,r16,64
 5088678:	28800226 	beq	r5,r2,5088684 <_fflush_r+0xec>
 508867c:	9809883a 	mov	r4,r19
 5088680:	5088cb40 	call	5088cb4 <_free_r>
 5088684:	80000c15 	stw	zero,48(r16)
 5088688:	0005883a 	mov	r2,zero
 508868c:	dfc00417 	ldw	ra,16(sp)
 5088690:	dcc00317 	ldw	r19,12(sp)
 5088694:	dc800217 	ldw	r18,8(sp)
 5088698:	dc400117 	ldw	r17,4(sp)
 508869c:	dc000017 	ldw	r16,0(sp)
 50886a0:	dec00504 	addi	sp,sp,20
 50886a4:	f800283a 	ret
 50886a8:	84800417 	ldw	r18,16(r16)
 50886ac:	903ff626 	beq	r18,zero,5088688 <__alt_data_end+0xfffba488>
 50886b0:	84400017 	ldw	r17,0(r16)
 50886b4:	108000cc 	andi	r2,r2,3
 50886b8:	84800015 	stw	r18,0(r16)
 50886bc:	8ca3c83a 	sub	r17,r17,r18
 50886c0:	10001526 	beq	r2,zero,5088718 <_fflush_r+0x180>
 50886c4:	0005883a 	mov	r2,zero
 50886c8:	80800215 	stw	r2,8(r16)
 50886cc:	04400316 	blt	zero,r17,50886dc <_fflush_r+0x144>
 50886d0:	003fed06 	br	5088688 <__alt_data_end+0xfffba488>
 50886d4:	90a5883a 	add	r18,r18,r2
 50886d8:	047feb0e 	bge	zero,r17,5088688 <__alt_data_end+0xfffba488>
 50886dc:	80800917 	ldw	r2,36(r16)
 50886e0:	81400717 	ldw	r5,28(r16)
 50886e4:	880f883a 	mov	r7,r17
 50886e8:	900d883a 	mov	r6,r18
 50886ec:	9809883a 	mov	r4,r19
 50886f0:	103ee83a 	callr	r2
 50886f4:	88a3c83a 	sub	r17,r17,r2
 50886f8:	00bff616 	blt	zero,r2,50886d4 <__alt_data_end+0xfffba4d4>
 50886fc:	80c0030b 	ldhu	r3,12(r16)
 5088700:	00bfffc4 	movi	r2,-1
 5088704:	18c01014 	ori	r3,r3,64
 5088708:	80c0030d 	sth	r3,12(r16)
 508870c:	003fdf06 	br	508868c <__alt_data_end+0xfffba48c>
 5088710:	5088b400 	call	5088b40 <__sinit>
 5088714:	003fab06 	br	50885c4 <__alt_data_end+0xfffba3c4>
 5088718:	80800517 	ldw	r2,20(r16)
 508871c:	003fea06 	br	50886c8 <__alt_data_end+0xfffba4c8>
 5088720:	81400717 	ldw	r5,28(r16)
 5088724:	000d883a 	mov	r6,zero
 5088728:	9809883a 	mov	r4,r19
 508872c:	01c00044 	movi	r7,1
 5088730:	403ee83a 	callr	r8
 5088734:	100d883a 	mov	r6,r2
 5088738:	00bfffc4 	movi	r2,-1
 508873c:	30801326 	beq	r6,r2,508878c <_fflush_r+0x1f4>
 5088740:	8080030b 	ldhu	r2,12(r16)
 5088744:	82000a17 	ldw	r8,40(r16)
 5088748:	003fb006 	br	508860c <__alt_data_end+0xfffba40c>
 508874c:	80c00f17 	ldw	r3,60(r16)
 5088750:	00ffa716 	blt	zero,r3,50885f0 <__alt_data_end+0xfffba3f0>
 5088754:	003fcc06 	br	5088688 <__alt_data_end+0xfffba488>
 5088758:	98c00017 	ldw	r3,0(r19)
 508875c:	183fb926 	beq	r3,zero,5088644 <__alt_data_end+0xfffba444>
 5088760:	01000744 	movi	r4,29
 5088764:	19000226 	beq	r3,r4,5088770 <_fflush_r+0x1d8>
 5088768:	01000584 	movi	r4,22
 508876c:	1900101e 	bne	r3,r4,50887b0 <_fflush_r+0x218>
 5088770:	8080030b 	ldhu	r2,12(r16)
 5088774:	80c00417 	ldw	r3,16(r16)
 5088778:	80000115 	stw	zero,4(r16)
 508877c:	10bdffcc 	andi	r2,r2,63487
 5088780:	8080030d 	sth	r2,12(r16)
 5088784:	80c00015 	stw	r3,0(r16)
 5088788:	003fb706 	br	5088668 <__alt_data_end+0xfffba468>
 508878c:	98800017 	ldw	r2,0(r19)
 5088790:	103feb26 	beq	r2,zero,5088740 <__alt_data_end+0xfffba540>
 5088794:	00c00744 	movi	r3,29
 5088798:	10c00226 	beq	r2,r3,50887a4 <_fflush_r+0x20c>
 508879c:	00c00584 	movi	r3,22
 50887a0:	10ffd61e 	bne	r2,r3,50886fc <__alt_data_end+0xfffba4fc>
 50887a4:	9c400015 	stw	r17,0(r19)
 50887a8:	0005883a 	mov	r2,zero
 50887ac:	003fb706 	br	508868c <__alt_data_end+0xfffba48c>
 50887b0:	80c0030b 	ldhu	r3,12(r16)
 50887b4:	18c01014 	ori	r3,r3,64
 50887b8:	80c0030d 	sth	r3,12(r16)
 50887bc:	003fb306 	br	508868c <__alt_data_end+0xfffba48c>

050887c0 <fflush>:
 50887c0:	20000526 	beq	r4,zero,50887d8 <fflush+0x18>
 50887c4:	00814274 	movhi	r2,1289
 50887c8:	109c5604 	addi	r2,r2,29016
 50887cc:	200b883a 	mov	r5,r4
 50887d0:	11000017 	ldw	r4,0(r2)
 50887d4:	50885981 	jmpi	5088598 <_fflush_r>
 50887d8:	00814274 	movhi	r2,1289
 50887dc:	109c5504 	addi	r2,r2,29012
 50887e0:	11000017 	ldw	r4,0(r2)
 50887e4:	01414274 	movhi	r5,1289
 50887e8:	29616604 	addi	r5,r5,-31336
 50887ec:	50895001 	jmpi	5089500 <_fwalk_reent>

050887f0 <__fp_lock>:
 50887f0:	0005883a 	mov	r2,zero
 50887f4:	f800283a 	ret

050887f8 <__fp_unlock>:
 50887f8:	0005883a 	mov	r2,zero
 50887fc:	f800283a 	ret

05088800 <_cleanup_r>:
 5088800:	01414274 	movhi	r5,1289
 5088804:	29796904 	addi	r5,r5,-6748
 5088808:	50894481 	jmpi	5089448 <_fwalk>

0508880c <__sinit.part.1>:
 508880c:	defff604 	addi	sp,sp,-40
 5088810:	00c14274 	movhi	r3,1289
 5088814:	dfc00915 	stw	ra,36(sp)
 5088818:	df000815 	stw	fp,32(sp)
 508881c:	ddc00715 	stw	r23,28(sp)
 5088820:	dd800615 	stw	r22,24(sp)
 5088824:	dd400515 	stw	r21,20(sp)
 5088828:	dd000415 	stw	r20,16(sp)
 508882c:	dcc00315 	stw	r19,12(sp)
 5088830:	dc800215 	stw	r18,8(sp)
 5088834:	dc400115 	stw	r17,4(sp)
 5088838:	dc000015 	stw	r16,0(sp)
 508883c:	18e20004 	addi	r3,r3,-30720
 5088840:	24000117 	ldw	r16,4(r4)
 5088844:	20c00f15 	stw	r3,60(r4)
 5088848:	07000044 	movi	fp,1
 508884c:	00c000c4 	movi	r3,3
 5088850:	2080bb04 	addi	r2,r4,748
 5088854:	20c0b915 	stw	r3,740(r4)
 5088858:	27000e15 	stw	fp,56(r4)
 508885c:	2080ba15 	stw	r2,744(r4)
 5088860:	2000b815 	stw	zero,736(r4)
 5088864:	05c00204 	movi	r23,8
 5088868:	00800104 	movi	r2,4
 508886c:	2025883a 	mov	r18,r4
 5088870:	b80d883a 	mov	r6,r23
 5088874:	81001704 	addi	r4,r16,92
 5088878:	000b883a 	mov	r5,zero
 508887c:	80000015 	stw	zero,0(r16)
 5088880:	80000115 	stw	zero,4(r16)
 5088884:	80000215 	stw	zero,8(r16)
 5088888:	8080030d 	sth	r2,12(r16)
 508888c:	80001915 	stw	zero,100(r16)
 5088890:	8000038d 	sth	zero,14(r16)
 5088894:	80000415 	stw	zero,16(r16)
 5088898:	80000515 	stw	zero,20(r16)
 508889c:	80000615 	stw	zero,24(r16)
 50888a0:	508a3740 	call	508a374 <memset>
 50888a4:	05814274 	movhi	r22,1289
 50888a8:	94400217 	ldw	r17,8(r18)
 50888ac:	05414274 	movhi	r21,1289
 50888b0:	05014274 	movhi	r20,1289
 50888b4:	04c14274 	movhi	r19,1289
 50888b8:	b5aea304 	addi	r22,r22,-17780
 50888bc:	ad6eba04 	addi	r21,r21,-17688
 50888c0:	a52ed904 	addi	r20,r20,-17564
 50888c4:	9ceef004 	addi	r19,r19,-17472
 50888c8:	85800815 	stw	r22,32(r16)
 50888cc:	85400915 	stw	r21,36(r16)
 50888d0:	85000a15 	stw	r20,40(r16)
 50888d4:	84c00b15 	stw	r19,44(r16)
 50888d8:	84000715 	stw	r16,28(r16)
 50888dc:	00800284 	movi	r2,10
 50888e0:	89001704 	addi	r4,r17,92
 50888e4:	b80d883a 	mov	r6,r23
 50888e8:	000b883a 	mov	r5,zero
 50888ec:	88000015 	stw	zero,0(r17)
 50888f0:	88000115 	stw	zero,4(r17)
 50888f4:	88000215 	stw	zero,8(r17)
 50888f8:	8880030d 	sth	r2,12(r17)
 50888fc:	88001915 	stw	zero,100(r17)
 5088900:	8f00038d 	sth	fp,14(r17)
 5088904:	88000415 	stw	zero,16(r17)
 5088908:	88000515 	stw	zero,20(r17)
 508890c:	88000615 	stw	zero,24(r17)
 5088910:	508a3740 	call	508a374 <memset>
 5088914:	94000317 	ldw	r16,12(r18)
 5088918:	00800484 	movi	r2,18
 508891c:	8c400715 	stw	r17,28(r17)
 5088920:	8d800815 	stw	r22,32(r17)
 5088924:	8d400915 	stw	r21,36(r17)
 5088928:	8d000a15 	stw	r20,40(r17)
 508892c:	8cc00b15 	stw	r19,44(r17)
 5088930:	8080030d 	sth	r2,12(r16)
 5088934:	00800084 	movi	r2,2
 5088938:	80000015 	stw	zero,0(r16)
 508893c:	80000115 	stw	zero,4(r16)
 5088940:	80000215 	stw	zero,8(r16)
 5088944:	80001915 	stw	zero,100(r16)
 5088948:	8080038d 	sth	r2,14(r16)
 508894c:	80000415 	stw	zero,16(r16)
 5088950:	80000515 	stw	zero,20(r16)
 5088954:	80000615 	stw	zero,24(r16)
 5088958:	81001704 	addi	r4,r16,92
 508895c:	000b883a 	mov	r5,zero
 5088960:	b80d883a 	mov	r6,r23
 5088964:	508a3740 	call	508a374 <memset>
 5088968:	84000715 	stw	r16,28(r16)
 508896c:	85800815 	stw	r22,32(r16)
 5088970:	85400915 	stw	r21,36(r16)
 5088974:	85000a15 	stw	r20,40(r16)
 5088978:	84c00b15 	stw	r19,44(r16)
 508897c:	dfc00917 	ldw	ra,36(sp)
 5088980:	df000817 	ldw	fp,32(sp)
 5088984:	ddc00717 	ldw	r23,28(sp)
 5088988:	dd800617 	ldw	r22,24(sp)
 508898c:	dd400517 	ldw	r21,20(sp)
 5088990:	dd000417 	ldw	r20,16(sp)
 5088994:	dcc00317 	ldw	r19,12(sp)
 5088998:	dc800217 	ldw	r18,8(sp)
 508899c:	dc400117 	ldw	r17,4(sp)
 50889a0:	dc000017 	ldw	r16,0(sp)
 50889a4:	dec00a04 	addi	sp,sp,40
 50889a8:	f800283a 	ret

050889ac <__sfmoreglue>:
 50889ac:	defffc04 	addi	sp,sp,-16
 50889b0:	dc400115 	stw	r17,4(sp)
 50889b4:	2c401a24 	muli	r17,r5,104
 50889b8:	dc800215 	stw	r18,8(sp)
 50889bc:	2825883a 	mov	r18,r5
 50889c0:	89400304 	addi	r5,r17,12
 50889c4:	dc000015 	stw	r16,0(sp)
 50889c8:	dfc00315 	stw	ra,12(sp)
 50889cc:	50898500 	call	5089850 <_malloc_r>
 50889d0:	1021883a 	mov	r16,r2
 50889d4:	10000726 	beq	r2,zero,50889f4 <__sfmoreglue+0x48>
 50889d8:	11000304 	addi	r4,r2,12
 50889dc:	10000015 	stw	zero,0(r2)
 50889e0:	14800115 	stw	r18,4(r2)
 50889e4:	11000215 	stw	r4,8(r2)
 50889e8:	000b883a 	mov	r5,zero
 50889ec:	880d883a 	mov	r6,r17
 50889f0:	508a3740 	call	508a374 <memset>
 50889f4:	8005883a 	mov	r2,r16
 50889f8:	dfc00317 	ldw	ra,12(sp)
 50889fc:	dc800217 	ldw	r18,8(sp)
 5088a00:	dc400117 	ldw	r17,4(sp)
 5088a04:	dc000017 	ldw	r16,0(sp)
 5088a08:	dec00404 	addi	sp,sp,16
 5088a0c:	f800283a 	ret

05088a10 <__sfp>:
 5088a10:	00814274 	movhi	r2,1289
 5088a14:	defffb04 	addi	sp,sp,-20
 5088a18:	109c5504 	addi	r2,r2,29012
 5088a1c:	dc800215 	stw	r18,8(sp)
 5088a20:	14800017 	ldw	r18,0(r2)
 5088a24:	dcc00315 	stw	r19,12(sp)
 5088a28:	dfc00415 	stw	ra,16(sp)
 5088a2c:	90800e17 	ldw	r2,56(r18)
 5088a30:	dc400115 	stw	r17,4(sp)
 5088a34:	dc000015 	stw	r16,0(sp)
 5088a38:	2027883a 	mov	r19,r4
 5088a3c:	1000021e 	bne	r2,zero,5088a48 <__sfp+0x38>
 5088a40:	9009883a 	mov	r4,r18
 5088a44:	508880c0 	call	508880c <__sinit.part.1>
 5088a48:	9480b804 	addi	r18,r18,736
 5088a4c:	047fffc4 	movi	r17,-1
 5088a50:	91400117 	ldw	r5,4(r18)
 5088a54:	94000217 	ldw	r16,8(r18)
 5088a58:	297fffc4 	addi	r5,r5,-1
 5088a5c:	28000a16 	blt	r5,zero,5088a88 <__sfp+0x78>
 5088a60:	8080030f 	ldh	r2,12(r16)
 5088a64:	10000c26 	beq	r2,zero,5088a98 <__sfp+0x88>
 5088a68:	80c01d04 	addi	r3,r16,116
 5088a6c:	00000206 	br	5088a78 <__sfp+0x68>
 5088a70:	18bfe60f 	ldh	r2,-104(r3)
 5088a74:	10000826 	beq	r2,zero,5088a98 <__sfp+0x88>
 5088a78:	297fffc4 	addi	r5,r5,-1
 5088a7c:	1c3ffd04 	addi	r16,r3,-12
 5088a80:	18c01a04 	addi	r3,r3,104
 5088a84:	2c7ffa1e 	bne	r5,r17,5088a70 <__alt_data_end+0xfffba870>
 5088a88:	90800017 	ldw	r2,0(r18)
 5088a8c:	10001d26 	beq	r2,zero,5088b04 <__sfp+0xf4>
 5088a90:	1025883a 	mov	r18,r2
 5088a94:	003fee06 	br	5088a50 <__alt_data_end+0xfffba850>
 5088a98:	00bfffc4 	movi	r2,-1
 5088a9c:	8080038d 	sth	r2,14(r16)
 5088aa0:	00800044 	movi	r2,1
 5088aa4:	8080030d 	sth	r2,12(r16)
 5088aa8:	80001915 	stw	zero,100(r16)
 5088aac:	80000015 	stw	zero,0(r16)
 5088ab0:	80000215 	stw	zero,8(r16)
 5088ab4:	80000115 	stw	zero,4(r16)
 5088ab8:	80000415 	stw	zero,16(r16)
 5088abc:	80000515 	stw	zero,20(r16)
 5088ac0:	80000615 	stw	zero,24(r16)
 5088ac4:	81001704 	addi	r4,r16,92
 5088ac8:	000b883a 	mov	r5,zero
 5088acc:	01800204 	movi	r6,8
 5088ad0:	508a3740 	call	508a374 <memset>
 5088ad4:	8005883a 	mov	r2,r16
 5088ad8:	80000c15 	stw	zero,48(r16)
 5088adc:	80000d15 	stw	zero,52(r16)
 5088ae0:	80001115 	stw	zero,68(r16)
 5088ae4:	80001215 	stw	zero,72(r16)
 5088ae8:	dfc00417 	ldw	ra,16(sp)
 5088aec:	dcc00317 	ldw	r19,12(sp)
 5088af0:	dc800217 	ldw	r18,8(sp)
 5088af4:	dc400117 	ldw	r17,4(sp)
 5088af8:	dc000017 	ldw	r16,0(sp)
 5088afc:	dec00504 	addi	sp,sp,20
 5088b00:	f800283a 	ret
 5088b04:	9809883a 	mov	r4,r19
 5088b08:	01400104 	movi	r5,4
 5088b0c:	50889ac0 	call	50889ac <__sfmoreglue>
 5088b10:	90800015 	stw	r2,0(r18)
 5088b14:	103fde1e 	bne	r2,zero,5088a90 <__alt_data_end+0xfffba890>
 5088b18:	00800304 	movi	r2,12
 5088b1c:	98800015 	stw	r2,0(r19)
 5088b20:	0005883a 	mov	r2,zero
 5088b24:	003ff006 	br	5088ae8 <__alt_data_end+0xfffba8e8>

05088b28 <_cleanup>:
 5088b28:	00814274 	movhi	r2,1289
 5088b2c:	109c5504 	addi	r2,r2,29012
 5088b30:	11000017 	ldw	r4,0(r2)
 5088b34:	01414274 	movhi	r5,1289
 5088b38:	29796904 	addi	r5,r5,-6748
 5088b3c:	50894481 	jmpi	5089448 <_fwalk>

05088b40 <__sinit>:
 5088b40:	20800e17 	ldw	r2,56(r4)
 5088b44:	10000126 	beq	r2,zero,5088b4c <__sinit+0xc>
 5088b48:	f800283a 	ret
 5088b4c:	508880c1 	jmpi	508880c <__sinit.part.1>

05088b50 <__sfp_lock_acquire>:
 5088b50:	f800283a 	ret

05088b54 <__sfp_lock_release>:
 5088b54:	f800283a 	ret

05088b58 <__sinit_lock_acquire>:
 5088b58:	f800283a 	ret

05088b5c <__sinit_lock_release>:
 5088b5c:	f800283a 	ret

05088b60 <__fp_lock_all>:
 5088b60:	00814274 	movhi	r2,1289
 5088b64:	109c5604 	addi	r2,r2,29016
 5088b68:	11000017 	ldw	r4,0(r2)
 5088b6c:	01414274 	movhi	r5,1289
 5088b70:	2961fc04 	addi	r5,r5,-30736
 5088b74:	50894481 	jmpi	5089448 <_fwalk>

05088b78 <__fp_unlock_all>:
 5088b78:	00814274 	movhi	r2,1289
 5088b7c:	109c5604 	addi	r2,r2,29016
 5088b80:	11000017 	ldw	r4,0(r2)
 5088b84:	01414274 	movhi	r5,1289
 5088b88:	2961fe04 	addi	r5,r5,-30728
 5088b8c:	50894481 	jmpi	5089448 <_fwalk>

05088b90 <_malloc_trim_r>:
 5088b90:	defffb04 	addi	sp,sp,-20
 5088b94:	dcc00315 	stw	r19,12(sp)
 5088b98:	04c14274 	movhi	r19,1289
 5088b9c:	dc800215 	stw	r18,8(sp)
 5088ba0:	dc400115 	stw	r17,4(sp)
 5088ba4:	dc000015 	stw	r16,0(sp)
 5088ba8:	dfc00415 	stw	ra,16(sp)
 5088bac:	2821883a 	mov	r16,r5
 5088bb0:	9cd6d104 	addi	r19,r19,23364
 5088bb4:	2025883a 	mov	r18,r4
 5088bb8:	50925280 	call	5092528 <__malloc_lock>
 5088bbc:	98800217 	ldw	r2,8(r19)
 5088bc0:	14400117 	ldw	r17,4(r2)
 5088bc4:	00bfff04 	movi	r2,-4
 5088bc8:	88a2703a 	and	r17,r17,r2
 5088bcc:	8c21c83a 	sub	r16,r17,r16
 5088bd0:	8403fbc4 	addi	r16,r16,4079
 5088bd4:	8020d33a 	srli	r16,r16,12
 5088bd8:	0083ffc4 	movi	r2,4095
 5088bdc:	843fffc4 	addi	r16,r16,-1
 5088be0:	8020933a 	slli	r16,r16,12
 5088be4:	1400060e 	bge	r2,r16,5088c00 <_malloc_trim_r+0x70>
 5088be8:	9009883a 	mov	r4,r18
 5088bec:	000b883a 	mov	r5,zero
 5088bf0:	508ba380 	call	508ba38 <_sbrk_r>
 5088bf4:	98c00217 	ldw	r3,8(r19)
 5088bf8:	1c47883a 	add	r3,r3,r17
 5088bfc:	10c00a26 	beq	r2,r3,5088c28 <_malloc_trim_r+0x98>
 5088c00:	9009883a 	mov	r4,r18
 5088c04:	50925480 	call	5092548 <__malloc_unlock>
 5088c08:	0005883a 	mov	r2,zero
 5088c0c:	dfc00417 	ldw	ra,16(sp)
 5088c10:	dcc00317 	ldw	r19,12(sp)
 5088c14:	dc800217 	ldw	r18,8(sp)
 5088c18:	dc400117 	ldw	r17,4(sp)
 5088c1c:	dc000017 	ldw	r16,0(sp)
 5088c20:	dec00504 	addi	sp,sp,20
 5088c24:	f800283a 	ret
 5088c28:	9009883a 	mov	r4,r18
 5088c2c:	040bc83a 	sub	r5,zero,r16
 5088c30:	508ba380 	call	508ba38 <_sbrk_r>
 5088c34:	00ffffc4 	movi	r3,-1
 5088c38:	10c00d26 	beq	r2,r3,5088c70 <_malloc_trim_r+0xe0>
 5088c3c:	00c142b4 	movhi	r3,1290
 5088c40:	18e33e04 	addi	r3,r3,-29448
 5088c44:	18800017 	ldw	r2,0(r3)
 5088c48:	99000217 	ldw	r4,8(r19)
 5088c4c:	8c23c83a 	sub	r17,r17,r16
 5088c50:	8c400054 	ori	r17,r17,1
 5088c54:	1421c83a 	sub	r16,r2,r16
 5088c58:	24400115 	stw	r17,4(r4)
 5088c5c:	9009883a 	mov	r4,r18
 5088c60:	1c000015 	stw	r16,0(r3)
 5088c64:	50925480 	call	5092548 <__malloc_unlock>
 5088c68:	00800044 	movi	r2,1
 5088c6c:	003fe706 	br	5088c0c <__alt_data_end+0xfffbaa0c>
 5088c70:	9009883a 	mov	r4,r18
 5088c74:	000b883a 	mov	r5,zero
 5088c78:	508ba380 	call	508ba38 <_sbrk_r>
 5088c7c:	99000217 	ldw	r4,8(r19)
 5088c80:	014003c4 	movi	r5,15
 5088c84:	1107c83a 	sub	r3,r2,r4
 5088c88:	28ffdd0e 	bge	r5,r3,5088c00 <__alt_data_end+0xfffbaa00>
 5088c8c:	01414274 	movhi	r5,1289
 5088c90:	295c5804 	addi	r5,r5,29024
 5088c94:	29400017 	ldw	r5,0(r5)
 5088c98:	18c00054 	ori	r3,r3,1
 5088c9c:	20c00115 	stw	r3,4(r4)
 5088ca0:	00c142b4 	movhi	r3,1290
 5088ca4:	1145c83a 	sub	r2,r2,r5
 5088ca8:	18e33e04 	addi	r3,r3,-29448
 5088cac:	18800015 	stw	r2,0(r3)
 5088cb0:	003fd306 	br	5088c00 <__alt_data_end+0xfffbaa00>

05088cb4 <_free_r>:
 5088cb4:	28004c26 	beq	r5,zero,5088de8 <_free_r+0x134>
 5088cb8:	defffd04 	addi	sp,sp,-12
 5088cbc:	dc400115 	stw	r17,4(sp)
 5088cc0:	dc000015 	stw	r16,0(sp)
 5088cc4:	2023883a 	mov	r17,r4
 5088cc8:	2821883a 	mov	r16,r5
 5088ccc:	dfc00215 	stw	ra,8(sp)
 5088cd0:	50925280 	call	5092528 <__malloc_lock>
 5088cd4:	813fff17 	ldw	r4,-4(r16)
 5088cd8:	00bfff84 	movi	r2,-2
 5088cdc:	02414274 	movhi	r9,1289
 5088ce0:	81bffe04 	addi	r6,r16,-8
 5088ce4:	2084703a 	and	r2,r4,r2
 5088ce8:	4a56d104 	addi	r9,r9,23364
 5088cec:	308b883a 	add	r5,r6,r2
 5088cf0:	2a000117 	ldw	r8,4(r5)
 5088cf4:	49c00217 	ldw	r7,8(r9)
 5088cf8:	00ffff04 	movi	r3,-4
 5088cfc:	40c6703a 	and	r3,r8,r3
 5088d00:	39405326 	beq	r7,r5,5088e50 <_free_r+0x19c>
 5088d04:	28c00115 	stw	r3,4(r5)
 5088d08:	2100004c 	andi	r4,r4,1
 5088d0c:	2000091e 	bne	r4,zero,5088d34 <_free_r+0x80>
 5088d10:	81fffe17 	ldw	r7,-8(r16)
 5088d14:	4a000204 	addi	r8,r9,8
 5088d18:	31cdc83a 	sub	r6,r6,r7
 5088d1c:	31000217 	ldw	r4,8(r6)
 5088d20:	11c5883a 	add	r2,r2,r7
 5088d24:	22006126 	beq	r4,r8,5088eac <_free_r+0x1f8>
 5088d28:	31c00317 	ldw	r7,12(r6)
 5088d2c:	21c00315 	stw	r7,12(r4)
 5088d30:	39000215 	stw	r4,8(r7)
 5088d34:	28c9883a 	add	r4,r5,r3
 5088d38:	21c00117 	ldw	r7,4(r4)
 5088d3c:	39c0004c 	andi	r7,r7,1
 5088d40:	38000d1e 	bne	r7,zero,5088d78 <_free_r+0xc4>
 5088d44:	29000217 	ldw	r4,8(r5)
 5088d48:	10c5883a 	add	r2,r2,r3
 5088d4c:	00c14274 	movhi	r3,1289
 5088d50:	18d6d304 	addi	r3,r3,23372
 5088d54:	20c07526 	beq	r4,r3,5088f2c <_free_r+0x278>
 5088d58:	29c00317 	ldw	r7,12(r5)
 5088d5c:	11400054 	ori	r5,r2,1
 5088d60:	3087883a 	add	r3,r6,r2
 5088d64:	21c00315 	stw	r7,12(r4)
 5088d68:	39000215 	stw	r4,8(r7)
 5088d6c:	31400115 	stw	r5,4(r6)
 5088d70:	18800015 	stw	r2,0(r3)
 5088d74:	00000406 	br	5088d88 <_free_r+0xd4>
 5088d78:	10c00054 	ori	r3,r2,1
 5088d7c:	30c00115 	stw	r3,4(r6)
 5088d80:	3087883a 	add	r3,r6,r2
 5088d84:	18800015 	stw	r2,0(r3)
 5088d88:	00c07fc4 	movi	r3,511
 5088d8c:	18801736 	bltu	r3,r2,5088dec <_free_r+0x138>
 5088d90:	1004d0fa 	srli	r2,r2,3
 5088d94:	01400044 	movi	r5,1
 5088d98:	49000117 	ldw	r4,4(r9)
 5088d9c:	1087883a 	add	r3,r2,r2
 5088da0:	18c7883a 	add	r3,r3,r3
 5088da4:	1005d0ba 	srai	r2,r2,2
 5088da8:	18c7883a 	add	r3,r3,r3
 5088dac:	1a47883a 	add	r3,r3,r9
 5088db0:	19c00217 	ldw	r7,8(r3)
 5088db4:	2884983a 	sll	r2,r5,r2
 5088db8:	30c00315 	stw	r3,12(r6)
 5088dbc:	31c00215 	stw	r7,8(r6)
 5088dc0:	1104b03a 	or	r2,r2,r4
 5088dc4:	19800215 	stw	r6,8(r3)
 5088dc8:	48800115 	stw	r2,4(r9)
 5088dcc:	39800315 	stw	r6,12(r7)
 5088dd0:	8809883a 	mov	r4,r17
 5088dd4:	dfc00217 	ldw	ra,8(sp)
 5088dd8:	dc400117 	ldw	r17,4(sp)
 5088ddc:	dc000017 	ldw	r16,0(sp)
 5088de0:	dec00304 	addi	sp,sp,12
 5088de4:	50925481 	jmpi	5092548 <__malloc_unlock>
 5088de8:	f800283a 	ret
 5088dec:	1006d27a 	srli	r3,r2,9
 5088df0:	01000104 	movi	r4,4
 5088df4:	20c04036 	bltu	r4,r3,5088ef8 <_free_r+0x244>
 5088df8:	1006d1ba 	srli	r3,r2,6
 5088dfc:	19400e04 	addi	r5,r3,56
 5088e00:	2947883a 	add	r3,r5,r5
 5088e04:	18c7883a 	add	r3,r3,r3
 5088e08:	18c7883a 	add	r3,r3,r3
 5088e0c:	1a49883a 	add	r4,r3,r9
 5088e10:	20c00217 	ldw	r3,8(r4)
 5088e14:	01c14274 	movhi	r7,1289
 5088e18:	39d6d104 	addi	r7,r7,23364
 5088e1c:	19003b26 	beq	r3,r4,5088f0c <_free_r+0x258>
 5088e20:	01ffff04 	movi	r7,-4
 5088e24:	19400117 	ldw	r5,4(r3)
 5088e28:	29ca703a 	and	r5,r5,r7
 5088e2c:	1140022e 	bgeu	r2,r5,5088e38 <_free_r+0x184>
 5088e30:	18c00217 	ldw	r3,8(r3)
 5088e34:	20fffb1e 	bne	r4,r3,5088e24 <__alt_data_end+0xfffbac24>
 5088e38:	18800317 	ldw	r2,12(r3)
 5088e3c:	30800315 	stw	r2,12(r6)
 5088e40:	30c00215 	stw	r3,8(r6)
 5088e44:	11800215 	stw	r6,8(r2)
 5088e48:	19800315 	stw	r6,12(r3)
 5088e4c:	003fe006 	br	5088dd0 <__alt_data_end+0xfffbabd0>
 5088e50:	2100004c 	andi	r4,r4,1
 5088e54:	1885883a 	add	r2,r3,r2
 5088e58:	2000071e 	bne	r4,zero,5088e78 <_free_r+0x1c4>
 5088e5c:	817ffe17 	ldw	r5,-8(r16)
 5088e60:	314dc83a 	sub	r6,r6,r5
 5088e64:	30c00317 	ldw	r3,12(r6)
 5088e68:	31000217 	ldw	r4,8(r6)
 5088e6c:	1145883a 	add	r2,r2,r5
 5088e70:	20c00315 	stw	r3,12(r4)
 5088e74:	19000215 	stw	r4,8(r3)
 5088e78:	10c00054 	ori	r3,r2,1
 5088e7c:	30c00115 	stw	r3,4(r6)
 5088e80:	00c14274 	movhi	r3,1289
 5088e84:	18dc5904 	addi	r3,r3,29028
 5088e88:	18c00017 	ldw	r3,0(r3)
 5088e8c:	49800215 	stw	r6,8(r9)
 5088e90:	10ffcf36 	bltu	r2,r3,5088dd0 <__alt_data_end+0xfffbabd0>
 5088e94:	008142b4 	movhi	r2,1290
 5088e98:	10a32c04 	addi	r2,r2,-29520
 5088e9c:	11400017 	ldw	r5,0(r2)
 5088ea0:	8809883a 	mov	r4,r17
 5088ea4:	5088b900 	call	5088b90 <_malloc_trim_r>
 5088ea8:	003fc906 	br	5088dd0 <__alt_data_end+0xfffbabd0>
 5088eac:	28c9883a 	add	r4,r5,r3
 5088eb0:	21000117 	ldw	r4,4(r4)
 5088eb4:	2100004c 	andi	r4,r4,1
 5088eb8:	20000a1e 	bne	r4,zero,5088ee4 <_free_r+0x230>
 5088ebc:	29000317 	ldw	r4,12(r5)
 5088ec0:	29400217 	ldw	r5,8(r5)
 5088ec4:	10c5883a 	add	r2,r2,r3
 5088ec8:	10c00054 	ori	r3,r2,1
 5088ecc:	29000315 	stw	r4,12(r5)
 5088ed0:	21400215 	stw	r5,8(r4)
 5088ed4:	30c00115 	stw	r3,4(r6)
 5088ed8:	308d883a 	add	r6,r6,r2
 5088edc:	30800015 	stw	r2,0(r6)
 5088ee0:	003fbb06 	br	5088dd0 <__alt_data_end+0xfffbabd0>
 5088ee4:	10c00054 	ori	r3,r2,1
 5088ee8:	30c00115 	stw	r3,4(r6)
 5088eec:	308d883a 	add	r6,r6,r2
 5088ef0:	30800015 	stw	r2,0(r6)
 5088ef4:	003fb606 	br	5088dd0 <__alt_data_end+0xfffbabd0>
 5088ef8:	01000504 	movi	r4,20
 5088efc:	20c01436 	bltu	r4,r3,5088f50 <_free_r+0x29c>
 5088f00:	194016c4 	addi	r5,r3,91
 5088f04:	2947883a 	add	r3,r5,r5
 5088f08:	003fbe06 	br	5088e04 <__alt_data_end+0xfffbac04>
 5088f0c:	280bd0ba 	srai	r5,r5,2
 5088f10:	00800044 	movi	r2,1
 5088f14:	39000117 	ldw	r4,4(r7)
 5088f18:	114a983a 	sll	r5,r2,r5
 5088f1c:	1805883a 	mov	r2,r3
 5088f20:	2908b03a 	or	r4,r5,r4
 5088f24:	39000115 	stw	r4,4(r7)
 5088f28:	003fc406 	br	5088e3c <__alt_data_end+0xfffbac3c>
 5088f2c:	49800515 	stw	r6,20(r9)
 5088f30:	49800415 	stw	r6,16(r9)
 5088f34:	10c00054 	ori	r3,r2,1
 5088f38:	31000315 	stw	r4,12(r6)
 5088f3c:	31000215 	stw	r4,8(r6)
 5088f40:	30c00115 	stw	r3,4(r6)
 5088f44:	308d883a 	add	r6,r6,r2
 5088f48:	30800015 	stw	r2,0(r6)
 5088f4c:	003fa006 	br	5088dd0 <__alt_data_end+0xfffbabd0>
 5088f50:	01001504 	movi	r4,84
 5088f54:	20c00436 	bltu	r4,r3,5088f68 <_free_r+0x2b4>
 5088f58:	1006d33a 	srli	r3,r2,12
 5088f5c:	19401b84 	addi	r5,r3,110
 5088f60:	2947883a 	add	r3,r5,r5
 5088f64:	003fa706 	br	5088e04 <__alt_data_end+0xfffbac04>
 5088f68:	01005504 	movi	r4,340
 5088f6c:	20c00436 	bltu	r4,r3,5088f80 <_free_r+0x2cc>
 5088f70:	1006d3fa 	srli	r3,r2,15
 5088f74:	19401dc4 	addi	r5,r3,119
 5088f78:	2947883a 	add	r3,r5,r5
 5088f7c:	003fa106 	br	5088e04 <__alt_data_end+0xfffbac04>
 5088f80:	01015504 	movi	r4,1364
 5088f84:	20c00436 	bltu	r4,r3,5088f98 <_free_r+0x2e4>
 5088f88:	1006d4ba 	srli	r3,r2,18
 5088f8c:	19401f04 	addi	r5,r3,124
 5088f90:	2947883a 	add	r3,r5,r5
 5088f94:	003f9b06 	br	5088e04 <__alt_data_end+0xfffbac04>
 5088f98:	00c03f04 	movi	r3,252
 5088f9c:	01401f84 	movi	r5,126
 5088fa0:	003f9806 	br	5088e04 <__alt_data_end+0xfffbac04>

05088fa4 <__sfvwrite_r>:
 5088fa4:	30800217 	ldw	r2,8(r6)
 5088fa8:	10004526 	beq	r2,zero,50890c0 <__sfvwrite_r+0x11c>
 5088fac:	28c0030b 	ldhu	r3,12(r5)
 5088fb0:	defff404 	addi	sp,sp,-48
 5088fb4:	dd400715 	stw	r21,28(sp)
 5088fb8:	dcc00515 	stw	r19,20(sp)
 5088fbc:	dc000215 	stw	r16,8(sp)
 5088fc0:	dfc00b15 	stw	ra,44(sp)
 5088fc4:	df000a15 	stw	fp,40(sp)
 5088fc8:	ddc00915 	stw	r23,36(sp)
 5088fcc:	dd800815 	stw	r22,32(sp)
 5088fd0:	dd000615 	stw	r20,24(sp)
 5088fd4:	dc800415 	stw	r18,16(sp)
 5088fd8:	dc400315 	stw	r17,12(sp)
 5088fdc:	1880020c 	andi	r2,r3,8
 5088fe0:	2821883a 	mov	r16,r5
 5088fe4:	202b883a 	mov	r21,r4
 5088fe8:	3027883a 	mov	r19,r6
 5088fec:	10002526 	beq	r2,zero,5089084 <__sfvwrite_r+0xe0>
 5088ff0:	28800417 	ldw	r2,16(r5)
 5088ff4:	10002326 	beq	r2,zero,5089084 <__sfvwrite_r+0xe0>
 5088ff8:	1880008c 	andi	r2,r3,2
 5088ffc:	9c400017 	ldw	r17,0(r19)
 5089000:	10003126 	beq	r2,zero,50890c8 <__sfvwrite_r+0x124>
 5089004:	0029883a 	mov	r20,zero
 5089008:	0025883a 	mov	r18,zero
 508900c:	05810004 	movi	r22,1024
 5089010:	a00d883a 	mov	r6,r20
 5089014:	a809883a 	mov	r4,r21
 5089018:	90002526 	beq	r18,zero,50890b0 <__sfvwrite_r+0x10c>
 508901c:	900f883a 	mov	r7,r18
 5089020:	81400717 	ldw	r5,28(r16)
 5089024:	b480012e 	bgeu	r22,r18,508902c <__sfvwrite_r+0x88>
 5089028:	01c10004 	movi	r7,1024
 508902c:	80800917 	ldw	r2,36(r16)
 5089030:	103ee83a 	callr	r2
 5089034:	0080510e 	bge	zero,r2,508917c <__sfvwrite_r+0x1d8>
 5089038:	98c00217 	ldw	r3,8(r19)
 508903c:	a0a9883a 	add	r20,r20,r2
 5089040:	90a5c83a 	sub	r18,r18,r2
 5089044:	1885c83a 	sub	r2,r3,r2
 5089048:	98800215 	stw	r2,8(r19)
 508904c:	103ff01e 	bne	r2,zero,5089010 <__alt_data_end+0xfffbae10>
 5089050:	0005883a 	mov	r2,zero
 5089054:	dfc00b17 	ldw	ra,44(sp)
 5089058:	df000a17 	ldw	fp,40(sp)
 508905c:	ddc00917 	ldw	r23,36(sp)
 5089060:	dd800817 	ldw	r22,32(sp)
 5089064:	dd400717 	ldw	r21,28(sp)
 5089068:	dd000617 	ldw	r20,24(sp)
 508906c:	dcc00517 	ldw	r19,20(sp)
 5089070:	dc800417 	ldw	r18,16(sp)
 5089074:	dc400317 	ldw	r17,12(sp)
 5089078:	dc000217 	ldw	r16,8(sp)
 508907c:	dec00c04 	addi	sp,sp,48
 5089080:	f800283a 	ret
 5089084:	a809883a 	mov	r4,r21
 5089088:	800b883a 	mov	r5,r16
 508908c:	5086b400 	call	5086b40 <__swsetup_r>
 5089090:	80c0030b 	ldhu	r3,12(r16)
 5089094:	103fd826 	beq	r2,zero,5088ff8 <__alt_data_end+0xfffbadf8>
 5089098:	18c01014 	ori	r3,r3,64
 508909c:	80c0030d 	sth	r3,12(r16)
 50890a0:	00c00244 	movi	r3,9
 50890a4:	00bfffc4 	movi	r2,-1
 50890a8:	a8c00015 	stw	r3,0(r21)
 50890ac:	003fe906 	br	5089054 <__alt_data_end+0xfffbae54>
 50890b0:	8d000017 	ldw	r20,0(r17)
 50890b4:	8c800117 	ldw	r18,4(r17)
 50890b8:	8c400204 	addi	r17,r17,8
 50890bc:	003fd406 	br	5089010 <__alt_data_end+0xfffbae10>
 50890c0:	0005883a 	mov	r2,zero
 50890c4:	f800283a 	ret
 50890c8:	1880004c 	andi	r2,r3,1
 50890cc:	1000301e 	bne	r2,zero,5089190 <__sfvwrite_r+0x1ec>
 50890d0:	002f883a 	mov	r23,zero
 50890d4:	0025883a 	mov	r18,zero
 50890d8:	90001c26 	beq	r18,zero,508914c <__sfvwrite_r+0x1a8>
 50890dc:	1880800c 	andi	r2,r3,512
 50890e0:	85000217 	ldw	r20,8(r16)
 50890e4:	10006c26 	beq	r2,zero,5089298 <__sfvwrite_r+0x2f4>
 50890e8:	a02d883a 	mov	r22,r20
 50890ec:	95008536 	bltu	r18,r20,5089304 <__sfvwrite_r+0x360>
 50890f0:	1881200c 	andi	r2,r3,1152
 50890f4:	10009d1e 	bne	r2,zero,508936c <__sfvwrite_r+0x3c8>
 50890f8:	81000017 	ldw	r4,0(r16)
 50890fc:	a039883a 	mov	fp,r20
 5089100:	9029883a 	mov	r20,r18
 5089104:	b80b883a 	mov	r5,r23
 5089108:	b00d883a 	mov	r6,r22
 508910c:	508a2180 	call	508a218 <memmove>
 5089110:	80c00217 	ldw	r3,8(r16)
 5089114:	81000017 	ldw	r4,0(r16)
 5089118:	9005883a 	mov	r2,r18
 508911c:	1f39c83a 	sub	fp,r3,fp
 5089120:	258f883a 	add	r7,r4,r22
 5089124:	87000215 	stw	fp,8(r16)
 5089128:	81c00015 	stw	r7,0(r16)
 508912c:	98c00217 	ldw	r3,8(r19)
 5089130:	b8af883a 	add	r23,r23,r2
 5089134:	90a5c83a 	sub	r18,r18,r2
 5089138:	1d05c83a 	sub	r2,r3,r20
 508913c:	98800215 	stw	r2,8(r19)
 5089140:	103fc326 	beq	r2,zero,5089050 <__alt_data_end+0xfffbae50>
 5089144:	80c0030b 	ldhu	r3,12(r16)
 5089148:	903fe41e 	bne	r18,zero,50890dc <__alt_data_end+0xfffbaedc>
 508914c:	8dc00017 	ldw	r23,0(r17)
 5089150:	8c800117 	ldw	r18,4(r17)
 5089154:	8c400204 	addi	r17,r17,8
 5089158:	003fdf06 	br	50890d8 <__alt_data_end+0xfffbaed8>
 508915c:	508b4240 	call	508b424 <_realloc_r>
 5089160:	102d883a 	mov	r22,r2
 5089164:	1000a01e 	bne	r2,zero,50893e8 <__sfvwrite_r+0x444>
 5089168:	81400417 	ldw	r5,16(r16)
 508916c:	a809883a 	mov	r4,r21
 5089170:	5088cb40 	call	5088cb4 <_free_r>
 5089174:	00800304 	movi	r2,12
 5089178:	a8800015 	stw	r2,0(r21)
 508917c:	80c0030b 	ldhu	r3,12(r16)
 5089180:	00bfffc4 	movi	r2,-1
 5089184:	18c01014 	ori	r3,r3,64
 5089188:	80c0030d 	sth	r3,12(r16)
 508918c:	003fb106 	br	5089054 <__alt_data_end+0xfffbae54>
 5089190:	0029883a 	mov	r20,zero
 5089194:	0011883a 	mov	r8,zero
 5089198:	0039883a 	mov	fp,zero
 508919c:	0025883a 	mov	r18,zero
 50891a0:	90001f26 	beq	r18,zero,5089220 <__sfvwrite_r+0x27c>
 50891a4:	40006826 	beq	r8,zero,5089348 <__sfvwrite_r+0x3a4>
 50891a8:	a02f883a 	mov	r23,r20
 50891ac:	9500012e 	bgeu	r18,r20,50891b4 <__sfvwrite_r+0x210>
 50891b0:	902f883a 	mov	r23,r18
 50891b4:	81000017 	ldw	r4,0(r16)
 50891b8:	80800417 	ldw	r2,16(r16)
 50891bc:	b82d883a 	mov	r22,r23
 50891c0:	81800217 	ldw	r6,8(r16)
 50891c4:	81c00517 	ldw	r7,20(r16)
 50891c8:	1100022e 	bgeu	r2,r4,50891d4 <__sfvwrite_r+0x230>
 50891cc:	31c7883a 	add	r3,r6,r7
 50891d0:	1dc01816 	blt	r3,r23,5089234 <__sfvwrite_r+0x290>
 50891d4:	b9c03f16 	blt	r23,r7,50892d4 <__sfvwrite_r+0x330>
 50891d8:	80800917 	ldw	r2,36(r16)
 50891dc:	81400717 	ldw	r5,28(r16)
 50891e0:	a809883a 	mov	r4,r21
 50891e4:	da000115 	stw	r8,4(sp)
 50891e8:	e00d883a 	mov	r6,fp
 50891ec:	103ee83a 	callr	r2
 50891f0:	102d883a 	mov	r22,r2
 50891f4:	da000117 	ldw	r8,4(sp)
 50891f8:	00bfe00e 	bge	zero,r2,508917c <__alt_data_end+0xfffbaf7c>
 50891fc:	a5a9c83a 	sub	r20,r20,r22
 5089200:	a0001f26 	beq	r20,zero,5089280 <__sfvwrite_r+0x2dc>
 5089204:	98800217 	ldw	r2,8(r19)
 5089208:	e5b9883a 	add	fp,fp,r22
 508920c:	95a5c83a 	sub	r18,r18,r22
 5089210:	15adc83a 	sub	r22,r2,r22
 5089214:	9d800215 	stw	r22,8(r19)
 5089218:	b03f8d26 	beq	r22,zero,5089050 <__alt_data_end+0xfffbae50>
 508921c:	903fe11e 	bne	r18,zero,50891a4 <__alt_data_end+0xfffbafa4>
 5089220:	8f000017 	ldw	fp,0(r17)
 5089224:	8c800117 	ldw	r18,4(r17)
 5089228:	0011883a 	mov	r8,zero
 508922c:	8c400204 	addi	r17,r17,8
 5089230:	003fdb06 	br	50891a0 <__alt_data_end+0xfffbafa0>
 5089234:	180d883a 	mov	r6,r3
 5089238:	e00b883a 	mov	r5,fp
 508923c:	da000115 	stw	r8,4(sp)
 5089240:	d8c00015 	stw	r3,0(sp)
 5089244:	508a2180 	call	508a218 <memmove>
 5089248:	d8c00017 	ldw	r3,0(sp)
 508924c:	80800017 	ldw	r2,0(r16)
 5089250:	a809883a 	mov	r4,r21
 5089254:	800b883a 	mov	r5,r16
 5089258:	10c5883a 	add	r2,r2,r3
 508925c:	80800015 	stw	r2,0(r16)
 5089260:	d8c00015 	stw	r3,0(sp)
 5089264:	50885980 	call	5088598 <_fflush_r>
 5089268:	d8c00017 	ldw	r3,0(sp)
 508926c:	da000117 	ldw	r8,4(sp)
 5089270:	103fc21e 	bne	r2,zero,508917c <__alt_data_end+0xfffbaf7c>
 5089274:	182d883a 	mov	r22,r3
 5089278:	a5a9c83a 	sub	r20,r20,r22
 508927c:	a03fe11e 	bne	r20,zero,5089204 <__alt_data_end+0xfffbb004>
 5089280:	a809883a 	mov	r4,r21
 5089284:	800b883a 	mov	r5,r16
 5089288:	50885980 	call	5088598 <_fflush_r>
 508928c:	103fbb1e 	bne	r2,zero,508917c <__alt_data_end+0xfffbaf7c>
 5089290:	0011883a 	mov	r8,zero
 5089294:	003fdb06 	br	5089204 <__alt_data_end+0xfffbb004>
 5089298:	81000017 	ldw	r4,0(r16)
 508929c:	80800417 	ldw	r2,16(r16)
 50892a0:	1100012e 	bgeu	r2,r4,50892a8 <__sfvwrite_r+0x304>
 50892a4:	a4805a36 	bltu	r20,r18,5089410 <__sfvwrite_r+0x46c>
 50892a8:	81c00517 	ldw	r7,20(r16)
 50892ac:	91c01a36 	bltu	r18,r7,5089318 <__sfvwrite_r+0x374>
 50892b0:	80800917 	ldw	r2,36(r16)
 50892b4:	81400717 	ldw	r5,28(r16)
 50892b8:	a809883a 	mov	r4,r21
 50892bc:	b80d883a 	mov	r6,r23
 50892c0:	103ee83a 	callr	r2
 50892c4:	1029883a 	mov	r20,r2
 50892c8:	00bfac0e 	bge	zero,r2,508917c <__alt_data_end+0xfffbaf7c>
 50892cc:	a005883a 	mov	r2,r20
 50892d0:	003f9606 	br	508912c <__alt_data_end+0xfffbaf2c>
 50892d4:	b80d883a 	mov	r6,r23
 50892d8:	e00b883a 	mov	r5,fp
 50892dc:	da000115 	stw	r8,4(sp)
 50892e0:	508a2180 	call	508a218 <memmove>
 50892e4:	80800217 	ldw	r2,8(r16)
 50892e8:	80c00017 	ldw	r3,0(r16)
 50892ec:	da000117 	ldw	r8,4(sp)
 50892f0:	15c5c83a 	sub	r2,r2,r23
 50892f4:	1def883a 	add	r23,r3,r23
 50892f8:	80800215 	stw	r2,8(r16)
 50892fc:	85c00015 	stw	r23,0(r16)
 5089300:	003fbe06 	br	50891fc <__alt_data_end+0xfffbaffc>
 5089304:	81000017 	ldw	r4,0(r16)
 5089308:	9039883a 	mov	fp,r18
 508930c:	9029883a 	mov	r20,r18
 5089310:	902d883a 	mov	r22,r18
 5089314:	003f7b06 	br	5089104 <__alt_data_end+0xfffbaf04>
 5089318:	b80b883a 	mov	r5,r23
 508931c:	900d883a 	mov	r6,r18
 5089320:	508a2180 	call	508a218 <memmove>
 5089324:	80c00217 	ldw	r3,8(r16)
 5089328:	80800017 	ldw	r2,0(r16)
 508932c:	9029883a 	mov	r20,r18
 5089330:	1c87c83a 	sub	r3,r3,r18
 5089334:	1485883a 	add	r2,r2,r18
 5089338:	80800015 	stw	r2,0(r16)
 508933c:	80c00215 	stw	r3,8(r16)
 5089340:	9005883a 	mov	r2,r18
 5089344:	003f7906 	br	508912c <__alt_data_end+0xfffbaf2c>
 5089348:	e009883a 	mov	r4,fp
 508934c:	01400284 	movi	r5,10
 5089350:	900d883a 	mov	r6,r18
 5089354:	5089ff80 	call	5089ff8 <memchr>
 5089358:	10003826 	beq	r2,zero,508943c <__sfvwrite_r+0x498>
 508935c:	10800044 	addi	r2,r2,1
 5089360:	1729c83a 	sub	r20,r2,fp
 5089364:	02000044 	movi	r8,1
 5089368:	003f8f06 	br	50891a8 <__alt_data_end+0xfffbafa8>
 508936c:	80800517 	ldw	r2,20(r16)
 5089370:	81400417 	ldw	r5,16(r16)
 5089374:	87000017 	ldw	fp,0(r16)
 5089378:	10a9883a 	add	r20,r2,r2
 508937c:	a085883a 	add	r2,r20,r2
 5089380:	1028d7fa 	srli	r20,r2,31
 5089384:	e179c83a 	sub	fp,fp,r5
 5089388:	e1000044 	addi	r4,fp,1
 508938c:	a085883a 	add	r2,r20,r2
 5089390:	1029d07a 	srai	r20,r2,1
 5089394:	2485883a 	add	r2,r4,r18
 5089398:	a00d883a 	mov	r6,r20
 508939c:	a080022e 	bgeu	r20,r2,50893a8 <__sfvwrite_r+0x404>
 50893a0:	1029883a 	mov	r20,r2
 50893a4:	100d883a 	mov	r6,r2
 50893a8:	18c1000c 	andi	r3,r3,1024
 50893ac:	a809883a 	mov	r4,r21
 50893b0:	183f6a26 	beq	r3,zero,508915c <__alt_data_end+0xfffbaf5c>
 50893b4:	300b883a 	mov	r5,r6
 50893b8:	50898500 	call	5089850 <_malloc_r>
 50893bc:	102d883a 	mov	r22,r2
 50893c0:	103f6c26 	beq	r2,zero,5089174 <__alt_data_end+0xfffbaf74>
 50893c4:	81400417 	ldw	r5,16(r16)
 50893c8:	1009883a 	mov	r4,r2
 50893cc:	e00d883a 	mov	r6,fp
 50893d0:	508a0e00 	call	508a0e0 <memcpy>
 50893d4:	8080030b 	ldhu	r2,12(r16)
 50893d8:	00fedfc4 	movi	r3,-1153
 50893dc:	10c4703a 	and	r2,r2,r3
 50893e0:	10802014 	ori	r2,r2,128
 50893e4:	8080030d 	sth	r2,12(r16)
 50893e8:	b709883a 	add	r4,r22,fp
 50893ec:	a707c83a 	sub	r3,r20,fp
 50893f0:	85800415 	stw	r22,16(r16)
 50893f4:	85000515 	stw	r20,20(r16)
 50893f8:	81000015 	stw	r4,0(r16)
 50893fc:	9039883a 	mov	fp,r18
 5089400:	80c00215 	stw	r3,8(r16)
 5089404:	9029883a 	mov	r20,r18
 5089408:	902d883a 	mov	r22,r18
 508940c:	003f3d06 	br	5089104 <__alt_data_end+0xfffbaf04>
 5089410:	b80b883a 	mov	r5,r23
 5089414:	a00d883a 	mov	r6,r20
 5089418:	508a2180 	call	508a218 <memmove>
 508941c:	80800017 	ldw	r2,0(r16)
 5089420:	a809883a 	mov	r4,r21
 5089424:	800b883a 	mov	r5,r16
 5089428:	1505883a 	add	r2,r2,r20
 508942c:	80800015 	stw	r2,0(r16)
 5089430:	50885980 	call	5088598 <_fflush_r>
 5089434:	103fa526 	beq	r2,zero,50892cc <__alt_data_end+0xfffbb0cc>
 5089438:	003f5006 	br	508917c <__alt_data_end+0xfffbaf7c>
 508943c:	95000044 	addi	r20,r18,1
 5089440:	02000044 	movi	r8,1
 5089444:	003f5806 	br	50891a8 <__alt_data_end+0xfffbafa8>

05089448 <_fwalk>:
 5089448:	defff804 	addi	sp,sp,-32
 508944c:	dd400515 	stw	r21,20(sp)
 5089450:	2540b804 	addi	r21,r4,736
 5089454:	dd800615 	stw	r22,24(sp)
 5089458:	dd000415 	stw	r20,16(sp)
 508945c:	dfc00715 	stw	ra,28(sp)
 5089460:	dcc00315 	stw	r19,12(sp)
 5089464:	dc800215 	stw	r18,8(sp)
 5089468:	dc400115 	stw	r17,4(sp)
 508946c:	dc000015 	stw	r16,0(sp)
 5089470:	2829883a 	mov	r20,r5
 5089474:	002d883a 	mov	r22,zero
 5089478:	5088b500 	call	5088b50 <__sfp_lock_acquire>
 508947c:	a8001426 	beq	r21,zero,50894d0 <_fwalk+0x88>
 5089480:	04ffffc4 	movi	r19,-1
 5089484:	ac400117 	ldw	r17,4(r21)
 5089488:	ac800217 	ldw	r18,8(r21)
 508948c:	8c7fffc4 	addi	r17,r17,-1
 5089490:	88000d16 	blt	r17,zero,50894c8 <_fwalk+0x80>
 5089494:	94000304 	addi	r16,r18,12
 5089498:	94800384 	addi	r18,r18,14
 508949c:	80c0000f 	ldh	r3,0(r16)
 50894a0:	8c7fffc4 	addi	r17,r17,-1
 50894a4:	813ffd04 	addi	r4,r16,-12
 50894a8:	18000426 	beq	r3,zero,50894bc <_fwalk+0x74>
 50894ac:	90c0000f 	ldh	r3,0(r18)
 50894b0:	1cc00226 	beq	r3,r19,50894bc <_fwalk+0x74>
 50894b4:	a03ee83a 	callr	r20
 50894b8:	b0acb03a 	or	r22,r22,r2
 50894bc:	84001a04 	addi	r16,r16,104
 50894c0:	94801a04 	addi	r18,r18,104
 50894c4:	8cfff51e 	bne	r17,r19,508949c <__alt_data_end+0xfffbb29c>
 50894c8:	ad400017 	ldw	r21,0(r21)
 50894cc:	a83fed1e 	bne	r21,zero,5089484 <__alt_data_end+0xfffbb284>
 50894d0:	5088b540 	call	5088b54 <__sfp_lock_release>
 50894d4:	b005883a 	mov	r2,r22
 50894d8:	dfc00717 	ldw	ra,28(sp)
 50894dc:	dd800617 	ldw	r22,24(sp)
 50894e0:	dd400517 	ldw	r21,20(sp)
 50894e4:	dd000417 	ldw	r20,16(sp)
 50894e8:	dcc00317 	ldw	r19,12(sp)
 50894ec:	dc800217 	ldw	r18,8(sp)
 50894f0:	dc400117 	ldw	r17,4(sp)
 50894f4:	dc000017 	ldw	r16,0(sp)
 50894f8:	dec00804 	addi	sp,sp,32
 50894fc:	f800283a 	ret

05089500 <_fwalk_reent>:
 5089500:	defff804 	addi	sp,sp,-32
 5089504:	dd400515 	stw	r21,20(sp)
 5089508:	2540b804 	addi	r21,r4,736
 508950c:	dd800615 	stw	r22,24(sp)
 5089510:	dd000415 	stw	r20,16(sp)
 5089514:	dcc00315 	stw	r19,12(sp)
 5089518:	dfc00715 	stw	ra,28(sp)
 508951c:	dc800215 	stw	r18,8(sp)
 5089520:	dc400115 	stw	r17,4(sp)
 5089524:	dc000015 	stw	r16,0(sp)
 5089528:	2027883a 	mov	r19,r4
 508952c:	2829883a 	mov	r20,r5
 5089530:	002d883a 	mov	r22,zero
 5089534:	5088b500 	call	5088b50 <__sfp_lock_acquire>
 5089538:	a8001326 	beq	r21,zero,5089588 <_fwalk_reent+0x88>
 508953c:	04bfffc4 	movi	r18,-1
 5089540:	ac400117 	ldw	r17,4(r21)
 5089544:	ac000217 	ldw	r16,8(r21)
 5089548:	8c7fffc4 	addi	r17,r17,-1
 508954c:	88000c16 	blt	r17,zero,5089580 <_fwalk_reent+0x80>
 5089550:	84000304 	addi	r16,r16,12
 5089554:	80c0000f 	ldh	r3,0(r16)
 5089558:	8c7fffc4 	addi	r17,r17,-1
 508955c:	817ffd04 	addi	r5,r16,-12
 5089560:	18000526 	beq	r3,zero,5089578 <_fwalk_reent+0x78>
 5089564:	80c0008f 	ldh	r3,2(r16)
 5089568:	9809883a 	mov	r4,r19
 508956c:	1c800226 	beq	r3,r18,5089578 <_fwalk_reent+0x78>
 5089570:	a03ee83a 	callr	r20
 5089574:	b0acb03a 	or	r22,r22,r2
 5089578:	84001a04 	addi	r16,r16,104
 508957c:	8cbff51e 	bne	r17,r18,5089554 <__alt_data_end+0xfffbb354>
 5089580:	ad400017 	ldw	r21,0(r21)
 5089584:	a83fee1e 	bne	r21,zero,5089540 <__alt_data_end+0xfffbb340>
 5089588:	5088b540 	call	5088b54 <__sfp_lock_release>
 508958c:	b005883a 	mov	r2,r22
 5089590:	dfc00717 	ldw	ra,28(sp)
 5089594:	dd800617 	ldw	r22,24(sp)
 5089598:	dd400517 	ldw	r21,20(sp)
 508959c:	dd000417 	ldw	r20,16(sp)
 50895a0:	dcc00317 	ldw	r19,12(sp)
 50895a4:	dc800217 	ldw	r18,8(sp)
 50895a8:	dc400117 	ldw	r17,4(sp)
 50895ac:	dc000017 	ldw	r16,0(sp)
 50895b0:	dec00804 	addi	sp,sp,32
 50895b4:	f800283a 	ret

050895b8 <_setlocale_r>:
 50895b8:	30001b26 	beq	r6,zero,5089628 <_setlocale_r+0x70>
 50895bc:	01414274 	movhi	r5,1289
 50895c0:	defffe04 	addi	sp,sp,-8
 50895c4:	2954ff04 	addi	r5,r5,21500
 50895c8:	3009883a 	mov	r4,r6
 50895cc:	dc000015 	stw	r16,0(sp)
 50895d0:	dfc00115 	stw	ra,4(sp)
 50895d4:	3021883a 	mov	r16,r6
 50895d8:	508bbc80 	call	508bbc8 <strcmp>
 50895dc:	1000061e 	bne	r2,zero,50895f8 <_setlocale_r+0x40>
 50895e0:	00814274 	movhi	r2,1289
 50895e4:	1094fe04 	addi	r2,r2,21496
 50895e8:	dfc00117 	ldw	ra,4(sp)
 50895ec:	dc000017 	ldw	r16,0(sp)
 50895f0:	dec00204 	addi	sp,sp,8
 50895f4:	f800283a 	ret
 50895f8:	01414274 	movhi	r5,1289
 50895fc:	2954fe04 	addi	r5,r5,21496
 5089600:	8009883a 	mov	r4,r16
 5089604:	508bbc80 	call	508bbc8 <strcmp>
 5089608:	103ff526 	beq	r2,zero,50895e0 <__alt_data_end+0xfffbb3e0>
 508960c:	01414274 	movhi	r5,1289
 5089610:	2954e104 	addi	r5,r5,21380
 5089614:	8009883a 	mov	r4,r16
 5089618:	508bbc80 	call	508bbc8 <strcmp>
 508961c:	103ff026 	beq	r2,zero,50895e0 <__alt_data_end+0xfffbb3e0>
 5089620:	0005883a 	mov	r2,zero
 5089624:	003ff006 	br	50895e8 <__alt_data_end+0xfffbb3e8>
 5089628:	00814274 	movhi	r2,1289
 508962c:	1094fe04 	addi	r2,r2,21496
 5089630:	f800283a 	ret

05089634 <__locale_charset>:
 5089634:	00814274 	movhi	r2,1289
 5089638:	1096bb04 	addi	r2,r2,23276
 508963c:	f800283a 	ret

05089640 <__locale_mb_cur_max>:
 5089640:	00814274 	movhi	r2,1289
 5089644:	109c5704 	addi	r2,r2,29020
 5089648:	10800017 	ldw	r2,0(r2)
 508964c:	f800283a 	ret

05089650 <__locale_msgcharset>:
 5089650:	00814274 	movhi	r2,1289
 5089654:	1096b304 	addi	r2,r2,23244
 5089658:	f800283a 	ret

0508965c <__locale_cjk_lang>:
 508965c:	0005883a 	mov	r2,zero
 5089660:	f800283a 	ret

05089664 <_localeconv_r>:
 5089664:	00814274 	movhi	r2,1289
 5089668:	1096c304 	addi	r2,r2,23308
 508966c:	f800283a 	ret

05089670 <setlocale>:
 5089670:	00c14274 	movhi	r3,1289
 5089674:	18dc5604 	addi	r3,r3,29016
 5089678:	2005883a 	mov	r2,r4
 508967c:	19000017 	ldw	r4,0(r3)
 5089680:	280d883a 	mov	r6,r5
 5089684:	100b883a 	mov	r5,r2
 5089688:	50895b81 	jmpi	50895b8 <_setlocale_r>

0508968c <localeconv>:
 508968c:	00814274 	movhi	r2,1289
 5089690:	1096c304 	addi	r2,r2,23308
 5089694:	f800283a 	ret

05089698 <__smakebuf_r>:
 5089698:	2880030b 	ldhu	r2,12(r5)
 508969c:	10c0008c 	andi	r3,r2,2
 50896a0:	1800401e 	bne	r3,zero,50897a4 <__smakebuf_r+0x10c>
 50896a4:	deffec04 	addi	sp,sp,-80
 50896a8:	dc000f15 	stw	r16,60(sp)
 50896ac:	2821883a 	mov	r16,r5
 50896b0:	2940038f 	ldh	r5,14(r5)
 50896b4:	dc401015 	stw	r17,64(sp)
 50896b8:	dfc01315 	stw	ra,76(sp)
 50896bc:	dcc01215 	stw	r19,72(sp)
 50896c0:	dc801115 	stw	r18,68(sp)
 50896c4:	2023883a 	mov	r17,r4
 50896c8:	28001b16 	blt	r5,zero,5089738 <__smakebuf_r+0xa0>
 50896cc:	d80d883a 	mov	r6,sp
 50896d0:	508e7940 	call	508e794 <_fstat_r>
 50896d4:	10001716 	blt	r2,zero,5089734 <__smakebuf_r+0x9c>
 50896d8:	d8800117 	ldw	r2,4(sp)
 50896dc:	00e00014 	movui	r3,32768
 50896e0:	10bc000c 	andi	r2,r2,61440
 50896e4:	10c03726 	beq	r2,r3,50897c4 <__smakebuf_r+0x12c>
 50896e8:	80c0030b 	ldhu	r3,12(r16)
 50896ec:	18c20014 	ori	r3,r3,2048
 50896f0:	80c0030d 	sth	r3,12(r16)
 50896f4:	00c80004 	movi	r3,8192
 50896f8:	10c03c1e 	bne	r2,r3,50897ec <__smakebuf_r+0x154>
 50896fc:	8140038f 	ldh	r5,14(r16)
 5089700:	8809883a 	mov	r4,r17
 5089704:	508e7ec0 	call	508e7ec <_isatty_r>
 5089708:	10004e26 	beq	r2,zero,5089844 <__smakebuf_r+0x1ac>
 508970c:	8080030b 	ldhu	r2,12(r16)
 5089710:	04c00044 	movi	r19,1
 5089714:	80c010c4 	addi	r3,r16,67
 5089718:	14c4b03a 	or	r2,r2,r19
 508971c:	8080030d 	sth	r2,12(r16)
 5089720:	80c00015 	stw	r3,0(r16)
 5089724:	80c00415 	stw	r3,16(r16)
 5089728:	84c00515 	stw	r19,20(r16)
 508972c:	04810004 	movi	r18,1024
 5089730:	00000706 	br	5089750 <__smakebuf_r+0xb8>
 5089734:	8080030b 	ldhu	r2,12(r16)
 5089738:	10c0200c 	andi	r3,r2,128
 508973c:	18001f1e 	bne	r3,zero,50897bc <__smakebuf_r+0x124>
 5089740:	04810004 	movi	r18,1024
 5089744:	10820014 	ori	r2,r2,2048
 5089748:	8080030d 	sth	r2,12(r16)
 508974c:	0027883a 	mov	r19,zero
 5089750:	8809883a 	mov	r4,r17
 5089754:	900b883a 	mov	r5,r18
 5089758:	50898500 	call	5089850 <_malloc_r>
 508975c:	10002e26 	beq	r2,zero,5089818 <__smakebuf_r+0x180>
 5089760:	80c0030b 	ldhu	r3,12(r16)
 5089764:	01014274 	movhi	r4,1289
 5089768:	21220004 	addi	r4,r4,-30720
 508976c:	89000f15 	stw	r4,60(r17)
 5089770:	18c02014 	ori	r3,r3,128
 5089774:	80c0030d 	sth	r3,12(r16)
 5089778:	80800015 	stw	r2,0(r16)
 508977c:	80800415 	stw	r2,16(r16)
 5089780:	84800515 	stw	r18,20(r16)
 5089784:	98001c1e 	bne	r19,zero,50897f8 <__smakebuf_r+0x160>
 5089788:	dfc01317 	ldw	ra,76(sp)
 508978c:	dcc01217 	ldw	r19,72(sp)
 5089790:	dc801117 	ldw	r18,68(sp)
 5089794:	dc401017 	ldw	r17,64(sp)
 5089798:	dc000f17 	ldw	r16,60(sp)
 508979c:	dec01404 	addi	sp,sp,80
 50897a0:	f800283a 	ret
 50897a4:	288010c4 	addi	r2,r5,67
 50897a8:	28800015 	stw	r2,0(r5)
 50897ac:	28800415 	stw	r2,16(r5)
 50897b0:	00800044 	movi	r2,1
 50897b4:	28800515 	stw	r2,20(r5)
 50897b8:	f800283a 	ret
 50897bc:	04801004 	movi	r18,64
 50897c0:	003fe006 	br	5089744 <__alt_data_end+0xfffbb544>
 50897c4:	81000a17 	ldw	r4,40(r16)
 50897c8:	00c14274 	movhi	r3,1289
 50897cc:	18eed904 	addi	r3,r3,-17564
 50897d0:	20ffc51e 	bne	r4,r3,50896e8 <__alt_data_end+0xfffbb4e8>
 50897d4:	80c0030b 	ldhu	r3,12(r16)
 50897d8:	01010004 	movi	r4,1024
 50897dc:	81001315 	stw	r4,76(r16)
 50897e0:	1906b03a 	or	r3,r3,r4
 50897e4:	80c0030d 	sth	r3,12(r16)
 50897e8:	003fc206 	br	50896f4 <__alt_data_end+0xfffbb4f4>
 50897ec:	0027883a 	mov	r19,zero
 50897f0:	04810004 	movi	r18,1024
 50897f4:	003fd606 	br	5089750 <__alt_data_end+0xfffbb550>
 50897f8:	8140038f 	ldh	r5,14(r16)
 50897fc:	8809883a 	mov	r4,r17
 5089800:	508e7ec0 	call	508e7ec <_isatty_r>
 5089804:	103fe026 	beq	r2,zero,5089788 <__alt_data_end+0xfffbb588>
 5089808:	8080030b 	ldhu	r2,12(r16)
 508980c:	10800054 	ori	r2,r2,1
 5089810:	8080030d 	sth	r2,12(r16)
 5089814:	003fdc06 	br	5089788 <__alt_data_end+0xfffbb588>
 5089818:	8080030b 	ldhu	r2,12(r16)
 508981c:	10c0800c 	andi	r3,r2,512
 5089820:	183fd91e 	bne	r3,zero,5089788 <__alt_data_end+0xfffbb588>
 5089824:	10800094 	ori	r2,r2,2
 5089828:	80c010c4 	addi	r3,r16,67
 508982c:	8080030d 	sth	r2,12(r16)
 5089830:	00800044 	movi	r2,1
 5089834:	80c00015 	stw	r3,0(r16)
 5089838:	80c00415 	stw	r3,16(r16)
 508983c:	80800515 	stw	r2,20(r16)
 5089840:	003fd106 	br	5089788 <__alt_data_end+0xfffbb588>
 5089844:	04c00044 	movi	r19,1
 5089848:	04810004 	movi	r18,1024
 508984c:	003fc006 	br	5089750 <__alt_data_end+0xfffbb550>

05089850 <_malloc_r>:
 5089850:	defff504 	addi	sp,sp,-44
 5089854:	dc800315 	stw	r18,12(sp)
 5089858:	dfc00a15 	stw	ra,40(sp)
 508985c:	df000915 	stw	fp,36(sp)
 5089860:	ddc00815 	stw	r23,32(sp)
 5089864:	dd800715 	stw	r22,28(sp)
 5089868:	dd400615 	stw	r21,24(sp)
 508986c:	dd000515 	stw	r20,20(sp)
 5089870:	dcc00415 	stw	r19,16(sp)
 5089874:	dc400215 	stw	r17,8(sp)
 5089878:	dc000115 	stw	r16,4(sp)
 508987c:	288002c4 	addi	r2,r5,11
 5089880:	00c00584 	movi	r3,22
 5089884:	2025883a 	mov	r18,r4
 5089888:	18802a2e 	bgeu	r3,r2,5089934 <_malloc_r+0xe4>
 508988c:	047ffe04 	movi	r17,-8
 5089890:	1462703a 	and	r17,r2,r17
 5089894:	88009e16 	blt	r17,zero,5089b10 <_malloc_r+0x2c0>
 5089898:	89409d36 	bltu	r17,r5,5089b10 <_malloc_r+0x2c0>
 508989c:	50925280 	call	5092528 <__malloc_lock>
 50898a0:	00807dc4 	movi	r2,503
 50898a4:	14402736 	bltu	r2,r17,5089944 <_malloc_r+0xf4>
 50898a8:	8806d0fa 	srli	r3,r17,3
 50898ac:	04c14274 	movhi	r19,1289
 50898b0:	9cd6d104 	addi	r19,r19,23364
 50898b4:	18c5883a 	add	r2,r3,r3
 50898b8:	1085883a 	add	r2,r2,r2
 50898bc:	1085883a 	add	r2,r2,r2
 50898c0:	9885883a 	add	r2,r19,r2
 50898c4:	14000317 	ldw	r16,12(r2)
 50898c8:	80814a26 	beq	r16,r2,5089df4 <_malloc_r+0x5a4>
 50898cc:	80c00117 	ldw	r3,4(r16)
 50898d0:	81000317 	ldw	r4,12(r16)
 50898d4:	00bfff04 	movi	r2,-4
 50898d8:	1884703a 	and	r2,r3,r2
 50898dc:	81400217 	ldw	r5,8(r16)
 50898e0:	8085883a 	add	r2,r16,r2
 50898e4:	10c00117 	ldw	r3,4(r2)
 50898e8:	29000315 	stw	r4,12(r5)
 50898ec:	21400215 	stw	r5,8(r4)
 50898f0:	18c00054 	ori	r3,r3,1
 50898f4:	10c00115 	stw	r3,4(r2)
 50898f8:	9009883a 	mov	r4,r18
 50898fc:	50925480 	call	5092548 <__malloc_unlock>
 5089900:	80800204 	addi	r2,r16,8
 5089904:	dfc00a17 	ldw	ra,40(sp)
 5089908:	df000917 	ldw	fp,36(sp)
 508990c:	ddc00817 	ldw	r23,32(sp)
 5089910:	dd800717 	ldw	r22,28(sp)
 5089914:	dd400617 	ldw	r21,24(sp)
 5089918:	dd000517 	ldw	r20,20(sp)
 508991c:	dcc00417 	ldw	r19,16(sp)
 5089920:	dc800317 	ldw	r18,12(sp)
 5089924:	dc400217 	ldw	r17,8(sp)
 5089928:	dc000117 	ldw	r16,4(sp)
 508992c:	dec00b04 	addi	sp,sp,44
 5089930:	f800283a 	ret
 5089934:	04400404 	movi	r17,16
 5089938:	89407536 	bltu	r17,r5,5089b10 <_malloc_r+0x2c0>
 508993c:	50925280 	call	5092528 <__malloc_lock>
 5089940:	003fd906 	br	50898a8 <__alt_data_end+0xfffbb6a8>
 5089944:	8806d27a 	srli	r3,r17,9
 5089948:	18007526 	beq	r3,zero,5089b20 <_malloc_r+0x2d0>
 508994c:	00800104 	movi	r2,4
 5089950:	10c0ef36 	bltu	r2,r3,5089d10 <_malloc_r+0x4c0>
 5089954:	8806d1ba 	srli	r3,r17,6
 5089958:	19c00e04 	addi	r7,r3,56
 508995c:	39cb883a 	add	r5,r7,r7
 5089960:	04c14274 	movhi	r19,1289
 5089964:	294b883a 	add	r5,r5,r5
 5089968:	9cd6d104 	addi	r19,r19,23364
 508996c:	294b883a 	add	r5,r5,r5
 5089970:	994b883a 	add	r5,r19,r5
 5089974:	2c000317 	ldw	r16,12(r5)
 5089978:	2c000e26 	beq	r5,r16,50899b4 <_malloc_r+0x164>
 508997c:	80800117 	ldw	r2,4(r16)
 5089980:	01bfff04 	movi	r6,-4
 5089984:	010003c4 	movi	r4,15
 5089988:	1184703a 	and	r2,r2,r6
 508998c:	1447c83a 	sub	r3,r2,r17
 5089990:	20c00716 	blt	r4,r3,50899b0 <_malloc_r+0x160>
 5089994:	1800650e 	bge	r3,zero,5089b2c <_malloc_r+0x2dc>
 5089998:	84000317 	ldw	r16,12(r16)
 508999c:	2c000526 	beq	r5,r16,50899b4 <_malloc_r+0x164>
 50899a0:	80800117 	ldw	r2,4(r16)
 50899a4:	1184703a 	and	r2,r2,r6
 50899a8:	1447c83a 	sub	r3,r2,r17
 50899ac:	20fff90e 	bge	r4,r3,5089994 <__alt_data_end+0xfffbb794>
 50899b0:	39ffffc4 	addi	r7,r7,-1
 50899b4:	38c00044 	addi	r3,r7,1
 50899b8:	01814274 	movhi	r6,1289
 50899bc:	9c000417 	ldw	r16,16(r19)
 50899c0:	3196d104 	addi	r6,r6,23364
 50899c4:	32400204 	addi	r9,r6,8
 50899c8:	82410326 	beq	r16,r9,5089dd8 <_malloc_r+0x588>
 50899cc:	81000117 	ldw	r4,4(r16)
 50899d0:	00bfff04 	movi	r2,-4
 50899d4:	208e703a 	and	r7,r4,r2
 50899d8:	3c45c83a 	sub	r2,r7,r17
 50899dc:	010003c4 	movi	r4,15
 50899e0:	2080ee16 	blt	r4,r2,5089d9c <_malloc_r+0x54c>
 50899e4:	32400515 	stw	r9,20(r6)
 50899e8:	32400415 	stw	r9,16(r6)
 50899ec:	1000510e 	bge	r2,zero,5089b34 <_malloc_r+0x2e4>
 50899f0:	00807fc4 	movi	r2,511
 50899f4:	11c0ce36 	bltu	r2,r7,5089d30 <_malloc_r+0x4e0>
 50899f8:	3808d0fa 	srli	r4,r7,3
 50899fc:	01c00044 	movi	r7,1
 5089a00:	30800117 	ldw	r2,4(r6)
 5089a04:	210b883a 	add	r5,r4,r4
 5089a08:	294b883a 	add	r5,r5,r5
 5089a0c:	2009d0ba 	srai	r4,r4,2
 5089a10:	294b883a 	add	r5,r5,r5
 5089a14:	298b883a 	add	r5,r5,r6
 5089a18:	2a000217 	ldw	r8,8(r5)
 5089a1c:	3908983a 	sll	r4,r7,r4
 5089a20:	81400315 	stw	r5,12(r16)
 5089a24:	82000215 	stw	r8,8(r16)
 5089a28:	2088b03a 	or	r4,r4,r2
 5089a2c:	2c000215 	stw	r16,8(r5)
 5089a30:	31000115 	stw	r4,4(r6)
 5089a34:	44000315 	stw	r16,12(r8)
 5089a38:	1805d0ba 	srai	r2,r3,2
 5089a3c:	01400044 	movi	r5,1
 5089a40:	288a983a 	sll	r5,r5,r2
 5089a44:	21404336 	bltu	r4,r5,5089b54 <_malloc_r+0x304>
 5089a48:	2144703a 	and	r2,r4,r5
 5089a4c:	10000a1e 	bne	r2,zero,5089a78 <_malloc_r+0x228>
 5089a50:	00bfff04 	movi	r2,-4
 5089a54:	294b883a 	add	r5,r5,r5
 5089a58:	1886703a 	and	r3,r3,r2
 5089a5c:	2144703a 	and	r2,r4,r5
 5089a60:	18c00104 	addi	r3,r3,4
 5089a64:	1000041e 	bne	r2,zero,5089a78 <_malloc_r+0x228>
 5089a68:	294b883a 	add	r5,r5,r5
 5089a6c:	2144703a 	and	r2,r4,r5
 5089a70:	18c00104 	addi	r3,r3,4
 5089a74:	103ffc26 	beq	r2,zero,5089a68 <__alt_data_end+0xfffbb868>
 5089a78:	023fff04 	movi	r8,-4
 5089a7c:	01c003c4 	movi	r7,15
 5089a80:	18c5883a 	add	r2,r3,r3
 5089a84:	1085883a 	add	r2,r2,r2
 5089a88:	1085883a 	add	r2,r2,r2
 5089a8c:	9895883a 	add	r10,r19,r2
 5089a90:	52c00304 	addi	r11,r10,12
 5089a94:	1819883a 	mov	r12,r3
 5089a98:	5c000017 	ldw	r16,0(r11)
 5089a9c:	59bffd04 	addi	r6,r11,-12
 5089aa0:	8180041e 	bne	r16,r6,5089ab4 <_malloc_r+0x264>
 5089aa4:	0000ce06 	br	5089de0 <_malloc_r+0x590>
 5089aa8:	2000d70e 	bge	r4,zero,5089e08 <_malloc_r+0x5b8>
 5089aac:	84000317 	ldw	r16,12(r16)
 5089ab0:	8180cb26 	beq	r16,r6,5089de0 <_malloc_r+0x590>
 5089ab4:	80800117 	ldw	r2,4(r16)
 5089ab8:	1204703a 	and	r2,r2,r8
 5089abc:	1449c83a 	sub	r4,r2,r17
 5089ac0:	393ff90e 	bge	r7,r4,5089aa8 <__alt_data_end+0xfffbb8a8>
 5089ac4:	80800317 	ldw	r2,12(r16)
 5089ac8:	80c00217 	ldw	r3,8(r16)
 5089acc:	89400054 	ori	r5,r17,1
 5089ad0:	81400115 	stw	r5,4(r16)
 5089ad4:	18800315 	stw	r2,12(r3)
 5089ad8:	10c00215 	stw	r3,8(r2)
 5089adc:	8463883a 	add	r17,r16,r17
 5089ae0:	9c400515 	stw	r17,20(r19)
 5089ae4:	9c400415 	stw	r17,16(r19)
 5089ae8:	20800054 	ori	r2,r4,1
 5089aec:	88800115 	stw	r2,4(r17)
 5089af0:	8a400315 	stw	r9,12(r17)
 5089af4:	8a400215 	stw	r9,8(r17)
 5089af8:	8923883a 	add	r17,r17,r4
 5089afc:	89000015 	stw	r4,0(r17)
 5089b00:	9009883a 	mov	r4,r18
 5089b04:	50925480 	call	5092548 <__malloc_unlock>
 5089b08:	80800204 	addi	r2,r16,8
 5089b0c:	003f7d06 	br	5089904 <__alt_data_end+0xfffbb704>
 5089b10:	00800304 	movi	r2,12
 5089b14:	90800015 	stw	r2,0(r18)
 5089b18:	0005883a 	mov	r2,zero
 5089b1c:	003f7906 	br	5089904 <__alt_data_end+0xfffbb704>
 5089b20:	01401f84 	movi	r5,126
 5089b24:	01c00fc4 	movi	r7,63
 5089b28:	003f8d06 	br	5089960 <__alt_data_end+0xfffbb760>
 5089b2c:	81000317 	ldw	r4,12(r16)
 5089b30:	003f6a06 	br	50898dc <__alt_data_end+0xfffbb6dc>
 5089b34:	81c5883a 	add	r2,r16,r7
 5089b38:	10c00117 	ldw	r3,4(r2)
 5089b3c:	9009883a 	mov	r4,r18
 5089b40:	18c00054 	ori	r3,r3,1
 5089b44:	10c00115 	stw	r3,4(r2)
 5089b48:	50925480 	call	5092548 <__malloc_unlock>
 5089b4c:	80800204 	addi	r2,r16,8
 5089b50:	003f6c06 	br	5089904 <__alt_data_end+0xfffbb704>
 5089b54:	9c000217 	ldw	r16,8(r19)
 5089b58:	00bfff04 	movi	r2,-4
 5089b5c:	85800117 	ldw	r22,4(r16)
 5089b60:	b0ac703a 	and	r22,r22,r2
 5089b64:	b4400336 	bltu	r22,r17,5089b74 <_malloc_r+0x324>
 5089b68:	b445c83a 	sub	r2,r22,r17
 5089b6c:	00c003c4 	movi	r3,15
 5089b70:	18805d16 	blt	r3,r2,5089ce8 <_malloc_r+0x498>
 5089b74:	05c14274 	movhi	r23,1289
 5089b78:	008142b4 	movhi	r2,1290
 5089b7c:	bddc5804 	addi	r23,r23,29024
 5089b80:	10a32c04 	addi	r2,r2,-29520
 5089b84:	15400017 	ldw	r21,0(r2)
 5089b88:	b9000017 	ldw	r4,0(r23)
 5089b8c:	00ffffc4 	movi	r3,-1
 5089b90:	858d883a 	add	r6,r16,r22
 5089b94:	8d6b883a 	add	r21,r17,r21
 5089b98:	20c0e426 	beq	r4,r3,5089f2c <_malloc_r+0x6dc>
 5089b9c:	ad4403c4 	addi	r21,r21,4111
 5089ba0:	00fc0004 	movi	r3,-4096
 5089ba4:	a8ea703a 	and	r21,r21,r3
 5089ba8:	9009883a 	mov	r4,r18
 5089bac:	a80b883a 	mov	r5,r21
 5089bb0:	d9800015 	stw	r6,0(sp)
 5089bb4:	508ba380 	call	508ba38 <_sbrk_r>
 5089bb8:	00ffffc4 	movi	r3,-1
 5089bbc:	1029883a 	mov	r20,r2
 5089bc0:	d9800017 	ldw	r6,0(sp)
 5089bc4:	10c0a426 	beq	r2,r3,5089e58 <_malloc_r+0x608>
 5089bc8:	1180a236 	bltu	r2,r6,5089e54 <_malloc_r+0x604>
 5089bcc:	070142b4 	movhi	fp,1290
 5089bd0:	e7233e04 	addi	fp,fp,-29448
 5089bd4:	e0c00017 	ldw	r3,0(fp)
 5089bd8:	a8c7883a 	add	r3,r21,r3
 5089bdc:	e0c00015 	stw	r3,0(fp)
 5089be0:	3500da26 	beq	r6,r20,5089f4c <_malloc_r+0x6fc>
 5089be4:	b9000017 	ldw	r4,0(r23)
 5089be8:	00bfffc4 	movi	r2,-1
 5089bec:	2080e426 	beq	r4,r2,5089f80 <_malloc_r+0x730>
 5089bf0:	a185c83a 	sub	r2,r20,r6
 5089bf4:	1885883a 	add	r2,r3,r2
 5089bf8:	e0800015 	stw	r2,0(fp)
 5089bfc:	a0c001cc 	andi	r3,r20,7
 5089c00:	1800b526 	beq	r3,zero,5089ed8 <_malloc_r+0x688>
 5089c04:	a0e9c83a 	sub	r20,r20,r3
 5089c08:	00840204 	movi	r2,4104
 5089c0c:	a5000204 	addi	r20,r20,8
 5089c10:	10c7c83a 	sub	r3,r2,r3
 5089c14:	a545883a 	add	r2,r20,r21
 5089c18:	1083ffcc 	andi	r2,r2,4095
 5089c1c:	18abc83a 	sub	r21,r3,r2
 5089c20:	9009883a 	mov	r4,r18
 5089c24:	a80b883a 	mov	r5,r21
 5089c28:	508ba380 	call	508ba38 <_sbrk_r>
 5089c2c:	00ffffc4 	movi	r3,-1
 5089c30:	10c0d026 	beq	r2,r3,5089f74 <_malloc_r+0x724>
 5089c34:	1507c83a 	sub	r3,r2,r20
 5089c38:	a8c7883a 	add	r3,r21,r3
 5089c3c:	18c00054 	ori	r3,r3,1
 5089c40:	e0800017 	ldw	r2,0(fp)
 5089c44:	9d000215 	stw	r20,8(r19)
 5089c48:	a0c00115 	stw	r3,4(r20)
 5089c4c:	a887883a 	add	r3,r21,r2
 5089c50:	e0c00015 	stw	r3,0(fp)
 5089c54:	84c00e26 	beq	r16,r19,5089c90 <_malloc_r+0x440>
 5089c58:	018003c4 	movi	r6,15
 5089c5c:	3580a02e 	bgeu	r6,r22,5089ee0 <_malloc_r+0x690>
 5089c60:	81400117 	ldw	r5,4(r16)
 5089c64:	013ffe04 	movi	r4,-8
 5089c68:	b0bffd04 	addi	r2,r22,-12
 5089c6c:	1104703a 	and	r2,r2,r4
 5089c70:	2900004c 	andi	r4,r5,1
 5089c74:	1108b03a 	or	r4,r2,r4
 5089c78:	81000115 	stw	r4,4(r16)
 5089c7c:	01400144 	movi	r5,5
 5089c80:	8089883a 	add	r4,r16,r2
 5089c84:	21400115 	stw	r5,4(r4)
 5089c88:	21400215 	stw	r5,8(r4)
 5089c8c:	3080c036 	bltu	r6,r2,5089f90 <_malloc_r+0x740>
 5089c90:	008142b4 	movhi	r2,1290
 5089c94:	10a32b04 	addi	r2,r2,-29524
 5089c98:	11000017 	ldw	r4,0(r2)
 5089c9c:	20c0012e 	bgeu	r4,r3,5089ca4 <_malloc_r+0x454>
 5089ca0:	10c00015 	stw	r3,0(r2)
 5089ca4:	008142b4 	movhi	r2,1290
 5089ca8:	10a32a04 	addi	r2,r2,-29528
 5089cac:	11000017 	ldw	r4,0(r2)
 5089cb0:	9c000217 	ldw	r16,8(r19)
 5089cb4:	20c0012e 	bgeu	r4,r3,5089cbc <_malloc_r+0x46c>
 5089cb8:	10c00015 	stw	r3,0(r2)
 5089cbc:	80c00117 	ldw	r3,4(r16)
 5089cc0:	00bfff04 	movi	r2,-4
 5089cc4:	1886703a 	and	r3,r3,r2
 5089cc8:	1c45c83a 	sub	r2,r3,r17
 5089ccc:	1c400236 	bltu	r3,r17,5089cd8 <_malloc_r+0x488>
 5089cd0:	00c003c4 	movi	r3,15
 5089cd4:	18800416 	blt	r3,r2,5089ce8 <_malloc_r+0x498>
 5089cd8:	9009883a 	mov	r4,r18
 5089cdc:	50925480 	call	5092548 <__malloc_unlock>
 5089ce0:	0005883a 	mov	r2,zero
 5089ce4:	003f0706 	br	5089904 <__alt_data_end+0xfffbb704>
 5089ce8:	88c00054 	ori	r3,r17,1
 5089cec:	80c00115 	stw	r3,4(r16)
 5089cf0:	8463883a 	add	r17,r16,r17
 5089cf4:	10800054 	ori	r2,r2,1
 5089cf8:	9c400215 	stw	r17,8(r19)
 5089cfc:	88800115 	stw	r2,4(r17)
 5089d00:	9009883a 	mov	r4,r18
 5089d04:	50925480 	call	5092548 <__malloc_unlock>
 5089d08:	80800204 	addi	r2,r16,8
 5089d0c:	003efd06 	br	5089904 <__alt_data_end+0xfffbb704>
 5089d10:	00800504 	movi	r2,20
 5089d14:	10c0482e 	bgeu	r2,r3,5089e38 <_malloc_r+0x5e8>
 5089d18:	00801504 	movi	r2,84
 5089d1c:	10c06836 	bltu	r2,r3,5089ec0 <_malloc_r+0x670>
 5089d20:	8806d33a 	srli	r3,r17,12
 5089d24:	19c01b84 	addi	r7,r3,110
 5089d28:	39cb883a 	add	r5,r7,r7
 5089d2c:	003f0c06 	br	5089960 <__alt_data_end+0xfffbb760>
 5089d30:	3804d27a 	srli	r2,r7,9
 5089d34:	01000104 	movi	r4,4
 5089d38:	2080422e 	bgeu	r4,r2,5089e44 <_malloc_r+0x5f4>
 5089d3c:	01000504 	movi	r4,20
 5089d40:	20807c36 	bltu	r4,r2,5089f34 <_malloc_r+0x6e4>
 5089d44:	110016c4 	addi	r4,r2,91
 5089d48:	210b883a 	add	r5,r4,r4
 5089d4c:	294b883a 	add	r5,r5,r5
 5089d50:	294b883a 	add	r5,r5,r5
 5089d54:	994b883a 	add	r5,r19,r5
 5089d58:	28800217 	ldw	r2,8(r5)
 5089d5c:	02014274 	movhi	r8,1289
 5089d60:	4216d104 	addi	r8,r8,23364
 5089d64:	11406326 	beq	r2,r5,5089ef4 <_malloc_r+0x6a4>
 5089d68:	01bfff04 	movi	r6,-4
 5089d6c:	11000117 	ldw	r4,4(r2)
 5089d70:	2188703a 	and	r4,r4,r6
 5089d74:	3900022e 	bgeu	r7,r4,5089d80 <_malloc_r+0x530>
 5089d78:	10800217 	ldw	r2,8(r2)
 5089d7c:	28bffb1e 	bne	r5,r2,5089d6c <__alt_data_end+0xfffbbb6c>
 5089d80:	11800317 	ldw	r6,12(r2)
 5089d84:	99000117 	ldw	r4,4(r19)
 5089d88:	81800315 	stw	r6,12(r16)
 5089d8c:	80800215 	stw	r2,8(r16)
 5089d90:	34000215 	stw	r16,8(r6)
 5089d94:	14000315 	stw	r16,12(r2)
 5089d98:	003f2706 	br	5089a38 <__alt_data_end+0xfffbb838>
 5089d9c:	88c00054 	ori	r3,r17,1
 5089da0:	80c00115 	stw	r3,4(r16)
 5089da4:	8463883a 	add	r17,r16,r17
 5089da8:	34400515 	stw	r17,20(r6)
 5089dac:	34400415 	stw	r17,16(r6)
 5089db0:	10c00054 	ori	r3,r2,1
 5089db4:	8a400315 	stw	r9,12(r17)
 5089db8:	8a400215 	stw	r9,8(r17)
 5089dbc:	88c00115 	stw	r3,4(r17)
 5089dc0:	88a3883a 	add	r17,r17,r2
 5089dc4:	88800015 	stw	r2,0(r17)
 5089dc8:	9009883a 	mov	r4,r18
 5089dcc:	50925480 	call	5092548 <__malloc_unlock>
 5089dd0:	80800204 	addi	r2,r16,8
 5089dd4:	003ecb06 	br	5089904 <__alt_data_end+0xfffbb704>
 5089dd8:	31000117 	ldw	r4,4(r6)
 5089ddc:	003f1606 	br	5089a38 <__alt_data_end+0xfffbb838>
 5089de0:	63000044 	addi	r12,r12,1
 5089de4:	608000cc 	andi	r2,r12,3
 5089de8:	5ac00204 	addi	r11,r11,8
 5089dec:	103f2a1e 	bne	r2,zero,5089a98 <__alt_data_end+0xfffbb898>
 5089df0:	00002106 	br	5089e78 <_malloc_r+0x628>
 5089df4:	80800204 	addi	r2,r16,8
 5089df8:	84000517 	ldw	r16,20(r16)
 5089dfc:	143eb31e 	bne	r2,r16,50898cc <__alt_data_end+0xfffbb6cc>
 5089e00:	18c00084 	addi	r3,r3,2
 5089e04:	003eec06 	br	50899b8 <__alt_data_end+0xfffbb7b8>
 5089e08:	8085883a 	add	r2,r16,r2
 5089e0c:	10c00117 	ldw	r3,4(r2)
 5089e10:	81000317 	ldw	r4,12(r16)
 5089e14:	81400217 	ldw	r5,8(r16)
 5089e18:	18c00054 	ori	r3,r3,1
 5089e1c:	10c00115 	stw	r3,4(r2)
 5089e20:	29000315 	stw	r4,12(r5)
 5089e24:	21400215 	stw	r5,8(r4)
 5089e28:	9009883a 	mov	r4,r18
 5089e2c:	50925480 	call	5092548 <__malloc_unlock>
 5089e30:	80800204 	addi	r2,r16,8
 5089e34:	003eb306 	br	5089904 <__alt_data_end+0xfffbb704>
 5089e38:	19c016c4 	addi	r7,r3,91
 5089e3c:	39cb883a 	add	r5,r7,r7
 5089e40:	003ec706 	br	5089960 <__alt_data_end+0xfffbb760>
 5089e44:	3804d1ba 	srli	r2,r7,6
 5089e48:	11000e04 	addi	r4,r2,56
 5089e4c:	210b883a 	add	r5,r4,r4
 5089e50:	003fbe06 	br	5089d4c <__alt_data_end+0xfffbbb4c>
 5089e54:	84ff5d26 	beq	r16,r19,5089bcc <__alt_data_end+0xfffbb9cc>
 5089e58:	9c000217 	ldw	r16,8(r19)
 5089e5c:	00bfff04 	movi	r2,-4
 5089e60:	80c00117 	ldw	r3,4(r16)
 5089e64:	1886703a 	and	r3,r3,r2
 5089e68:	003f9706 	br	5089cc8 <__alt_data_end+0xfffbbac8>
 5089e6c:	52800017 	ldw	r10,0(r10)
 5089e70:	18ffffc4 	addi	r3,r3,-1
 5089e74:	50805c1e 	bne	r10,r2,5089fe8 <_malloc_r+0x798>
 5089e78:	190000cc 	andi	r4,r3,3
 5089e7c:	50bffe04 	addi	r2,r10,-8
 5089e80:	203ffa1e 	bne	r4,zero,5089e6c <__alt_data_end+0xfffbbc6c>
 5089e84:	98800117 	ldw	r2,4(r19)
 5089e88:	0146303a 	nor	r3,zero,r5
 5089e8c:	1884703a 	and	r2,r3,r2
 5089e90:	98800115 	stw	r2,4(r19)
 5089e94:	294b883a 	add	r5,r5,r5
 5089e98:	117f2e36 	bltu	r2,r5,5089b54 <__alt_data_end+0xfffbb954>
 5089e9c:	283f2d26 	beq	r5,zero,5089b54 <__alt_data_end+0xfffbb954>
 5089ea0:	1146703a 	and	r3,r2,r5
 5089ea4:	1800521e 	bne	r3,zero,5089ff0 <_malloc_r+0x7a0>
 5089ea8:	6007883a 	mov	r3,r12
 5089eac:	294b883a 	add	r5,r5,r5
 5089eb0:	1148703a 	and	r4,r2,r5
 5089eb4:	18c00104 	addi	r3,r3,4
 5089eb8:	203ffc26 	beq	r4,zero,5089eac <__alt_data_end+0xfffbbcac>
 5089ebc:	003ef006 	br	5089a80 <__alt_data_end+0xfffbb880>
 5089ec0:	00805504 	movi	r2,340
 5089ec4:	10c01336 	bltu	r2,r3,5089f14 <_malloc_r+0x6c4>
 5089ec8:	8806d3fa 	srli	r3,r17,15
 5089ecc:	19c01dc4 	addi	r7,r3,119
 5089ed0:	39cb883a 	add	r5,r7,r7
 5089ed4:	003ea206 	br	5089960 <__alt_data_end+0xfffbb760>
 5089ed8:	00c40004 	movi	r3,4096
 5089edc:	003f4d06 	br	5089c14 <__alt_data_end+0xfffbba14>
 5089ee0:	00800044 	movi	r2,1
 5089ee4:	a0800115 	stw	r2,4(r20)
 5089ee8:	a021883a 	mov	r16,r20
 5089eec:	0007883a 	mov	r3,zero
 5089ef0:	003f7506 	br	5089cc8 <__alt_data_end+0xfffbbac8>
 5089ef4:	200bd0ba 	srai	r5,r4,2
 5089ef8:	01800044 	movi	r6,1
 5089efc:	41000117 	ldw	r4,4(r8)
 5089f00:	314a983a 	sll	r5,r6,r5
 5089f04:	100d883a 	mov	r6,r2
 5089f08:	2908b03a 	or	r4,r5,r4
 5089f0c:	41000115 	stw	r4,4(r8)
 5089f10:	003f9d06 	br	5089d88 <__alt_data_end+0xfffbbb88>
 5089f14:	00815504 	movi	r2,1364
 5089f18:	10c01336 	bltu	r2,r3,5089f68 <_malloc_r+0x718>
 5089f1c:	8806d4ba 	srli	r3,r17,18
 5089f20:	19c01f04 	addi	r7,r3,124
 5089f24:	39cb883a 	add	r5,r7,r7
 5089f28:	003e8d06 	br	5089960 <__alt_data_end+0xfffbb760>
 5089f2c:	ad400404 	addi	r21,r21,16
 5089f30:	003f1d06 	br	5089ba8 <__alt_data_end+0xfffbb9a8>
 5089f34:	01001504 	movi	r4,84
 5089f38:	20801c36 	bltu	r4,r2,5089fac <_malloc_r+0x75c>
 5089f3c:	3804d33a 	srli	r2,r7,12
 5089f40:	11001b84 	addi	r4,r2,110
 5089f44:	210b883a 	add	r5,r4,r4
 5089f48:	003f8006 	br	5089d4c <__alt_data_end+0xfffbbb4c>
 5089f4c:	3083ffcc 	andi	r2,r6,4095
 5089f50:	103f241e 	bne	r2,zero,5089be4 <__alt_data_end+0xfffbb9e4>
 5089f54:	99000217 	ldw	r4,8(r19)
 5089f58:	ad85883a 	add	r2,r21,r22
 5089f5c:	10800054 	ori	r2,r2,1
 5089f60:	20800115 	stw	r2,4(r4)
 5089f64:	003f4a06 	br	5089c90 <__alt_data_end+0xfffbba90>
 5089f68:	01403f04 	movi	r5,252
 5089f6c:	01c01f84 	movi	r7,126
 5089f70:	003e7b06 	br	5089960 <__alt_data_end+0xfffbb760>
 5089f74:	00c00044 	movi	r3,1
 5089f78:	002b883a 	mov	r21,zero
 5089f7c:	003f3006 	br	5089c40 <__alt_data_end+0xfffbba40>
 5089f80:	00814274 	movhi	r2,1289
 5089f84:	109c5804 	addi	r2,r2,29024
 5089f88:	15000015 	stw	r20,0(r2)
 5089f8c:	003f1b06 	br	5089bfc <__alt_data_end+0xfffbb9fc>
 5089f90:	9009883a 	mov	r4,r18
 5089f94:	81400204 	addi	r5,r16,8
 5089f98:	5088cb40 	call	5088cb4 <_free_r>
 5089f9c:	008142b4 	movhi	r2,1290
 5089fa0:	10a33e04 	addi	r2,r2,-29448
 5089fa4:	10c00017 	ldw	r3,0(r2)
 5089fa8:	003f3906 	br	5089c90 <__alt_data_end+0xfffbba90>
 5089fac:	01005504 	movi	r4,340
 5089fb0:	20800436 	bltu	r4,r2,5089fc4 <_malloc_r+0x774>
 5089fb4:	3804d3fa 	srli	r2,r7,15
 5089fb8:	11001dc4 	addi	r4,r2,119
 5089fbc:	210b883a 	add	r5,r4,r4
 5089fc0:	003f6206 	br	5089d4c <__alt_data_end+0xfffbbb4c>
 5089fc4:	01015504 	movi	r4,1364
 5089fc8:	20800436 	bltu	r4,r2,5089fdc <_malloc_r+0x78c>
 5089fcc:	3804d4ba 	srli	r2,r7,18
 5089fd0:	11001f04 	addi	r4,r2,124
 5089fd4:	210b883a 	add	r5,r4,r4
 5089fd8:	003f5c06 	br	5089d4c <__alt_data_end+0xfffbbb4c>
 5089fdc:	01403f04 	movi	r5,252
 5089fe0:	01001f84 	movi	r4,126
 5089fe4:	003f5906 	br	5089d4c <__alt_data_end+0xfffbbb4c>
 5089fe8:	98800117 	ldw	r2,4(r19)
 5089fec:	003fa906 	br	5089e94 <__alt_data_end+0xfffbbc94>
 5089ff0:	6007883a 	mov	r3,r12
 5089ff4:	003ea206 	br	5089a80 <__alt_data_end+0xfffbb880>

05089ff8 <memchr>:
 5089ff8:	208000cc 	andi	r2,r4,3
 5089ffc:	280f883a 	mov	r7,r5
 508a000:	10003526 	beq	r2,zero,508a0d8 <memchr+0xe0>
 508a004:	30bfffc4 	addi	r2,r6,-1
 508a008:	30001b26 	beq	r6,zero,508a078 <memchr+0x80>
 508a00c:	21800003 	ldbu	r6,0(r4)
 508a010:	28c03fcc 	andi	r3,r5,255
 508a014:	30c01a26 	beq	r6,r3,508a080 <memchr+0x88>
 508a018:	180d883a 	mov	r6,r3
 508a01c:	00000406 	br	508a030 <memchr+0x38>
 508a020:	10001526 	beq	r2,zero,508a078 <memchr+0x80>
 508a024:	20c00003 	ldbu	r3,0(r4)
 508a028:	10bfffc4 	addi	r2,r2,-1
 508a02c:	19801426 	beq	r3,r6,508a080 <memchr+0x88>
 508a030:	21000044 	addi	r4,r4,1
 508a034:	20c000cc 	andi	r3,r4,3
 508a038:	183ff91e 	bne	r3,zero,508a020 <__alt_data_end+0xfffbbe20>
 508a03c:	024000c4 	movi	r9,3
 508a040:	48801136 	bltu	r9,r2,508a088 <memchr+0x90>
 508a044:	10000c26 	beq	r2,zero,508a078 <memchr+0x80>
 508a048:	20c00003 	ldbu	r3,0(r4)
 508a04c:	29403fcc 	andi	r5,r5,255
 508a050:	19400b26 	beq	r3,r5,508a080 <memchr+0x88>
 508a054:	20c00044 	addi	r3,r4,1
 508a058:	2085883a 	add	r2,r4,r2
 508a05c:	39803fcc 	andi	r6,r7,255
 508a060:	00000306 	br	508a070 <memchr+0x78>
 508a064:	18c00044 	addi	r3,r3,1
 508a068:	197fffc3 	ldbu	r5,-1(r3)
 508a06c:	29800426 	beq	r5,r6,508a080 <memchr+0x88>
 508a070:	1809883a 	mov	r4,r3
 508a074:	18bffb1e 	bne	r3,r2,508a064 <__alt_data_end+0xfffbbe64>
 508a078:	0005883a 	mov	r2,zero
 508a07c:	f800283a 	ret
 508a080:	2005883a 	mov	r2,r4
 508a084:	f800283a 	ret
 508a088:	28c03fcc 	andi	r3,r5,255
 508a08c:	1810923a 	slli	r8,r3,8
 508a090:	02ffbff4 	movhi	r11,65279
 508a094:	02a02074 	movhi	r10,32897
 508a098:	40c6b03a 	or	r3,r8,r3
 508a09c:	1810943a 	slli	r8,r3,16
 508a0a0:	5affbfc4 	addi	r11,r11,-257
 508a0a4:	52a02004 	addi	r10,r10,-32640
 508a0a8:	40d0b03a 	or	r8,r8,r3
 508a0ac:	20c00017 	ldw	r3,0(r4)
 508a0b0:	40c6f03a 	xor	r3,r8,r3
 508a0b4:	1acd883a 	add	r6,r3,r11
 508a0b8:	00c6303a 	nor	r3,zero,r3
 508a0bc:	30c6703a 	and	r3,r6,r3
 508a0c0:	1a86703a 	and	r3,r3,r10
 508a0c4:	183fdf1e 	bne	r3,zero,508a044 <__alt_data_end+0xfffbbe44>
 508a0c8:	10bfff04 	addi	r2,r2,-4
 508a0cc:	21000104 	addi	r4,r4,4
 508a0d0:	48bff636 	bltu	r9,r2,508a0ac <__alt_data_end+0xfffbbeac>
 508a0d4:	003fdb06 	br	508a044 <__alt_data_end+0xfffbbe44>
 508a0d8:	3005883a 	mov	r2,r6
 508a0dc:	003fd706 	br	508a03c <__alt_data_end+0xfffbbe3c>

0508a0e0 <memcpy>:
 508a0e0:	deffff04 	addi	sp,sp,-4
 508a0e4:	dc000015 	stw	r16,0(sp)
 508a0e8:	00c003c4 	movi	r3,15
 508a0ec:	2005883a 	mov	r2,r4
 508a0f0:	1980432e 	bgeu	r3,r6,508a200 <memcpy+0x120>
 508a0f4:	2146b03a 	or	r3,r4,r5
 508a0f8:	18c000cc 	andi	r3,r3,3
 508a0fc:	1800421e 	bne	r3,zero,508a208 <memcpy+0x128>
 508a100:	343ffc04 	addi	r16,r6,-16
 508a104:	8020d13a 	srli	r16,r16,4
 508a108:	28c00104 	addi	r3,r5,4
 508a10c:	23400104 	addi	r13,r4,4
 508a110:	801e913a 	slli	r15,r16,4
 508a114:	2b000204 	addi	r12,r5,8
 508a118:	22c00204 	addi	r11,r4,8
 508a11c:	7bc00504 	addi	r15,r15,20
 508a120:	2a800304 	addi	r10,r5,12
 508a124:	22400304 	addi	r9,r4,12
 508a128:	2bdf883a 	add	r15,r5,r15
 508a12c:	2811883a 	mov	r8,r5
 508a130:	200f883a 	mov	r7,r4
 508a134:	41000017 	ldw	r4,0(r8)
 508a138:	39c00404 	addi	r7,r7,16
 508a13c:	18c00404 	addi	r3,r3,16
 508a140:	393ffc15 	stw	r4,-16(r7)
 508a144:	1bbffc17 	ldw	r14,-16(r3)
 508a148:	6b400404 	addi	r13,r13,16
 508a14c:	5ac00404 	addi	r11,r11,16
 508a150:	6bbffc15 	stw	r14,-16(r13)
 508a154:	63800017 	ldw	r14,0(r12)
 508a158:	4a400404 	addi	r9,r9,16
 508a15c:	42000404 	addi	r8,r8,16
 508a160:	5bbffc15 	stw	r14,-16(r11)
 508a164:	53800017 	ldw	r14,0(r10)
 508a168:	63000404 	addi	r12,r12,16
 508a16c:	52800404 	addi	r10,r10,16
 508a170:	4bbffc15 	stw	r14,-16(r9)
 508a174:	1bffef1e 	bne	r3,r15,508a134 <__alt_data_end+0xfffbbf34>
 508a178:	81c00044 	addi	r7,r16,1
 508a17c:	380e913a 	slli	r7,r7,4
 508a180:	310003cc 	andi	r4,r6,15
 508a184:	02c000c4 	movi	r11,3
 508a188:	11c7883a 	add	r3,r2,r7
 508a18c:	29cb883a 	add	r5,r5,r7
 508a190:	59001f2e 	bgeu	r11,r4,508a210 <memcpy+0x130>
 508a194:	1813883a 	mov	r9,r3
 508a198:	2811883a 	mov	r8,r5
 508a19c:	200f883a 	mov	r7,r4
 508a1a0:	42800017 	ldw	r10,0(r8)
 508a1a4:	4a400104 	addi	r9,r9,4
 508a1a8:	39ffff04 	addi	r7,r7,-4
 508a1ac:	4abfff15 	stw	r10,-4(r9)
 508a1b0:	42000104 	addi	r8,r8,4
 508a1b4:	59fffa36 	bltu	r11,r7,508a1a0 <__alt_data_end+0xfffbbfa0>
 508a1b8:	213fff04 	addi	r4,r4,-4
 508a1bc:	2008d0ba 	srli	r4,r4,2
 508a1c0:	318000cc 	andi	r6,r6,3
 508a1c4:	21000044 	addi	r4,r4,1
 508a1c8:	2109883a 	add	r4,r4,r4
 508a1cc:	2109883a 	add	r4,r4,r4
 508a1d0:	1907883a 	add	r3,r3,r4
 508a1d4:	290b883a 	add	r5,r5,r4
 508a1d8:	30000626 	beq	r6,zero,508a1f4 <memcpy+0x114>
 508a1dc:	198d883a 	add	r6,r3,r6
 508a1e0:	29c00003 	ldbu	r7,0(r5)
 508a1e4:	18c00044 	addi	r3,r3,1
 508a1e8:	29400044 	addi	r5,r5,1
 508a1ec:	19ffffc5 	stb	r7,-1(r3)
 508a1f0:	19bffb1e 	bne	r3,r6,508a1e0 <__alt_data_end+0xfffbbfe0>
 508a1f4:	dc000017 	ldw	r16,0(sp)
 508a1f8:	dec00104 	addi	sp,sp,4
 508a1fc:	f800283a 	ret
 508a200:	2007883a 	mov	r3,r4
 508a204:	003ff406 	br	508a1d8 <__alt_data_end+0xfffbbfd8>
 508a208:	2007883a 	mov	r3,r4
 508a20c:	003ff306 	br	508a1dc <__alt_data_end+0xfffbbfdc>
 508a210:	200d883a 	mov	r6,r4
 508a214:	003ff006 	br	508a1d8 <__alt_data_end+0xfffbbfd8>

0508a218 <memmove>:
 508a218:	2005883a 	mov	r2,r4
 508a21c:	29000b2e 	bgeu	r5,r4,508a24c <memmove+0x34>
 508a220:	298f883a 	add	r7,r5,r6
 508a224:	21c0092e 	bgeu	r4,r7,508a24c <memmove+0x34>
 508a228:	2187883a 	add	r3,r4,r6
 508a22c:	198bc83a 	sub	r5,r3,r6
 508a230:	30004b26 	beq	r6,zero,508a360 <memmove+0x148>
 508a234:	39ffffc4 	addi	r7,r7,-1
 508a238:	39000003 	ldbu	r4,0(r7)
 508a23c:	18ffffc4 	addi	r3,r3,-1
 508a240:	19000005 	stb	r4,0(r3)
 508a244:	197ffb1e 	bne	r3,r5,508a234 <__alt_data_end+0xfffbc034>
 508a248:	f800283a 	ret
 508a24c:	00c003c4 	movi	r3,15
 508a250:	1980412e 	bgeu	r3,r6,508a358 <memmove+0x140>
 508a254:	1146b03a 	or	r3,r2,r5
 508a258:	18c000cc 	andi	r3,r3,3
 508a25c:	1800411e 	bne	r3,zero,508a364 <memmove+0x14c>
 508a260:	33fffc04 	addi	r15,r6,-16
 508a264:	781ed13a 	srli	r15,r15,4
 508a268:	28c00104 	addi	r3,r5,4
 508a26c:	13400104 	addi	r13,r2,4
 508a270:	781c913a 	slli	r14,r15,4
 508a274:	2b000204 	addi	r12,r5,8
 508a278:	12c00204 	addi	r11,r2,8
 508a27c:	73800504 	addi	r14,r14,20
 508a280:	2a800304 	addi	r10,r5,12
 508a284:	12400304 	addi	r9,r2,12
 508a288:	2b9d883a 	add	r14,r5,r14
 508a28c:	2811883a 	mov	r8,r5
 508a290:	100f883a 	mov	r7,r2
 508a294:	41000017 	ldw	r4,0(r8)
 508a298:	39c00404 	addi	r7,r7,16
 508a29c:	18c00404 	addi	r3,r3,16
 508a2a0:	393ffc15 	stw	r4,-16(r7)
 508a2a4:	193ffc17 	ldw	r4,-16(r3)
 508a2a8:	6b400404 	addi	r13,r13,16
 508a2ac:	5ac00404 	addi	r11,r11,16
 508a2b0:	693ffc15 	stw	r4,-16(r13)
 508a2b4:	61000017 	ldw	r4,0(r12)
 508a2b8:	4a400404 	addi	r9,r9,16
 508a2bc:	42000404 	addi	r8,r8,16
 508a2c0:	593ffc15 	stw	r4,-16(r11)
 508a2c4:	51000017 	ldw	r4,0(r10)
 508a2c8:	63000404 	addi	r12,r12,16
 508a2cc:	52800404 	addi	r10,r10,16
 508a2d0:	493ffc15 	stw	r4,-16(r9)
 508a2d4:	1bbfef1e 	bne	r3,r14,508a294 <__alt_data_end+0xfffbc094>
 508a2d8:	79000044 	addi	r4,r15,1
 508a2dc:	2008913a 	slli	r4,r4,4
 508a2e0:	328003cc 	andi	r10,r6,15
 508a2e4:	02c000c4 	movi	r11,3
 508a2e8:	1107883a 	add	r3,r2,r4
 508a2ec:	290b883a 	add	r5,r5,r4
 508a2f0:	5a801e2e 	bgeu	r11,r10,508a36c <memmove+0x154>
 508a2f4:	1813883a 	mov	r9,r3
 508a2f8:	2811883a 	mov	r8,r5
 508a2fc:	500f883a 	mov	r7,r10
 508a300:	41000017 	ldw	r4,0(r8)
 508a304:	4a400104 	addi	r9,r9,4
 508a308:	39ffff04 	addi	r7,r7,-4
 508a30c:	493fff15 	stw	r4,-4(r9)
 508a310:	42000104 	addi	r8,r8,4
 508a314:	59fffa36 	bltu	r11,r7,508a300 <__alt_data_end+0xfffbc100>
 508a318:	513fff04 	addi	r4,r10,-4
 508a31c:	2008d0ba 	srli	r4,r4,2
 508a320:	318000cc 	andi	r6,r6,3
 508a324:	21000044 	addi	r4,r4,1
 508a328:	2109883a 	add	r4,r4,r4
 508a32c:	2109883a 	add	r4,r4,r4
 508a330:	1907883a 	add	r3,r3,r4
 508a334:	290b883a 	add	r5,r5,r4
 508a338:	30000926 	beq	r6,zero,508a360 <memmove+0x148>
 508a33c:	198d883a 	add	r6,r3,r6
 508a340:	29c00003 	ldbu	r7,0(r5)
 508a344:	18c00044 	addi	r3,r3,1
 508a348:	29400044 	addi	r5,r5,1
 508a34c:	19ffffc5 	stb	r7,-1(r3)
 508a350:	19bffb1e 	bne	r3,r6,508a340 <__alt_data_end+0xfffbc140>
 508a354:	f800283a 	ret
 508a358:	1007883a 	mov	r3,r2
 508a35c:	003ff606 	br	508a338 <__alt_data_end+0xfffbc138>
 508a360:	f800283a 	ret
 508a364:	1007883a 	mov	r3,r2
 508a368:	003ff406 	br	508a33c <__alt_data_end+0xfffbc13c>
 508a36c:	500d883a 	mov	r6,r10
 508a370:	003ff106 	br	508a338 <__alt_data_end+0xfffbc138>

0508a374 <memset>:
 508a374:	20c000cc 	andi	r3,r4,3
 508a378:	2005883a 	mov	r2,r4
 508a37c:	18004326 	beq	r3,zero,508a48c <memset+0x118>
 508a380:	31ffffc4 	addi	r7,r6,-1
 508a384:	30004026 	beq	r6,zero,508a488 <memset+0x114>
 508a388:	2813883a 	mov	r9,r5
 508a38c:	200d883a 	mov	r6,r4
 508a390:	2007883a 	mov	r3,r4
 508a394:	00000406 	br	508a3a8 <memset+0x34>
 508a398:	3a3fffc4 	addi	r8,r7,-1
 508a39c:	31800044 	addi	r6,r6,1
 508a3a0:	38003926 	beq	r7,zero,508a488 <memset+0x114>
 508a3a4:	400f883a 	mov	r7,r8
 508a3a8:	18c00044 	addi	r3,r3,1
 508a3ac:	32400005 	stb	r9,0(r6)
 508a3b0:	1a0000cc 	andi	r8,r3,3
 508a3b4:	403ff81e 	bne	r8,zero,508a398 <__alt_data_end+0xfffbc198>
 508a3b8:	010000c4 	movi	r4,3
 508a3bc:	21c02d2e 	bgeu	r4,r7,508a474 <memset+0x100>
 508a3c0:	29803fcc 	andi	r6,r5,255
 508a3c4:	3008923a 	slli	r4,r6,8
 508a3c8:	218cb03a 	or	r6,r4,r6
 508a3cc:	3008943a 	slli	r4,r6,16
 508a3d0:	218cb03a 	or	r6,r4,r6
 508a3d4:	010003c4 	movi	r4,15
 508a3d8:	21c0182e 	bgeu	r4,r7,508a43c <memset+0xc8>
 508a3dc:	3b3ffc04 	addi	r12,r7,-16
 508a3e0:	6018d13a 	srli	r12,r12,4
 508a3e4:	1a000104 	addi	r8,r3,4
 508a3e8:	1ac00204 	addi	r11,r3,8
 508a3ec:	6008913a 	slli	r4,r12,4
 508a3f0:	1a800304 	addi	r10,r3,12
 508a3f4:	1813883a 	mov	r9,r3
 508a3f8:	21000504 	addi	r4,r4,20
 508a3fc:	1909883a 	add	r4,r3,r4
 508a400:	49800015 	stw	r6,0(r9)
 508a404:	41800015 	stw	r6,0(r8)
 508a408:	59800015 	stw	r6,0(r11)
 508a40c:	51800015 	stw	r6,0(r10)
 508a410:	42000404 	addi	r8,r8,16
 508a414:	4a400404 	addi	r9,r9,16
 508a418:	5ac00404 	addi	r11,r11,16
 508a41c:	52800404 	addi	r10,r10,16
 508a420:	413ff71e 	bne	r8,r4,508a400 <__alt_data_end+0xfffbc200>
 508a424:	63000044 	addi	r12,r12,1
 508a428:	6018913a 	slli	r12,r12,4
 508a42c:	39c003cc 	andi	r7,r7,15
 508a430:	010000c4 	movi	r4,3
 508a434:	1b07883a 	add	r3,r3,r12
 508a438:	21c00e2e 	bgeu	r4,r7,508a474 <memset+0x100>
 508a43c:	1813883a 	mov	r9,r3
 508a440:	3811883a 	mov	r8,r7
 508a444:	010000c4 	movi	r4,3
 508a448:	49800015 	stw	r6,0(r9)
 508a44c:	423fff04 	addi	r8,r8,-4
 508a450:	4a400104 	addi	r9,r9,4
 508a454:	223ffc36 	bltu	r4,r8,508a448 <__alt_data_end+0xfffbc248>
 508a458:	393fff04 	addi	r4,r7,-4
 508a45c:	2008d0ba 	srli	r4,r4,2
 508a460:	39c000cc 	andi	r7,r7,3
 508a464:	21000044 	addi	r4,r4,1
 508a468:	2109883a 	add	r4,r4,r4
 508a46c:	2109883a 	add	r4,r4,r4
 508a470:	1907883a 	add	r3,r3,r4
 508a474:	38000426 	beq	r7,zero,508a488 <memset+0x114>
 508a478:	19cf883a 	add	r7,r3,r7
 508a47c:	19400005 	stb	r5,0(r3)
 508a480:	18c00044 	addi	r3,r3,1
 508a484:	19fffd1e 	bne	r3,r7,508a47c <__alt_data_end+0xfffbc27c>
 508a488:	f800283a 	ret
 508a48c:	2007883a 	mov	r3,r4
 508a490:	300f883a 	mov	r7,r6
 508a494:	003fc806 	br	508a3b8 <__alt_data_end+0xfffbc1b8>

0508a498 <_Balloc>:
 508a498:	20801317 	ldw	r2,76(r4)
 508a49c:	defffc04 	addi	sp,sp,-16
 508a4a0:	dc400115 	stw	r17,4(sp)
 508a4a4:	dc000015 	stw	r16,0(sp)
 508a4a8:	dfc00315 	stw	ra,12(sp)
 508a4ac:	dc800215 	stw	r18,8(sp)
 508a4b0:	2023883a 	mov	r17,r4
 508a4b4:	2821883a 	mov	r16,r5
 508a4b8:	10000f26 	beq	r2,zero,508a4f8 <_Balloc+0x60>
 508a4bc:	8407883a 	add	r3,r16,r16
 508a4c0:	18c7883a 	add	r3,r3,r3
 508a4c4:	10c7883a 	add	r3,r2,r3
 508a4c8:	18800017 	ldw	r2,0(r3)
 508a4cc:	10001126 	beq	r2,zero,508a514 <_Balloc+0x7c>
 508a4d0:	11000017 	ldw	r4,0(r2)
 508a4d4:	19000015 	stw	r4,0(r3)
 508a4d8:	10000415 	stw	zero,16(r2)
 508a4dc:	10000315 	stw	zero,12(r2)
 508a4e0:	dfc00317 	ldw	ra,12(sp)
 508a4e4:	dc800217 	ldw	r18,8(sp)
 508a4e8:	dc400117 	ldw	r17,4(sp)
 508a4ec:	dc000017 	ldw	r16,0(sp)
 508a4f0:	dec00404 	addi	sp,sp,16
 508a4f4:	f800283a 	ret
 508a4f8:	01400104 	movi	r5,4
 508a4fc:	01800844 	movi	r6,33
 508a500:	508e3e00 	call	508e3e0 <_calloc_r>
 508a504:	88801315 	stw	r2,76(r17)
 508a508:	103fec1e 	bne	r2,zero,508a4bc <__alt_data_end+0xfffbc2bc>
 508a50c:	0005883a 	mov	r2,zero
 508a510:	003ff306 	br	508a4e0 <__alt_data_end+0xfffbc2e0>
 508a514:	01400044 	movi	r5,1
 508a518:	2c24983a 	sll	r18,r5,r16
 508a51c:	8809883a 	mov	r4,r17
 508a520:	91800144 	addi	r6,r18,5
 508a524:	318d883a 	add	r6,r6,r6
 508a528:	318d883a 	add	r6,r6,r6
 508a52c:	508e3e00 	call	508e3e0 <_calloc_r>
 508a530:	103ff626 	beq	r2,zero,508a50c <__alt_data_end+0xfffbc30c>
 508a534:	14000115 	stw	r16,4(r2)
 508a538:	14800215 	stw	r18,8(r2)
 508a53c:	003fe606 	br	508a4d8 <__alt_data_end+0xfffbc2d8>

0508a540 <_Bfree>:
 508a540:	28000826 	beq	r5,zero,508a564 <_Bfree+0x24>
 508a544:	28c00117 	ldw	r3,4(r5)
 508a548:	20801317 	ldw	r2,76(r4)
 508a54c:	18c7883a 	add	r3,r3,r3
 508a550:	18c7883a 	add	r3,r3,r3
 508a554:	10c5883a 	add	r2,r2,r3
 508a558:	10c00017 	ldw	r3,0(r2)
 508a55c:	28c00015 	stw	r3,0(r5)
 508a560:	11400015 	stw	r5,0(r2)
 508a564:	f800283a 	ret

0508a568 <__multadd>:
 508a568:	defffa04 	addi	sp,sp,-24
 508a56c:	dc000115 	stw	r16,4(sp)
 508a570:	2c000417 	ldw	r16,16(r5)
 508a574:	dc800315 	stw	r18,12(sp)
 508a578:	dc400215 	stw	r17,8(sp)
 508a57c:	dfc00515 	stw	ra,20(sp)
 508a580:	dcc00415 	stw	r19,16(sp)
 508a584:	2823883a 	mov	r17,r5
 508a588:	2025883a 	mov	r18,r4
 508a58c:	2a400504 	addi	r9,r5,20
 508a590:	0015883a 	mov	r10,zero
 508a594:	4a000017 	ldw	r8,0(r9)
 508a598:	4a400104 	addi	r9,r9,4
 508a59c:	52800044 	addi	r10,r10,1
 508a5a0:	40ffffcc 	andi	r3,r8,65535
 508a5a4:	1987383a 	mul	r3,r3,r6
 508a5a8:	4010d43a 	srli	r8,r8,16
 508a5ac:	19cf883a 	add	r7,r3,r7
 508a5b0:	4191383a 	mul	r8,r8,r6
 508a5b4:	3816d43a 	srli	r11,r7,16
 508a5b8:	38ffffcc 	andi	r3,r7,65535
 508a5bc:	5a0f883a 	add	r7,r11,r8
 508a5c0:	3810943a 	slli	r8,r7,16
 508a5c4:	380ed43a 	srli	r7,r7,16
 508a5c8:	40c7883a 	add	r3,r8,r3
 508a5cc:	48ffff15 	stw	r3,-4(r9)
 508a5d0:	543ff016 	blt	r10,r16,508a594 <__alt_data_end+0xfffbc394>
 508a5d4:	38000926 	beq	r7,zero,508a5fc <__multadd+0x94>
 508a5d8:	88800217 	ldw	r2,8(r17)
 508a5dc:	80800f0e 	bge	r16,r2,508a61c <__multadd+0xb4>
 508a5e0:	80800144 	addi	r2,r16,5
 508a5e4:	1085883a 	add	r2,r2,r2
 508a5e8:	1085883a 	add	r2,r2,r2
 508a5ec:	8885883a 	add	r2,r17,r2
 508a5f0:	11c00015 	stw	r7,0(r2)
 508a5f4:	84000044 	addi	r16,r16,1
 508a5f8:	8c000415 	stw	r16,16(r17)
 508a5fc:	8805883a 	mov	r2,r17
 508a600:	dfc00517 	ldw	ra,20(sp)
 508a604:	dcc00417 	ldw	r19,16(sp)
 508a608:	dc800317 	ldw	r18,12(sp)
 508a60c:	dc400217 	ldw	r17,8(sp)
 508a610:	dc000117 	ldw	r16,4(sp)
 508a614:	dec00604 	addi	sp,sp,24
 508a618:	f800283a 	ret
 508a61c:	89400117 	ldw	r5,4(r17)
 508a620:	9009883a 	mov	r4,r18
 508a624:	d9c00015 	stw	r7,0(sp)
 508a628:	29400044 	addi	r5,r5,1
 508a62c:	508a4980 	call	508a498 <_Balloc>
 508a630:	89800417 	ldw	r6,16(r17)
 508a634:	89400304 	addi	r5,r17,12
 508a638:	11000304 	addi	r4,r2,12
 508a63c:	31800084 	addi	r6,r6,2
 508a640:	318d883a 	add	r6,r6,r6
 508a644:	318d883a 	add	r6,r6,r6
 508a648:	1027883a 	mov	r19,r2
 508a64c:	508a0e00 	call	508a0e0 <memcpy>
 508a650:	89000117 	ldw	r4,4(r17)
 508a654:	90c01317 	ldw	r3,76(r18)
 508a658:	d9c00017 	ldw	r7,0(sp)
 508a65c:	2109883a 	add	r4,r4,r4
 508a660:	2109883a 	add	r4,r4,r4
 508a664:	1907883a 	add	r3,r3,r4
 508a668:	18800017 	ldw	r2,0(r3)
 508a66c:	88800015 	stw	r2,0(r17)
 508a670:	1c400015 	stw	r17,0(r3)
 508a674:	9823883a 	mov	r17,r19
 508a678:	003fd906 	br	508a5e0 <__alt_data_end+0xfffbc3e0>

0508a67c <__s2b>:
 508a67c:	defff904 	addi	sp,sp,-28
 508a680:	dc400115 	stw	r17,4(sp)
 508a684:	dc000015 	stw	r16,0(sp)
 508a688:	2023883a 	mov	r17,r4
 508a68c:	2821883a 	mov	r16,r5
 508a690:	39000204 	addi	r4,r7,8
 508a694:	01400244 	movi	r5,9
 508a698:	dcc00315 	stw	r19,12(sp)
 508a69c:	dc800215 	stw	r18,8(sp)
 508a6a0:	dfc00615 	stw	ra,24(sp)
 508a6a4:	dd400515 	stw	r21,20(sp)
 508a6a8:	dd000415 	stw	r20,16(sp)
 508a6ac:	3825883a 	mov	r18,r7
 508a6b0:	3027883a 	mov	r19,r6
 508a6b4:	50827100 	call	5082710 <__divsi3>
 508a6b8:	00c00044 	movi	r3,1
 508a6bc:	000b883a 	mov	r5,zero
 508a6c0:	1880030e 	bge	r3,r2,508a6d0 <__s2b+0x54>
 508a6c4:	18c7883a 	add	r3,r3,r3
 508a6c8:	29400044 	addi	r5,r5,1
 508a6cc:	18bffd16 	blt	r3,r2,508a6c4 <__alt_data_end+0xfffbc4c4>
 508a6d0:	8809883a 	mov	r4,r17
 508a6d4:	508a4980 	call	508a498 <_Balloc>
 508a6d8:	d8c00717 	ldw	r3,28(sp)
 508a6dc:	10c00515 	stw	r3,20(r2)
 508a6e0:	00c00044 	movi	r3,1
 508a6e4:	10c00415 	stw	r3,16(r2)
 508a6e8:	00c00244 	movi	r3,9
 508a6ec:	1cc0210e 	bge	r3,r19,508a774 <__s2b+0xf8>
 508a6f0:	80eb883a 	add	r21,r16,r3
 508a6f4:	a829883a 	mov	r20,r21
 508a6f8:	84e1883a 	add	r16,r16,r19
 508a6fc:	a1c00007 	ldb	r7,0(r20)
 508a700:	8809883a 	mov	r4,r17
 508a704:	a5000044 	addi	r20,r20,1
 508a708:	100b883a 	mov	r5,r2
 508a70c:	01800284 	movi	r6,10
 508a710:	39fff404 	addi	r7,r7,-48
 508a714:	508a5680 	call	508a568 <__multadd>
 508a718:	a43ff81e 	bne	r20,r16,508a6fc <__alt_data_end+0xfffbc4fc>
 508a71c:	ace1883a 	add	r16,r21,r19
 508a720:	843ffe04 	addi	r16,r16,-8
 508a724:	9c800a0e 	bge	r19,r18,508a750 <__s2b+0xd4>
 508a728:	94e5c83a 	sub	r18,r18,r19
 508a72c:	84a5883a 	add	r18,r16,r18
 508a730:	81c00007 	ldb	r7,0(r16)
 508a734:	8809883a 	mov	r4,r17
 508a738:	84000044 	addi	r16,r16,1
 508a73c:	100b883a 	mov	r5,r2
 508a740:	01800284 	movi	r6,10
 508a744:	39fff404 	addi	r7,r7,-48
 508a748:	508a5680 	call	508a568 <__multadd>
 508a74c:	84bff81e 	bne	r16,r18,508a730 <__alt_data_end+0xfffbc530>
 508a750:	dfc00617 	ldw	ra,24(sp)
 508a754:	dd400517 	ldw	r21,20(sp)
 508a758:	dd000417 	ldw	r20,16(sp)
 508a75c:	dcc00317 	ldw	r19,12(sp)
 508a760:	dc800217 	ldw	r18,8(sp)
 508a764:	dc400117 	ldw	r17,4(sp)
 508a768:	dc000017 	ldw	r16,0(sp)
 508a76c:	dec00704 	addi	sp,sp,28
 508a770:	f800283a 	ret
 508a774:	84000284 	addi	r16,r16,10
 508a778:	1827883a 	mov	r19,r3
 508a77c:	003fe906 	br	508a724 <__alt_data_end+0xfffbc524>

0508a780 <__hi0bits>:
 508a780:	20bfffec 	andhi	r2,r4,65535
 508a784:	1000141e 	bne	r2,zero,508a7d8 <__hi0bits+0x58>
 508a788:	2008943a 	slli	r4,r4,16
 508a78c:	00800404 	movi	r2,16
 508a790:	20ffc02c 	andhi	r3,r4,65280
 508a794:	1800021e 	bne	r3,zero,508a7a0 <__hi0bits+0x20>
 508a798:	2008923a 	slli	r4,r4,8
 508a79c:	10800204 	addi	r2,r2,8
 508a7a0:	20fc002c 	andhi	r3,r4,61440
 508a7a4:	1800021e 	bne	r3,zero,508a7b0 <__hi0bits+0x30>
 508a7a8:	2008913a 	slli	r4,r4,4
 508a7ac:	10800104 	addi	r2,r2,4
 508a7b0:	20f0002c 	andhi	r3,r4,49152
 508a7b4:	1800031e 	bne	r3,zero,508a7c4 <__hi0bits+0x44>
 508a7b8:	2109883a 	add	r4,r4,r4
 508a7bc:	10800084 	addi	r2,r2,2
 508a7c0:	2109883a 	add	r4,r4,r4
 508a7c4:	20000316 	blt	r4,zero,508a7d4 <__hi0bits+0x54>
 508a7c8:	2110002c 	andhi	r4,r4,16384
 508a7cc:	2000041e 	bne	r4,zero,508a7e0 <__hi0bits+0x60>
 508a7d0:	00800804 	movi	r2,32
 508a7d4:	f800283a 	ret
 508a7d8:	0005883a 	mov	r2,zero
 508a7dc:	003fec06 	br	508a790 <__alt_data_end+0xfffbc590>
 508a7e0:	10800044 	addi	r2,r2,1
 508a7e4:	f800283a 	ret

0508a7e8 <__lo0bits>:
 508a7e8:	20c00017 	ldw	r3,0(r4)
 508a7ec:	188001cc 	andi	r2,r3,7
 508a7f0:	10000826 	beq	r2,zero,508a814 <__lo0bits+0x2c>
 508a7f4:	1880004c 	andi	r2,r3,1
 508a7f8:	1000211e 	bne	r2,zero,508a880 <__lo0bits+0x98>
 508a7fc:	1880008c 	andi	r2,r3,2
 508a800:	1000211e 	bne	r2,zero,508a888 <__lo0bits+0xa0>
 508a804:	1806d0ba 	srli	r3,r3,2
 508a808:	00800084 	movi	r2,2
 508a80c:	20c00015 	stw	r3,0(r4)
 508a810:	f800283a 	ret
 508a814:	18bfffcc 	andi	r2,r3,65535
 508a818:	10001326 	beq	r2,zero,508a868 <__lo0bits+0x80>
 508a81c:	0005883a 	mov	r2,zero
 508a820:	19403fcc 	andi	r5,r3,255
 508a824:	2800021e 	bne	r5,zero,508a830 <__lo0bits+0x48>
 508a828:	1806d23a 	srli	r3,r3,8
 508a82c:	10800204 	addi	r2,r2,8
 508a830:	194003cc 	andi	r5,r3,15
 508a834:	2800021e 	bne	r5,zero,508a840 <__lo0bits+0x58>
 508a838:	1806d13a 	srli	r3,r3,4
 508a83c:	10800104 	addi	r2,r2,4
 508a840:	194000cc 	andi	r5,r3,3
 508a844:	2800021e 	bne	r5,zero,508a850 <__lo0bits+0x68>
 508a848:	1806d0ba 	srli	r3,r3,2
 508a84c:	10800084 	addi	r2,r2,2
 508a850:	1940004c 	andi	r5,r3,1
 508a854:	2800081e 	bne	r5,zero,508a878 <__lo0bits+0x90>
 508a858:	1806d07a 	srli	r3,r3,1
 508a85c:	1800051e 	bne	r3,zero,508a874 <__lo0bits+0x8c>
 508a860:	00800804 	movi	r2,32
 508a864:	f800283a 	ret
 508a868:	1806d43a 	srli	r3,r3,16
 508a86c:	00800404 	movi	r2,16
 508a870:	003feb06 	br	508a820 <__alt_data_end+0xfffbc620>
 508a874:	10800044 	addi	r2,r2,1
 508a878:	20c00015 	stw	r3,0(r4)
 508a87c:	f800283a 	ret
 508a880:	0005883a 	mov	r2,zero
 508a884:	f800283a 	ret
 508a888:	1806d07a 	srli	r3,r3,1
 508a88c:	00800044 	movi	r2,1
 508a890:	20c00015 	stw	r3,0(r4)
 508a894:	f800283a 	ret

0508a898 <__i2b>:
 508a898:	defffd04 	addi	sp,sp,-12
 508a89c:	dc000015 	stw	r16,0(sp)
 508a8a0:	04000044 	movi	r16,1
 508a8a4:	dc400115 	stw	r17,4(sp)
 508a8a8:	2823883a 	mov	r17,r5
 508a8ac:	800b883a 	mov	r5,r16
 508a8b0:	dfc00215 	stw	ra,8(sp)
 508a8b4:	508a4980 	call	508a498 <_Balloc>
 508a8b8:	14400515 	stw	r17,20(r2)
 508a8bc:	14000415 	stw	r16,16(r2)
 508a8c0:	dfc00217 	ldw	ra,8(sp)
 508a8c4:	dc400117 	ldw	r17,4(sp)
 508a8c8:	dc000017 	ldw	r16,0(sp)
 508a8cc:	dec00304 	addi	sp,sp,12
 508a8d0:	f800283a 	ret

0508a8d4 <__multiply>:
 508a8d4:	defffa04 	addi	sp,sp,-24
 508a8d8:	dcc00315 	stw	r19,12(sp)
 508a8dc:	dc800215 	stw	r18,8(sp)
 508a8e0:	2cc00417 	ldw	r19,16(r5)
 508a8e4:	34800417 	ldw	r18,16(r6)
 508a8e8:	dd000415 	stw	r20,16(sp)
 508a8ec:	dc400115 	stw	r17,4(sp)
 508a8f0:	dfc00515 	stw	ra,20(sp)
 508a8f4:	dc000015 	stw	r16,0(sp)
 508a8f8:	2829883a 	mov	r20,r5
 508a8fc:	3023883a 	mov	r17,r6
 508a900:	9c807016 	blt	r19,r18,508aac4 <__multiply+0x1f0>
 508a904:	9005883a 	mov	r2,r18
 508a908:	9825883a 	mov	r18,r19
 508a90c:	1027883a 	mov	r19,r2
 508a910:	a0800217 	ldw	r2,8(r20)
 508a914:	94e1883a 	add	r16,r18,r19
 508a918:	a1400117 	ldw	r5,4(r20)
 508a91c:	1400010e 	bge	r2,r16,508a924 <__multiply+0x50>
 508a920:	29400044 	addi	r5,r5,1
 508a924:	508a4980 	call	508a498 <_Balloc>
 508a928:	8417883a 	add	r11,r16,r16
 508a92c:	13000504 	addi	r12,r2,20
 508a930:	5ad7883a 	add	r11,r11,r11
 508a934:	62d7883a 	add	r11,r12,r11
 508a938:	6007883a 	mov	r3,r12
 508a93c:	62c0032e 	bgeu	r12,r11,508a94c <__multiply+0x78>
 508a940:	18000015 	stw	zero,0(r3)
 508a944:	18c00104 	addi	r3,r3,4
 508a948:	1afffd36 	bltu	r3,r11,508a940 <__alt_data_end+0xfffbc740>
 508a94c:	9ce7883a 	add	r19,r19,r19
 508a950:	94a5883a 	add	r18,r18,r18
 508a954:	89800504 	addi	r6,r17,20
 508a958:	9ce7883a 	add	r19,r19,r19
 508a95c:	a3800504 	addi	r14,r20,20
 508a960:	94a5883a 	add	r18,r18,r18
 508a964:	34db883a 	add	r13,r6,r19
 508a968:	7495883a 	add	r10,r14,r18
 508a96c:	3340422e 	bgeu	r6,r13,508aa78 <__multiply+0x1a4>
 508a970:	34400017 	ldw	r17,0(r6)
 508a974:	8cbfffcc 	andi	r18,r17,65535
 508a978:	90001b26 	beq	r18,zero,508a9e8 <__multiply+0x114>
 508a97c:	6013883a 	mov	r9,r12
 508a980:	7023883a 	mov	r17,r14
 508a984:	0011883a 	mov	r8,zero
 508a988:	88c00017 	ldw	r3,0(r17)
 508a98c:	4bc00017 	ldw	r15,0(r9)
 508a990:	8c400104 	addi	r17,r17,4
 508a994:	19ffffcc 	andi	r7,r3,65535
 508a998:	3c8f383a 	mul	r7,r7,r18
 508a99c:	1808d43a 	srli	r4,r3,16
 508a9a0:	797fffcc 	andi	r5,r15,65535
 508a9a4:	29cb883a 	add	r5,r5,r7
 508a9a8:	2a0b883a 	add	r5,r5,r8
 508a9ac:	2489383a 	mul	r4,r4,r18
 508a9b0:	7806d43a 	srli	r3,r15,16
 508a9b4:	2810d43a 	srli	r8,r5,16
 508a9b8:	297fffcc 	andi	r5,r5,65535
 508a9bc:	1907883a 	add	r3,r3,r4
 508a9c0:	1a07883a 	add	r3,r3,r8
 508a9c4:	1808943a 	slli	r4,r3,16
 508a9c8:	480f883a 	mov	r7,r9
 508a9cc:	1810d43a 	srli	r8,r3,16
 508a9d0:	214ab03a 	or	r5,r4,r5
 508a9d4:	49400015 	stw	r5,0(r9)
 508a9d8:	4a400104 	addi	r9,r9,4
 508a9dc:	8abfea36 	bltu	r17,r10,508a988 <__alt_data_end+0xfffbc788>
 508a9e0:	3a000115 	stw	r8,4(r7)
 508a9e4:	34400017 	ldw	r17,0(r6)
 508a9e8:	8822d43a 	srli	r17,r17,16
 508a9ec:	88001f26 	beq	r17,zero,508aa6c <__multiply+0x198>
 508a9f0:	60c00017 	ldw	r3,0(r12)
 508a9f4:	7013883a 	mov	r9,r14
 508a9f8:	601f883a 	mov	r15,r12
 508a9fc:	1811883a 	mov	r8,r3
 508aa00:	6027883a 	mov	r19,r12
 508aa04:	000f883a 	mov	r7,zero
 508aa08:	00000106 	br	508aa10 <__multiply+0x13c>
 508aa0c:	9027883a 	mov	r19,r18
 508aa10:	4940000b 	ldhu	r5,0(r9)
 508aa14:	4010d43a 	srli	r8,r8,16
 508aa18:	193fffcc 	andi	r4,r3,65535
 508aa1c:	2c4b383a 	mul	r5,r5,r17
 508aa20:	7bc00104 	addi	r15,r15,4
 508aa24:	4a400104 	addi	r9,r9,4
 508aa28:	2a0b883a 	add	r5,r5,r8
 508aa2c:	29cb883a 	add	r5,r5,r7
 508aa30:	2806943a 	slli	r3,r5,16
 508aa34:	9c800104 	addi	r18,r19,4
 508aa38:	280ad43a 	srli	r5,r5,16
 508aa3c:	1908b03a 	or	r4,r3,r4
 508aa40:	793fff15 	stw	r4,-4(r15)
 508aa44:	48ffff17 	ldw	r3,-4(r9)
 508aa48:	92000017 	ldw	r8,0(r18)
 508aa4c:	1806d43a 	srli	r3,r3,16
 508aa50:	413fffcc 	andi	r4,r8,65535
 508aa54:	1c47383a 	mul	r3,r3,r17
 508aa58:	1907883a 	add	r3,r3,r4
 508aa5c:	1947883a 	add	r3,r3,r5
 508aa60:	180ed43a 	srli	r7,r3,16
 508aa64:	4abfe936 	bltu	r9,r10,508aa0c <__alt_data_end+0xfffbc80c>
 508aa68:	98c00115 	stw	r3,4(r19)
 508aa6c:	31800104 	addi	r6,r6,4
 508aa70:	63000104 	addi	r12,r12,4
 508aa74:	337fbe36 	bltu	r6,r13,508a970 <__alt_data_end+0xfffbc770>
 508aa78:	0400090e 	bge	zero,r16,508aaa0 <__multiply+0x1cc>
 508aa7c:	58ffff17 	ldw	r3,-4(r11)
 508aa80:	5affff04 	addi	r11,r11,-4
 508aa84:	18000326 	beq	r3,zero,508aa94 <__multiply+0x1c0>
 508aa88:	00000506 	br	508aaa0 <__multiply+0x1cc>
 508aa8c:	58c00017 	ldw	r3,0(r11)
 508aa90:	1800031e 	bne	r3,zero,508aaa0 <__multiply+0x1cc>
 508aa94:	843fffc4 	addi	r16,r16,-1
 508aa98:	5affff04 	addi	r11,r11,-4
 508aa9c:	803ffb1e 	bne	r16,zero,508aa8c <__alt_data_end+0xfffbc88c>
 508aaa0:	14000415 	stw	r16,16(r2)
 508aaa4:	dfc00517 	ldw	ra,20(sp)
 508aaa8:	dd000417 	ldw	r20,16(sp)
 508aaac:	dcc00317 	ldw	r19,12(sp)
 508aab0:	dc800217 	ldw	r18,8(sp)
 508aab4:	dc400117 	ldw	r17,4(sp)
 508aab8:	dc000017 	ldw	r16,0(sp)
 508aabc:	dec00604 	addi	sp,sp,24
 508aac0:	f800283a 	ret
 508aac4:	3029883a 	mov	r20,r6
 508aac8:	2823883a 	mov	r17,r5
 508aacc:	003f9006 	br	508a910 <__alt_data_end+0xfffbc710>

0508aad0 <__pow5mult>:
 508aad0:	defffa04 	addi	sp,sp,-24
 508aad4:	dcc00315 	stw	r19,12(sp)
 508aad8:	dc800215 	stw	r18,8(sp)
 508aadc:	dc000015 	stw	r16,0(sp)
 508aae0:	dfc00515 	stw	ra,20(sp)
 508aae4:	dd000415 	stw	r20,16(sp)
 508aae8:	dc400115 	stw	r17,4(sp)
 508aaec:	308000cc 	andi	r2,r6,3
 508aaf0:	3021883a 	mov	r16,r6
 508aaf4:	2027883a 	mov	r19,r4
 508aaf8:	2825883a 	mov	r18,r5
 508aafc:	10002e1e 	bne	r2,zero,508abb8 <__pow5mult+0xe8>
 508ab00:	8021d0ba 	srai	r16,r16,2
 508ab04:	80001a26 	beq	r16,zero,508ab70 <__pow5mult+0xa0>
 508ab08:	9c401217 	ldw	r17,72(r19)
 508ab0c:	8800061e 	bne	r17,zero,508ab28 <__pow5mult+0x58>
 508ab10:	00003406 	br	508abe4 <__pow5mult+0x114>
 508ab14:	8021d07a 	srai	r16,r16,1
 508ab18:	80001526 	beq	r16,zero,508ab70 <__pow5mult+0xa0>
 508ab1c:	88800017 	ldw	r2,0(r17)
 508ab20:	10001c26 	beq	r2,zero,508ab94 <__pow5mult+0xc4>
 508ab24:	1023883a 	mov	r17,r2
 508ab28:	80c0004c 	andi	r3,r16,1
 508ab2c:	183ff926 	beq	r3,zero,508ab14 <__alt_data_end+0xfffbc914>
 508ab30:	900b883a 	mov	r5,r18
 508ab34:	880d883a 	mov	r6,r17
 508ab38:	9809883a 	mov	r4,r19
 508ab3c:	508a8d40 	call	508a8d4 <__multiply>
 508ab40:	90001b26 	beq	r18,zero,508abb0 <__pow5mult+0xe0>
 508ab44:	91c00117 	ldw	r7,4(r18)
 508ab48:	98c01317 	ldw	r3,76(r19)
 508ab4c:	8021d07a 	srai	r16,r16,1
 508ab50:	39cf883a 	add	r7,r7,r7
 508ab54:	39cf883a 	add	r7,r7,r7
 508ab58:	19c7883a 	add	r3,r3,r7
 508ab5c:	19000017 	ldw	r4,0(r3)
 508ab60:	91000015 	stw	r4,0(r18)
 508ab64:	1c800015 	stw	r18,0(r3)
 508ab68:	1025883a 	mov	r18,r2
 508ab6c:	803feb1e 	bne	r16,zero,508ab1c <__alt_data_end+0xfffbc91c>
 508ab70:	9005883a 	mov	r2,r18
 508ab74:	dfc00517 	ldw	ra,20(sp)
 508ab78:	dd000417 	ldw	r20,16(sp)
 508ab7c:	dcc00317 	ldw	r19,12(sp)
 508ab80:	dc800217 	ldw	r18,8(sp)
 508ab84:	dc400117 	ldw	r17,4(sp)
 508ab88:	dc000017 	ldw	r16,0(sp)
 508ab8c:	dec00604 	addi	sp,sp,24
 508ab90:	f800283a 	ret
 508ab94:	9809883a 	mov	r4,r19
 508ab98:	880b883a 	mov	r5,r17
 508ab9c:	880d883a 	mov	r6,r17
 508aba0:	508a8d40 	call	508a8d4 <__multiply>
 508aba4:	88800015 	stw	r2,0(r17)
 508aba8:	10000015 	stw	zero,0(r2)
 508abac:	003fdd06 	br	508ab24 <__alt_data_end+0xfffbc924>
 508abb0:	1025883a 	mov	r18,r2
 508abb4:	003fd706 	br	508ab14 <__alt_data_end+0xfffbc914>
 508abb8:	10bfffc4 	addi	r2,r2,-1
 508abbc:	1085883a 	add	r2,r2,r2
 508abc0:	00c14274 	movhi	r3,1289
 508abc4:	18d50204 	addi	r3,r3,21512
 508abc8:	1085883a 	add	r2,r2,r2
 508abcc:	1885883a 	add	r2,r3,r2
 508abd0:	11800017 	ldw	r6,0(r2)
 508abd4:	000f883a 	mov	r7,zero
 508abd8:	508a5680 	call	508a568 <__multadd>
 508abdc:	1025883a 	mov	r18,r2
 508abe0:	003fc706 	br	508ab00 <__alt_data_end+0xfffbc900>
 508abe4:	05000044 	movi	r20,1
 508abe8:	9809883a 	mov	r4,r19
 508abec:	a00b883a 	mov	r5,r20
 508abf0:	508a4980 	call	508a498 <_Balloc>
 508abf4:	1023883a 	mov	r17,r2
 508abf8:	00809c44 	movi	r2,625
 508abfc:	88800515 	stw	r2,20(r17)
 508ac00:	8d000415 	stw	r20,16(r17)
 508ac04:	9c401215 	stw	r17,72(r19)
 508ac08:	88000015 	stw	zero,0(r17)
 508ac0c:	003fc606 	br	508ab28 <__alt_data_end+0xfffbc928>

0508ac10 <__lshift>:
 508ac10:	defff904 	addi	sp,sp,-28
 508ac14:	dd000415 	stw	r20,16(sp)
 508ac18:	dcc00315 	stw	r19,12(sp)
 508ac1c:	3029d17a 	srai	r20,r6,5
 508ac20:	2cc00417 	ldw	r19,16(r5)
 508ac24:	28800217 	ldw	r2,8(r5)
 508ac28:	dd400515 	stw	r21,20(sp)
 508ac2c:	a4e7883a 	add	r19,r20,r19
 508ac30:	dc800215 	stw	r18,8(sp)
 508ac34:	dc400115 	stw	r17,4(sp)
 508ac38:	dc000015 	stw	r16,0(sp)
 508ac3c:	dfc00615 	stw	ra,24(sp)
 508ac40:	9c000044 	addi	r16,r19,1
 508ac44:	2823883a 	mov	r17,r5
 508ac48:	302b883a 	mov	r21,r6
 508ac4c:	2025883a 	mov	r18,r4
 508ac50:	29400117 	ldw	r5,4(r5)
 508ac54:	1400030e 	bge	r2,r16,508ac64 <__lshift+0x54>
 508ac58:	1085883a 	add	r2,r2,r2
 508ac5c:	29400044 	addi	r5,r5,1
 508ac60:	143ffd16 	blt	r2,r16,508ac58 <__alt_data_end+0xfffbca58>
 508ac64:	9009883a 	mov	r4,r18
 508ac68:	508a4980 	call	508a498 <_Balloc>
 508ac6c:	11c00504 	addi	r7,r2,20
 508ac70:	0500090e 	bge	zero,r20,508ac98 <__lshift+0x88>
 508ac74:	3811883a 	mov	r8,r7
 508ac78:	0007883a 	mov	r3,zero
 508ac7c:	40000015 	stw	zero,0(r8)
 508ac80:	18c00044 	addi	r3,r3,1
 508ac84:	42000104 	addi	r8,r8,4
 508ac88:	1d3ffc1e 	bne	r3,r20,508ac7c <__alt_data_end+0xfffbca7c>
 508ac8c:	18c7883a 	add	r3,r3,r3
 508ac90:	18c7883a 	add	r3,r3,r3
 508ac94:	38cf883a 	add	r7,r7,r3
 508ac98:	89000417 	ldw	r4,16(r17)
 508ac9c:	88c00504 	addi	r3,r17,20
 508aca0:	a98007cc 	andi	r6,r21,31
 508aca4:	2109883a 	add	r4,r4,r4
 508aca8:	2109883a 	add	r4,r4,r4
 508acac:	1909883a 	add	r4,r3,r4
 508acb0:	30002326 	beq	r6,zero,508ad40 <__lshift+0x130>
 508acb4:	01400804 	movi	r5,32
 508acb8:	298bc83a 	sub	r5,r5,r6
 508acbc:	0013883a 	mov	r9,zero
 508acc0:	1a000017 	ldw	r8,0(r3)
 508acc4:	3815883a 	mov	r10,r7
 508acc8:	39c00104 	addi	r7,r7,4
 508accc:	4190983a 	sll	r8,r8,r6
 508acd0:	18c00104 	addi	r3,r3,4
 508acd4:	4a10b03a 	or	r8,r9,r8
 508acd8:	3a3fff15 	stw	r8,-4(r7)
 508acdc:	1a3fff17 	ldw	r8,-4(r3)
 508ace0:	4152d83a 	srl	r9,r8,r5
 508ace4:	193ff636 	bltu	r3,r4,508acc0 <__alt_data_end+0xfffbcac0>
 508ace8:	52400115 	stw	r9,4(r10)
 508acec:	48000126 	beq	r9,zero,508acf4 <__lshift+0xe4>
 508acf0:	9c000084 	addi	r16,r19,2
 508acf4:	89000117 	ldw	r4,4(r17)
 508acf8:	90c01317 	ldw	r3,76(r18)
 508acfc:	843fffc4 	addi	r16,r16,-1
 508ad00:	2109883a 	add	r4,r4,r4
 508ad04:	2109883a 	add	r4,r4,r4
 508ad08:	1907883a 	add	r3,r3,r4
 508ad0c:	19000017 	ldw	r4,0(r3)
 508ad10:	14000415 	stw	r16,16(r2)
 508ad14:	89000015 	stw	r4,0(r17)
 508ad18:	1c400015 	stw	r17,0(r3)
 508ad1c:	dfc00617 	ldw	ra,24(sp)
 508ad20:	dd400517 	ldw	r21,20(sp)
 508ad24:	dd000417 	ldw	r20,16(sp)
 508ad28:	dcc00317 	ldw	r19,12(sp)
 508ad2c:	dc800217 	ldw	r18,8(sp)
 508ad30:	dc400117 	ldw	r17,4(sp)
 508ad34:	dc000017 	ldw	r16,0(sp)
 508ad38:	dec00704 	addi	sp,sp,28
 508ad3c:	f800283a 	ret
 508ad40:	19400017 	ldw	r5,0(r3)
 508ad44:	39c00104 	addi	r7,r7,4
 508ad48:	18c00104 	addi	r3,r3,4
 508ad4c:	397fff15 	stw	r5,-4(r7)
 508ad50:	193ffb36 	bltu	r3,r4,508ad40 <__alt_data_end+0xfffbcb40>
 508ad54:	003fe706 	br	508acf4 <__alt_data_end+0xfffbcaf4>

0508ad58 <__mcmp>:
 508ad58:	20800417 	ldw	r2,16(r4)
 508ad5c:	28c00417 	ldw	r3,16(r5)
 508ad60:	10c5c83a 	sub	r2,r2,r3
 508ad64:	1000111e 	bne	r2,zero,508adac <__mcmp+0x54>
 508ad68:	18c7883a 	add	r3,r3,r3
 508ad6c:	18c7883a 	add	r3,r3,r3
 508ad70:	21000504 	addi	r4,r4,20
 508ad74:	29400504 	addi	r5,r5,20
 508ad78:	20c5883a 	add	r2,r4,r3
 508ad7c:	28cb883a 	add	r5,r5,r3
 508ad80:	00000106 	br	508ad88 <__mcmp+0x30>
 508ad84:	20800a2e 	bgeu	r4,r2,508adb0 <__mcmp+0x58>
 508ad88:	10bfff04 	addi	r2,r2,-4
 508ad8c:	297fff04 	addi	r5,r5,-4
 508ad90:	11800017 	ldw	r6,0(r2)
 508ad94:	28c00017 	ldw	r3,0(r5)
 508ad98:	30fffa26 	beq	r6,r3,508ad84 <__alt_data_end+0xfffbcb84>
 508ad9c:	30c00236 	bltu	r6,r3,508ada8 <__mcmp+0x50>
 508ada0:	00800044 	movi	r2,1
 508ada4:	f800283a 	ret
 508ada8:	00bfffc4 	movi	r2,-1
 508adac:	f800283a 	ret
 508adb0:	0005883a 	mov	r2,zero
 508adb4:	f800283a 	ret

0508adb8 <__mdiff>:
 508adb8:	defffb04 	addi	sp,sp,-20
 508adbc:	dc000015 	stw	r16,0(sp)
 508adc0:	2821883a 	mov	r16,r5
 508adc4:	dcc00315 	stw	r19,12(sp)
 508adc8:	300b883a 	mov	r5,r6
 508adcc:	2027883a 	mov	r19,r4
 508add0:	8009883a 	mov	r4,r16
 508add4:	dc800215 	stw	r18,8(sp)
 508add8:	dfc00415 	stw	ra,16(sp)
 508addc:	dc400115 	stw	r17,4(sp)
 508ade0:	3025883a 	mov	r18,r6
 508ade4:	508ad580 	call	508ad58 <__mcmp>
 508ade8:	10005226 	beq	r2,zero,508af34 <__mdiff+0x17c>
 508adec:	10004c16 	blt	r2,zero,508af20 <__mdiff+0x168>
 508adf0:	0023883a 	mov	r17,zero
 508adf4:	81400117 	ldw	r5,4(r16)
 508adf8:	9809883a 	mov	r4,r19
 508adfc:	508a4980 	call	508a498 <_Balloc>
 508ae00:	83400417 	ldw	r13,16(r16)
 508ae04:	93800417 	ldw	r14,16(r18)
 508ae08:	81000504 	addi	r4,r16,20
 508ae0c:	6b59883a 	add	r12,r13,r13
 508ae10:	739d883a 	add	r14,r14,r14
 508ae14:	6319883a 	add	r12,r12,r12
 508ae18:	91800504 	addi	r6,r18,20
 508ae1c:	739d883a 	add	r14,r14,r14
 508ae20:	14400315 	stw	r17,12(r2)
 508ae24:	2319883a 	add	r12,r4,r12
 508ae28:	339d883a 	add	r14,r6,r14
 508ae2c:	12400504 	addi	r9,r2,20
 508ae30:	0007883a 	mov	r3,zero
 508ae34:	22000017 	ldw	r8,0(r4)
 508ae38:	32800017 	ldw	r10,0(r6)
 508ae3c:	4ac00104 	addi	r11,r9,4
 508ae40:	41ffffcc 	andi	r7,r8,65535
 508ae44:	38c7883a 	add	r3,r7,r3
 508ae48:	51ffffcc 	andi	r7,r10,65535
 508ae4c:	19cfc83a 	sub	r7,r3,r7
 508ae50:	4010d43a 	srli	r8,r8,16
 508ae54:	5014d43a 	srli	r10,r10,16
 508ae58:	3807d43a 	srai	r3,r7,16
 508ae5c:	39ffffcc 	andi	r7,r7,65535
 508ae60:	4291c83a 	sub	r8,r8,r10
 508ae64:	40c7883a 	add	r3,r8,r3
 508ae68:	1810943a 	slli	r8,r3,16
 508ae6c:	31800104 	addi	r6,r6,4
 508ae70:	21000104 	addi	r4,r4,4
 508ae74:	41ceb03a 	or	r7,r8,r7
 508ae78:	49c00015 	stw	r7,0(r9)
 508ae7c:	1807d43a 	srai	r3,r3,16
 508ae80:	580b883a 	mov	r5,r11
 508ae84:	5813883a 	mov	r9,r11
 508ae88:	33bfea36 	bltu	r6,r14,508ae34 <__alt_data_end+0xfffbcc34>
 508ae8c:	2011883a 	mov	r8,r4
 508ae90:	2300152e 	bgeu	r4,r12,508aee8 <__mdiff+0x130>
 508ae94:	21400017 	ldw	r5,0(r4)
 508ae98:	4a400104 	addi	r9,r9,4
 508ae9c:	21000104 	addi	r4,r4,4
 508aea0:	29ffffcc 	andi	r7,r5,65535
 508aea4:	38c7883a 	add	r3,r7,r3
 508aea8:	280ad43a 	srli	r5,r5,16
 508aeac:	180dd43a 	srai	r6,r3,16
 508aeb0:	19ffffcc 	andi	r7,r3,65535
 508aeb4:	3147883a 	add	r3,r6,r5
 508aeb8:	180a943a 	slli	r5,r3,16
 508aebc:	1807d43a 	srai	r3,r3,16
 508aec0:	29ceb03a 	or	r7,r5,r7
 508aec4:	49ffff15 	stw	r7,-4(r9)
 508aec8:	233ff236 	bltu	r4,r12,508ae94 <__alt_data_end+0xfffbcc94>
 508aecc:	0206303a 	nor	r3,zero,r8
 508aed0:	1b07883a 	add	r3,r3,r12
 508aed4:	1806d0ba 	srli	r3,r3,2
 508aed8:	18c00044 	addi	r3,r3,1
 508aedc:	18c7883a 	add	r3,r3,r3
 508aee0:	18c7883a 	add	r3,r3,r3
 508aee4:	58cb883a 	add	r5,r11,r3
 508aee8:	28ffff04 	addi	r3,r5,-4
 508aeec:	3800041e 	bne	r7,zero,508af00 <__mdiff+0x148>
 508aef0:	18ffff04 	addi	r3,r3,-4
 508aef4:	19000017 	ldw	r4,0(r3)
 508aef8:	6b7fffc4 	addi	r13,r13,-1
 508aefc:	203ffc26 	beq	r4,zero,508aef0 <__alt_data_end+0xfffbccf0>
 508af00:	13400415 	stw	r13,16(r2)
 508af04:	dfc00417 	ldw	ra,16(sp)
 508af08:	dcc00317 	ldw	r19,12(sp)
 508af0c:	dc800217 	ldw	r18,8(sp)
 508af10:	dc400117 	ldw	r17,4(sp)
 508af14:	dc000017 	ldw	r16,0(sp)
 508af18:	dec00504 	addi	sp,sp,20
 508af1c:	f800283a 	ret
 508af20:	8005883a 	mov	r2,r16
 508af24:	04400044 	movi	r17,1
 508af28:	9021883a 	mov	r16,r18
 508af2c:	1025883a 	mov	r18,r2
 508af30:	003fb006 	br	508adf4 <__alt_data_end+0xfffbcbf4>
 508af34:	9809883a 	mov	r4,r19
 508af38:	000b883a 	mov	r5,zero
 508af3c:	508a4980 	call	508a498 <_Balloc>
 508af40:	00c00044 	movi	r3,1
 508af44:	10c00415 	stw	r3,16(r2)
 508af48:	10000515 	stw	zero,20(r2)
 508af4c:	003fed06 	br	508af04 <__alt_data_end+0xfffbcd04>

0508af50 <__ulp>:
 508af50:	295ffc2c 	andhi	r5,r5,32752
 508af54:	00bf3034 	movhi	r2,64704
 508af58:	2887883a 	add	r3,r5,r2
 508af5c:	00c0020e 	bge	zero,r3,508af68 <__ulp+0x18>
 508af60:	0005883a 	mov	r2,zero
 508af64:	f800283a 	ret
 508af68:	00c7c83a 	sub	r3,zero,r3
 508af6c:	180bd53a 	srai	r5,r3,20
 508af70:	008004c4 	movi	r2,19
 508af74:	11400a0e 	bge	r2,r5,508afa0 <__ulp+0x50>
 508af78:	00800c84 	movi	r2,50
 508af7c:	0007883a 	mov	r3,zero
 508af80:	11400516 	blt	r2,r5,508af98 <__ulp+0x48>
 508af84:	00800cc4 	movi	r2,51
 508af88:	114bc83a 	sub	r5,r2,r5
 508af8c:	00800044 	movi	r2,1
 508af90:	1144983a 	sll	r2,r2,r5
 508af94:	f800283a 	ret
 508af98:	00800044 	movi	r2,1
 508af9c:	f800283a 	ret
 508afa0:	00800234 	movhi	r2,8
 508afa4:	1147d83a 	sra	r3,r2,r5
 508afa8:	0005883a 	mov	r2,zero
 508afac:	f800283a 	ret

0508afb0 <__b2d>:
 508afb0:	defffa04 	addi	sp,sp,-24
 508afb4:	dc000015 	stw	r16,0(sp)
 508afb8:	24000417 	ldw	r16,16(r4)
 508afbc:	dc400115 	stw	r17,4(sp)
 508afc0:	24400504 	addi	r17,r4,20
 508afc4:	8421883a 	add	r16,r16,r16
 508afc8:	8421883a 	add	r16,r16,r16
 508afcc:	8c21883a 	add	r16,r17,r16
 508afd0:	dc800215 	stw	r18,8(sp)
 508afd4:	84bfff17 	ldw	r18,-4(r16)
 508afd8:	dd000415 	stw	r20,16(sp)
 508afdc:	dcc00315 	stw	r19,12(sp)
 508afe0:	9009883a 	mov	r4,r18
 508afe4:	2829883a 	mov	r20,r5
 508afe8:	dfc00515 	stw	ra,20(sp)
 508afec:	508a7800 	call	508a780 <__hi0bits>
 508aff0:	00c00804 	movi	r3,32
 508aff4:	1887c83a 	sub	r3,r3,r2
 508aff8:	a0c00015 	stw	r3,0(r20)
 508affc:	00c00284 	movi	r3,10
 508b000:	84ffff04 	addi	r19,r16,-4
 508b004:	18801216 	blt	r3,r2,508b050 <__b2d+0xa0>
 508b008:	014002c4 	movi	r5,11
 508b00c:	2889c83a 	sub	r4,r5,r2
 508b010:	9106d83a 	srl	r3,r18,r4
 508b014:	18cffc34 	orhi	r3,r3,16368
 508b018:	8cc0282e 	bgeu	r17,r19,508b0bc <__b2d+0x10c>
 508b01c:	817ffe17 	ldw	r5,-8(r16)
 508b020:	290ad83a 	srl	r5,r5,r4
 508b024:	10800544 	addi	r2,r2,21
 508b028:	9084983a 	sll	r2,r18,r2
 508b02c:	2884b03a 	or	r2,r5,r2
 508b030:	dfc00517 	ldw	ra,20(sp)
 508b034:	dd000417 	ldw	r20,16(sp)
 508b038:	dcc00317 	ldw	r19,12(sp)
 508b03c:	dc800217 	ldw	r18,8(sp)
 508b040:	dc400117 	ldw	r17,4(sp)
 508b044:	dc000017 	ldw	r16,0(sp)
 508b048:	dec00604 	addi	sp,sp,24
 508b04c:	f800283a 	ret
 508b050:	113ffd44 	addi	r4,r2,-11
 508b054:	8cc00f2e 	bgeu	r17,r19,508b094 <__b2d+0xe4>
 508b058:	81bffe04 	addi	r6,r16,-8
 508b05c:	817ffe17 	ldw	r5,-8(r16)
 508b060:	20001326 	beq	r4,zero,508b0b0 <__b2d+0x100>
 508b064:	00c00ac4 	movi	r3,43
 508b068:	1885c83a 	sub	r2,r3,r2
 508b06c:	2886d83a 	srl	r3,r5,r2
 508b070:	9124983a 	sll	r18,r18,r4
 508b074:	90e4b03a 	or	r18,r18,r3
 508b078:	90cffc34 	orhi	r3,r18,16368
 508b07c:	8980112e 	bgeu	r17,r6,508b0c4 <__b2d+0x114>
 508b080:	81bffd17 	ldw	r6,-12(r16)
 508b084:	308cd83a 	srl	r6,r6,r2
 508b088:	2904983a 	sll	r2,r5,r4
 508b08c:	1184b03a 	or	r2,r2,r6
 508b090:	003fe706 	br	508b030 <__alt_data_end+0xfffbce30>
 508b094:	20000526 	beq	r4,zero,508b0ac <__b2d+0xfc>
 508b098:	9124983a 	sll	r18,r18,r4
 508b09c:	000d883a 	mov	r6,zero
 508b0a0:	000b883a 	mov	r5,zero
 508b0a4:	90cffc34 	orhi	r3,r18,16368
 508b0a8:	003ff706 	br	508b088 <__alt_data_end+0xfffbce88>
 508b0ac:	000b883a 	mov	r5,zero
 508b0b0:	90cffc34 	orhi	r3,r18,16368
 508b0b4:	2805883a 	mov	r2,r5
 508b0b8:	003fdd06 	br	508b030 <__alt_data_end+0xfffbce30>
 508b0bc:	000b883a 	mov	r5,zero
 508b0c0:	003fd806 	br	508b024 <__alt_data_end+0xfffbce24>
 508b0c4:	000d883a 	mov	r6,zero
 508b0c8:	003fef06 	br	508b088 <__alt_data_end+0xfffbce88>

0508b0cc <__d2b>:
 508b0cc:	defff704 	addi	sp,sp,-36
 508b0d0:	dc000215 	stw	r16,8(sp)
 508b0d4:	3021883a 	mov	r16,r6
 508b0d8:	dc400315 	stw	r17,12(sp)
 508b0dc:	8022907a 	slli	r17,r16,1
 508b0e0:	dd400715 	stw	r21,28(sp)
 508b0e4:	282b883a 	mov	r21,r5
 508b0e8:	01400044 	movi	r5,1
 508b0ec:	dd000615 	stw	r20,24(sp)
 508b0f0:	dcc00515 	stw	r19,20(sp)
 508b0f4:	dc800415 	stw	r18,16(sp)
 508b0f8:	dfc00815 	stw	ra,32(sp)
 508b0fc:	3829883a 	mov	r20,r7
 508b100:	dc800917 	ldw	r18,36(sp)
 508b104:	8822d57a 	srli	r17,r17,21
 508b108:	508a4980 	call	508a498 <_Balloc>
 508b10c:	1027883a 	mov	r19,r2
 508b110:	00800434 	movhi	r2,16
 508b114:	10bfffc4 	addi	r2,r2,-1
 508b118:	808c703a 	and	r6,r16,r2
 508b11c:	88000126 	beq	r17,zero,508b124 <__d2b+0x58>
 508b120:	31800434 	orhi	r6,r6,16
 508b124:	d9800015 	stw	r6,0(sp)
 508b128:	a8001f26 	beq	r21,zero,508b1a8 <__d2b+0xdc>
 508b12c:	d9000104 	addi	r4,sp,4
 508b130:	dd400115 	stw	r21,4(sp)
 508b134:	508a7e80 	call	508a7e8 <__lo0bits>
 508b138:	d8c00017 	ldw	r3,0(sp)
 508b13c:	1000291e 	bne	r2,zero,508b1e4 <__d2b+0x118>
 508b140:	d9000117 	ldw	r4,4(sp)
 508b144:	99000515 	stw	r4,20(r19)
 508b148:	1820c03a 	cmpne	r16,r3,zero
 508b14c:	84000044 	addi	r16,r16,1
 508b150:	98c00615 	stw	r3,24(r19)
 508b154:	9c000415 	stw	r16,16(r19)
 508b158:	88001b1e 	bne	r17,zero,508b1c8 <__d2b+0xfc>
 508b15c:	800690ba 	slli	r3,r16,2
 508b160:	10bef384 	addi	r2,r2,-1074
 508b164:	a0800015 	stw	r2,0(r20)
 508b168:	98c5883a 	add	r2,r19,r3
 508b16c:	11000417 	ldw	r4,16(r2)
 508b170:	8020917a 	slli	r16,r16,5
 508b174:	508a7800 	call	508a780 <__hi0bits>
 508b178:	8085c83a 	sub	r2,r16,r2
 508b17c:	90800015 	stw	r2,0(r18)
 508b180:	9805883a 	mov	r2,r19
 508b184:	dfc00817 	ldw	ra,32(sp)
 508b188:	dd400717 	ldw	r21,28(sp)
 508b18c:	dd000617 	ldw	r20,24(sp)
 508b190:	dcc00517 	ldw	r19,20(sp)
 508b194:	dc800417 	ldw	r18,16(sp)
 508b198:	dc400317 	ldw	r17,12(sp)
 508b19c:	dc000217 	ldw	r16,8(sp)
 508b1a0:	dec00904 	addi	sp,sp,36
 508b1a4:	f800283a 	ret
 508b1a8:	d809883a 	mov	r4,sp
 508b1ac:	508a7e80 	call	508a7e8 <__lo0bits>
 508b1b0:	d8c00017 	ldw	r3,0(sp)
 508b1b4:	04000044 	movi	r16,1
 508b1b8:	9c000415 	stw	r16,16(r19)
 508b1bc:	98c00515 	stw	r3,20(r19)
 508b1c0:	10800804 	addi	r2,r2,32
 508b1c4:	883fe526 	beq	r17,zero,508b15c <__alt_data_end+0xfffbcf5c>
 508b1c8:	8c7ef344 	addi	r17,r17,-1075
 508b1cc:	88a3883a 	add	r17,r17,r2
 508b1d0:	00c00d44 	movi	r3,53
 508b1d4:	a4400015 	stw	r17,0(r20)
 508b1d8:	1885c83a 	sub	r2,r3,r2
 508b1dc:	90800015 	stw	r2,0(r18)
 508b1e0:	003fe706 	br	508b180 <__alt_data_end+0xfffbcf80>
 508b1e4:	01000804 	movi	r4,32
 508b1e8:	2089c83a 	sub	r4,r4,r2
 508b1ec:	1908983a 	sll	r4,r3,r4
 508b1f0:	d9400117 	ldw	r5,4(sp)
 508b1f4:	1886d83a 	srl	r3,r3,r2
 508b1f8:	2148b03a 	or	r4,r4,r5
 508b1fc:	99000515 	stw	r4,20(r19)
 508b200:	d8c00015 	stw	r3,0(sp)
 508b204:	003fd006 	br	508b148 <__alt_data_end+0xfffbcf48>

0508b208 <__ratio>:
 508b208:	defff904 	addi	sp,sp,-28
 508b20c:	dc400315 	stw	r17,12(sp)
 508b210:	2823883a 	mov	r17,r5
 508b214:	d9400104 	addi	r5,sp,4
 508b218:	dfc00615 	stw	ra,24(sp)
 508b21c:	dcc00515 	stw	r19,20(sp)
 508b220:	dc800415 	stw	r18,16(sp)
 508b224:	2027883a 	mov	r19,r4
 508b228:	dc000215 	stw	r16,8(sp)
 508b22c:	508afb00 	call	508afb0 <__b2d>
 508b230:	8809883a 	mov	r4,r17
 508b234:	d80b883a 	mov	r5,sp
 508b238:	1025883a 	mov	r18,r2
 508b23c:	1821883a 	mov	r16,r3
 508b240:	508afb00 	call	508afb0 <__b2d>
 508b244:	8a400417 	ldw	r9,16(r17)
 508b248:	9a000417 	ldw	r8,16(r19)
 508b24c:	100d883a 	mov	r6,r2
 508b250:	d8800017 	ldw	r2,0(sp)
 508b254:	4251c83a 	sub	r8,r8,r9
 508b258:	4012917a 	slli	r9,r8,5
 508b25c:	da000117 	ldw	r8,4(sp)
 508b260:	4091c83a 	sub	r8,r8,r2
 508b264:	4251883a 	add	r8,r8,r9
 508b268:	02000d0e 	bge	zero,r8,508b2a0 <__ratio+0x98>
 508b26c:	4010953a 	slli	r8,r8,20
 508b270:	4421883a 	add	r16,r8,r16
 508b274:	9009883a 	mov	r4,r18
 508b278:	800b883a 	mov	r5,r16
 508b27c:	180f883a 	mov	r7,r3
 508b280:	50900540 	call	5090054 <__divdf3>
 508b284:	dfc00617 	ldw	ra,24(sp)
 508b288:	dcc00517 	ldw	r19,20(sp)
 508b28c:	dc800417 	ldw	r18,16(sp)
 508b290:	dc400317 	ldw	r17,12(sp)
 508b294:	dc000217 	ldw	r16,8(sp)
 508b298:	dec00704 	addi	sp,sp,28
 508b29c:	f800283a 	ret
 508b2a0:	4010953a 	slli	r8,r8,20
 508b2a4:	1a07c83a 	sub	r3,r3,r8
 508b2a8:	003ff206 	br	508b274 <__alt_data_end+0xfffbd074>

0508b2ac <_mprec_log10>:
 508b2ac:	defffe04 	addi	sp,sp,-8
 508b2b0:	dc000015 	stw	r16,0(sp)
 508b2b4:	dfc00115 	stw	ra,4(sp)
 508b2b8:	008005c4 	movi	r2,23
 508b2bc:	2021883a 	mov	r16,r4
 508b2c0:	11000d0e 	bge	r2,r4,508b2f8 <_mprec_log10+0x4c>
 508b2c4:	0005883a 	mov	r2,zero
 508b2c8:	00cffc34 	movhi	r3,16368
 508b2cc:	843fffc4 	addi	r16,r16,-1
 508b2d0:	1009883a 	mov	r4,r2
 508b2d4:	180b883a 	mov	r5,r3
 508b2d8:	000d883a 	mov	r6,zero
 508b2dc:	01d00934 	movhi	r7,16420
 508b2e0:	5090b640 	call	5090b64 <__muldf3>
 508b2e4:	803ff91e 	bne	r16,zero,508b2cc <__alt_data_end+0xfffbd0cc>
 508b2e8:	dfc00117 	ldw	ra,4(sp)
 508b2ec:	dc000017 	ldw	r16,0(sp)
 508b2f0:	dec00204 	addi	sp,sp,8
 508b2f4:	f800283a 	ret
 508b2f8:	202090fa 	slli	r16,r4,3
 508b2fc:	00814274 	movhi	r2,1289
 508b300:	10951904 	addi	r2,r2,21604
 508b304:	1421883a 	add	r16,r2,r16
 508b308:	80800017 	ldw	r2,0(r16)
 508b30c:	80c00117 	ldw	r3,4(r16)
 508b310:	dfc00117 	ldw	ra,4(sp)
 508b314:	dc000017 	ldw	r16,0(sp)
 508b318:	dec00204 	addi	sp,sp,8
 508b31c:	f800283a 	ret

0508b320 <__copybits>:
 508b320:	297fffc4 	addi	r5,r5,-1
 508b324:	280fd17a 	srai	r7,r5,5
 508b328:	30c00417 	ldw	r3,16(r6)
 508b32c:	30800504 	addi	r2,r6,20
 508b330:	39c00044 	addi	r7,r7,1
 508b334:	18c7883a 	add	r3,r3,r3
 508b338:	39cf883a 	add	r7,r7,r7
 508b33c:	18c7883a 	add	r3,r3,r3
 508b340:	39cf883a 	add	r7,r7,r7
 508b344:	10c7883a 	add	r3,r2,r3
 508b348:	21cf883a 	add	r7,r4,r7
 508b34c:	10c00d2e 	bgeu	r2,r3,508b384 <__copybits+0x64>
 508b350:	200b883a 	mov	r5,r4
 508b354:	12000017 	ldw	r8,0(r2)
 508b358:	29400104 	addi	r5,r5,4
 508b35c:	10800104 	addi	r2,r2,4
 508b360:	2a3fff15 	stw	r8,-4(r5)
 508b364:	10fffb36 	bltu	r2,r3,508b354 <__alt_data_end+0xfffbd154>
 508b368:	1985c83a 	sub	r2,r3,r6
 508b36c:	10bffac4 	addi	r2,r2,-21
 508b370:	1004d0ba 	srli	r2,r2,2
 508b374:	10800044 	addi	r2,r2,1
 508b378:	1085883a 	add	r2,r2,r2
 508b37c:	1085883a 	add	r2,r2,r2
 508b380:	2089883a 	add	r4,r4,r2
 508b384:	21c0032e 	bgeu	r4,r7,508b394 <__copybits+0x74>
 508b388:	20000015 	stw	zero,0(r4)
 508b38c:	21000104 	addi	r4,r4,4
 508b390:	21fffd36 	bltu	r4,r7,508b388 <__alt_data_end+0xfffbd188>
 508b394:	f800283a 	ret

0508b398 <__any_on>:
 508b398:	20c00417 	ldw	r3,16(r4)
 508b39c:	2805d17a 	srai	r2,r5,5
 508b3a0:	21000504 	addi	r4,r4,20
 508b3a4:	18800d0e 	bge	r3,r2,508b3dc <__any_on+0x44>
 508b3a8:	18c7883a 	add	r3,r3,r3
 508b3ac:	18c7883a 	add	r3,r3,r3
 508b3b0:	20c7883a 	add	r3,r4,r3
 508b3b4:	20c0192e 	bgeu	r4,r3,508b41c <__any_on+0x84>
 508b3b8:	18bfff17 	ldw	r2,-4(r3)
 508b3bc:	18ffff04 	addi	r3,r3,-4
 508b3c0:	1000041e 	bne	r2,zero,508b3d4 <__any_on+0x3c>
 508b3c4:	20c0142e 	bgeu	r4,r3,508b418 <__any_on+0x80>
 508b3c8:	18ffff04 	addi	r3,r3,-4
 508b3cc:	19400017 	ldw	r5,0(r3)
 508b3d0:	283ffc26 	beq	r5,zero,508b3c4 <__alt_data_end+0xfffbd1c4>
 508b3d4:	00800044 	movi	r2,1
 508b3d8:	f800283a 	ret
 508b3dc:	10c00a0e 	bge	r2,r3,508b408 <__any_on+0x70>
 508b3e0:	1085883a 	add	r2,r2,r2
 508b3e4:	1085883a 	add	r2,r2,r2
 508b3e8:	294007cc 	andi	r5,r5,31
 508b3ec:	2087883a 	add	r3,r4,r2
 508b3f0:	283ff026 	beq	r5,zero,508b3b4 <__alt_data_end+0xfffbd1b4>
 508b3f4:	19800017 	ldw	r6,0(r3)
 508b3f8:	3144d83a 	srl	r2,r6,r5
 508b3fc:	114a983a 	sll	r5,r2,r5
 508b400:	29bff41e 	bne	r5,r6,508b3d4 <__alt_data_end+0xfffbd1d4>
 508b404:	003feb06 	br	508b3b4 <__alt_data_end+0xfffbd1b4>
 508b408:	1085883a 	add	r2,r2,r2
 508b40c:	1085883a 	add	r2,r2,r2
 508b410:	2087883a 	add	r3,r4,r2
 508b414:	003fe706 	br	508b3b4 <__alt_data_end+0xfffbd1b4>
 508b418:	f800283a 	ret
 508b41c:	0005883a 	mov	r2,zero
 508b420:	f800283a 	ret

0508b424 <_realloc_r>:
 508b424:	defff604 	addi	sp,sp,-40
 508b428:	dcc00315 	stw	r19,12(sp)
 508b42c:	dc400115 	stw	r17,4(sp)
 508b430:	dfc00915 	stw	ra,36(sp)
 508b434:	df000815 	stw	fp,32(sp)
 508b438:	ddc00715 	stw	r23,28(sp)
 508b43c:	dd800615 	stw	r22,24(sp)
 508b440:	dd400515 	stw	r21,20(sp)
 508b444:	dd000415 	stw	r20,16(sp)
 508b448:	dc800215 	stw	r18,8(sp)
 508b44c:	dc000015 	stw	r16,0(sp)
 508b450:	2827883a 	mov	r19,r5
 508b454:	3023883a 	mov	r17,r6
 508b458:	2800bf26 	beq	r5,zero,508b758 <_realloc_r+0x334>
 508b45c:	2025883a 	mov	r18,r4
 508b460:	50925280 	call	5092528 <__malloc_lock>
 508b464:	98ffff17 	ldw	r3,-4(r19)
 508b468:	01bfff04 	movi	r6,-4
 508b46c:	890002c4 	addi	r4,r17,11
 508b470:	01c00584 	movi	r7,22
 508b474:	9d7ffe04 	addi	r21,r19,-8
 508b478:	19a0703a 	and	r16,r3,r6
 508b47c:	39003f2e 	bgeu	r7,r4,508b57c <_realloc_r+0x158>
 508b480:	053ffe04 	movi	r20,-8
 508b484:	2528703a 	and	r20,r4,r20
 508b488:	a00f883a 	mov	r7,r20
 508b48c:	a0008216 	blt	r20,zero,508b698 <_realloc_r+0x274>
 508b490:	a4408136 	bltu	r20,r17,508b698 <_realloc_r+0x274>
 508b494:	81c03c0e 	bge	r16,r7,508b588 <_realloc_r+0x164>
 508b498:	07014274 	movhi	fp,1289
 508b49c:	e716d104 	addi	fp,fp,23364
 508b4a0:	e1000217 	ldw	r4,8(fp)
 508b4a4:	ac05883a 	add	r2,r21,r16
 508b4a8:	2080bf26 	beq	r4,r2,508b7a8 <_realloc_r+0x384>
 508b4ac:	11000117 	ldw	r4,4(r2)
 508b4b0:	023fff84 	movi	r8,-2
 508b4b4:	2210703a 	and	r8,r4,r8
 508b4b8:	1211883a 	add	r8,r2,r8
 508b4bc:	41400117 	ldw	r5,4(r8)
 508b4c0:	2940004c 	andi	r5,r5,1
 508b4c4:	28004a1e 	bne	r5,zero,508b5f0 <_realloc_r+0x1cc>
 508b4c8:	017fff04 	movi	r5,-4
 508b4cc:	2148703a 	and	r4,r4,r5
 508b4d0:	2409883a 	add	r4,r4,r16
 508b4d4:	21c0ad0e 	bge	r4,r7,508b78c <_realloc_r+0x368>
 508b4d8:	18c0004c 	andi	r3,r3,1
 508b4dc:	18007f1e 	bne	r3,zero,508b6dc <_realloc_r+0x2b8>
 508b4e0:	9dfffe17 	ldw	r23,-8(r19)
 508b4e4:	adefc83a 	sub	r23,r21,r23
 508b4e8:	bd800117 	ldw	r22,4(r23)
 508b4ec:	b14a703a 	and	r5,r22,r5
 508b4f0:	216d883a 	add	r22,r4,r5
 508b4f4:	b1c04516 	blt	r22,r7,508b60c <_realloc_r+0x1e8>
 508b4f8:	10c00317 	ldw	r3,12(r2)
 508b4fc:	10800217 	ldw	r2,8(r2)
 508b500:	81bfff04 	addi	r6,r16,-4
 508b504:	bc400204 	addi	r17,r23,8
 508b508:	10c00315 	stw	r3,12(r2)
 508b50c:	18800215 	stw	r2,8(r3)
 508b510:	b9400217 	ldw	r5,8(r23)
 508b514:	b8c00317 	ldw	r3,12(r23)
 508b518:	00800904 	movi	r2,36
 508b51c:	28c00315 	stw	r3,12(r5)
 508b520:	19400215 	stw	r5,8(r3)
 508b524:	1180ef36 	bltu	r2,r6,508b8e4 <_realloc_r+0x4c0>
 508b528:	008004c4 	movi	r2,19
 508b52c:	1180da2e 	bgeu	r2,r6,508b898 <_realloc_r+0x474>
 508b530:	98800017 	ldw	r2,0(r19)
 508b534:	b8800215 	stw	r2,8(r23)
 508b538:	98800117 	ldw	r2,4(r19)
 508b53c:	b8800315 	stw	r2,12(r23)
 508b540:	008006c4 	movi	r2,27
 508b544:	1180fc2e 	bgeu	r2,r6,508b938 <_realloc_r+0x514>
 508b548:	98800217 	ldw	r2,8(r19)
 508b54c:	b8800415 	stw	r2,16(r23)
 508b550:	98800317 	ldw	r2,12(r19)
 508b554:	b8800515 	stw	r2,20(r23)
 508b558:	00800904 	movi	r2,36
 508b55c:	3080421e 	bne	r6,r2,508b668 <_realloc_r+0x244>
 508b560:	98800417 	ldw	r2,16(r19)
 508b564:	9cc00604 	addi	r19,r19,24
 508b568:	b8c00804 	addi	r3,r23,32
 508b56c:	b8800615 	stw	r2,24(r23)
 508b570:	98bfff17 	ldw	r2,-4(r19)
 508b574:	b8800715 	stw	r2,28(r23)
 508b578:	00003d06 	br	508b670 <_realloc_r+0x24c>
 508b57c:	01c00404 	movi	r7,16
 508b580:	3829883a 	mov	r20,r7
 508b584:	003fc206 	br	508b490 <__alt_data_end+0xfffbd290>
 508b588:	9823883a 	mov	r17,r19
 508b58c:	850fc83a 	sub	r7,r16,r20
 508b590:	008003c4 	movi	r2,15
 508b594:	18c0004c 	andi	r3,r3,1
 508b598:	11c04336 	bltu	r2,r7,508b6a8 <_realloc_r+0x284>
 508b59c:	1c06b03a 	or	r3,r3,r16
 508b5a0:	a8c00115 	stw	r3,4(r21)
 508b5a4:	ac21883a 	add	r16,r21,r16
 508b5a8:	80c00117 	ldw	r3,4(r16)
 508b5ac:	18c00054 	ori	r3,r3,1
 508b5b0:	80c00115 	stw	r3,4(r16)
 508b5b4:	9009883a 	mov	r4,r18
 508b5b8:	50925480 	call	5092548 <__malloc_unlock>
 508b5bc:	8805883a 	mov	r2,r17
 508b5c0:	dfc00917 	ldw	ra,36(sp)
 508b5c4:	df000817 	ldw	fp,32(sp)
 508b5c8:	ddc00717 	ldw	r23,28(sp)
 508b5cc:	dd800617 	ldw	r22,24(sp)
 508b5d0:	dd400517 	ldw	r21,20(sp)
 508b5d4:	dd000417 	ldw	r20,16(sp)
 508b5d8:	dcc00317 	ldw	r19,12(sp)
 508b5dc:	dc800217 	ldw	r18,8(sp)
 508b5e0:	dc400117 	ldw	r17,4(sp)
 508b5e4:	dc000017 	ldw	r16,0(sp)
 508b5e8:	dec00a04 	addi	sp,sp,40
 508b5ec:	f800283a 	ret
 508b5f0:	18c0004c 	andi	r3,r3,1
 508b5f4:	1800391e 	bne	r3,zero,508b6dc <_realloc_r+0x2b8>
 508b5f8:	9dfffe17 	ldw	r23,-8(r19)
 508b5fc:	00bfff04 	movi	r2,-4
 508b600:	adefc83a 	sub	r23,r21,r23
 508b604:	b9400117 	ldw	r5,4(r23)
 508b608:	288a703a 	and	r5,r5,r2
 508b60c:	2c2d883a 	add	r22,r5,r16
 508b610:	b1c03216 	blt	r22,r7,508b6dc <_realloc_r+0x2b8>
 508b614:	b8800317 	ldw	r2,12(r23)
 508b618:	b8c00217 	ldw	r3,8(r23)
 508b61c:	81bfff04 	addi	r6,r16,-4
 508b620:	01000904 	movi	r4,36
 508b624:	18800315 	stw	r2,12(r3)
 508b628:	10c00215 	stw	r3,8(r2)
 508b62c:	bc400204 	addi	r17,r23,8
 508b630:	2180ac36 	bltu	r4,r6,508b8e4 <_realloc_r+0x4c0>
 508b634:	008004c4 	movi	r2,19
 508b638:	1180972e 	bgeu	r2,r6,508b898 <_realloc_r+0x474>
 508b63c:	98800017 	ldw	r2,0(r19)
 508b640:	b8800215 	stw	r2,8(r23)
 508b644:	98800117 	ldw	r2,4(r19)
 508b648:	b8800315 	stw	r2,12(r23)
 508b64c:	008006c4 	movi	r2,27
 508b650:	1180b92e 	bgeu	r2,r6,508b938 <_realloc_r+0x514>
 508b654:	98800217 	ldw	r2,8(r19)
 508b658:	b8800415 	stw	r2,16(r23)
 508b65c:	98800317 	ldw	r2,12(r19)
 508b660:	b8800515 	stw	r2,20(r23)
 508b664:	313fbe26 	beq	r6,r4,508b560 <__alt_data_end+0xfffbd360>
 508b668:	b8c00604 	addi	r3,r23,24
 508b66c:	9cc00404 	addi	r19,r19,16
 508b670:	98800017 	ldw	r2,0(r19)
 508b674:	b021883a 	mov	r16,r22
 508b678:	b82b883a 	mov	r21,r23
 508b67c:	18800015 	stw	r2,0(r3)
 508b680:	98800117 	ldw	r2,4(r19)
 508b684:	18800115 	stw	r2,4(r3)
 508b688:	98800217 	ldw	r2,8(r19)
 508b68c:	18800215 	stw	r2,8(r3)
 508b690:	b8c00117 	ldw	r3,4(r23)
 508b694:	003fbd06 	br	508b58c <__alt_data_end+0xfffbd38c>
 508b698:	00800304 	movi	r2,12
 508b69c:	90800015 	stw	r2,0(r18)
 508b6a0:	0005883a 	mov	r2,zero
 508b6a4:	003fc606 	br	508b5c0 <__alt_data_end+0xfffbd3c0>
 508b6a8:	1d06b03a 	or	r3,r3,r20
 508b6ac:	ad0b883a 	add	r5,r21,r20
 508b6b0:	a8c00115 	stw	r3,4(r21)
 508b6b4:	38800054 	ori	r2,r7,1
 508b6b8:	28800115 	stw	r2,4(r5)
 508b6bc:	29cf883a 	add	r7,r5,r7
 508b6c0:	38800117 	ldw	r2,4(r7)
 508b6c4:	9009883a 	mov	r4,r18
 508b6c8:	29400204 	addi	r5,r5,8
 508b6cc:	10800054 	ori	r2,r2,1
 508b6d0:	38800115 	stw	r2,4(r7)
 508b6d4:	5088cb40 	call	5088cb4 <_free_r>
 508b6d8:	003fb606 	br	508b5b4 <__alt_data_end+0xfffbd3b4>
 508b6dc:	880b883a 	mov	r5,r17
 508b6e0:	9009883a 	mov	r4,r18
 508b6e4:	50898500 	call	5089850 <_malloc_r>
 508b6e8:	1023883a 	mov	r17,r2
 508b6ec:	1000aa26 	beq	r2,zero,508b998 <_realloc_r+0x574>
 508b6f0:	98ffff17 	ldw	r3,-4(r19)
 508b6f4:	113ffe04 	addi	r4,r2,-8
 508b6f8:	00bfff84 	movi	r2,-2
 508b6fc:	1884703a 	and	r2,r3,r2
 508b700:	a885883a 	add	r2,r21,r2
 508b704:	20808626 	beq	r4,r2,508b920 <_realloc_r+0x4fc>
 508b708:	81bfff04 	addi	r6,r16,-4
 508b70c:	00800904 	movi	r2,36
 508b710:	11807036 	bltu	r2,r6,508b8d4 <_realloc_r+0x4b0>
 508b714:	00c004c4 	movi	r3,19
 508b718:	19805636 	bltu	r3,r6,508b874 <_realloc_r+0x450>
 508b71c:	8805883a 	mov	r2,r17
 508b720:	9807883a 	mov	r3,r19
 508b724:	19000017 	ldw	r4,0(r3)
 508b728:	11000015 	stw	r4,0(r2)
 508b72c:	19000117 	ldw	r4,4(r3)
 508b730:	11000115 	stw	r4,4(r2)
 508b734:	18c00217 	ldw	r3,8(r3)
 508b738:	10c00215 	stw	r3,8(r2)
 508b73c:	980b883a 	mov	r5,r19
 508b740:	9009883a 	mov	r4,r18
 508b744:	5088cb40 	call	5088cb4 <_free_r>
 508b748:	9009883a 	mov	r4,r18
 508b74c:	50925480 	call	5092548 <__malloc_unlock>
 508b750:	8805883a 	mov	r2,r17
 508b754:	003f9a06 	br	508b5c0 <__alt_data_end+0xfffbd3c0>
 508b758:	300b883a 	mov	r5,r6
 508b75c:	dfc00917 	ldw	ra,36(sp)
 508b760:	df000817 	ldw	fp,32(sp)
 508b764:	ddc00717 	ldw	r23,28(sp)
 508b768:	dd800617 	ldw	r22,24(sp)
 508b76c:	dd400517 	ldw	r21,20(sp)
 508b770:	dd000417 	ldw	r20,16(sp)
 508b774:	dcc00317 	ldw	r19,12(sp)
 508b778:	dc800217 	ldw	r18,8(sp)
 508b77c:	dc400117 	ldw	r17,4(sp)
 508b780:	dc000017 	ldw	r16,0(sp)
 508b784:	dec00a04 	addi	sp,sp,40
 508b788:	50898501 	jmpi	5089850 <_malloc_r>
 508b78c:	11400317 	ldw	r5,12(r2)
 508b790:	10800217 	ldw	r2,8(r2)
 508b794:	9823883a 	mov	r17,r19
 508b798:	2021883a 	mov	r16,r4
 508b79c:	11400315 	stw	r5,12(r2)
 508b7a0:	28800215 	stw	r2,8(r5)
 508b7a4:	003f7906 	br	508b58c <__alt_data_end+0xfffbd38c>
 508b7a8:	21000117 	ldw	r4,4(r4)
 508b7ac:	00bfff04 	movi	r2,-4
 508b7b0:	a1800404 	addi	r6,r20,16
 508b7b4:	2088703a 	and	r4,r4,r2
 508b7b8:	2409883a 	add	r4,r4,r16
 508b7bc:	2180380e 	bge	r4,r6,508b8a0 <_realloc_r+0x47c>
 508b7c0:	18c0004c 	andi	r3,r3,1
 508b7c4:	183fc51e 	bne	r3,zero,508b6dc <__alt_data_end+0xfffbd4dc>
 508b7c8:	9dfffe17 	ldw	r23,-8(r19)
 508b7cc:	adefc83a 	sub	r23,r21,r23
 508b7d0:	b9400117 	ldw	r5,4(r23)
 508b7d4:	288a703a 	and	r5,r5,r2
 508b7d8:	216d883a 	add	r22,r4,r5
 508b7dc:	b1bf8b16 	blt	r22,r6,508b60c <__alt_data_end+0xfffbd40c>
 508b7e0:	b8800317 	ldw	r2,12(r23)
 508b7e4:	b8c00217 	ldw	r3,8(r23)
 508b7e8:	81bfff04 	addi	r6,r16,-4
 508b7ec:	01000904 	movi	r4,36
 508b7f0:	18800315 	stw	r2,12(r3)
 508b7f4:	10c00215 	stw	r3,8(r2)
 508b7f8:	bc400204 	addi	r17,r23,8
 508b7fc:	21805a36 	bltu	r4,r6,508b968 <_realloc_r+0x544>
 508b800:	008004c4 	movi	r2,19
 508b804:	1180562e 	bgeu	r2,r6,508b960 <_realloc_r+0x53c>
 508b808:	98800017 	ldw	r2,0(r19)
 508b80c:	b8800215 	stw	r2,8(r23)
 508b810:	98800117 	ldw	r2,4(r19)
 508b814:	b8800315 	stw	r2,12(r23)
 508b818:	008006c4 	movi	r2,27
 508b81c:	11805636 	bltu	r2,r6,508b978 <_realloc_r+0x554>
 508b820:	b8800404 	addi	r2,r23,16
 508b824:	9cc00204 	addi	r19,r19,8
 508b828:	98c00017 	ldw	r3,0(r19)
 508b82c:	10c00015 	stw	r3,0(r2)
 508b830:	98c00117 	ldw	r3,4(r19)
 508b834:	10c00115 	stw	r3,4(r2)
 508b838:	98c00217 	ldw	r3,8(r19)
 508b83c:	10c00215 	stw	r3,8(r2)
 508b840:	bd07883a 	add	r3,r23,r20
 508b844:	b505c83a 	sub	r2,r22,r20
 508b848:	e0c00215 	stw	r3,8(fp)
 508b84c:	10800054 	ori	r2,r2,1
 508b850:	18800115 	stw	r2,4(r3)
 508b854:	b8800117 	ldw	r2,4(r23)
 508b858:	9009883a 	mov	r4,r18
 508b85c:	1080004c 	andi	r2,r2,1
 508b860:	a0a8b03a 	or	r20,r20,r2
 508b864:	bd000115 	stw	r20,4(r23)
 508b868:	50925480 	call	5092548 <__malloc_unlock>
 508b86c:	8805883a 	mov	r2,r17
 508b870:	003f5306 	br	508b5c0 <__alt_data_end+0xfffbd3c0>
 508b874:	98c00017 	ldw	r3,0(r19)
 508b878:	88c00015 	stw	r3,0(r17)
 508b87c:	98c00117 	ldw	r3,4(r19)
 508b880:	88c00115 	stw	r3,4(r17)
 508b884:	00c006c4 	movi	r3,27
 508b888:	19801d36 	bltu	r3,r6,508b900 <_realloc_r+0x4dc>
 508b88c:	88800204 	addi	r2,r17,8
 508b890:	98c00204 	addi	r3,r19,8
 508b894:	003fa306 	br	508b724 <__alt_data_end+0xfffbd524>
 508b898:	8807883a 	mov	r3,r17
 508b89c:	003f7406 	br	508b670 <__alt_data_end+0xfffbd470>
 508b8a0:	ad2b883a 	add	r21,r21,r20
 508b8a4:	2505c83a 	sub	r2,r4,r20
 508b8a8:	e5400215 	stw	r21,8(fp)
 508b8ac:	10800054 	ori	r2,r2,1
 508b8b0:	a8800115 	stw	r2,4(r21)
 508b8b4:	98bfff17 	ldw	r2,-4(r19)
 508b8b8:	9009883a 	mov	r4,r18
 508b8bc:	1080004c 	andi	r2,r2,1
 508b8c0:	a0a8b03a 	or	r20,r20,r2
 508b8c4:	9d3fff15 	stw	r20,-4(r19)
 508b8c8:	50925480 	call	5092548 <__malloc_unlock>
 508b8cc:	9805883a 	mov	r2,r19
 508b8d0:	003f3b06 	br	508b5c0 <__alt_data_end+0xfffbd3c0>
 508b8d4:	8809883a 	mov	r4,r17
 508b8d8:	980b883a 	mov	r5,r19
 508b8dc:	508a2180 	call	508a218 <memmove>
 508b8e0:	003f9606 	br	508b73c <__alt_data_end+0xfffbd53c>
 508b8e4:	8809883a 	mov	r4,r17
 508b8e8:	980b883a 	mov	r5,r19
 508b8ec:	508a2180 	call	508a218 <memmove>
 508b8f0:	b8c00117 	ldw	r3,4(r23)
 508b8f4:	b021883a 	mov	r16,r22
 508b8f8:	b82b883a 	mov	r21,r23
 508b8fc:	003f2306 	br	508b58c <__alt_data_end+0xfffbd38c>
 508b900:	98c00217 	ldw	r3,8(r19)
 508b904:	88c00215 	stw	r3,8(r17)
 508b908:	98c00317 	ldw	r3,12(r19)
 508b90c:	88c00315 	stw	r3,12(r17)
 508b910:	30800c26 	beq	r6,r2,508b944 <_realloc_r+0x520>
 508b914:	88800404 	addi	r2,r17,16
 508b918:	98c00404 	addi	r3,r19,16
 508b91c:	003f8106 	br	508b724 <__alt_data_end+0xfffbd524>
 508b920:	893fff17 	ldw	r4,-4(r17)
 508b924:	00bfff04 	movi	r2,-4
 508b928:	9823883a 	mov	r17,r19
 508b92c:	2084703a 	and	r2,r4,r2
 508b930:	80a1883a 	add	r16,r16,r2
 508b934:	003f1506 	br	508b58c <__alt_data_end+0xfffbd38c>
 508b938:	b8c00404 	addi	r3,r23,16
 508b93c:	9cc00204 	addi	r19,r19,8
 508b940:	003f4b06 	br	508b670 <__alt_data_end+0xfffbd470>
 508b944:	99000417 	ldw	r4,16(r19)
 508b948:	88800604 	addi	r2,r17,24
 508b94c:	98c00604 	addi	r3,r19,24
 508b950:	89000415 	stw	r4,16(r17)
 508b954:	99000517 	ldw	r4,20(r19)
 508b958:	89000515 	stw	r4,20(r17)
 508b95c:	003f7106 	br	508b724 <__alt_data_end+0xfffbd524>
 508b960:	8805883a 	mov	r2,r17
 508b964:	003fb006 	br	508b828 <__alt_data_end+0xfffbd628>
 508b968:	8809883a 	mov	r4,r17
 508b96c:	980b883a 	mov	r5,r19
 508b970:	508a2180 	call	508a218 <memmove>
 508b974:	003fb206 	br	508b840 <__alt_data_end+0xfffbd640>
 508b978:	98800217 	ldw	r2,8(r19)
 508b97c:	b8800415 	stw	r2,16(r23)
 508b980:	98800317 	ldw	r2,12(r19)
 508b984:	b8800515 	stw	r2,20(r23)
 508b988:	31000726 	beq	r6,r4,508b9a8 <_realloc_r+0x584>
 508b98c:	b8800604 	addi	r2,r23,24
 508b990:	9cc00404 	addi	r19,r19,16
 508b994:	003fa406 	br	508b828 <__alt_data_end+0xfffbd628>
 508b998:	9009883a 	mov	r4,r18
 508b99c:	50925480 	call	5092548 <__malloc_unlock>
 508b9a0:	0005883a 	mov	r2,zero
 508b9a4:	003f0606 	br	508b5c0 <__alt_data_end+0xfffbd3c0>
 508b9a8:	98c00417 	ldw	r3,16(r19)
 508b9ac:	9cc00604 	addi	r19,r19,24
 508b9b0:	b8800804 	addi	r2,r23,32
 508b9b4:	b8c00615 	stw	r3,24(r23)
 508b9b8:	98ffff17 	ldw	r3,-4(r19)
 508b9bc:	b8c00715 	stw	r3,28(r23)
 508b9c0:	003f9906 	br	508b828 <__alt_data_end+0xfffbd628>

0508b9c4 <__fpclassifyd>:
 508b9c4:	00a00034 	movhi	r2,32768
 508b9c8:	10bfffc4 	addi	r2,r2,-1
 508b9cc:	2884703a 	and	r2,r5,r2
 508b9d0:	10000726 	beq	r2,zero,508b9f0 <__fpclassifyd+0x2c>
 508b9d4:	00fffc34 	movhi	r3,65520
 508b9d8:	019ff834 	movhi	r6,32736
 508b9dc:	28c7883a 	add	r3,r5,r3
 508b9e0:	31bfffc4 	addi	r6,r6,-1
 508b9e4:	30c00536 	bltu	r6,r3,508b9fc <__fpclassifyd+0x38>
 508b9e8:	00800104 	movi	r2,4
 508b9ec:	f800283a 	ret
 508b9f0:	2000021e 	bne	r4,zero,508b9fc <__fpclassifyd+0x38>
 508b9f4:	00800084 	movi	r2,2
 508b9f8:	f800283a 	ret
 508b9fc:	00dffc34 	movhi	r3,32752
 508ba00:	019ff834 	movhi	r6,32736
 508ba04:	28cb883a 	add	r5,r5,r3
 508ba08:	31bfffc4 	addi	r6,r6,-1
 508ba0c:	317ff62e 	bgeu	r6,r5,508b9e8 <__alt_data_end+0xfffbd7e8>
 508ba10:	01400434 	movhi	r5,16
 508ba14:	297fffc4 	addi	r5,r5,-1
 508ba18:	28800236 	bltu	r5,r2,508ba24 <__fpclassifyd+0x60>
 508ba1c:	008000c4 	movi	r2,3
 508ba20:	f800283a 	ret
 508ba24:	10c00226 	beq	r2,r3,508ba30 <__fpclassifyd+0x6c>
 508ba28:	0005883a 	mov	r2,zero
 508ba2c:	f800283a 	ret
 508ba30:	2005003a 	cmpeq	r2,r4,zero
 508ba34:	f800283a 	ret

0508ba38 <_sbrk_r>:
 508ba38:	defffd04 	addi	sp,sp,-12
 508ba3c:	dc000015 	stw	r16,0(sp)
 508ba40:	040142b4 	movhi	r16,1290
 508ba44:	dc400115 	stw	r17,4(sp)
 508ba48:	84232d04 	addi	r16,r16,-29516
 508ba4c:	2023883a 	mov	r17,r4
 508ba50:	2809883a 	mov	r4,r5
 508ba54:	dfc00215 	stw	ra,8(sp)
 508ba58:	80000015 	stw	zero,0(r16)
 508ba5c:	50927140 	call	5092714 <sbrk>
 508ba60:	00ffffc4 	movi	r3,-1
 508ba64:	10c00526 	beq	r2,r3,508ba7c <_sbrk_r+0x44>
 508ba68:	dfc00217 	ldw	ra,8(sp)
 508ba6c:	dc400117 	ldw	r17,4(sp)
 508ba70:	dc000017 	ldw	r16,0(sp)
 508ba74:	dec00304 	addi	sp,sp,12
 508ba78:	f800283a 	ret
 508ba7c:	80c00017 	ldw	r3,0(r16)
 508ba80:	183ff926 	beq	r3,zero,508ba68 <__alt_data_end+0xfffbd868>
 508ba84:	88c00015 	stw	r3,0(r17)
 508ba88:	003ff706 	br	508ba68 <__alt_data_end+0xfffbd868>

0508ba8c <__sread>:
 508ba8c:	defffe04 	addi	sp,sp,-8
 508ba90:	dc000015 	stw	r16,0(sp)
 508ba94:	2821883a 	mov	r16,r5
 508ba98:	2940038f 	ldh	r5,14(r5)
 508ba9c:	dfc00115 	stw	ra,4(sp)
 508baa0:	508e89c0 	call	508e89c <_read_r>
 508baa4:	10000716 	blt	r2,zero,508bac4 <__sread+0x38>
 508baa8:	80c01417 	ldw	r3,80(r16)
 508baac:	1887883a 	add	r3,r3,r2
 508bab0:	80c01415 	stw	r3,80(r16)
 508bab4:	dfc00117 	ldw	ra,4(sp)
 508bab8:	dc000017 	ldw	r16,0(sp)
 508babc:	dec00204 	addi	sp,sp,8
 508bac0:	f800283a 	ret
 508bac4:	80c0030b 	ldhu	r3,12(r16)
 508bac8:	18fbffcc 	andi	r3,r3,61439
 508bacc:	80c0030d 	sth	r3,12(r16)
 508bad0:	dfc00117 	ldw	ra,4(sp)
 508bad4:	dc000017 	ldw	r16,0(sp)
 508bad8:	dec00204 	addi	sp,sp,8
 508badc:	f800283a 	ret

0508bae0 <__seofread>:
 508bae0:	0005883a 	mov	r2,zero
 508bae4:	f800283a 	ret

0508bae8 <__swrite>:
 508bae8:	2880030b 	ldhu	r2,12(r5)
 508baec:	defffb04 	addi	sp,sp,-20
 508baf0:	dcc00315 	stw	r19,12(sp)
 508baf4:	dc800215 	stw	r18,8(sp)
 508baf8:	dc400115 	stw	r17,4(sp)
 508bafc:	dc000015 	stw	r16,0(sp)
 508bb00:	dfc00415 	stw	ra,16(sp)
 508bb04:	10c0400c 	andi	r3,r2,256
 508bb08:	2821883a 	mov	r16,r5
 508bb0c:	2027883a 	mov	r19,r4
 508bb10:	3025883a 	mov	r18,r6
 508bb14:	3823883a 	mov	r17,r7
 508bb18:	18000526 	beq	r3,zero,508bb30 <__swrite+0x48>
 508bb1c:	2940038f 	ldh	r5,14(r5)
 508bb20:	000d883a 	mov	r6,zero
 508bb24:	01c00084 	movi	r7,2
 508bb28:	508e8400 	call	508e840 <_lseek_r>
 508bb2c:	8080030b 	ldhu	r2,12(r16)
 508bb30:	8140038f 	ldh	r5,14(r16)
 508bb34:	10bbffcc 	andi	r2,r2,61439
 508bb38:	9809883a 	mov	r4,r19
 508bb3c:	900d883a 	mov	r6,r18
 508bb40:	880f883a 	mov	r7,r17
 508bb44:	8080030d 	sth	r2,12(r16)
 508bb48:	dfc00417 	ldw	ra,16(sp)
 508bb4c:	dcc00317 	ldw	r19,12(sp)
 508bb50:	dc800217 	ldw	r18,8(sp)
 508bb54:	dc400117 	ldw	r17,4(sp)
 508bb58:	dc000017 	ldw	r16,0(sp)
 508bb5c:	dec00504 	addi	sp,sp,20
 508bb60:	508e3301 	jmpi	508e330 <_write_r>

0508bb64 <__sseek>:
 508bb64:	defffe04 	addi	sp,sp,-8
 508bb68:	dc000015 	stw	r16,0(sp)
 508bb6c:	2821883a 	mov	r16,r5
 508bb70:	2940038f 	ldh	r5,14(r5)
 508bb74:	dfc00115 	stw	ra,4(sp)
 508bb78:	508e8400 	call	508e840 <_lseek_r>
 508bb7c:	00ffffc4 	movi	r3,-1
 508bb80:	10c00826 	beq	r2,r3,508bba4 <__sseek+0x40>
 508bb84:	80c0030b 	ldhu	r3,12(r16)
 508bb88:	80801415 	stw	r2,80(r16)
 508bb8c:	18c40014 	ori	r3,r3,4096
 508bb90:	80c0030d 	sth	r3,12(r16)
 508bb94:	dfc00117 	ldw	ra,4(sp)
 508bb98:	dc000017 	ldw	r16,0(sp)
 508bb9c:	dec00204 	addi	sp,sp,8
 508bba0:	f800283a 	ret
 508bba4:	80c0030b 	ldhu	r3,12(r16)
 508bba8:	18fbffcc 	andi	r3,r3,61439
 508bbac:	80c0030d 	sth	r3,12(r16)
 508bbb0:	dfc00117 	ldw	ra,4(sp)
 508bbb4:	dc000017 	ldw	r16,0(sp)
 508bbb8:	dec00204 	addi	sp,sp,8
 508bbbc:	f800283a 	ret

0508bbc0 <__sclose>:
 508bbc0:	2940038f 	ldh	r5,14(r5)
 508bbc4:	508e38c1 	jmpi	508e38c <_close_r>

0508bbc8 <strcmp>:
 508bbc8:	2144b03a 	or	r2,r4,r5
 508bbcc:	108000cc 	andi	r2,r2,3
 508bbd0:	1000171e 	bne	r2,zero,508bc30 <strcmp+0x68>
 508bbd4:	20800017 	ldw	r2,0(r4)
 508bbd8:	28c00017 	ldw	r3,0(r5)
 508bbdc:	10c0141e 	bne	r2,r3,508bc30 <strcmp+0x68>
 508bbe0:	027fbff4 	movhi	r9,65279
 508bbe4:	4a7fbfc4 	addi	r9,r9,-257
 508bbe8:	0086303a 	nor	r3,zero,r2
 508bbec:	02202074 	movhi	r8,32897
 508bbf0:	1245883a 	add	r2,r2,r9
 508bbf4:	42202004 	addi	r8,r8,-32640
 508bbf8:	10c4703a 	and	r2,r2,r3
 508bbfc:	1204703a 	and	r2,r2,r8
 508bc00:	10000226 	beq	r2,zero,508bc0c <strcmp+0x44>
 508bc04:	00001706 	br	508bc64 <strcmp+0x9c>
 508bc08:	1000161e 	bne	r2,zero,508bc64 <strcmp+0x9c>
 508bc0c:	21000104 	addi	r4,r4,4
 508bc10:	20c00017 	ldw	r3,0(r4)
 508bc14:	29400104 	addi	r5,r5,4
 508bc18:	29800017 	ldw	r6,0(r5)
 508bc1c:	1a4f883a 	add	r7,r3,r9
 508bc20:	00c4303a 	nor	r2,zero,r3
 508bc24:	3884703a 	and	r2,r7,r2
 508bc28:	1204703a 	and	r2,r2,r8
 508bc2c:	19bff626 	beq	r3,r6,508bc08 <__alt_data_end+0xfffbda08>
 508bc30:	20800007 	ldb	r2,0(r4)
 508bc34:	1000051e 	bne	r2,zero,508bc4c <strcmp+0x84>
 508bc38:	00000606 	br	508bc54 <strcmp+0x8c>
 508bc3c:	21000044 	addi	r4,r4,1
 508bc40:	20800007 	ldb	r2,0(r4)
 508bc44:	29400044 	addi	r5,r5,1
 508bc48:	10000226 	beq	r2,zero,508bc54 <strcmp+0x8c>
 508bc4c:	28c00007 	ldb	r3,0(r5)
 508bc50:	10fffa26 	beq	r2,r3,508bc3c <__alt_data_end+0xfffbda3c>
 508bc54:	20800003 	ldbu	r2,0(r4)
 508bc58:	28c00003 	ldbu	r3,0(r5)
 508bc5c:	10c5c83a 	sub	r2,r2,r3
 508bc60:	f800283a 	ret
 508bc64:	0005883a 	mov	r2,zero
 508bc68:	f800283a 	ret

0508bc6c <__ssprint_r>:
 508bc6c:	30800217 	ldw	r2,8(r6)
 508bc70:	defff604 	addi	sp,sp,-40
 508bc74:	ddc00715 	stw	r23,28(sp)
 508bc78:	dcc00315 	stw	r19,12(sp)
 508bc7c:	dfc00915 	stw	ra,36(sp)
 508bc80:	df000815 	stw	fp,32(sp)
 508bc84:	dd800615 	stw	r22,24(sp)
 508bc88:	dd400515 	stw	r21,20(sp)
 508bc8c:	dd000415 	stw	r20,16(sp)
 508bc90:	dc800215 	stw	r18,8(sp)
 508bc94:	dc400115 	stw	r17,4(sp)
 508bc98:	dc000015 	stw	r16,0(sp)
 508bc9c:	3027883a 	mov	r19,r6
 508bca0:	35c00017 	ldw	r23,0(r6)
 508bca4:	10005526 	beq	r2,zero,508bdfc <__ssprint_r+0x190>
 508bca8:	2029883a 	mov	r20,r4
 508bcac:	29000017 	ldw	r4,0(r5)
 508bcb0:	2821883a 	mov	r16,r5
 508bcb4:	0039883a 	mov	fp,zero
 508bcb8:	0023883a 	mov	r17,zero
 508bcbc:	88003926 	beq	r17,zero,508bda4 <__ssprint_r+0x138>
 508bcc0:	84800217 	ldw	r18,8(r16)
 508bcc4:	902d883a 	mov	r22,r18
 508bcc8:	8c803a36 	bltu	r17,r18,508bdb4 <__ssprint_r+0x148>
 508bccc:	80c0030b 	ldhu	r3,12(r16)
 508bcd0:	1881200c 	andi	r2,r3,1152
 508bcd4:	10002626 	beq	r2,zero,508bd70 <__ssprint_r+0x104>
 508bcd8:	80800517 	ldw	r2,20(r16)
 508bcdc:	81400417 	ldw	r5,16(r16)
 508bce0:	89c00044 	addi	r7,r17,1
 508bce4:	108d883a 	add	r6,r2,r2
 508bce8:	3085883a 	add	r2,r6,r2
 508bcec:	100cd7fa 	srli	r6,r2,31
 508bcf0:	216dc83a 	sub	r22,r4,r5
 508bcf4:	3d89883a 	add	r4,r7,r22
 508bcf8:	3085883a 	add	r2,r6,r2
 508bcfc:	1025d07a 	srai	r18,r2,1
 508bd00:	900d883a 	mov	r6,r18
 508bd04:	9100022e 	bgeu	r18,r4,508bd10 <__ssprint_r+0xa4>
 508bd08:	2025883a 	mov	r18,r4
 508bd0c:	200d883a 	mov	r6,r4
 508bd10:	18c1000c 	andi	r3,r3,1024
 508bd14:	a009883a 	mov	r4,r20
 508bd18:	18002926 	beq	r3,zero,508bdc0 <__ssprint_r+0x154>
 508bd1c:	300b883a 	mov	r5,r6
 508bd20:	50898500 	call	5089850 <_malloc_r>
 508bd24:	102b883a 	mov	r21,r2
 508bd28:	10002b26 	beq	r2,zero,508bdd8 <__ssprint_r+0x16c>
 508bd2c:	81400417 	ldw	r5,16(r16)
 508bd30:	1009883a 	mov	r4,r2
 508bd34:	b00d883a 	mov	r6,r22
 508bd38:	508a0e00 	call	508a0e0 <memcpy>
 508bd3c:	8080030b 	ldhu	r2,12(r16)
 508bd40:	00fedfc4 	movi	r3,-1153
 508bd44:	10c4703a 	and	r2,r2,r3
 508bd48:	10802014 	ori	r2,r2,128
 508bd4c:	8080030d 	sth	r2,12(r16)
 508bd50:	ad89883a 	add	r4,r21,r22
 508bd54:	95adc83a 	sub	r22,r18,r22
 508bd58:	84800515 	stw	r18,20(r16)
 508bd5c:	85800215 	stw	r22,8(r16)
 508bd60:	85400415 	stw	r21,16(r16)
 508bd64:	81000015 	stw	r4,0(r16)
 508bd68:	8825883a 	mov	r18,r17
 508bd6c:	882d883a 	mov	r22,r17
 508bd70:	e00b883a 	mov	r5,fp
 508bd74:	b00d883a 	mov	r6,r22
 508bd78:	508a2180 	call	508a218 <memmove>
 508bd7c:	80c00217 	ldw	r3,8(r16)
 508bd80:	81000017 	ldw	r4,0(r16)
 508bd84:	98800217 	ldw	r2,8(r19)
 508bd88:	1ca5c83a 	sub	r18,r3,r18
 508bd8c:	2589883a 	add	r4,r4,r22
 508bd90:	84800215 	stw	r18,8(r16)
 508bd94:	81000015 	stw	r4,0(r16)
 508bd98:	1463c83a 	sub	r17,r2,r17
 508bd9c:	9c400215 	stw	r17,8(r19)
 508bda0:	88001626 	beq	r17,zero,508bdfc <__ssprint_r+0x190>
 508bda4:	bf000017 	ldw	fp,0(r23)
 508bda8:	bc400117 	ldw	r17,4(r23)
 508bdac:	bdc00204 	addi	r23,r23,8
 508bdb0:	003fc206 	br	508bcbc <__alt_data_end+0xfffbdabc>
 508bdb4:	8825883a 	mov	r18,r17
 508bdb8:	882d883a 	mov	r22,r17
 508bdbc:	003fec06 	br	508bd70 <__alt_data_end+0xfffbdb70>
 508bdc0:	508b4240 	call	508b424 <_realloc_r>
 508bdc4:	102b883a 	mov	r21,r2
 508bdc8:	103fe11e 	bne	r2,zero,508bd50 <__alt_data_end+0xfffbdb50>
 508bdcc:	81400417 	ldw	r5,16(r16)
 508bdd0:	a009883a 	mov	r4,r20
 508bdd4:	5088cb40 	call	5088cb4 <_free_r>
 508bdd8:	80c0030b 	ldhu	r3,12(r16)
 508bddc:	00800304 	movi	r2,12
 508bde0:	a0800015 	stw	r2,0(r20)
 508bde4:	18c01014 	ori	r3,r3,64
 508bde8:	80c0030d 	sth	r3,12(r16)
 508bdec:	00bfffc4 	movi	r2,-1
 508bdf0:	98000215 	stw	zero,8(r19)
 508bdf4:	98000115 	stw	zero,4(r19)
 508bdf8:	00000206 	br	508be04 <__ssprint_r+0x198>
 508bdfc:	98000115 	stw	zero,4(r19)
 508be00:	0005883a 	mov	r2,zero
 508be04:	dfc00917 	ldw	ra,36(sp)
 508be08:	df000817 	ldw	fp,32(sp)
 508be0c:	ddc00717 	ldw	r23,28(sp)
 508be10:	dd800617 	ldw	r22,24(sp)
 508be14:	dd400517 	ldw	r21,20(sp)
 508be18:	dd000417 	ldw	r20,16(sp)
 508be1c:	dcc00317 	ldw	r19,12(sp)
 508be20:	dc800217 	ldw	r18,8(sp)
 508be24:	dc400117 	ldw	r17,4(sp)
 508be28:	dc000017 	ldw	r16,0(sp)
 508be2c:	dec00a04 	addi	sp,sp,40
 508be30:	f800283a 	ret

0508be34 <___svfiprintf_internal_r>:
 508be34:	2880030b 	ldhu	r2,12(r5)
 508be38:	deffc904 	addi	sp,sp,-220
 508be3c:	dd403215 	stw	r21,200(sp)
 508be40:	dfc03615 	stw	ra,216(sp)
 508be44:	df003515 	stw	fp,212(sp)
 508be48:	ddc03415 	stw	r23,208(sp)
 508be4c:	dd803315 	stw	r22,204(sp)
 508be50:	dd003115 	stw	r20,196(sp)
 508be54:	dcc03015 	stw	r19,192(sp)
 508be58:	dc802f15 	stw	r18,188(sp)
 508be5c:	dc402e15 	stw	r17,184(sp)
 508be60:	dc002d15 	stw	r16,180(sp)
 508be64:	d9402715 	stw	r5,156(sp)
 508be68:	d9002915 	stw	r4,164(sp)
 508be6c:	1080200c 	andi	r2,r2,128
 508be70:	d9c02315 	stw	r7,140(sp)
 508be74:	302b883a 	mov	r21,r6
 508be78:	10000226 	beq	r2,zero,508be84 <___svfiprintf_internal_r+0x50>
 508be7c:	28800417 	ldw	r2,16(r5)
 508be80:	1003ce26 	beq	r2,zero,508cdbc <___svfiprintf_internal_r+0xf88>
 508be84:	dac01a04 	addi	r11,sp,104
 508be88:	da8019c4 	addi	r10,sp,103
 508be8c:	dc802917 	ldw	r18,164(sp)
 508be90:	dd002717 	ldw	r20,156(sp)
 508be94:	04c14274 	movhi	r19,1289
 508be98:	dac01e15 	stw	r11,120(sp)
 508be9c:	5a97c83a 	sub	r11,r11,r10
 508bea0:	9cd54b04 	addi	r19,r19,21804
 508bea4:	da801f15 	stw	r10,124(sp)
 508bea8:	dec01a15 	stw	sp,104(sp)
 508beac:	d8001c15 	stw	zero,112(sp)
 508beb0:	d8001b15 	stw	zero,108(sp)
 508beb4:	d8002a15 	stw	zero,168(sp)
 508beb8:	d8002415 	stw	zero,144(sp)
 508bebc:	d811883a 	mov	r8,sp
 508bec0:	dac02b15 	stw	r11,172(sp)
 508bec4:	a8800007 	ldb	r2,0(r21)
 508bec8:	10026826 	beq	r2,zero,508c86c <___svfiprintf_internal_r+0xa38>
 508becc:	01000944 	movi	r4,37
 508bed0:	11026626 	beq	r2,r4,508c86c <___svfiprintf_internal_r+0xa38>
 508bed4:	a805883a 	mov	r2,r21
 508bed8:	00000106 	br	508bee0 <___svfiprintf_internal_r+0xac>
 508bedc:	19000326 	beq	r3,r4,508beec <___svfiprintf_internal_r+0xb8>
 508bee0:	10800044 	addi	r2,r2,1
 508bee4:	10c00007 	ldb	r3,0(r2)
 508bee8:	183ffc1e 	bne	r3,zero,508bedc <__alt_data_end+0xfffbdcdc>
 508beec:	1561c83a 	sub	r16,r2,r21
 508bef0:	102d883a 	mov	r22,r2
 508bef4:	80000e26 	beq	r16,zero,508bf30 <___svfiprintf_internal_r+0xfc>
 508bef8:	d8c01c17 	ldw	r3,112(sp)
 508befc:	d8801b17 	ldw	r2,108(sp)
 508bf00:	45400015 	stw	r21,0(r8)
 508bf04:	1c07883a 	add	r3,r3,r16
 508bf08:	10800044 	addi	r2,r2,1
 508bf0c:	d8c01c15 	stw	r3,112(sp)
 508bf10:	44000115 	stw	r16,4(r8)
 508bf14:	d8801b15 	stw	r2,108(sp)
 508bf18:	00c001c4 	movi	r3,7
 508bf1c:	1882d616 	blt	r3,r2,508ca78 <___svfiprintf_internal_r+0xc44>
 508bf20:	42000204 	addi	r8,r8,8
 508bf24:	da802417 	ldw	r10,144(sp)
 508bf28:	5415883a 	add	r10,r10,r16
 508bf2c:	da802415 	stw	r10,144(sp)
 508bf30:	b0800007 	ldb	r2,0(r22)
 508bf34:	10027326 	beq	r2,zero,508c904 <___svfiprintf_internal_r+0xad0>
 508bf38:	b1000047 	ldb	r4,1(r22)
 508bf3c:	b5400044 	addi	r21,r22,1
 508bf40:	d8001d85 	stb	zero,118(sp)
 508bf44:	000d883a 	mov	r6,zero
 508bf48:	043fffc4 	movi	r16,-1
 508bf4c:	d8002115 	stw	zero,132(sp)
 508bf50:	0023883a 	mov	r17,zero
 508bf54:	00c01604 	movi	r3,88
 508bf58:	01400244 	movi	r5,9
 508bf5c:	02400a84 	movi	r9,42
 508bf60:	01c01b04 	movi	r7,108
 508bf64:	ad400044 	addi	r21,r21,1
 508bf68:	20bff804 	addi	r2,r4,-32
 508bf6c:	18819536 	bltu	r3,r2,508c5c4 <___svfiprintf_internal_r+0x790>
 508bf70:	100490ba 	slli	r2,r2,2
 508bf74:	02c14274 	movhi	r11,1289
 508bf78:	5aefe204 	addi	r11,r11,-16504
 508bf7c:	12c5883a 	add	r2,r2,r11
 508bf80:	10800017 	ldw	r2,0(r2)
 508bf84:	1000683a 	jmp	r2
 508bf88:	0508c4c4 	movi	r20,8979
 508bf8c:	0508c5c4 	movi	r20,8983
 508bf90:	0508c5c4 	movi	r20,8983
 508bf94:	0508c4b8 	rdprs	r20,zero,8978
 508bf98:	0508c5c4 	movi	r20,8983
 508bf9c:	0508c5c4 	movi	r20,8983
 508bfa0:	0508c5c4 	movi	r20,8983
 508bfa4:	0508c5c4 	movi	r20,8983
 508bfa8:	0508c5c4 	movi	r20,8983
 508bfac:	0508c5c4 	movi	r20,8983
 508bfb0:	0508c1e8 	cmpgeui	r20,zero,8967
 508bfb4:	0508c5f8 	rdprs	r20,zero,8983
 508bfb8:	0508c5c4 	movi	r20,8983
 508bfbc:	0508c210 	cmplti	r20,zero,8968
 508bfc0:	0508c604 	movi	r20,8984
 508bfc4:	0508c5c4 	movi	r20,8983
 508bfc8:	0508c5ec 	andhi	r20,zero,8983
 508bfcc:	0508c58c 	andi	r20,zero,8982
 508bfd0:	0508c58c 	andi	r20,zero,8982
 508bfd4:	0508c58c 	andi	r20,zero,8982
 508bfd8:	0508c58c 	andi	r20,zero,8982
 508bfdc:	0508c58c 	andi	r20,zero,8982
 508bfe0:	0508c58c 	andi	r20,zero,8982
 508bfe4:	0508c58c 	andi	r20,zero,8982
 508bfe8:	0508c58c 	andi	r20,zero,8982
 508bfec:	0508c58c 	andi	r20,zero,8982
 508bff0:	0508c5c4 	movi	r20,8983
 508bff4:	0508c5c4 	movi	r20,8983
 508bff8:	0508c5c4 	movi	r20,8983
 508bffc:	0508c5c4 	movi	r20,8983
 508c000:	0508c5c4 	movi	r20,8983
 508c004:	0508c5c4 	movi	r20,8983
 508c008:	0508c5c4 	movi	r20,8983
 508c00c:	0508c5c4 	movi	r20,8983
 508c010:	0508c5c4 	movi	r20,8983
 508c014:	0508c5c4 	movi	r20,8983
 508c018:	0508c524 	muli	r20,zero,8980
 508c01c:	0508c5c4 	movi	r20,8983
 508c020:	0508c5c4 	movi	r20,8983
 508c024:	0508c5c4 	movi	r20,8983
 508c028:	0508c5c4 	movi	r20,8983
 508c02c:	0508c5c4 	movi	r20,8983
 508c030:	0508c5c4 	movi	r20,8983
 508c034:	0508c5c4 	movi	r20,8983
 508c038:	0508c5c4 	movi	r20,8983
 508c03c:	0508c5c4 	movi	r20,8983
 508c040:	0508c5c4 	movi	r20,8983
 508c044:	0508c1b8 	rdprs	r20,zero,8966
 508c048:	0508c5c4 	movi	r20,8983
 508c04c:	0508c5c4 	movi	r20,8983
 508c050:	0508c5c4 	movi	r20,8983
 508c054:	0508c5c4 	movi	r20,8983
 508c058:	0508c5c4 	movi	r20,8983
 508c05c:	0508c0ec 	andhi	r20,zero,8963
 508c060:	0508c5c4 	movi	r20,8983
 508c064:	0508c5c4 	movi	r20,8983
 508c068:	0508c418 	cmpnei	r20,zero,8976
 508c06c:	0508c5c4 	movi	r20,8983
 508c070:	0508c5c4 	movi	r20,8983
 508c074:	0508c5c4 	movi	r20,8983
 508c078:	0508c5c4 	movi	r20,8983
 508c07c:	0508c5c4 	movi	r20,8983
 508c080:	0508c5c4 	movi	r20,8983
 508c084:	0508c5c4 	movi	r20,8983
 508c088:	0508c5c4 	movi	r20,8983
 508c08c:	0508c5c4 	movi	r20,8983
 508c090:	0508c5c4 	movi	r20,8983
 508c094:	0508c304 	movi	r20,8972
 508c098:	0508c2c4 	movi	r20,8971
 508c09c:	0508c5c4 	movi	r20,8983
 508c0a0:	0508c5c4 	movi	r20,8983
 508c0a4:	0508c5c4 	movi	r20,8983
 508c0a8:	0508c474 	movhi	r20,8977
 508c0ac:	0508c2c4 	movi	r20,8971
 508c0b0:	0508c5c4 	movi	r20,8983
 508c0b4:	0508c5c4 	movi	r20,8983
 508c0b8:	0508c460 	cmpeqi	r20,zero,8977
 508c0bc:	0508c5c4 	movi	r20,8983
 508c0c0:	0508c480 	call	508c48 <__alt_mem_sdram+0x508c48>
 508c0c4:	0508c1bc 	xorhi	r20,zero,8966
 508c0c8:	0508c284 	movi	r20,8970
 508c0cc:	0508c278 	rdprs	r20,zero,8969
 508c0d0:	0508c5c4 	movi	r20,8983
 508c0d4:	0508c21c 	xori	r20,zero,8968
 508c0d8:	0508c5c4 	movi	r20,8983
 508c0dc:	0508c0f0 	cmpltui	r20,zero,8963
 508c0e0:	0508c5c4 	movi	r20,8983
 508c0e4:	0508c5c4 	movi	r20,8983
 508c0e8:	0508c4e0 	cmpeqi	r20,zero,8979
 508c0ec:	8c400414 	ori	r17,r17,16
 508c0f0:	88c0080c 	andi	r3,r17,32
 508c0f4:	d8802317 	ldw	r2,140(sp)
 508c0f8:	18029626 	beq	r3,zero,508cb54 <___svfiprintf_internal_r+0xd20>
 508c0fc:	dac02317 	ldw	r11,140(sp)
 508c100:	12400017 	ldw	r9,0(r2)
 508c104:	12800117 	ldw	r10,4(r2)
 508c108:	5ac00204 	addi	r11,r11,8
 508c10c:	dac02315 	stw	r11,140(sp)
 508c110:	00800044 	movi	r2,1
 508c114:	4a86b03a 	or	r3,r9,r10
 508c118:	d8001d85 	stb	zero,118(sp)
 508c11c:	8039883a 	mov	fp,r16
 508c120:	0017883a 	mov	r11,zero
 508c124:	80000216 	blt	r16,zero,508c130 <___svfiprintf_internal_r+0x2fc>
 508c128:	013fdfc4 	movi	r4,-129
 508c12c:	8922703a 	and	r17,r17,r4
 508c130:	1801d01e 	bne	r3,zero,508c874 <___svfiprintf_internal_r+0xa40>
 508c134:	80024426 	beq	r16,zero,508ca48 <___svfiprintf_internal_r+0xc14>
 508c138:	10803fcc 	andi	r2,r2,255
 508c13c:	00c00044 	movi	r3,1
 508c140:	10c2b326 	beq	r2,r3,508cc10 <___svfiprintf_internal_r+0xddc>
 508c144:	00c00084 	movi	r3,2
 508c148:	10c25b26 	beq	r2,r3,508cab8 <___svfiprintf_internal_r+0xc84>
 508c14c:	d8c01a04 	addi	r3,sp,104
 508c150:	4808d0fa 	srli	r4,r9,3
 508c154:	500a977a 	slli	r5,r10,29
 508c158:	5014d0fa 	srli	r10,r10,3
 508c15c:	4a4001cc 	andi	r9,r9,7
 508c160:	48800c04 	addi	r2,r9,48
 508c164:	18ffffc4 	addi	r3,r3,-1
 508c168:	2912b03a 	or	r9,r5,r4
 508c16c:	18800005 	stb	r2,0(r3)
 508c170:	4a88b03a 	or	r4,r9,r10
 508c174:	203ff61e 	bne	r4,zero,508c150 <__alt_data_end+0xfffbdf50>
 508c178:	8900004c 	andi	r4,r17,1
 508c17c:	d8c02615 	stw	r3,152(sp)
 508c180:	2002951e 	bne	r4,zero,508cbd8 <___svfiprintf_internal_r+0xda4>
 508c184:	da801e17 	ldw	r10,120(sp)
 508c188:	50f9c83a 	sub	fp,r10,r3
 508c18c:	df002015 	stw	fp,128(sp)
 508c190:	e400010e 	bge	fp,r16,508c198 <___svfiprintf_internal_r+0x364>
 508c194:	dc002015 	stw	r16,128(sp)
 508c198:	5ac03fcc 	andi	r11,r11,255
 508c19c:	5ac0201c 	xori	r11,r11,128
 508c1a0:	5affe004 	addi	r11,r11,-128
 508c1a4:	58006326 	beq	r11,zero,508c334 <___svfiprintf_internal_r+0x500>
 508c1a8:	d8c02017 	ldw	r3,128(sp)
 508c1ac:	18c00044 	addi	r3,r3,1
 508c1b0:	d8c02015 	stw	r3,128(sp)
 508c1b4:	00005f06 	br	508c334 <___svfiprintf_internal_r+0x500>
 508c1b8:	8c400414 	ori	r17,r17,16
 508c1bc:	88c0080c 	andi	r3,r17,32
 508c1c0:	d8802317 	ldw	r2,140(sp)
 508c1c4:	18027826 	beq	r3,zero,508cba8 <___svfiprintf_internal_r+0xd74>
 508c1c8:	dac02317 	ldw	r11,140(sp)
 508c1cc:	12400017 	ldw	r9,0(r2)
 508c1d0:	12800117 	ldw	r10,4(r2)
 508c1d4:	5ac00204 	addi	r11,r11,8
 508c1d8:	dac02315 	stw	r11,140(sp)
 508c1dc:	0005883a 	mov	r2,zero
 508c1e0:	4a86b03a 	or	r3,r9,r10
 508c1e4:	003fcc06 	br	508c118 <__alt_data_end+0xfffbdf18>
 508c1e8:	da802317 	ldw	r10,140(sp)
 508c1ec:	dac02317 	ldw	r11,140(sp)
 508c1f0:	52800017 	ldw	r10,0(r10)
 508c1f4:	58800104 	addi	r2,r11,4
 508c1f8:	da802115 	stw	r10,132(sp)
 508c1fc:	50028a0e 	bge	r10,zero,508cc28 <___svfiprintf_internal_r+0xdf4>
 508c200:	da802117 	ldw	r10,132(sp)
 508c204:	d8802315 	stw	r2,140(sp)
 508c208:	0295c83a 	sub	r10,zero,r10
 508c20c:	da802115 	stw	r10,132(sp)
 508c210:	8c400114 	ori	r17,r17,4
 508c214:	a9000007 	ldb	r4,0(r21)
 508c218:	003f5206 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c21c:	da802317 	ldw	r10,140(sp)
 508c220:	dac02317 	ldw	r11,140(sp)
 508c224:	d8001d85 	stb	zero,118(sp)
 508c228:	52800017 	ldw	r10,0(r10)
 508c22c:	5dc00104 	addi	r23,r11,4
 508c230:	da802615 	stw	r10,152(sp)
 508c234:	5002eb26 	beq	r10,zero,508cde4 <___svfiprintf_internal_r+0xfb0>
 508c238:	d9002617 	ldw	r4,152(sp)
 508c23c:	8002d716 	blt	r16,zero,508cd9c <___svfiprintf_internal_r+0xf68>
 508c240:	000b883a 	mov	r5,zero
 508c244:	800d883a 	mov	r6,r16
 508c248:	da002c15 	stw	r8,176(sp)
 508c24c:	5089ff80 	call	5089ff8 <memchr>
 508c250:	da002c17 	ldw	r8,176(sp)
 508c254:	1002fb26 	beq	r2,zero,508ce44 <___svfiprintf_internal_r+0x1010>
 508c258:	d8c02617 	ldw	r3,152(sp)
 508c25c:	10f9c83a 	sub	fp,r2,r3
 508c260:	8700010e 	bge	r16,fp,508c268 <___svfiprintf_internal_r+0x434>
 508c264:	8039883a 	mov	fp,r16
 508c268:	dac01d83 	ldbu	r11,118(sp)
 508c26c:	ddc02315 	stw	r23,140(sp)
 508c270:	0021883a 	mov	r16,zero
 508c274:	003fc506 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508c278:	8c400814 	ori	r17,r17,32
 508c27c:	a9000007 	ldb	r4,0(r21)
 508c280:	003f3806 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c284:	dac02317 	ldw	r11,140(sp)
 508c288:	00800c04 	movi	r2,48
 508c28c:	d8801d05 	stb	r2,116(sp)
 508c290:	5a400017 	ldw	r9,0(r11)
 508c294:	00801e04 	movi	r2,120
 508c298:	d8801d45 	stb	r2,117(sp)
 508c29c:	00814274 	movhi	r2,1289
 508c2a0:	1094e204 	addi	r2,r2,21384
 508c2a4:	5ac00104 	addi	r11,r11,4
 508c2a8:	d8802a15 	stw	r2,168(sp)
 508c2ac:	0015883a 	mov	r10,zero
 508c2b0:	8c400094 	ori	r17,r17,2
 508c2b4:	dac02315 	stw	r11,140(sp)
 508c2b8:	00800084 	movi	r2,2
 508c2bc:	4807883a 	mov	r3,r9
 508c2c0:	003f9506 	br	508c118 <__alt_data_end+0xfffbdf18>
 508c2c4:	d9801d85 	stb	r6,118(sp)
 508c2c8:	8880080c 	andi	r2,r17,32
 508c2cc:	d8c02317 	ldw	r3,140(sp)
 508c2d0:	10009926 	beq	r2,zero,508c538 <___svfiprintf_internal_r+0x704>
 508c2d4:	dac02317 	ldw	r11,140(sp)
 508c2d8:	18800117 	ldw	r2,4(r3)
 508c2dc:	1a400017 	ldw	r9,0(r3)
 508c2e0:	5ac00204 	addi	r11,r11,8
 508c2e4:	dac02315 	stw	r11,140(sp)
 508c2e8:	1015883a 	mov	r10,r2
 508c2ec:	10009d16 	blt	r2,zero,508c564 <___svfiprintf_internal_r+0x730>
 508c2f0:	dac01d83 	ldbu	r11,118(sp)
 508c2f4:	8039883a 	mov	fp,r16
 508c2f8:	00800044 	movi	r2,1
 508c2fc:	4a86b03a 	or	r3,r9,r10
 508c300:	003f8806 	br	508c124 <__alt_data_end+0xfffbdf24>
 508c304:	dac02317 	ldw	r11,140(sp)
 508c308:	00c00044 	movi	r3,1
 508c30c:	da801004 	addi	r10,sp,64
 508c310:	58800017 	ldw	r2,0(r11)
 508c314:	5ac00104 	addi	r11,r11,4
 508c318:	d8c02015 	stw	r3,128(sp)
 508c31c:	d8001d85 	stb	zero,118(sp)
 508c320:	d8801005 	stb	r2,64(sp)
 508c324:	dac02315 	stw	r11,140(sp)
 508c328:	1839883a 	mov	fp,r3
 508c32c:	da802615 	stw	r10,152(sp)
 508c330:	0021883a 	mov	r16,zero
 508c334:	8a80008c 	andi	r10,r17,2
 508c338:	da802215 	stw	r10,136(sp)
 508c33c:	50000326 	beq	r10,zero,508c34c <___svfiprintf_internal_r+0x518>
 508c340:	dac02017 	ldw	r11,128(sp)
 508c344:	5ac00084 	addi	r11,r11,2
 508c348:	dac02015 	stw	r11,128(sp)
 508c34c:	88c0210c 	andi	r3,r17,132
 508c350:	d8c02515 	stw	r3,148(sp)
 508c354:	1800bb1e 	bne	r3,zero,508c644 <___svfiprintf_internal_r+0x810>
 508c358:	da802117 	ldw	r10,132(sp)
 508c35c:	dac02017 	ldw	r11,128(sp)
 508c360:	52edc83a 	sub	r22,r10,r11
 508c364:	0580b70e 	bge	zero,r22,508c644 <___svfiprintf_internal_r+0x810>
 508c368:	02400404 	movi	r9,16
 508c36c:	d8c01c17 	ldw	r3,112(sp)
 508c370:	d8801b17 	ldw	r2,108(sp)
 508c374:	4d82a70e 	bge	r9,r22,508ce14 <___svfiprintf_internal_r+0xfe0>
 508c378:	01414274 	movhi	r5,1289
 508c37c:	29554f04 	addi	r5,r5,21820
 508c380:	d9402815 	stw	r5,160(sp)
 508c384:	05c001c4 	movi	r23,7
 508c388:	00000306 	br	508c398 <___svfiprintf_internal_r+0x564>
 508c38c:	b5bffc04 	addi	r22,r22,-16
 508c390:	42000204 	addi	r8,r8,8
 508c394:	4d80150e 	bge	r9,r22,508c3ec <___svfiprintf_internal_r+0x5b8>
 508c398:	02814274 	movhi	r10,1289
 508c39c:	18c00404 	addi	r3,r3,16
 508c3a0:	10800044 	addi	r2,r2,1
 508c3a4:	52954f04 	addi	r10,r10,21820
 508c3a8:	42800015 	stw	r10,0(r8)
 508c3ac:	42400115 	stw	r9,4(r8)
 508c3b0:	d8c01c15 	stw	r3,112(sp)
 508c3b4:	d8801b15 	stw	r2,108(sp)
 508c3b8:	b8bff40e 	bge	r23,r2,508c38c <__alt_data_end+0xfffbe18c>
 508c3bc:	9009883a 	mov	r4,r18
 508c3c0:	a00b883a 	mov	r5,r20
 508c3c4:	d9801a04 	addi	r6,sp,104
 508c3c8:	da402c15 	stw	r9,176(sp)
 508c3cc:	508bc6c0 	call	508bc6c <__ssprint_r>
 508c3d0:	da402c17 	ldw	r9,176(sp)
 508c3d4:	1001511e 	bne	r2,zero,508c91c <___svfiprintf_internal_r+0xae8>
 508c3d8:	b5bffc04 	addi	r22,r22,-16
 508c3dc:	d8c01c17 	ldw	r3,112(sp)
 508c3e0:	d8801b17 	ldw	r2,108(sp)
 508c3e4:	d811883a 	mov	r8,sp
 508c3e8:	4dbfeb16 	blt	r9,r22,508c398 <__alt_data_end+0xfffbe198>
 508c3ec:	dac02817 	ldw	r11,160(sp)
 508c3f0:	b0c7883a 	add	r3,r22,r3
 508c3f4:	10800044 	addi	r2,r2,1
 508c3f8:	42c00015 	stw	r11,0(r8)
 508c3fc:	45800115 	stw	r22,4(r8)
 508c400:	d8c01c15 	stw	r3,112(sp)
 508c404:	d8801b15 	stw	r2,108(sp)
 508c408:	010001c4 	movi	r4,7
 508c40c:	2081dd16 	blt	r4,r2,508cb84 <___svfiprintf_internal_r+0xd50>
 508c410:	42000204 	addi	r8,r8,8
 508c414:	00008d06 	br	508c64c <___svfiprintf_internal_r+0x818>
 508c418:	00c14274 	movhi	r3,1289
 508c41c:	18d4dd04 	addi	r3,r3,21364
 508c420:	d8c02a15 	stw	r3,168(sp)
 508c424:	d9801d85 	stb	r6,118(sp)
 508c428:	88c0080c 	andi	r3,r17,32
 508c42c:	d8802317 	ldw	r2,140(sp)
 508c430:	18003226 	beq	r3,zero,508c4fc <___svfiprintf_internal_r+0x6c8>
 508c434:	da802317 	ldw	r10,140(sp)
 508c438:	12400017 	ldw	r9,0(r2)
 508c43c:	52800204 	addi	r10,r10,8
 508c440:	da802315 	stw	r10,140(sp)
 508c444:	12800117 	ldw	r10,4(r2)
 508c448:	8880004c 	andi	r2,r17,1
 508c44c:	1001be26 	beq	r2,zero,508cb48 <___svfiprintf_internal_r+0xd14>
 508c450:	4a86b03a 	or	r3,r9,r10
 508c454:	1802291e 	bne	r3,zero,508ccfc <___svfiprintf_internal_r+0xec8>
 508c458:	00800084 	movi	r2,2
 508c45c:	003f2e06 	br	508c118 <__alt_data_end+0xfffbdf18>
 508c460:	a9000007 	ldb	r4,0(r21)
 508c464:	a805883a 	mov	r2,r21
 508c468:	21c22a26 	beq	r4,r7,508cd14 <___svfiprintf_internal_r+0xee0>
 508c46c:	8c400414 	ori	r17,r17,16
 508c470:	003ebc06 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c474:	8c401014 	ori	r17,r17,64
 508c478:	a9000007 	ldb	r4,0(r21)
 508c47c:	003eb906 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c480:	d9801d85 	stb	r6,118(sp)
 508c484:	8880080c 	andi	r2,r17,32
 508c488:	1002131e 	bne	r2,zero,508ccd8 <___svfiprintf_internal_r+0xea4>
 508c48c:	8880040c 	andi	r2,r17,16
 508c490:	1002241e 	bne	r2,zero,508cd24 <___svfiprintf_internal_r+0xef0>
 508c494:	8c40100c 	andi	r17,r17,64
 508c498:	88022226 	beq	r17,zero,508cd24 <___svfiprintf_internal_r+0xef0>
 508c49c:	dac02317 	ldw	r11,140(sp)
 508c4a0:	da802417 	ldw	r10,144(sp)
 508c4a4:	58800017 	ldw	r2,0(r11)
 508c4a8:	5ac00104 	addi	r11,r11,4
 508c4ac:	dac02315 	stw	r11,140(sp)
 508c4b0:	1280000d 	sth	r10,0(r2)
 508c4b4:	003e8306 	br	508bec4 <__alt_data_end+0xfffbdcc4>
 508c4b8:	8c400054 	ori	r17,r17,1
 508c4bc:	a9000007 	ldb	r4,0(r21)
 508c4c0:	003ea806 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c4c4:	30803fcc 	andi	r2,r6,255
 508c4c8:	1080201c 	xori	r2,r2,128
 508c4cc:	10bfe004 	addi	r2,r2,-128
 508c4d0:	1001ff1e 	bne	r2,zero,508ccd0 <___svfiprintf_internal_r+0xe9c>
 508c4d4:	01800804 	movi	r6,32
 508c4d8:	a9000007 	ldb	r4,0(r21)
 508c4dc:	003ea106 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c4e0:	02c14274 	movhi	r11,1289
 508c4e4:	5ad4e204 	addi	r11,r11,21384
 508c4e8:	dac02a15 	stw	r11,168(sp)
 508c4ec:	d9801d85 	stb	r6,118(sp)
 508c4f0:	88c0080c 	andi	r3,r17,32
 508c4f4:	d8802317 	ldw	r2,140(sp)
 508c4f8:	183fce1e 	bne	r3,zero,508c434 <__alt_data_end+0xfffbe234>
 508c4fc:	88c0040c 	andi	r3,r17,16
 508c500:	1801ed1e 	bne	r3,zero,508ccb8 <___svfiprintf_internal_r+0xe84>
 508c504:	88c0100c 	andi	r3,r17,64
 508c508:	18021a26 	beq	r3,zero,508cd74 <___svfiprintf_internal_r+0xf40>
 508c50c:	da802317 	ldw	r10,140(sp)
 508c510:	1240000b 	ldhu	r9,0(r2)
 508c514:	52800104 	addi	r10,r10,4
 508c518:	da802315 	stw	r10,140(sp)
 508c51c:	0015883a 	mov	r10,zero
 508c520:	003fc906 	br	508c448 <__alt_data_end+0xfffbe248>
 508c524:	8c400414 	ori	r17,r17,16
 508c528:	d9801d85 	stb	r6,118(sp)
 508c52c:	8880080c 	andi	r2,r17,32
 508c530:	d8c02317 	ldw	r3,140(sp)
 508c534:	103f671e 	bne	r2,zero,508c2d4 <__alt_data_end+0xfffbe0d4>
 508c538:	8880040c 	andi	r2,r17,16
 508c53c:	1001c71e 	bne	r2,zero,508cc5c <___svfiprintf_internal_r+0xe28>
 508c540:	8880100c 	andi	r2,r17,64
 508c544:	1001c526 	beq	r2,zero,508cc5c <___svfiprintf_internal_r+0xe28>
 508c548:	1a40000f 	ldh	r9,0(r3)
 508c54c:	dac02317 	ldw	r11,140(sp)
 508c550:	4815d7fa 	srai	r10,r9,31
 508c554:	5ac00104 	addi	r11,r11,4
 508c558:	dac02315 	stw	r11,140(sp)
 508c55c:	5005883a 	mov	r2,r10
 508c560:	103f630e 	bge	r2,zero,508c2f0 <__alt_data_end+0xfffbe0f0>
 508c564:	0253c83a 	sub	r9,zero,r9
 508c568:	4804c03a 	cmpne	r2,r9,zero
 508c56c:	0295c83a 	sub	r10,zero,r10
 508c570:	5095c83a 	sub	r10,r10,r2
 508c574:	02c00b44 	movi	r11,45
 508c578:	dac01d85 	stb	r11,118(sp)
 508c57c:	8039883a 	mov	fp,r16
 508c580:	00800044 	movi	r2,1
 508c584:	4a86b03a 	or	r3,r9,r10
 508c588:	003ee606 	br	508c124 <__alt_data_end+0xfffbdf24>
 508c58c:	a815883a 	mov	r10,r21
 508c590:	d8002115 	stw	zero,132(sp)
 508c594:	20bff404 	addi	r2,r4,-48
 508c598:	51000007 	ldb	r4,0(r10)
 508c59c:	da802117 	ldw	r10,132(sp)
 508c5a0:	ad400044 	addi	r21,r21,1
 508c5a4:	52c002a4 	muli	r11,r10,10
 508c5a8:	a815883a 	mov	r10,r21
 508c5ac:	5885883a 	add	r2,r11,r2
 508c5b0:	d8802115 	stw	r2,132(sp)
 508c5b4:	20bff404 	addi	r2,r4,-48
 508c5b8:	28bff72e 	bgeu	r5,r2,508c598 <__alt_data_end+0xfffbe398>
 508c5bc:	20bff804 	addi	r2,r4,-32
 508c5c0:	18be6b2e 	bgeu	r3,r2,508bf70 <__alt_data_end+0xfffbdd70>
 508c5c4:	d9801d85 	stb	r6,118(sp)
 508c5c8:	2000ce26 	beq	r4,zero,508c904 <___svfiprintf_internal_r+0xad0>
 508c5cc:	02800044 	movi	r10,1
 508c5d0:	dac01004 	addi	r11,sp,64
 508c5d4:	da802015 	stw	r10,128(sp)
 508c5d8:	d9001005 	stb	r4,64(sp)
 508c5dc:	d8001d85 	stb	zero,118(sp)
 508c5e0:	5039883a 	mov	fp,r10
 508c5e4:	dac02615 	stw	r11,152(sp)
 508c5e8:	003f5106 	br	508c330 <__alt_data_end+0xfffbe130>
 508c5ec:	8c402014 	ori	r17,r17,128
 508c5f0:	a9000007 	ldb	r4,0(r21)
 508c5f4:	003e5b06 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c5f8:	01800ac4 	movi	r6,43
 508c5fc:	a9000007 	ldb	r4,0(r21)
 508c600:	003e5806 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508c604:	a9000007 	ldb	r4,0(r21)
 508c608:	aa800044 	addi	r10,r21,1
 508c60c:	22421426 	beq	r4,r9,508ce60 <___svfiprintf_internal_r+0x102c>
 508c610:	20bff404 	addi	r2,r4,-48
 508c614:	502b883a 	mov	r21,r10
 508c618:	0021883a 	mov	r16,zero
 508c61c:	28be5236 	bltu	r5,r2,508bf68 <__alt_data_end+0xfffbdd68>
 508c620:	a9000007 	ldb	r4,0(r21)
 508c624:	840002a4 	muli	r16,r16,10
 508c628:	ad400044 	addi	r21,r21,1
 508c62c:	1421883a 	add	r16,r2,r16
 508c630:	20bff404 	addi	r2,r4,-48
 508c634:	28bffa2e 	bgeu	r5,r2,508c620 <__alt_data_end+0xfffbe420>
 508c638:	803e4b0e 	bge	r16,zero,508bf68 <__alt_data_end+0xfffbdd68>
 508c63c:	043fffc4 	movi	r16,-1
 508c640:	003e4906 	br	508bf68 <__alt_data_end+0xfffbdd68>
 508c644:	d8c01c17 	ldw	r3,112(sp)
 508c648:	d8801b17 	ldw	r2,108(sp)
 508c64c:	d9001d87 	ldb	r4,118(sp)
 508c650:	20000b26 	beq	r4,zero,508c680 <___svfiprintf_internal_r+0x84c>
 508c654:	d9001d84 	addi	r4,sp,118
 508c658:	18c00044 	addi	r3,r3,1
 508c65c:	10800044 	addi	r2,r2,1
 508c660:	41000015 	stw	r4,0(r8)
 508c664:	01000044 	movi	r4,1
 508c668:	41000115 	stw	r4,4(r8)
 508c66c:	d8c01c15 	stw	r3,112(sp)
 508c670:	d8801b15 	stw	r2,108(sp)
 508c674:	010001c4 	movi	r4,7
 508c678:	20811e16 	blt	r4,r2,508caf4 <___svfiprintf_internal_r+0xcc0>
 508c67c:	42000204 	addi	r8,r8,8
 508c680:	da802217 	ldw	r10,136(sp)
 508c684:	50000b26 	beq	r10,zero,508c6b4 <___svfiprintf_internal_r+0x880>
 508c688:	d9001d04 	addi	r4,sp,116
 508c68c:	18c00084 	addi	r3,r3,2
 508c690:	10800044 	addi	r2,r2,1
 508c694:	41000015 	stw	r4,0(r8)
 508c698:	01000084 	movi	r4,2
 508c69c:	41000115 	stw	r4,4(r8)
 508c6a0:	d8c01c15 	stw	r3,112(sp)
 508c6a4:	d8801b15 	stw	r2,108(sp)
 508c6a8:	010001c4 	movi	r4,7
 508c6ac:	20811a16 	blt	r4,r2,508cb18 <___svfiprintf_internal_r+0xce4>
 508c6b0:	42000204 	addi	r8,r8,8
 508c6b4:	dac02517 	ldw	r11,148(sp)
 508c6b8:	01002004 	movi	r4,128
 508c6bc:	5900a826 	beq	r11,r4,508c960 <___svfiprintf_internal_r+0xb2c>
 508c6c0:	8721c83a 	sub	r16,r16,fp
 508c6c4:	0400260e 	bge	zero,r16,508c760 <___svfiprintf_internal_r+0x92c>
 508c6c8:	01c00404 	movi	r7,16
 508c6cc:	3c01a50e 	bge	r7,r16,508cd64 <___svfiprintf_internal_r+0xf30>
 508c6d0:	01014274 	movhi	r4,1289
 508c6d4:	21154b04 	addi	r4,r4,21804
 508c6d8:	d9002215 	stw	r4,136(sp)
 508c6dc:	382f883a 	mov	r23,r7
 508c6e0:	058001c4 	movi	r22,7
 508c6e4:	00000306 	br	508c6f4 <___svfiprintf_internal_r+0x8c0>
 508c6e8:	843ffc04 	addi	r16,r16,-16
 508c6ec:	42000204 	addi	r8,r8,8
 508c6f0:	bc00110e 	bge	r23,r16,508c738 <___svfiprintf_internal_r+0x904>
 508c6f4:	18c00404 	addi	r3,r3,16
 508c6f8:	10800044 	addi	r2,r2,1
 508c6fc:	44c00015 	stw	r19,0(r8)
 508c700:	45c00115 	stw	r23,4(r8)
 508c704:	d8c01c15 	stw	r3,112(sp)
 508c708:	d8801b15 	stw	r2,108(sp)
 508c70c:	b0bff60e 	bge	r22,r2,508c6e8 <__alt_data_end+0xfffbe4e8>
 508c710:	9009883a 	mov	r4,r18
 508c714:	a00b883a 	mov	r5,r20
 508c718:	d9801a04 	addi	r6,sp,104
 508c71c:	508bc6c0 	call	508bc6c <__ssprint_r>
 508c720:	10007e1e 	bne	r2,zero,508c91c <___svfiprintf_internal_r+0xae8>
 508c724:	843ffc04 	addi	r16,r16,-16
 508c728:	d8c01c17 	ldw	r3,112(sp)
 508c72c:	d8801b17 	ldw	r2,108(sp)
 508c730:	d811883a 	mov	r8,sp
 508c734:	bc3fef16 	blt	r23,r16,508c6f4 <__alt_data_end+0xfffbe4f4>
 508c738:	da802217 	ldw	r10,136(sp)
 508c73c:	1c07883a 	add	r3,r3,r16
 508c740:	10800044 	addi	r2,r2,1
 508c744:	42800015 	stw	r10,0(r8)
 508c748:	44000115 	stw	r16,4(r8)
 508c74c:	d8c01c15 	stw	r3,112(sp)
 508c750:	d8801b15 	stw	r2,108(sp)
 508c754:	010001c4 	movi	r4,7
 508c758:	2080ce16 	blt	r4,r2,508ca94 <___svfiprintf_internal_r+0xc60>
 508c75c:	42000204 	addi	r8,r8,8
 508c760:	dac02617 	ldw	r11,152(sp)
 508c764:	e0c7883a 	add	r3,fp,r3
 508c768:	10800044 	addi	r2,r2,1
 508c76c:	42c00015 	stw	r11,0(r8)
 508c770:	47000115 	stw	fp,4(r8)
 508c774:	d8c01c15 	stw	r3,112(sp)
 508c778:	d8801b15 	stw	r2,108(sp)
 508c77c:	010001c4 	movi	r4,7
 508c780:	2080a316 	blt	r4,r2,508ca10 <___svfiprintf_internal_r+0xbdc>
 508c784:	42000204 	addi	r8,r8,8
 508c788:	8c40010c 	andi	r17,r17,4
 508c78c:	88002b26 	beq	r17,zero,508c83c <___svfiprintf_internal_r+0xa08>
 508c790:	da802117 	ldw	r10,132(sp)
 508c794:	dac02017 	ldw	r11,128(sp)
 508c798:	52e1c83a 	sub	r16,r10,r11
 508c79c:	0400270e 	bge	zero,r16,508c83c <___svfiprintf_internal_r+0xa08>
 508c7a0:	04400404 	movi	r17,16
 508c7a4:	d8801b17 	ldw	r2,108(sp)
 508c7a8:	8c019e0e 	bge	r17,r16,508ce24 <___svfiprintf_internal_r+0xff0>
 508c7ac:	01414274 	movhi	r5,1289
 508c7b0:	29554f04 	addi	r5,r5,21820
 508c7b4:	d9402815 	stw	r5,160(sp)
 508c7b8:	070001c4 	movi	fp,7
 508c7bc:	00000306 	br	508c7cc <___svfiprintf_internal_r+0x998>
 508c7c0:	843ffc04 	addi	r16,r16,-16
 508c7c4:	42000204 	addi	r8,r8,8
 508c7c8:	8c00130e 	bge	r17,r16,508c818 <___svfiprintf_internal_r+0x9e4>
 508c7cc:	02814274 	movhi	r10,1289
 508c7d0:	18c00404 	addi	r3,r3,16
 508c7d4:	10800044 	addi	r2,r2,1
 508c7d8:	52954f04 	addi	r10,r10,21820
 508c7dc:	42800015 	stw	r10,0(r8)
 508c7e0:	44400115 	stw	r17,4(r8)
 508c7e4:	d8c01c15 	stw	r3,112(sp)
 508c7e8:	d8801b15 	stw	r2,108(sp)
 508c7ec:	e0bff40e 	bge	fp,r2,508c7c0 <__alt_data_end+0xfffbe5c0>
 508c7f0:	9009883a 	mov	r4,r18
 508c7f4:	a00b883a 	mov	r5,r20
 508c7f8:	d9801a04 	addi	r6,sp,104
 508c7fc:	508bc6c0 	call	508bc6c <__ssprint_r>
 508c800:	1000461e 	bne	r2,zero,508c91c <___svfiprintf_internal_r+0xae8>
 508c804:	843ffc04 	addi	r16,r16,-16
 508c808:	d8c01c17 	ldw	r3,112(sp)
 508c80c:	d8801b17 	ldw	r2,108(sp)
 508c810:	d811883a 	mov	r8,sp
 508c814:	8c3fed16 	blt	r17,r16,508c7cc <__alt_data_end+0xfffbe5cc>
 508c818:	dac02817 	ldw	r11,160(sp)
 508c81c:	1c07883a 	add	r3,r3,r16
 508c820:	10800044 	addi	r2,r2,1
 508c824:	42c00015 	stw	r11,0(r8)
 508c828:	44000115 	stw	r16,4(r8)
 508c82c:	d8c01c15 	stw	r3,112(sp)
 508c830:	d8801b15 	stw	r2,108(sp)
 508c834:	010001c4 	movi	r4,7
 508c838:	2080fe16 	blt	r4,r2,508cc34 <___svfiprintf_internal_r+0xe00>
 508c83c:	dd802017 	ldw	r22,128(sp)
 508c840:	da802117 	ldw	r10,132(sp)
 508c844:	b280010e 	bge	r22,r10,508c84c <___svfiprintf_internal_r+0xa18>
 508c848:	502d883a 	mov	r22,r10
 508c84c:	dac02417 	ldw	r11,144(sp)
 508c850:	5d97883a 	add	r11,r11,r22
 508c854:	dac02415 	stw	r11,144(sp)
 508c858:	1800751e 	bne	r3,zero,508ca30 <___svfiprintf_internal_r+0xbfc>
 508c85c:	a8800007 	ldb	r2,0(r21)
 508c860:	d8001b15 	stw	zero,108(sp)
 508c864:	d811883a 	mov	r8,sp
 508c868:	103d981e 	bne	r2,zero,508becc <__alt_data_end+0xfffbdccc>
 508c86c:	a82d883a 	mov	r22,r21
 508c870:	003daf06 	br	508bf30 <__alt_data_end+0xfffbdd30>
 508c874:	10803fcc 	andi	r2,r2,255
 508c878:	00c00044 	movi	r3,1
 508c87c:	10fe311e 	bne	r2,r3,508c144 <__alt_data_end+0xfffbdf44>
 508c880:	5000e126 	beq	r10,zero,508cc08 <___svfiprintf_internal_r+0xdd4>
 508c884:	dc402015 	stw	r17,128(sp)
 508c888:	dc002215 	stw	r16,136(sp)
 508c88c:	dd801a04 	addi	r22,sp,104
 508c890:	402f883a 	mov	r23,r8
 508c894:	5839883a 	mov	fp,r11
 508c898:	4821883a 	mov	r16,r9
 508c89c:	5023883a 	mov	r17,r10
 508c8a0:	8009883a 	mov	r4,r16
 508c8a4:	880b883a 	mov	r5,r17
 508c8a8:	01800284 	movi	r6,10
 508c8ac:	000f883a 	mov	r7,zero
 508c8b0:	508f2280 	call	508f228 <__umoddi3>
 508c8b4:	10800c04 	addi	r2,r2,48
 508c8b8:	b5bfffc4 	addi	r22,r22,-1
 508c8bc:	8009883a 	mov	r4,r16
 508c8c0:	880b883a 	mov	r5,r17
 508c8c4:	01800284 	movi	r6,10
 508c8c8:	000f883a 	mov	r7,zero
 508c8cc:	b0800005 	stb	r2,0(r22)
 508c8d0:	508ec680 	call	508ec68 <__udivdi3>
 508c8d4:	1021883a 	mov	r16,r2
 508c8d8:	10c4b03a 	or	r2,r2,r3
 508c8dc:	1823883a 	mov	r17,r3
 508c8e0:	103fef1e 	bne	r2,zero,508c8a0 <__alt_data_end+0xfffbe6a0>
 508c8e4:	da801e17 	ldw	r10,120(sp)
 508c8e8:	e017883a 	mov	r11,fp
 508c8ec:	b811883a 	mov	r8,r23
 508c8f0:	dc402017 	ldw	r17,128(sp)
 508c8f4:	dc002217 	ldw	r16,136(sp)
 508c8f8:	dd802615 	stw	r22,152(sp)
 508c8fc:	55b9c83a 	sub	fp,r10,r22
 508c900:	003e2206 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508c904:	d8801c17 	ldw	r2,112(sp)
 508c908:	10000426 	beq	r2,zero,508c91c <___svfiprintf_internal_r+0xae8>
 508c90c:	d9002917 	ldw	r4,164(sp)
 508c910:	d9402717 	ldw	r5,156(sp)
 508c914:	d9801a04 	addi	r6,sp,104
 508c918:	508bc6c0 	call	508bc6c <__ssprint_r>
 508c91c:	da802717 	ldw	r10,156(sp)
 508c920:	5080030b 	ldhu	r2,12(r10)
 508c924:	1080100c 	andi	r2,r2,64
 508c928:	1000511e 	bne	r2,zero,508ca70 <___svfiprintf_internal_r+0xc3c>
 508c92c:	d8802417 	ldw	r2,144(sp)
 508c930:	dfc03617 	ldw	ra,216(sp)
 508c934:	df003517 	ldw	fp,212(sp)
 508c938:	ddc03417 	ldw	r23,208(sp)
 508c93c:	dd803317 	ldw	r22,204(sp)
 508c940:	dd403217 	ldw	r21,200(sp)
 508c944:	dd003117 	ldw	r20,196(sp)
 508c948:	dcc03017 	ldw	r19,192(sp)
 508c94c:	dc802f17 	ldw	r18,188(sp)
 508c950:	dc402e17 	ldw	r17,184(sp)
 508c954:	dc002d17 	ldw	r16,180(sp)
 508c958:	dec03704 	addi	sp,sp,220
 508c95c:	f800283a 	ret
 508c960:	da802117 	ldw	r10,132(sp)
 508c964:	dac02017 	ldw	r11,128(sp)
 508c968:	52edc83a 	sub	r22,r10,r11
 508c96c:	05bf540e 	bge	zero,r22,508c6c0 <__alt_data_end+0xfffbe4c0>
 508c970:	02400404 	movi	r9,16
 508c974:	4d812f0e 	bge	r9,r22,508ce34 <___svfiprintf_internal_r+0x1000>
 508c978:	01414274 	movhi	r5,1289
 508c97c:	29554b04 	addi	r5,r5,21804
 508c980:	d9402215 	stw	r5,136(sp)
 508c984:	05c001c4 	movi	r23,7
 508c988:	00000306 	br	508c998 <___svfiprintf_internal_r+0xb64>
 508c98c:	b5bffc04 	addi	r22,r22,-16
 508c990:	42000204 	addi	r8,r8,8
 508c994:	4d80130e 	bge	r9,r22,508c9e4 <___svfiprintf_internal_r+0xbb0>
 508c998:	18c00404 	addi	r3,r3,16
 508c99c:	10800044 	addi	r2,r2,1
 508c9a0:	44c00015 	stw	r19,0(r8)
 508c9a4:	42400115 	stw	r9,4(r8)
 508c9a8:	d8c01c15 	stw	r3,112(sp)
 508c9ac:	d8801b15 	stw	r2,108(sp)
 508c9b0:	b8bff60e 	bge	r23,r2,508c98c <__alt_data_end+0xfffbe78c>
 508c9b4:	9009883a 	mov	r4,r18
 508c9b8:	a00b883a 	mov	r5,r20
 508c9bc:	d9801a04 	addi	r6,sp,104
 508c9c0:	da402c15 	stw	r9,176(sp)
 508c9c4:	508bc6c0 	call	508bc6c <__ssprint_r>
 508c9c8:	da402c17 	ldw	r9,176(sp)
 508c9cc:	103fd31e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508c9d0:	b5bffc04 	addi	r22,r22,-16
 508c9d4:	d8c01c17 	ldw	r3,112(sp)
 508c9d8:	d8801b17 	ldw	r2,108(sp)
 508c9dc:	d811883a 	mov	r8,sp
 508c9e0:	4dbfed16 	blt	r9,r22,508c998 <__alt_data_end+0xfffbe798>
 508c9e4:	da802217 	ldw	r10,136(sp)
 508c9e8:	1d87883a 	add	r3,r3,r22
 508c9ec:	10800044 	addi	r2,r2,1
 508c9f0:	42800015 	stw	r10,0(r8)
 508c9f4:	45800115 	stw	r22,4(r8)
 508c9f8:	d8c01c15 	stw	r3,112(sp)
 508c9fc:	d8801b15 	stw	r2,108(sp)
 508ca00:	010001c4 	movi	r4,7
 508ca04:	2080ce16 	blt	r4,r2,508cd40 <___svfiprintf_internal_r+0xf0c>
 508ca08:	42000204 	addi	r8,r8,8
 508ca0c:	003f2c06 	br	508c6c0 <__alt_data_end+0xfffbe4c0>
 508ca10:	9009883a 	mov	r4,r18
 508ca14:	a00b883a 	mov	r5,r20
 508ca18:	d9801a04 	addi	r6,sp,104
 508ca1c:	508bc6c0 	call	508bc6c <__ssprint_r>
 508ca20:	103fbe1e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508ca24:	d8c01c17 	ldw	r3,112(sp)
 508ca28:	d811883a 	mov	r8,sp
 508ca2c:	003f5606 	br	508c788 <__alt_data_end+0xfffbe588>
 508ca30:	9009883a 	mov	r4,r18
 508ca34:	a00b883a 	mov	r5,r20
 508ca38:	d9801a04 	addi	r6,sp,104
 508ca3c:	508bc6c0 	call	508bc6c <__ssprint_r>
 508ca40:	103f8626 	beq	r2,zero,508c85c <__alt_data_end+0xfffbe65c>
 508ca44:	003fb506 	br	508c91c <__alt_data_end+0xfffbe71c>
 508ca48:	10803fcc 	andi	r2,r2,255
 508ca4c:	10003b1e 	bne	r2,zero,508cb3c <___svfiprintf_internal_r+0xd08>
 508ca50:	8880004c 	andi	r2,r17,1
 508ca54:	10007e26 	beq	r2,zero,508cc50 <___svfiprintf_internal_r+0xe1c>
 508ca58:	00800c04 	movi	r2,48
 508ca5c:	d8c019c4 	addi	r3,sp,103
 508ca60:	d88019c5 	stb	r2,103(sp)
 508ca64:	df002b17 	ldw	fp,172(sp)
 508ca68:	d8c02615 	stw	r3,152(sp)
 508ca6c:	003dc706 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508ca70:	00bfffc4 	movi	r2,-1
 508ca74:	003fae06 	br	508c930 <__alt_data_end+0xfffbe730>
 508ca78:	9009883a 	mov	r4,r18
 508ca7c:	a00b883a 	mov	r5,r20
 508ca80:	d9801a04 	addi	r6,sp,104
 508ca84:	508bc6c0 	call	508bc6c <__ssprint_r>
 508ca88:	103fa41e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508ca8c:	d811883a 	mov	r8,sp
 508ca90:	003d2406 	br	508bf24 <__alt_data_end+0xfffbdd24>
 508ca94:	9009883a 	mov	r4,r18
 508ca98:	a00b883a 	mov	r5,r20
 508ca9c:	d9801a04 	addi	r6,sp,104
 508caa0:	508bc6c0 	call	508bc6c <__ssprint_r>
 508caa4:	103f9d1e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508caa8:	d8c01c17 	ldw	r3,112(sp)
 508caac:	d8801b17 	ldw	r2,108(sp)
 508cab0:	d811883a 	mov	r8,sp
 508cab4:	003f2a06 	br	508c760 <__alt_data_end+0xfffbe560>
 508cab8:	d9402a17 	ldw	r5,168(sp)
 508cabc:	d8c01a04 	addi	r3,sp,104
 508cac0:	488003cc 	andi	r2,r9,15
 508cac4:	5008973a 	slli	r4,r10,28
 508cac8:	2885883a 	add	r2,r5,r2
 508cacc:	4812d13a 	srli	r9,r9,4
 508cad0:	10800003 	ldbu	r2,0(r2)
 508cad4:	5014d13a 	srli	r10,r10,4
 508cad8:	18ffffc4 	addi	r3,r3,-1
 508cadc:	2252b03a 	or	r9,r4,r9
 508cae0:	18800005 	stb	r2,0(r3)
 508cae4:	4a84b03a 	or	r2,r9,r10
 508cae8:	103ff51e 	bne	r2,zero,508cac0 <__alt_data_end+0xfffbe8c0>
 508caec:	d8c02615 	stw	r3,152(sp)
 508caf0:	003da406 	br	508c184 <__alt_data_end+0xfffbdf84>
 508caf4:	9009883a 	mov	r4,r18
 508caf8:	a00b883a 	mov	r5,r20
 508cafc:	d9801a04 	addi	r6,sp,104
 508cb00:	508bc6c0 	call	508bc6c <__ssprint_r>
 508cb04:	103f851e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508cb08:	d8c01c17 	ldw	r3,112(sp)
 508cb0c:	d8801b17 	ldw	r2,108(sp)
 508cb10:	d811883a 	mov	r8,sp
 508cb14:	003eda06 	br	508c680 <__alt_data_end+0xfffbe480>
 508cb18:	9009883a 	mov	r4,r18
 508cb1c:	a00b883a 	mov	r5,r20
 508cb20:	d9801a04 	addi	r6,sp,104
 508cb24:	508bc6c0 	call	508bc6c <__ssprint_r>
 508cb28:	103f7c1e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508cb2c:	d8c01c17 	ldw	r3,112(sp)
 508cb30:	d8801b17 	ldw	r2,108(sp)
 508cb34:	d811883a 	mov	r8,sp
 508cb38:	003ede06 	br	508c6b4 <__alt_data_end+0xfffbe4b4>
 508cb3c:	da801a04 	addi	r10,sp,104
 508cb40:	da802615 	stw	r10,152(sp)
 508cb44:	003d9106 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cb48:	00800084 	movi	r2,2
 508cb4c:	4a86b03a 	or	r3,r9,r10
 508cb50:	003d7106 	br	508c118 <__alt_data_end+0xfffbdf18>
 508cb54:	88c0040c 	andi	r3,r17,16
 508cb58:	18004f1e 	bne	r3,zero,508cc98 <___svfiprintf_internal_r+0xe64>
 508cb5c:	88c0100c 	andi	r3,r17,64
 508cb60:	18004d26 	beq	r3,zero,508cc98 <___svfiprintf_internal_r+0xe64>
 508cb64:	dac02317 	ldw	r11,140(sp)
 508cb68:	1240000b 	ldhu	r9,0(r2)
 508cb6c:	0015883a 	mov	r10,zero
 508cb70:	5ac00104 	addi	r11,r11,4
 508cb74:	dac02315 	stw	r11,140(sp)
 508cb78:	00800044 	movi	r2,1
 508cb7c:	4807883a 	mov	r3,r9
 508cb80:	003d6506 	br	508c118 <__alt_data_end+0xfffbdf18>
 508cb84:	9009883a 	mov	r4,r18
 508cb88:	a00b883a 	mov	r5,r20
 508cb8c:	d9801a04 	addi	r6,sp,104
 508cb90:	508bc6c0 	call	508bc6c <__ssprint_r>
 508cb94:	103f611e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508cb98:	d8c01c17 	ldw	r3,112(sp)
 508cb9c:	d8801b17 	ldw	r2,108(sp)
 508cba0:	d811883a 	mov	r8,sp
 508cba4:	003ea906 	br	508c64c <__alt_data_end+0xfffbe44c>
 508cba8:	88c0040c 	andi	r3,r17,16
 508cbac:	1800321e 	bne	r3,zero,508cc78 <___svfiprintf_internal_r+0xe44>
 508cbb0:	88c0100c 	andi	r3,r17,64
 508cbb4:	18003026 	beq	r3,zero,508cc78 <___svfiprintf_internal_r+0xe44>
 508cbb8:	dac02317 	ldw	r11,140(sp)
 508cbbc:	1240000b 	ldhu	r9,0(r2)
 508cbc0:	0015883a 	mov	r10,zero
 508cbc4:	5ac00104 	addi	r11,r11,4
 508cbc8:	dac02315 	stw	r11,140(sp)
 508cbcc:	0005883a 	mov	r2,zero
 508cbd0:	4807883a 	mov	r3,r9
 508cbd4:	003d5006 	br	508c118 <__alt_data_end+0xfffbdf18>
 508cbd8:	10803fcc 	andi	r2,r2,255
 508cbdc:	1080201c 	xori	r2,r2,128
 508cbe0:	10bfe004 	addi	r2,r2,-128
 508cbe4:	01000c04 	movi	r4,48
 508cbe8:	11006826 	beq	r2,r4,508cd8c <___svfiprintf_internal_r+0xf58>
 508cbec:	da802617 	ldw	r10,152(sp)
 508cbf0:	d8801e17 	ldw	r2,120(sp)
 508cbf4:	193fffc5 	stb	r4,-1(r3)
 508cbf8:	52bfffc4 	addi	r10,r10,-1
 508cbfc:	da802615 	stw	r10,152(sp)
 508cc00:	12b9c83a 	sub	fp,r2,r10
 508cc04:	003d6106 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cc08:	00800244 	movi	r2,9
 508cc0c:	127f1d36 	bltu	r2,r9,508c884 <__alt_data_end+0xfffbe684>
 508cc10:	4a400c04 	addi	r9,r9,48
 508cc14:	d8c019c4 	addi	r3,sp,103
 508cc18:	da4019c5 	stb	r9,103(sp)
 508cc1c:	df002b17 	ldw	fp,172(sp)
 508cc20:	d8c02615 	stw	r3,152(sp)
 508cc24:	003d5906 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cc28:	d8802315 	stw	r2,140(sp)
 508cc2c:	a9000007 	ldb	r4,0(r21)
 508cc30:	003ccc06 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508cc34:	9009883a 	mov	r4,r18
 508cc38:	a00b883a 	mov	r5,r20
 508cc3c:	d9801a04 	addi	r6,sp,104
 508cc40:	508bc6c0 	call	508bc6c <__ssprint_r>
 508cc44:	103f351e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508cc48:	d8c01c17 	ldw	r3,112(sp)
 508cc4c:	003efb06 	br	508c83c <__alt_data_end+0xfffbe63c>
 508cc50:	d8c01a04 	addi	r3,sp,104
 508cc54:	d8c02615 	stw	r3,152(sp)
 508cc58:	003d4c06 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cc5c:	da802317 	ldw	r10,140(sp)
 508cc60:	1a400017 	ldw	r9,0(r3)
 508cc64:	52800104 	addi	r10,r10,4
 508cc68:	da802315 	stw	r10,140(sp)
 508cc6c:	4815d7fa 	srai	r10,r9,31
 508cc70:	5005883a 	mov	r2,r10
 508cc74:	003d9d06 	br	508c2ec <__alt_data_end+0xfffbe0ec>
 508cc78:	da802317 	ldw	r10,140(sp)
 508cc7c:	12400017 	ldw	r9,0(r2)
 508cc80:	0005883a 	mov	r2,zero
 508cc84:	52800104 	addi	r10,r10,4
 508cc88:	da802315 	stw	r10,140(sp)
 508cc8c:	4807883a 	mov	r3,r9
 508cc90:	0015883a 	mov	r10,zero
 508cc94:	003d2006 	br	508c118 <__alt_data_end+0xfffbdf18>
 508cc98:	da802317 	ldw	r10,140(sp)
 508cc9c:	12400017 	ldw	r9,0(r2)
 508cca0:	00800044 	movi	r2,1
 508cca4:	52800104 	addi	r10,r10,4
 508cca8:	da802315 	stw	r10,140(sp)
 508ccac:	4807883a 	mov	r3,r9
 508ccb0:	0015883a 	mov	r10,zero
 508ccb4:	003d1806 	br	508c118 <__alt_data_end+0xfffbdf18>
 508ccb8:	dac02317 	ldw	r11,140(sp)
 508ccbc:	12400017 	ldw	r9,0(r2)
 508ccc0:	0015883a 	mov	r10,zero
 508ccc4:	5ac00104 	addi	r11,r11,4
 508ccc8:	dac02315 	stw	r11,140(sp)
 508cccc:	003dde06 	br	508c448 <__alt_data_end+0xfffbe248>
 508ccd0:	a9000007 	ldb	r4,0(r21)
 508ccd4:	003ca306 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508ccd8:	dac02317 	ldw	r11,140(sp)
 508ccdc:	da802417 	ldw	r10,144(sp)
 508cce0:	58800017 	ldw	r2,0(r11)
 508cce4:	5007d7fa 	srai	r3,r10,31
 508cce8:	5ac00104 	addi	r11,r11,4
 508ccec:	dac02315 	stw	r11,140(sp)
 508ccf0:	12800015 	stw	r10,0(r2)
 508ccf4:	10c00115 	stw	r3,4(r2)
 508ccf8:	003c7206 	br	508bec4 <__alt_data_end+0xfffbdcc4>
 508ccfc:	00800c04 	movi	r2,48
 508cd00:	d8801d05 	stb	r2,116(sp)
 508cd04:	d9001d45 	stb	r4,117(sp)
 508cd08:	8c400094 	ori	r17,r17,2
 508cd0c:	00800084 	movi	r2,2
 508cd10:	003d0106 	br	508c118 <__alt_data_end+0xfffbdf18>
 508cd14:	ad400044 	addi	r21,r21,1
 508cd18:	8c400814 	ori	r17,r17,32
 508cd1c:	11000047 	ldb	r4,1(r2)
 508cd20:	003c9006 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508cd24:	dac02317 	ldw	r11,140(sp)
 508cd28:	da802417 	ldw	r10,144(sp)
 508cd2c:	58800017 	ldw	r2,0(r11)
 508cd30:	5ac00104 	addi	r11,r11,4
 508cd34:	dac02315 	stw	r11,140(sp)
 508cd38:	12800015 	stw	r10,0(r2)
 508cd3c:	003c6106 	br	508bec4 <__alt_data_end+0xfffbdcc4>
 508cd40:	9009883a 	mov	r4,r18
 508cd44:	a00b883a 	mov	r5,r20
 508cd48:	d9801a04 	addi	r6,sp,104
 508cd4c:	508bc6c0 	call	508bc6c <__ssprint_r>
 508cd50:	103ef21e 	bne	r2,zero,508c91c <__alt_data_end+0xfffbe71c>
 508cd54:	d8c01c17 	ldw	r3,112(sp)
 508cd58:	d8801b17 	ldw	r2,108(sp)
 508cd5c:	d811883a 	mov	r8,sp
 508cd60:	003e5706 	br	508c6c0 <__alt_data_end+0xfffbe4c0>
 508cd64:	02c14274 	movhi	r11,1289
 508cd68:	5ad54b04 	addi	r11,r11,21804
 508cd6c:	dac02215 	stw	r11,136(sp)
 508cd70:	003e7106 	br	508c738 <__alt_data_end+0xfffbe538>
 508cd74:	dac02317 	ldw	r11,140(sp)
 508cd78:	12400017 	ldw	r9,0(r2)
 508cd7c:	0015883a 	mov	r10,zero
 508cd80:	5ac00104 	addi	r11,r11,4
 508cd84:	dac02315 	stw	r11,140(sp)
 508cd88:	003daf06 	br	508c448 <__alt_data_end+0xfffbe248>
 508cd8c:	da801e17 	ldw	r10,120(sp)
 508cd90:	d8c02617 	ldw	r3,152(sp)
 508cd94:	50f9c83a 	sub	fp,r10,r3
 508cd98:	003cfc06 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cd9c:	da002c15 	stw	r8,176(sp)
 508cda0:	50829c80 	call	50829c8 <strlen>
 508cda4:	1039883a 	mov	fp,r2
 508cda8:	dac01d83 	ldbu	r11,118(sp)
 508cdac:	ddc02315 	stw	r23,140(sp)
 508cdb0:	0021883a 	mov	r16,zero
 508cdb4:	da002c17 	ldw	r8,176(sp)
 508cdb8:	003cf406 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508cdbc:	04001004 	movi	r16,64
 508cdc0:	800b883a 	mov	r5,r16
 508cdc4:	50898500 	call	5089850 <_malloc_r>
 508cdc8:	da802717 	ldw	r10,156(sp)
 508cdcc:	50800015 	stw	r2,0(r10)
 508cdd0:	50800415 	stw	r2,16(r10)
 508cdd4:	10002c26 	beq	r2,zero,508ce88 <___svfiprintf_internal_r+0x1054>
 508cdd8:	da802717 	ldw	r10,156(sp)
 508cddc:	54000515 	stw	r16,20(r10)
 508cde0:	003c2806 	br	508be84 <__alt_data_end+0xfffbdc84>
 508cde4:	00800184 	movi	r2,6
 508cde8:	1400012e 	bgeu	r2,r16,508cdf0 <___svfiprintf_internal_r+0xfbc>
 508cdec:	1021883a 	mov	r16,r2
 508cdf0:	8039883a 	mov	fp,r16
 508cdf4:	802d883a 	mov	r22,r16
 508cdf8:	80001716 	blt	r16,zero,508ce58 <___svfiprintf_internal_r+0x1024>
 508cdfc:	00814274 	movhi	r2,1289
 508ce00:	1094e704 	addi	r2,r2,21404
 508ce04:	dd802015 	stw	r22,128(sp)
 508ce08:	ddc02315 	stw	r23,140(sp)
 508ce0c:	d8802615 	stw	r2,152(sp)
 508ce10:	003d4706 	br	508c330 <__alt_data_end+0xfffbe130>
 508ce14:	01014274 	movhi	r4,1289
 508ce18:	21154f04 	addi	r4,r4,21820
 508ce1c:	d9002815 	stw	r4,160(sp)
 508ce20:	003d7206 	br	508c3ec <__alt_data_end+0xfffbe1ec>
 508ce24:	01014274 	movhi	r4,1289
 508ce28:	21154f04 	addi	r4,r4,21820
 508ce2c:	d9002815 	stw	r4,160(sp)
 508ce30:	003e7906 	br	508c818 <__alt_data_end+0xfffbe618>
 508ce34:	01014274 	movhi	r4,1289
 508ce38:	21154b04 	addi	r4,r4,21804
 508ce3c:	d9002215 	stw	r4,136(sp)
 508ce40:	003ee806 	br	508c9e4 <__alt_data_end+0xfffbe7e4>
 508ce44:	8039883a 	mov	fp,r16
 508ce48:	dac01d83 	ldbu	r11,118(sp)
 508ce4c:	ddc02315 	stw	r23,140(sp)
 508ce50:	0021883a 	mov	r16,zero
 508ce54:	003ccd06 	br	508c18c <__alt_data_end+0xfffbdf8c>
 508ce58:	002d883a 	mov	r22,zero
 508ce5c:	003fe706 	br	508cdfc <__alt_data_end+0xfffbebfc>
 508ce60:	dac02317 	ldw	r11,140(sp)
 508ce64:	a805883a 	mov	r2,r21
 508ce68:	502b883a 	mov	r21,r10
 508ce6c:	5c000017 	ldw	r16,0(r11)
 508ce70:	59000104 	addi	r4,r11,4
 508ce74:	d9002315 	stw	r4,140(sp)
 508ce78:	803fa80e 	bge	r16,zero,508cd1c <__alt_data_end+0xfffbeb1c>
 508ce7c:	043fffc4 	movi	r16,-1
 508ce80:	11000047 	ldb	r4,1(r2)
 508ce84:	003c3706 	br	508bf64 <__alt_data_end+0xfffbdd64>
 508ce88:	dac02917 	ldw	r11,164(sp)
 508ce8c:	00800304 	movi	r2,12
 508ce90:	58800015 	stw	r2,0(r11)
 508ce94:	00bfffc4 	movi	r2,-1
 508ce98:	003ea506 	br	508c930 <__alt_data_end+0xfffbe730>

0508ce9c <__sprint_r.part.0>:
 508ce9c:	28801917 	ldw	r2,100(r5)
 508cea0:	defff604 	addi	sp,sp,-40
 508cea4:	dd400515 	stw	r21,20(sp)
 508cea8:	dcc00315 	stw	r19,12(sp)
 508ceac:	dfc00915 	stw	ra,36(sp)
 508ceb0:	df000815 	stw	fp,32(sp)
 508ceb4:	ddc00715 	stw	r23,28(sp)
 508ceb8:	dd800615 	stw	r22,24(sp)
 508cebc:	dd000415 	stw	r20,16(sp)
 508cec0:	dc800215 	stw	r18,8(sp)
 508cec4:	dc400115 	stw	r17,4(sp)
 508cec8:	dc000015 	stw	r16,0(sp)
 508cecc:	1088000c 	andi	r2,r2,8192
 508ced0:	2827883a 	mov	r19,r5
 508ced4:	302b883a 	mov	r21,r6
 508ced8:	10002d26 	beq	r2,zero,508cf90 <__sprint_r.part.0+0xf4>
 508cedc:	30800217 	ldw	r2,8(r6)
 508cee0:	35800017 	ldw	r22,0(r6)
 508cee4:	10002826 	beq	r2,zero,508cf88 <__sprint_r.part.0+0xec>
 508cee8:	2029883a 	mov	r20,r4
 508ceec:	b5c00104 	addi	r23,r22,4
 508cef0:	04bfffc4 	movi	r18,-1
 508cef4:	bc400017 	ldw	r17,0(r23)
 508cef8:	b4000017 	ldw	r16,0(r22)
 508cefc:	0039883a 	mov	fp,zero
 508cf00:	8822d0ba 	srli	r17,r17,2
 508cf04:	04400316 	blt	zero,r17,508cf14 <__sprint_r.part.0+0x78>
 508cf08:	00001706 	br	508cf68 <__sprint_r.part.0+0xcc>
 508cf0c:	84000104 	addi	r16,r16,4
 508cf10:	8f001526 	beq	r17,fp,508cf68 <__sprint_r.part.0+0xcc>
 508cf14:	81400017 	ldw	r5,0(r16)
 508cf18:	a009883a 	mov	r4,r20
 508cf1c:	980d883a 	mov	r6,r19
 508cf20:	508e5b80 	call	508e5b8 <_fputwc_r>
 508cf24:	e7000044 	addi	fp,fp,1
 508cf28:	14bff81e 	bne	r2,r18,508cf0c <__alt_data_end+0xfffbed0c>
 508cf2c:	9005883a 	mov	r2,r18
 508cf30:	a8000215 	stw	zero,8(r21)
 508cf34:	a8000115 	stw	zero,4(r21)
 508cf38:	dfc00917 	ldw	ra,36(sp)
 508cf3c:	df000817 	ldw	fp,32(sp)
 508cf40:	ddc00717 	ldw	r23,28(sp)
 508cf44:	dd800617 	ldw	r22,24(sp)
 508cf48:	dd400517 	ldw	r21,20(sp)
 508cf4c:	dd000417 	ldw	r20,16(sp)
 508cf50:	dcc00317 	ldw	r19,12(sp)
 508cf54:	dc800217 	ldw	r18,8(sp)
 508cf58:	dc400117 	ldw	r17,4(sp)
 508cf5c:	dc000017 	ldw	r16,0(sp)
 508cf60:	dec00a04 	addi	sp,sp,40
 508cf64:	f800283a 	ret
 508cf68:	a8c00217 	ldw	r3,8(r21)
 508cf6c:	8c63883a 	add	r17,r17,r17
 508cf70:	8c63883a 	add	r17,r17,r17
 508cf74:	1c45c83a 	sub	r2,r3,r17
 508cf78:	a8800215 	stw	r2,8(r21)
 508cf7c:	b5800204 	addi	r22,r22,8
 508cf80:	bdc00204 	addi	r23,r23,8
 508cf84:	103fdb1e 	bne	r2,zero,508cef4 <__alt_data_end+0xfffbecf4>
 508cf88:	0005883a 	mov	r2,zero
 508cf8c:	003fe806 	br	508cf30 <__alt_data_end+0xfffbed30>
 508cf90:	5088fa40 	call	5088fa4 <__sfvwrite_r>
 508cf94:	003fe606 	br	508cf30 <__alt_data_end+0xfffbed30>

0508cf98 <__sprint_r>:
 508cf98:	30c00217 	ldw	r3,8(r6)
 508cf9c:	18000126 	beq	r3,zero,508cfa4 <__sprint_r+0xc>
 508cfa0:	508ce9c1 	jmpi	508ce9c <__sprint_r.part.0>
 508cfa4:	30000115 	stw	zero,4(r6)
 508cfa8:	0005883a 	mov	r2,zero
 508cfac:	f800283a 	ret

0508cfb0 <___vfiprintf_internal_r>:
 508cfb0:	defeca04 	addi	sp,sp,-1240
 508cfb4:	dd813215 	stw	r22,1224(sp)
 508cfb8:	dd013015 	stw	r20,1216(sp)
 508cfbc:	dfc13515 	stw	ra,1236(sp)
 508cfc0:	df013415 	stw	fp,1232(sp)
 508cfc4:	ddc13315 	stw	r23,1228(sp)
 508cfc8:	dd413115 	stw	r21,1220(sp)
 508cfcc:	dcc12f15 	stw	r19,1212(sp)
 508cfd0:	dc812e15 	stw	r18,1208(sp)
 508cfd4:	dc412d15 	stw	r17,1204(sp)
 508cfd8:	dc012c15 	stw	r16,1200(sp)
 508cfdc:	d9012015 	stw	r4,1152(sp)
 508cfe0:	d9c12115 	stw	r7,1156(sp)
 508cfe4:	2829883a 	mov	r20,r5
 508cfe8:	302d883a 	mov	r22,r6
 508cfec:	20000226 	beq	r4,zero,508cff8 <___vfiprintf_internal_r+0x48>
 508cff0:	20800e17 	ldw	r2,56(r4)
 508cff4:	1001d326 	beq	r2,zero,508d744 <___vfiprintf_internal_r+0x794>
 508cff8:	a0c0030b 	ldhu	r3,12(r20)
 508cffc:	1908000c 	andi	r4,r3,8192
 508d000:	1805883a 	mov	r2,r3
 508d004:	2000071e 	bne	r4,zero,508d024 <___vfiprintf_internal_r+0x74>
 508d008:	a1001917 	ldw	r4,100(r20)
 508d00c:	18880014 	ori	r2,r3,8192
 508d010:	00f7ffc4 	movi	r3,-8193
 508d014:	20c8703a 	and	r4,r4,r3
 508d018:	a080030d 	sth	r2,12(r20)
 508d01c:	1007883a 	mov	r3,r2
 508d020:	a1001915 	stw	r4,100(r20)
 508d024:	1100020c 	andi	r4,r2,8
 508d028:	20018926 	beq	r4,zero,508d650 <___vfiprintf_internal_r+0x6a0>
 508d02c:	a1000417 	ldw	r4,16(r20)
 508d030:	20018726 	beq	r4,zero,508d650 <___vfiprintf_internal_r+0x6a0>
 508d034:	1080068c 	andi	r2,r2,26
 508d038:	01000284 	movi	r4,10
 508d03c:	11018d26 	beq	r2,r4,508d674 <___vfiprintf_internal_r+0x6c4>
 508d040:	da810a04 	addi	r10,sp,1064
 508d044:	dac109c4 	addi	r11,sp,1063
 508d048:	07014274 	movhi	fp,1289
 508d04c:	05c14274 	movhi	r23,1289
 508d050:	da811e15 	stw	r10,1144(sp)
 508d054:	52d5c83a 	sub	r10,r10,r11
 508d058:	e7155704 	addi	fp,fp,21852
 508d05c:	bdd55304 	addi	r23,r23,21836
 508d060:	dac11f15 	stw	r11,1148(sp)
 508d064:	dec11a15 	stw	sp,1128(sp)
 508d068:	d8011c15 	stw	zero,1136(sp)
 508d06c:	d8011b15 	stw	zero,1132(sp)
 508d070:	d8012615 	stw	zero,1176(sp)
 508d074:	d8012215 	stw	zero,1160(sp)
 508d078:	da812715 	stw	r10,1180(sp)
 508d07c:	d811883a 	mov	r8,sp
 508d080:	b021883a 	mov	r16,r22
 508d084:	80800007 	ldb	r2,0(r16)
 508d088:	10039c26 	beq	r2,zero,508defc <___vfiprintf_internal_r+0xf4c>
 508d08c:	01000944 	movi	r4,37
 508d090:	11039a26 	beq	r2,r4,508defc <___vfiprintf_internal_r+0xf4c>
 508d094:	8005883a 	mov	r2,r16
 508d098:	00000106 	br	508d0a0 <___vfiprintf_internal_r+0xf0>
 508d09c:	19000326 	beq	r3,r4,508d0ac <___vfiprintf_internal_r+0xfc>
 508d0a0:	10800044 	addi	r2,r2,1
 508d0a4:	10c00007 	ldb	r3,0(r2)
 508d0a8:	183ffc1e 	bne	r3,zero,508d09c <__alt_data_end+0xfffbee9c>
 508d0ac:	1425c83a 	sub	r18,r2,r16
 508d0b0:	1023883a 	mov	r17,r2
 508d0b4:	90001026 	beq	r18,zero,508d0f8 <___vfiprintf_internal_r+0x148>
 508d0b8:	d8c11c17 	ldw	r3,1136(sp)
 508d0bc:	d8811b17 	ldw	r2,1132(sp)
 508d0c0:	44000015 	stw	r16,0(r8)
 508d0c4:	90c7883a 	add	r3,r18,r3
 508d0c8:	10800044 	addi	r2,r2,1
 508d0cc:	44800115 	stw	r18,4(r8)
 508d0d0:	d8c11c15 	stw	r3,1136(sp)
 508d0d4:	d8811b15 	stw	r2,1132(sp)
 508d0d8:	010001c4 	movi	r4,7
 508d0dc:	2080750e 	bge	r4,r2,508d2b4 <___vfiprintf_internal_r+0x304>
 508d0e0:	18039d1e 	bne	r3,zero,508df58 <___vfiprintf_internal_r+0xfa8>
 508d0e4:	dac12217 	ldw	r11,1160(sp)
 508d0e8:	d8011b15 	stw	zero,1132(sp)
 508d0ec:	d811883a 	mov	r8,sp
 508d0f0:	5c97883a 	add	r11,r11,r18
 508d0f4:	dac12215 	stw	r11,1160(sp)
 508d0f8:	88800007 	ldb	r2,0(r17)
 508d0fc:	1002e026 	beq	r2,zero,508dc80 <___vfiprintf_internal_r+0xcd0>
 508d100:	88c00047 	ldb	r3,1(r17)
 508d104:	8c000044 	addi	r16,r17,1
 508d108:	d8011d85 	stb	zero,1142(sp)
 508d10c:	000d883a 	mov	r6,zero
 508d110:	027fffc4 	movi	r9,-1
 508d114:	0027883a 	mov	r19,zero
 508d118:	002b883a 	mov	r21,zero
 508d11c:	01001604 	movi	r4,88
 508d120:	01400244 	movi	r5,9
 508d124:	03000a84 	movi	r12,42
 508d128:	01c01b04 	movi	r7,108
 508d12c:	84000044 	addi	r16,r16,1
 508d130:	18bff804 	addi	r2,r3,-32
 508d134:	20825f36 	bltu	r4,r2,508dab4 <___vfiprintf_internal_r+0xb04>
 508d138:	100490ba 	slli	r2,r2,2
 508d13c:	02814274 	movhi	r10,1289
 508d140:	52b45404 	addi	r10,r10,-11952
 508d144:	1285883a 	add	r2,r2,r10
 508d148:	10800017 	ldw	r2,0(r2)
 508d14c:	1000683a 	jmp	r2
 508d150:	0508d924 	muli	r20,zero,9060
 508d154:	0508dab4 	movhi	r20,9066
 508d158:	0508dab4 	movhi	r20,9066
 508d15c:	0508daa8 	cmpgeui	r20,zero,9066
 508d160:	0508dab4 	movhi	r20,9066
 508d164:	0508dab4 	movhi	r20,9066
 508d168:	0508dab4 	movhi	r20,9066
 508d16c:	0508dab4 	movhi	r20,9066
 508d170:	0508dab4 	movhi	r20,9066
 508d174:	0508dab4 	movhi	r20,9066
 508d178:	0508da80 	call	508da8 <__alt_mem_sdram+0x508da8>
 508d17c:	0508da9c 	xori	r20,zero,9066
 508d180:	0508dab4 	movhi	r20,9066
 508d184:	0508d754 	movui	r20,9053
 508d188:	0508d8b4 	movhi	r20,9058
 508d18c:	0508dab4 	movhi	r20,9066
 508d190:	0508d838 	rdprs	r20,zero,9056
 508d194:	0508d844 	movi	r20,9057
 508d198:	0508d844 	movi	r20,9057
 508d19c:	0508d844 	movi	r20,9057
 508d1a0:	0508d844 	movi	r20,9057
 508d1a4:	0508d844 	movi	r20,9057
 508d1a8:	0508d844 	movi	r20,9057
 508d1ac:	0508d844 	movi	r20,9057
 508d1b0:	0508d844 	movi	r20,9057
 508d1b4:	0508d844 	movi	r20,9057
 508d1b8:	0508dab4 	movhi	r20,9066
 508d1bc:	0508dab4 	movhi	r20,9066
 508d1c0:	0508dab4 	movhi	r20,9066
 508d1c4:	0508dab4 	movhi	r20,9066
 508d1c8:	0508dab4 	movhi	r20,9066
 508d1cc:	0508dab4 	movhi	r20,9066
 508d1d0:	0508dab4 	movhi	r20,9066
 508d1d4:	0508dab4 	movhi	r20,9066
 508d1d8:	0508dab4 	movhi	r20,9066
 508d1dc:	0508dab4 	movhi	r20,9066
 508d1e0:	0508d870 	cmpltui	r20,zero,9057
 508d1e4:	0508dab4 	movhi	r20,9066
 508d1e8:	0508dab4 	movhi	r20,9066
 508d1ec:	0508dab4 	movhi	r20,9066
 508d1f0:	0508dab4 	movhi	r20,9066
 508d1f4:	0508dab4 	movhi	r20,9066
 508d1f8:	0508dab4 	movhi	r20,9066
 508d1fc:	0508dab4 	movhi	r20,9066
 508d200:	0508dab4 	movhi	r20,9066
 508d204:	0508dab4 	movhi	r20,9066
 508d208:	0508dab4 	movhi	r20,9066
 508d20c:	0508d304 	movi	r20,9036
 508d210:	0508dab4 	movhi	r20,9066
 508d214:	0508dab4 	movhi	r20,9066
 508d218:	0508dab4 	movhi	r20,9066
 508d21c:	0508dab4 	movhi	r20,9066
 508d220:	0508dab4 	movhi	r20,9066
 508d224:	0508d2c8 	cmpgei	r20,zero,9035
 508d228:	0508dab4 	movhi	r20,9066
 508d22c:	0508dab4 	movhi	r20,9066
 508d230:	0508d7b0 	cmpltui	r20,zero,9054
 508d234:	0508dab4 	movhi	r20,9066
 508d238:	0508dab4 	movhi	r20,9066
 508d23c:	0508dab4 	movhi	r20,9066
 508d240:	0508dab4 	movhi	r20,9066
 508d244:	0508dab4 	movhi	r20,9066
 508d248:	0508dab4 	movhi	r20,9066
 508d24c:	0508dab4 	movhi	r20,9066
 508d250:	0508dab4 	movhi	r20,9066
 508d254:	0508dab4 	movhi	r20,9066
 508d258:	0508dab4 	movhi	r20,9066
 508d25c:	0508d808 	cmpgei	r20,zero,9056
 508d260:	0508d9a0 	cmpeqi	r20,zero,9062
 508d264:	0508dab4 	movhi	r20,9066
 508d268:	0508dab4 	movhi	r20,9066
 508d26c:	0508dab4 	movhi	r20,9066
 508d270:	0508da28 	cmpgeui	r20,zero,9064
 508d274:	0508d9a0 	cmpeqi	r20,zero,9062
 508d278:	0508dab4 	movhi	r20,9066
 508d27c:	0508dab4 	movhi	r20,9066
 508d280:	0508da34 	movhi	r20,9064
 508d284:	0508dab4 	movhi	r20,9066
 508d288:	0508d8f4 	movhi	r20,9059
 508d28c:	0508d308 	cmpgei	r20,zero,9036
 508d290:	0508d9dc 	xori	r20,zero,9063
 508d294:	0508da1c 	xori	r20,zero,9064
 508d298:	0508dab4 	movhi	r20,9066
 508d29c:	0508d940 	call	508d94 <__alt_mem_sdram+0x508d94>
 508d2a0:	0508dab4 	movhi	r20,9066
 508d2a4:	0508d2cc 	andi	r20,zero,9035
 508d2a8:	0508dab4 	movhi	r20,9066
 508d2ac:	0508dab4 	movhi	r20,9066
 508d2b0:	0508da44 	movi	r20,9065
 508d2b4:	42000204 	addi	r8,r8,8
 508d2b8:	dac12217 	ldw	r11,1160(sp)
 508d2bc:	5c97883a 	add	r11,r11,r18
 508d2c0:	dac12215 	stw	r11,1160(sp)
 508d2c4:	003f8c06 	br	508d0f8 <__alt_data_end+0xfffbeef8>
 508d2c8:	ad400414 	ori	r21,r21,16
 508d2cc:	a880080c 	andi	r2,r21,32
 508d2d0:	10012f1e 	bne	r2,zero,508d790 <___vfiprintf_internal_r+0x7e0>
 508d2d4:	a880040c 	andi	r2,r21,16
 508d2d8:	1001ff1e 	bne	r2,zero,508dad8 <___vfiprintf_internal_r+0xb28>
 508d2dc:	a880100c 	andi	r2,r21,64
 508d2e0:	1001fd26 	beq	r2,zero,508dad8 <___vfiprintf_internal_r+0xb28>
 508d2e4:	da812117 	ldw	r10,1156(sp)
 508d2e8:	002d883a 	mov	r22,zero
 508d2ec:	00800044 	movi	r2,1
 508d2f0:	5480000b 	ldhu	r18,0(r10)
 508d2f4:	52800104 	addi	r10,r10,4
 508d2f8:	da812115 	stw	r10,1156(sp)
 508d2fc:	9009883a 	mov	r4,r18
 508d300:	00000a06 	br	508d32c <___vfiprintf_internal_r+0x37c>
 508d304:	ad400414 	ori	r21,r21,16
 508d308:	a880080c 	andi	r2,r21,32
 508d30c:	10011426 	beq	r2,zero,508d760 <___vfiprintf_internal_r+0x7b0>
 508d310:	da812117 	ldw	r10,1156(sp)
 508d314:	0005883a 	mov	r2,zero
 508d318:	54800017 	ldw	r18,0(r10)
 508d31c:	55800117 	ldw	r22,4(r10)
 508d320:	52800204 	addi	r10,r10,8
 508d324:	da812115 	stw	r10,1156(sp)
 508d328:	9588b03a 	or	r4,r18,r22
 508d32c:	d8011d85 	stb	zero,1142(sp)
 508d330:	4823883a 	mov	r17,r9
 508d334:	0019883a 	mov	r12,zero
 508d338:	48000216 	blt	r9,zero,508d344 <___vfiprintf_internal_r+0x394>
 508d33c:	00ffdfc4 	movi	r3,-129
 508d340:	a8ea703a 	and	r21,r21,r3
 508d344:	2002221e 	bne	r4,zero,508dbd0 <___vfiprintf_internal_r+0xc20>
 508d348:	4802c726 	beq	r9,zero,508de68 <___vfiprintf_internal_r+0xeb8>
 508d34c:	10803fcc 	andi	r2,r2,255
 508d350:	00c00044 	movi	r3,1
 508d354:	10c24426 	beq	r2,r3,508dc68 <___vfiprintf_internal_r+0xcb8>
 508d358:	00c00084 	movi	r3,2
 508d35c:	10c2cc26 	beq	r2,r3,508de90 <___vfiprintf_internal_r+0xee0>
 508d360:	d8c10a04 	addi	r3,sp,1064
 508d364:	9008d0fa 	srli	r4,r18,3
 508d368:	b00a977a 	slli	r5,r22,29
 508d36c:	b02cd0fa 	srli	r22,r22,3
 508d370:	948001cc 	andi	r18,r18,7
 508d374:	90800c04 	addi	r2,r18,48
 508d378:	18ffffc4 	addi	r3,r3,-1
 508d37c:	2924b03a 	or	r18,r5,r4
 508d380:	18800005 	stb	r2,0(r3)
 508d384:	9588b03a 	or	r4,r18,r22
 508d388:	203ff61e 	bne	r4,zero,508d364 <__alt_data_end+0xfffbf164>
 508d38c:	a900004c 	andi	r4,r21,1
 508d390:	d8c12415 	stw	r3,1168(sp)
 508d394:	2002fb1e 	bne	r4,zero,508df84 <___vfiprintf_internal_r+0xfd4>
 508d398:	da811e17 	ldw	r10,1144(sp)
 508d39c:	50e3c83a 	sub	r17,r10,r3
 508d3a0:	8825883a 	mov	r18,r17
 508d3a4:	8a40010e 	bge	r17,r9,508d3ac <___vfiprintf_internal_r+0x3fc>
 508d3a8:	4825883a 	mov	r18,r9
 508d3ac:	63003fcc 	andi	r12,r12,255
 508d3b0:	6300201c 	xori	r12,r12,128
 508d3b4:	633fe004 	addi	r12,r12,-128
 508d3b8:	60000126 	beq	r12,zero,508d3c0 <___vfiprintf_internal_r+0x410>
 508d3bc:	94800044 	addi	r18,r18,1
 508d3c0:	ab80008c 	andi	r14,r21,2
 508d3c4:	70000126 	beq	r14,zero,508d3cc <___vfiprintf_internal_r+0x41c>
 508d3c8:	94800084 	addi	r18,r18,2
 508d3cc:	ad80210c 	andi	r22,r21,132
 508d3d0:	b001df1e 	bne	r22,zero,508db50 <___vfiprintf_internal_r+0xba0>
 508d3d4:	9c8fc83a 	sub	r7,r19,r18
 508d3d8:	01c1dd0e 	bge	zero,r7,508db50 <___vfiprintf_internal_r+0xba0>
 508d3dc:	03000404 	movi	r12,16
 508d3e0:	d8811c17 	ldw	r2,1136(sp)
 508d3e4:	61c3920e 	bge	r12,r7,508e230 <___vfiprintf_internal_r+0x1280>
 508d3e8:	02814274 	movhi	r10,1289
 508d3ec:	52955704 	addi	r10,r10,21852
 508d3f0:	dc012915 	stw	r16,1188(sp)
 508d3f4:	d9811b17 	ldw	r6,1132(sp)
 508d3f8:	da812315 	stw	r10,1164(sp)
 508d3fc:	00c001c4 	movi	r3,7
 508d400:	da412515 	stw	r9,1172(sp)
 508d404:	db812815 	stw	r14,1184(sp)
 508d408:	3821883a 	mov	r16,r7
 508d40c:	00000506 	br	508d424 <___vfiprintf_internal_r+0x474>
 508d410:	31400084 	addi	r5,r6,2
 508d414:	42000204 	addi	r8,r8,8
 508d418:	200d883a 	mov	r6,r4
 508d41c:	843ffc04 	addi	r16,r16,-16
 508d420:	64000d0e 	bge	r12,r16,508d458 <___vfiprintf_internal_r+0x4a8>
 508d424:	10800404 	addi	r2,r2,16
 508d428:	31000044 	addi	r4,r6,1
 508d42c:	47000015 	stw	fp,0(r8)
 508d430:	43000115 	stw	r12,4(r8)
 508d434:	d8811c15 	stw	r2,1136(sp)
 508d438:	d9011b15 	stw	r4,1132(sp)
 508d43c:	193ff40e 	bge	r3,r4,508d410 <__alt_data_end+0xfffbf210>
 508d440:	1001b51e 	bne	r2,zero,508db18 <___vfiprintf_internal_r+0xb68>
 508d444:	843ffc04 	addi	r16,r16,-16
 508d448:	000d883a 	mov	r6,zero
 508d44c:	01400044 	movi	r5,1
 508d450:	d811883a 	mov	r8,sp
 508d454:	643ff316 	blt	r12,r16,508d424 <__alt_data_end+0xfffbf224>
 508d458:	800f883a 	mov	r7,r16
 508d45c:	da412517 	ldw	r9,1172(sp)
 508d460:	db812817 	ldw	r14,1184(sp)
 508d464:	dc012917 	ldw	r16,1188(sp)
 508d468:	dac12317 	ldw	r11,1164(sp)
 508d46c:	3887883a 	add	r3,r7,r2
 508d470:	41c00115 	stw	r7,4(r8)
 508d474:	42c00015 	stw	r11,0(r8)
 508d478:	d8c11c15 	stw	r3,1136(sp)
 508d47c:	d9411b15 	stw	r5,1132(sp)
 508d480:	008001c4 	movi	r2,7
 508d484:	11429316 	blt	r2,r5,508ded4 <___vfiprintf_internal_r+0xf24>
 508d488:	d9011d87 	ldb	r4,1142(sp)
 508d48c:	42000204 	addi	r8,r8,8
 508d490:	28800044 	addi	r2,r5,1
 508d494:	2001b31e 	bne	r4,zero,508db64 <___vfiprintf_internal_r+0xbb4>
 508d498:	70000c26 	beq	r14,zero,508d4cc <___vfiprintf_internal_r+0x51c>
 508d49c:	d9011d04 	addi	r4,sp,1140
 508d4a0:	18c00084 	addi	r3,r3,2
 508d4a4:	41000015 	stw	r4,0(r8)
 508d4a8:	01000084 	movi	r4,2
 508d4ac:	41000115 	stw	r4,4(r8)
 508d4b0:	d8c11c15 	stw	r3,1136(sp)
 508d4b4:	d8811b15 	stw	r2,1132(sp)
 508d4b8:	010001c4 	movi	r4,7
 508d4bc:	20826516 	blt	r4,r2,508de54 <___vfiprintf_internal_r+0xea4>
 508d4c0:	100b883a 	mov	r5,r2
 508d4c4:	42000204 	addi	r8,r8,8
 508d4c8:	10800044 	addi	r2,r2,1
 508d4cc:	01002004 	movi	r4,128
 508d4d0:	b1021a26 	beq	r22,r4,508dd3c <___vfiprintf_internal_r+0xd8c>
 508d4d4:	4c6dc83a 	sub	r22,r9,r17
 508d4d8:	0580230e 	bge	zero,r22,508d568 <___vfiprintf_internal_r+0x5b8>
 508d4dc:	01c00404 	movi	r7,16
 508d4e0:	3d83300e 	bge	r7,r22,508e1a4 <___vfiprintf_internal_r+0x11f4>
 508d4e4:	00814274 	movhi	r2,1289
 508d4e8:	10955304 	addi	r2,r2,21836
 508d4ec:	d8812315 	stw	r2,1164(sp)
 508d4f0:	030001c4 	movi	r12,7
 508d4f4:	00000506 	br	508d50c <___vfiprintf_internal_r+0x55c>
 508d4f8:	28800084 	addi	r2,r5,2
 508d4fc:	42000204 	addi	r8,r8,8
 508d500:	200b883a 	mov	r5,r4
 508d504:	b5bffc04 	addi	r22,r22,-16
 508d508:	3d800d0e 	bge	r7,r22,508d540 <___vfiprintf_internal_r+0x590>
 508d50c:	18c00404 	addi	r3,r3,16
 508d510:	29000044 	addi	r4,r5,1
 508d514:	45c00015 	stw	r23,0(r8)
 508d518:	41c00115 	stw	r7,4(r8)
 508d51c:	d8c11c15 	stw	r3,1136(sp)
 508d520:	d9011b15 	stw	r4,1132(sp)
 508d524:	613ff40e 	bge	r12,r4,508d4f8 <__alt_data_end+0xfffbf2f8>
 508d528:	18019b1e 	bne	r3,zero,508db98 <___vfiprintf_internal_r+0xbe8>
 508d52c:	b5bffc04 	addi	r22,r22,-16
 508d530:	000b883a 	mov	r5,zero
 508d534:	00800044 	movi	r2,1
 508d538:	d811883a 	mov	r8,sp
 508d53c:	3dbff316 	blt	r7,r22,508d50c <__alt_data_end+0xfffbf30c>
 508d540:	da812317 	ldw	r10,1164(sp)
 508d544:	1d87883a 	add	r3,r3,r22
 508d548:	45800115 	stw	r22,4(r8)
 508d54c:	42800015 	stw	r10,0(r8)
 508d550:	d8c11c15 	stw	r3,1136(sp)
 508d554:	d8811b15 	stw	r2,1132(sp)
 508d558:	010001c4 	movi	r4,7
 508d55c:	2081dd16 	blt	r4,r2,508dcd4 <___vfiprintf_internal_r+0xd24>
 508d560:	42000204 	addi	r8,r8,8
 508d564:	10800044 	addi	r2,r2,1
 508d568:	da812417 	ldw	r10,1168(sp)
 508d56c:	1c47883a 	add	r3,r3,r17
 508d570:	44400115 	stw	r17,4(r8)
 508d574:	42800015 	stw	r10,0(r8)
 508d578:	d8c11c15 	stw	r3,1136(sp)
 508d57c:	d8811b15 	stw	r2,1132(sp)
 508d580:	010001c4 	movi	r4,7
 508d584:	2081dc0e 	bge	r4,r2,508dcf8 <___vfiprintf_internal_r+0xd48>
 508d588:	1802611e 	bne	r3,zero,508df10 <___vfiprintf_internal_r+0xf60>
 508d58c:	d8011b15 	stw	zero,1132(sp)
 508d590:	aac0010c 	andi	r11,r21,4
 508d594:	58002726 	beq	r11,zero,508d634 <___vfiprintf_internal_r+0x684>
 508d598:	9ca3c83a 	sub	r17,r19,r18
 508d59c:	d811883a 	mov	r8,sp
 508d5a0:	0443510e 	bge	zero,r17,508e2e8 <___vfiprintf_internal_r+0x1338>
 508d5a4:	01c00404 	movi	r7,16
 508d5a8:	3c43320e 	bge	r7,r17,508e274 <___vfiprintf_internal_r+0x12c4>
 508d5ac:	00814274 	movhi	r2,1289
 508d5b0:	10955704 	addi	r2,r2,21852
 508d5b4:	d9011b17 	ldw	r4,1132(sp)
 508d5b8:	d8812315 	stw	r2,1164(sp)
 508d5bc:	382d883a 	mov	r22,r7
 508d5c0:	054001c4 	movi	r21,7
 508d5c4:	00000506 	br	508d5dc <___vfiprintf_internal_r+0x62c>
 508d5c8:	21400084 	addi	r5,r4,2
 508d5cc:	42000204 	addi	r8,r8,8
 508d5d0:	1009883a 	mov	r4,r2
 508d5d4:	8c7ffc04 	addi	r17,r17,-16
 508d5d8:	b4400d0e 	bge	r22,r17,508d610 <___vfiprintf_internal_r+0x660>
 508d5dc:	18c00404 	addi	r3,r3,16
 508d5e0:	20800044 	addi	r2,r4,1
 508d5e4:	47000015 	stw	fp,0(r8)
 508d5e8:	45800115 	stw	r22,4(r8)
 508d5ec:	d8c11c15 	stw	r3,1136(sp)
 508d5f0:	d8811b15 	stw	r2,1132(sp)
 508d5f4:	a8bff40e 	bge	r21,r2,508d5c8 <__alt_data_end+0xfffbf3c8>
 508d5f8:	1801ac1e 	bne	r3,zero,508dcac <___vfiprintf_internal_r+0xcfc>
 508d5fc:	8c7ffc04 	addi	r17,r17,-16
 508d600:	0009883a 	mov	r4,zero
 508d604:	01400044 	movi	r5,1
 508d608:	d811883a 	mov	r8,sp
 508d60c:	b47ff316 	blt	r22,r17,508d5dc <__alt_data_end+0xfffbf3dc>
 508d610:	da812317 	ldw	r10,1164(sp)
 508d614:	1c47883a 	add	r3,r3,r17
 508d618:	44400115 	stw	r17,4(r8)
 508d61c:	42800015 	stw	r10,0(r8)
 508d620:	d8c11c15 	stw	r3,1136(sp)
 508d624:	d9411b15 	stw	r5,1132(sp)
 508d628:	008001c4 	movi	r2,7
 508d62c:	1141b70e 	bge	r2,r5,508dd0c <___vfiprintf_internal_r+0xd5c>
 508d630:	1802cf1e 	bne	r3,zero,508e170 <___vfiprintf_internal_r+0x11c0>
 508d634:	94c2ca16 	blt	r18,r19,508e160 <___vfiprintf_internal_r+0x11b0>
 508d638:	dac12217 	ldw	r11,1160(sp)
 508d63c:	5c97883a 	add	r11,r11,r18
 508d640:	dac12215 	stw	r11,1160(sp)
 508d644:	d8011b15 	stw	zero,1132(sp)
 508d648:	d811883a 	mov	r8,sp
 508d64c:	003e8d06 	br	508d084 <__alt_data_end+0xfffbee84>
 508d650:	d9012017 	ldw	r4,1152(sp)
 508d654:	a00b883a 	mov	r5,r20
 508d658:	5086b400 	call	5086b40 <__swsetup_r>
 508d65c:	10002c1e 	bne	r2,zero,508d710 <___vfiprintf_internal_r+0x760>
 508d660:	a0c0030b 	ldhu	r3,12(r20)
 508d664:	01000284 	movi	r4,10
 508d668:	1805883a 	mov	r2,r3
 508d66c:	1080068c 	andi	r2,r2,26
 508d670:	113e731e 	bne	r2,r4,508d040 <__alt_data_end+0xfffbee40>
 508d674:	a080038b 	ldhu	r2,14(r20)
 508d678:	113fffcc 	andi	r4,r2,65535
 508d67c:	2120001c 	xori	r4,r4,32768
 508d680:	21200004 	addi	r4,r4,-32768
 508d684:	203e6e16 	blt	r4,zero,508d040 <__alt_data_end+0xfffbee40>
 508d688:	a3001917 	ldw	r12,100(r20)
 508d68c:	a2c00717 	ldw	r11,28(r20)
 508d690:	a2800917 	ldw	r10,36(r20)
 508d694:	d9012017 	ldw	r4,1152(sp)
 508d698:	d9c12117 	ldw	r7,1156(sp)
 508d69c:	02410004 	movi	r9,1024
 508d6a0:	18ffff4c 	andi	r3,r3,65533
 508d6a4:	da4b883a 	add	r5,sp,r9
 508d6a8:	b00d883a 	mov	r6,r22
 508d6ac:	d8c1030d 	sth	r3,1036(sp)
 508d6b0:	db011915 	stw	r12,1124(sp)
 508d6b4:	d881038d 	sth	r2,1038(sp)
 508d6b8:	dac10715 	stw	r11,1052(sp)
 508d6bc:	da810915 	stw	r10,1060(sp)
 508d6c0:	dec10015 	stw	sp,1024(sp)
 508d6c4:	dec10415 	stw	sp,1040(sp)
 508d6c8:	da410215 	stw	r9,1032(sp)
 508d6cc:	da410515 	stw	r9,1044(sp)
 508d6d0:	d8010615 	stw	zero,1048(sp)
 508d6d4:	508cfb00 	call	508cfb0 <___vfiprintf_internal_r>
 508d6d8:	1021883a 	mov	r16,r2
 508d6dc:	10000416 	blt	r2,zero,508d6f0 <___vfiprintf_internal_r+0x740>
 508d6e0:	d9012017 	ldw	r4,1152(sp)
 508d6e4:	d9410004 	addi	r5,sp,1024
 508d6e8:	50885980 	call	5088598 <_fflush_r>
 508d6ec:	1002fc1e 	bne	r2,zero,508e2e0 <___vfiprintf_internal_r+0x1330>
 508d6f0:	d881030b 	ldhu	r2,1036(sp)
 508d6f4:	1080100c 	andi	r2,r2,64
 508d6f8:	10000326 	beq	r2,zero,508d708 <___vfiprintf_internal_r+0x758>
 508d6fc:	a080030b 	ldhu	r2,12(r20)
 508d700:	10801014 	ori	r2,r2,64
 508d704:	a080030d 	sth	r2,12(r20)
 508d708:	8005883a 	mov	r2,r16
 508d70c:	00000106 	br	508d714 <___vfiprintf_internal_r+0x764>
 508d710:	00bfffc4 	movi	r2,-1
 508d714:	dfc13517 	ldw	ra,1236(sp)
 508d718:	df013417 	ldw	fp,1232(sp)
 508d71c:	ddc13317 	ldw	r23,1228(sp)
 508d720:	dd813217 	ldw	r22,1224(sp)
 508d724:	dd413117 	ldw	r21,1220(sp)
 508d728:	dd013017 	ldw	r20,1216(sp)
 508d72c:	dcc12f17 	ldw	r19,1212(sp)
 508d730:	dc812e17 	ldw	r18,1208(sp)
 508d734:	dc412d17 	ldw	r17,1204(sp)
 508d738:	dc012c17 	ldw	r16,1200(sp)
 508d73c:	dec13604 	addi	sp,sp,1240
 508d740:	f800283a 	ret
 508d744:	5088b400 	call	5088b40 <__sinit>
 508d748:	003e2b06 	br	508cff8 <__alt_data_end+0xfffbedf8>
 508d74c:	04e7c83a 	sub	r19,zero,r19
 508d750:	d8812115 	stw	r2,1156(sp)
 508d754:	ad400114 	ori	r21,r21,4
 508d758:	80c00007 	ldb	r3,0(r16)
 508d75c:	003e7306 	br	508d12c <__alt_data_end+0xfffbef2c>
 508d760:	a880040c 	andi	r2,r21,16
 508d764:	1000e41e 	bne	r2,zero,508daf8 <___vfiprintf_internal_r+0xb48>
 508d768:	a880100c 	andi	r2,r21,64
 508d76c:	1000e226 	beq	r2,zero,508daf8 <___vfiprintf_internal_r+0xb48>
 508d770:	da812117 	ldw	r10,1156(sp)
 508d774:	002d883a 	mov	r22,zero
 508d778:	0005883a 	mov	r2,zero
 508d77c:	5480000b 	ldhu	r18,0(r10)
 508d780:	52800104 	addi	r10,r10,4
 508d784:	da812115 	stw	r10,1156(sp)
 508d788:	9009883a 	mov	r4,r18
 508d78c:	003ee706 	br	508d32c <__alt_data_end+0xfffbf12c>
 508d790:	da812117 	ldw	r10,1156(sp)
 508d794:	00800044 	movi	r2,1
 508d798:	54800017 	ldw	r18,0(r10)
 508d79c:	55800117 	ldw	r22,4(r10)
 508d7a0:	52800204 	addi	r10,r10,8
 508d7a4:	da812115 	stw	r10,1156(sp)
 508d7a8:	9588b03a 	or	r4,r18,r22
 508d7ac:	003edf06 	br	508d32c <__alt_data_end+0xfffbf12c>
 508d7b0:	02c14274 	movhi	r11,1289
 508d7b4:	5ad4dd04 	addi	r11,r11,21364
 508d7b8:	d9811d85 	stb	r6,1142(sp)
 508d7bc:	dac12615 	stw	r11,1176(sp)
 508d7c0:	a900080c 	andi	r4,r21,32
 508d7c4:	d8812117 	ldw	r2,1156(sp)
 508d7c8:	2000a526 	beq	r4,zero,508da60 <___vfiprintf_internal_r+0xab0>
 508d7cc:	da812117 	ldw	r10,1156(sp)
 508d7d0:	14800017 	ldw	r18,0(r2)
 508d7d4:	15800117 	ldw	r22,4(r2)
 508d7d8:	52800204 	addi	r10,r10,8
 508d7dc:	da812115 	stw	r10,1156(sp)
 508d7e0:	a880004c 	andi	r2,r21,1
 508d7e4:	1001d926 	beq	r2,zero,508df4c <___vfiprintf_internal_r+0xf9c>
 508d7e8:	9588b03a 	or	r4,r18,r22
 508d7ec:	20024426 	beq	r4,zero,508e100 <___vfiprintf_internal_r+0x1150>
 508d7f0:	00800c04 	movi	r2,48
 508d7f4:	d8811d05 	stb	r2,1140(sp)
 508d7f8:	d8c11d45 	stb	r3,1141(sp)
 508d7fc:	ad400094 	ori	r21,r21,2
 508d800:	00800084 	movi	r2,2
 508d804:	003ec906 	br	508d32c <__alt_data_end+0xfffbf12c>
 508d808:	da812117 	ldw	r10,1156(sp)
 508d80c:	04800044 	movi	r18,1
 508d810:	dac10004 	addi	r11,sp,1024
 508d814:	50800017 	ldw	r2,0(r10)
 508d818:	52800104 	addi	r10,r10,4
 508d81c:	d8011d85 	stb	zero,1142(sp)
 508d820:	d8810005 	stb	r2,1024(sp)
 508d824:	da812115 	stw	r10,1156(sp)
 508d828:	9023883a 	mov	r17,r18
 508d82c:	dac12415 	stw	r11,1168(sp)
 508d830:	0013883a 	mov	r9,zero
 508d834:	003ee206 	br	508d3c0 <__alt_data_end+0xfffbf1c0>
 508d838:	ad402014 	ori	r21,r21,128
 508d83c:	80c00007 	ldb	r3,0(r16)
 508d840:	003e3a06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508d844:	8015883a 	mov	r10,r16
 508d848:	0027883a 	mov	r19,zero
 508d84c:	18bff404 	addi	r2,r3,-48
 508d850:	50c00007 	ldb	r3,0(r10)
 508d854:	9cc002a4 	muli	r19,r19,10
 508d858:	84000044 	addi	r16,r16,1
 508d85c:	8015883a 	mov	r10,r16
 508d860:	98a7883a 	add	r19,r19,r2
 508d864:	18bff404 	addi	r2,r3,-48
 508d868:	28bff92e 	bgeu	r5,r2,508d850 <__alt_data_end+0xfffbf650>
 508d86c:	003e3006 	br	508d130 <__alt_data_end+0xfffbef30>
 508d870:	ad400414 	ori	r21,r21,16
 508d874:	d9811d85 	stb	r6,1142(sp)
 508d878:	a880080c 	andi	r2,r21,32
 508d87c:	d8c12117 	ldw	r3,1156(sp)
 508d880:	10004b26 	beq	r2,zero,508d9b0 <___vfiprintf_internal_r+0xa00>
 508d884:	da812117 	ldw	r10,1156(sp)
 508d888:	18800117 	ldw	r2,4(r3)
 508d88c:	1c800017 	ldw	r18,0(r3)
 508d890:	52800204 	addi	r10,r10,8
 508d894:	da812115 	stw	r10,1156(sp)
 508d898:	102d883a 	mov	r22,r2
 508d89c:	1001f116 	blt	r2,zero,508e064 <___vfiprintf_internal_r+0x10b4>
 508d8a0:	db011d83 	ldbu	r12,1142(sp)
 508d8a4:	4823883a 	mov	r17,r9
 508d8a8:	00800044 	movi	r2,1
 508d8ac:	9588b03a 	or	r4,r18,r22
 508d8b0:	003ea106 	br	508d338 <__alt_data_end+0xfffbf138>
 508d8b4:	80c00007 	ldb	r3,0(r16)
 508d8b8:	82800044 	addi	r10,r16,1
 508d8bc:	1b027f26 	beq	r3,r12,508e2bc <___vfiprintf_internal_r+0x130c>
 508d8c0:	18bff404 	addi	r2,r3,-48
 508d8c4:	5021883a 	mov	r16,r10
 508d8c8:	0013883a 	mov	r9,zero
 508d8cc:	28be1836 	bltu	r5,r2,508d130 <__alt_data_end+0xfffbef30>
 508d8d0:	80c00007 	ldb	r3,0(r16)
 508d8d4:	4a4002a4 	muli	r9,r9,10
 508d8d8:	84000044 	addi	r16,r16,1
 508d8dc:	1253883a 	add	r9,r2,r9
 508d8e0:	18bff404 	addi	r2,r3,-48
 508d8e4:	28bffa2e 	bgeu	r5,r2,508d8d0 <__alt_data_end+0xfffbf6d0>
 508d8e8:	483e110e 	bge	r9,zero,508d130 <__alt_data_end+0xfffbef30>
 508d8ec:	027fffc4 	movi	r9,-1
 508d8f0:	003e0f06 	br	508d130 <__alt_data_end+0xfffbef30>
 508d8f4:	d9811d85 	stb	r6,1142(sp)
 508d8f8:	a880080c 	andi	r2,r21,32
 508d8fc:	1001ee26 	beq	r2,zero,508e0b8 <___vfiprintf_internal_r+0x1108>
 508d900:	da812117 	ldw	r10,1156(sp)
 508d904:	dac12217 	ldw	r11,1160(sp)
 508d908:	50800017 	ldw	r2,0(r10)
 508d90c:	5807d7fa 	srai	r3,r11,31
 508d910:	52800104 	addi	r10,r10,4
 508d914:	da812115 	stw	r10,1156(sp)
 508d918:	12c00015 	stw	r11,0(r2)
 508d91c:	10c00115 	stw	r3,4(r2)
 508d920:	003dd806 	br	508d084 <__alt_data_end+0xfffbee84>
 508d924:	30803fcc 	andi	r2,r6,255
 508d928:	1080201c 	xori	r2,r2,128
 508d92c:	10bfe004 	addi	r2,r2,-128
 508d930:	1001df1e 	bne	r2,zero,508e0b0 <___vfiprintf_internal_r+0x1100>
 508d934:	01800804 	movi	r6,32
 508d938:	80c00007 	ldb	r3,0(r16)
 508d93c:	003dfb06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508d940:	da812117 	ldw	r10,1156(sp)
 508d944:	dac12117 	ldw	r11,1156(sp)
 508d948:	d8011d85 	stb	zero,1142(sp)
 508d94c:	52800017 	ldw	r10,0(r10)
 508d950:	5d800104 	addi	r22,r11,4
 508d954:	da812415 	stw	r10,1168(sp)
 508d958:	50023b26 	beq	r10,zero,508e248 <___vfiprintf_internal_r+0x1298>
 508d95c:	d9012417 	ldw	r4,1168(sp)
 508d960:	48021f16 	blt	r9,zero,508e1e0 <___vfiprintf_internal_r+0x1230>
 508d964:	480d883a 	mov	r6,r9
 508d968:	000b883a 	mov	r5,zero
 508d96c:	da012a15 	stw	r8,1192(sp)
 508d970:	da412b15 	stw	r9,1196(sp)
 508d974:	5089ff80 	call	5089ff8 <memchr>
 508d978:	da012a17 	ldw	r8,1192(sp)
 508d97c:	da412b17 	ldw	r9,1196(sp)
 508d980:	10024726 	beq	r2,zero,508e2a0 <___vfiprintf_internal_r+0x12f0>
 508d984:	d8c12417 	ldw	r3,1168(sp)
 508d988:	10e3c83a 	sub	r17,r2,r3
 508d98c:	4c41f616 	blt	r9,r17,508e168 <___vfiprintf_internal_r+0x11b8>
 508d990:	db011d83 	ldbu	r12,1142(sp)
 508d994:	dd812115 	stw	r22,1156(sp)
 508d998:	0013883a 	mov	r9,zero
 508d99c:	003e8006 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508d9a0:	d9811d85 	stb	r6,1142(sp)
 508d9a4:	a880080c 	andi	r2,r21,32
 508d9a8:	d8c12117 	ldw	r3,1156(sp)
 508d9ac:	103fb51e 	bne	r2,zero,508d884 <__alt_data_end+0xfffbf684>
 508d9b0:	a880040c 	andi	r2,r21,16
 508d9b4:	10015e1e 	bne	r2,zero,508df30 <___vfiprintf_internal_r+0xf80>
 508d9b8:	a880100c 	andi	r2,r21,64
 508d9bc:	10015c26 	beq	r2,zero,508df30 <___vfiprintf_internal_r+0xf80>
 508d9c0:	1c80000f 	ldh	r18,0(r3)
 508d9c4:	da812117 	ldw	r10,1156(sp)
 508d9c8:	902dd7fa 	srai	r22,r18,31
 508d9cc:	52800104 	addi	r10,r10,4
 508d9d0:	da812115 	stw	r10,1156(sp)
 508d9d4:	b005883a 	mov	r2,r22
 508d9d8:	003fb006 	br	508d89c <__alt_data_end+0xfffbf69c>
 508d9dc:	da812117 	ldw	r10,1156(sp)
 508d9e0:	00800c04 	movi	r2,48
 508d9e4:	02c14274 	movhi	r11,1289
 508d9e8:	54800017 	ldw	r18,0(r10)
 508d9ec:	d8811d05 	stb	r2,1140(sp)
 508d9f0:	52800104 	addi	r10,r10,4
 508d9f4:	00801e04 	movi	r2,120
 508d9f8:	5ad4e204 	addi	r11,r11,21384
 508d9fc:	d8811d45 	stb	r2,1141(sp)
 508da00:	002d883a 	mov	r22,zero
 508da04:	ad400094 	ori	r21,r21,2
 508da08:	da812115 	stw	r10,1156(sp)
 508da0c:	dac12615 	stw	r11,1176(sp)
 508da10:	00800084 	movi	r2,2
 508da14:	9009883a 	mov	r4,r18
 508da18:	003e4406 	br	508d32c <__alt_data_end+0xfffbf12c>
 508da1c:	ad400814 	ori	r21,r21,32
 508da20:	80c00007 	ldb	r3,0(r16)
 508da24:	003dc106 	br	508d12c <__alt_data_end+0xfffbef2c>
 508da28:	ad401014 	ori	r21,r21,64
 508da2c:	80c00007 	ldb	r3,0(r16)
 508da30:	003dbe06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508da34:	80c00007 	ldb	r3,0(r16)
 508da38:	19c1de26 	beq	r3,r7,508e1b4 <___vfiprintf_internal_r+0x1204>
 508da3c:	ad400414 	ori	r21,r21,16
 508da40:	003dba06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508da44:	00814274 	movhi	r2,1289
 508da48:	1094e204 	addi	r2,r2,21384
 508da4c:	d8812615 	stw	r2,1176(sp)
 508da50:	d9811d85 	stb	r6,1142(sp)
 508da54:	a900080c 	andi	r4,r21,32
 508da58:	d8812117 	ldw	r2,1156(sp)
 508da5c:	203f5b1e 	bne	r4,zero,508d7cc <__alt_data_end+0xfffbf5cc>
 508da60:	a900040c 	andi	r4,r21,16
 508da64:	2001a826 	beq	r4,zero,508e108 <___vfiprintf_internal_r+0x1158>
 508da68:	dac12117 	ldw	r11,1156(sp)
 508da6c:	14800017 	ldw	r18,0(r2)
 508da70:	002d883a 	mov	r22,zero
 508da74:	5ac00104 	addi	r11,r11,4
 508da78:	dac12115 	stw	r11,1156(sp)
 508da7c:	003f5806 	br	508d7e0 <__alt_data_end+0xfffbf5e0>
 508da80:	da812117 	ldw	r10,1156(sp)
 508da84:	54c00017 	ldw	r19,0(r10)
 508da88:	50800104 	addi	r2,r10,4
 508da8c:	983f2f16 	blt	r19,zero,508d74c <__alt_data_end+0xfffbf54c>
 508da90:	d8812115 	stw	r2,1156(sp)
 508da94:	80c00007 	ldb	r3,0(r16)
 508da98:	003da406 	br	508d12c <__alt_data_end+0xfffbef2c>
 508da9c:	01800ac4 	movi	r6,43
 508daa0:	80c00007 	ldb	r3,0(r16)
 508daa4:	003da106 	br	508d12c <__alt_data_end+0xfffbef2c>
 508daa8:	ad400054 	ori	r21,r21,1
 508daac:	80c00007 	ldb	r3,0(r16)
 508dab0:	003d9e06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508dab4:	d9811d85 	stb	r6,1142(sp)
 508dab8:	18007126 	beq	r3,zero,508dc80 <___vfiprintf_internal_r+0xcd0>
 508dabc:	04800044 	movi	r18,1
 508dac0:	d8c10005 	stb	r3,1024(sp)
 508dac4:	d8c10004 	addi	r3,sp,1024
 508dac8:	d8011d85 	stb	zero,1142(sp)
 508dacc:	9023883a 	mov	r17,r18
 508dad0:	d8c12415 	stw	r3,1168(sp)
 508dad4:	003f5606 	br	508d830 <__alt_data_end+0xfffbf630>
 508dad8:	dac12117 	ldw	r11,1156(sp)
 508dadc:	002d883a 	mov	r22,zero
 508dae0:	00800044 	movi	r2,1
 508dae4:	5c800017 	ldw	r18,0(r11)
 508dae8:	5ac00104 	addi	r11,r11,4
 508daec:	dac12115 	stw	r11,1156(sp)
 508daf0:	9009883a 	mov	r4,r18
 508daf4:	003e0d06 	br	508d32c <__alt_data_end+0xfffbf12c>
 508daf8:	dac12117 	ldw	r11,1156(sp)
 508dafc:	002d883a 	mov	r22,zero
 508db00:	0005883a 	mov	r2,zero
 508db04:	5c800017 	ldw	r18,0(r11)
 508db08:	5ac00104 	addi	r11,r11,4
 508db0c:	dac12115 	stw	r11,1156(sp)
 508db10:	9009883a 	mov	r4,r18
 508db14:	003e0506 	br	508d32c <__alt_data_end+0xfffbf12c>
 508db18:	d9012017 	ldw	r4,1152(sp)
 508db1c:	a00b883a 	mov	r5,r20
 508db20:	d9811a04 	addi	r6,sp,1128
 508db24:	d8c12a15 	stw	r3,1192(sp)
 508db28:	db012b15 	stw	r12,1196(sp)
 508db2c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508db30:	d8c12a17 	ldw	r3,1192(sp)
 508db34:	db012b17 	ldw	r12,1196(sp)
 508db38:	1000571e 	bne	r2,zero,508dc98 <___vfiprintf_internal_r+0xce8>
 508db3c:	d9811b17 	ldw	r6,1132(sp)
 508db40:	d8811c17 	ldw	r2,1136(sp)
 508db44:	d811883a 	mov	r8,sp
 508db48:	31400044 	addi	r5,r6,1
 508db4c:	003e3306 	br	508d41c <__alt_data_end+0xfffbf21c>
 508db50:	d9411b17 	ldw	r5,1132(sp)
 508db54:	d8c11c17 	ldw	r3,1136(sp)
 508db58:	28800044 	addi	r2,r5,1
 508db5c:	d9011d87 	ldb	r4,1142(sp)
 508db60:	203e4d26 	beq	r4,zero,508d498 <__alt_data_end+0xfffbf298>
 508db64:	01000044 	movi	r4,1
 508db68:	d9411d84 	addi	r5,sp,1142
 508db6c:	1907883a 	add	r3,r3,r4
 508db70:	41400015 	stw	r5,0(r8)
 508db74:	41000115 	stw	r4,4(r8)
 508db78:	d8c11c15 	stw	r3,1136(sp)
 508db7c:	d8811b15 	stw	r2,1132(sp)
 508db80:	014001c4 	movi	r5,7
 508db84:	2880aa16 	blt	r5,r2,508de30 <___vfiprintf_internal_r+0xe80>
 508db88:	100b883a 	mov	r5,r2
 508db8c:	42000204 	addi	r8,r8,8
 508db90:	10800044 	addi	r2,r2,1
 508db94:	003e4006 	br	508d498 <__alt_data_end+0xfffbf298>
 508db98:	d9012017 	ldw	r4,1152(sp)
 508db9c:	a00b883a 	mov	r5,r20
 508dba0:	d9811a04 	addi	r6,sp,1128
 508dba4:	d9c12a15 	stw	r7,1192(sp)
 508dba8:	db012b15 	stw	r12,1196(sp)
 508dbac:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dbb0:	d9c12a17 	ldw	r7,1192(sp)
 508dbb4:	db012b17 	ldw	r12,1196(sp)
 508dbb8:	1000371e 	bne	r2,zero,508dc98 <___vfiprintf_internal_r+0xce8>
 508dbbc:	d9411b17 	ldw	r5,1132(sp)
 508dbc0:	d8c11c17 	ldw	r3,1136(sp)
 508dbc4:	d811883a 	mov	r8,sp
 508dbc8:	28800044 	addi	r2,r5,1
 508dbcc:	003e4d06 	br	508d504 <__alt_data_end+0xfffbf304>
 508dbd0:	10803fcc 	andi	r2,r2,255
 508dbd4:	00c00044 	movi	r3,1
 508dbd8:	10fddf1e 	bne	r2,r3,508d358 <__alt_data_end+0xfffbf158>
 508dbdc:	b000021e 	bne	r22,zero,508dbe8 <___vfiprintf_internal_r+0xc38>
 508dbe0:	00800244 	movi	r2,9
 508dbe4:	1480202e 	bgeu	r2,r18,508dc68 <___vfiprintf_internal_r+0xcb8>
 508dbe8:	dc012515 	stw	r16,1172(sp)
 508dbec:	dc410a04 	addi	r17,sp,1064
 508dbf0:	9021883a 	mov	r16,r18
 508dbf4:	da012415 	stw	r8,1168(sp)
 508dbf8:	b025883a 	mov	r18,r22
 508dbfc:	da412315 	stw	r9,1164(sp)
 508dc00:	602d883a 	mov	r22,r12
 508dc04:	8009883a 	mov	r4,r16
 508dc08:	900b883a 	mov	r5,r18
 508dc0c:	01800284 	movi	r6,10
 508dc10:	000f883a 	mov	r7,zero
 508dc14:	508f2280 	call	508f228 <__umoddi3>
 508dc18:	10800c04 	addi	r2,r2,48
 508dc1c:	8c7fffc4 	addi	r17,r17,-1
 508dc20:	8009883a 	mov	r4,r16
 508dc24:	900b883a 	mov	r5,r18
 508dc28:	01800284 	movi	r6,10
 508dc2c:	000f883a 	mov	r7,zero
 508dc30:	88800005 	stb	r2,0(r17)
 508dc34:	508ec680 	call	508ec68 <__udivdi3>
 508dc38:	1021883a 	mov	r16,r2
 508dc3c:	10c4b03a 	or	r2,r2,r3
 508dc40:	1825883a 	mov	r18,r3
 508dc44:	103fef1e 	bne	r2,zero,508dc04 <__alt_data_end+0xfffbfa04>
 508dc48:	da811e17 	ldw	r10,1144(sp)
 508dc4c:	da012417 	ldw	r8,1168(sp)
 508dc50:	da412317 	ldw	r9,1164(sp)
 508dc54:	dc412415 	stw	r17,1168(sp)
 508dc58:	b019883a 	mov	r12,r22
 508dc5c:	dc012517 	ldw	r16,1172(sp)
 508dc60:	5463c83a 	sub	r17,r10,r17
 508dc64:	003dce06 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508dc68:	94800c04 	addi	r18,r18,48
 508dc6c:	d8c109c4 	addi	r3,sp,1063
 508dc70:	dc8109c5 	stb	r18,1063(sp)
 508dc74:	dc412717 	ldw	r17,1180(sp)
 508dc78:	d8c12415 	stw	r3,1168(sp)
 508dc7c:	003dc806 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508dc80:	d8811c17 	ldw	r2,1136(sp)
 508dc84:	10000426 	beq	r2,zero,508dc98 <___vfiprintf_internal_r+0xce8>
 508dc88:	d9012017 	ldw	r4,1152(sp)
 508dc8c:	a00b883a 	mov	r5,r20
 508dc90:	d9811a04 	addi	r6,sp,1128
 508dc94:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dc98:	a080030b 	ldhu	r2,12(r20)
 508dc9c:	1080100c 	andi	r2,r2,64
 508dca0:	103e9b1e 	bne	r2,zero,508d710 <__alt_data_end+0xfffbf510>
 508dca4:	d8812217 	ldw	r2,1160(sp)
 508dca8:	003e9a06 	br	508d714 <__alt_data_end+0xfffbf514>
 508dcac:	d9012017 	ldw	r4,1152(sp)
 508dcb0:	a00b883a 	mov	r5,r20
 508dcb4:	d9811a04 	addi	r6,sp,1128
 508dcb8:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dcbc:	103ff61e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508dcc0:	d9011b17 	ldw	r4,1132(sp)
 508dcc4:	d8c11c17 	ldw	r3,1136(sp)
 508dcc8:	d811883a 	mov	r8,sp
 508dccc:	21400044 	addi	r5,r4,1
 508dcd0:	003e4006 	br	508d5d4 <__alt_data_end+0xfffbf3d4>
 508dcd4:	1800d61e 	bne	r3,zero,508e030 <___vfiprintf_internal_r+0x1080>
 508dcd8:	dac12417 	ldw	r11,1168(sp)
 508dcdc:	00800044 	movi	r2,1
 508dce0:	dc400115 	stw	r17,4(sp)
 508dce4:	dac00015 	stw	r11,0(sp)
 508dce8:	dc411c15 	stw	r17,1136(sp)
 508dcec:	d8811b15 	stw	r2,1132(sp)
 508dcf0:	8807883a 	mov	r3,r17
 508dcf4:	d811883a 	mov	r8,sp
 508dcf8:	42000204 	addi	r8,r8,8
 508dcfc:	aac0010c 	andi	r11,r21,4
 508dd00:	58000226 	beq	r11,zero,508dd0c <___vfiprintf_internal_r+0xd5c>
 508dd04:	9ca3c83a 	sub	r17,r19,r18
 508dd08:	047e2616 	blt	zero,r17,508d5a4 <__alt_data_end+0xfffbf3a4>
 508dd0c:	94c0010e 	bge	r18,r19,508dd14 <___vfiprintf_internal_r+0xd64>
 508dd10:	9825883a 	mov	r18,r19
 508dd14:	da812217 	ldw	r10,1160(sp)
 508dd18:	5495883a 	add	r10,r10,r18
 508dd1c:	da812215 	stw	r10,1160(sp)
 508dd20:	183e4826 	beq	r3,zero,508d644 <__alt_data_end+0xfffbf444>
 508dd24:	d9012017 	ldw	r4,1152(sp)
 508dd28:	a00b883a 	mov	r5,r20
 508dd2c:	d9811a04 	addi	r6,sp,1128
 508dd30:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dd34:	103e4326 	beq	r2,zero,508d644 <__alt_data_end+0xfffbf444>
 508dd38:	003fd706 	br	508dc98 <__alt_data_end+0xfffbfa98>
 508dd3c:	9cadc83a 	sub	r22,r19,r18
 508dd40:	05bde40e 	bge	zero,r22,508d4d4 <__alt_data_end+0xfffbf2d4>
 508dd44:	03000404 	movi	r12,16
 508dd48:	6581500e 	bge	r12,r22,508e28c <___vfiprintf_internal_r+0x12dc>
 508dd4c:	00814274 	movhi	r2,1289
 508dd50:	10955304 	addi	r2,r2,21836
 508dd54:	d8812315 	stw	r2,1164(sp)
 508dd58:	8005883a 	mov	r2,r16
 508dd5c:	038001c4 	movi	r14,7
 508dd60:	b021883a 	mov	r16,r22
 508dd64:	da412515 	stw	r9,1172(sp)
 508dd68:	102d883a 	mov	r22,r2
 508dd6c:	00000506 	br	508dd84 <___vfiprintf_internal_r+0xdd4>
 508dd70:	29000084 	addi	r4,r5,2
 508dd74:	42000204 	addi	r8,r8,8
 508dd78:	100b883a 	mov	r5,r2
 508dd7c:	843ffc04 	addi	r16,r16,-16
 508dd80:	64000d0e 	bge	r12,r16,508ddb8 <___vfiprintf_internal_r+0xe08>
 508dd84:	18c00404 	addi	r3,r3,16
 508dd88:	28800044 	addi	r2,r5,1
 508dd8c:	45c00015 	stw	r23,0(r8)
 508dd90:	43000115 	stw	r12,4(r8)
 508dd94:	d8c11c15 	stw	r3,1136(sp)
 508dd98:	d8811b15 	stw	r2,1132(sp)
 508dd9c:	70bff40e 	bge	r14,r2,508dd70 <__alt_data_end+0xfffbfb70>
 508dda0:	1800151e 	bne	r3,zero,508ddf8 <___vfiprintf_internal_r+0xe48>
 508dda4:	843ffc04 	addi	r16,r16,-16
 508dda8:	000b883a 	mov	r5,zero
 508ddac:	01000044 	movi	r4,1
 508ddb0:	d811883a 	mov	r8,sp
 508ddb4:	643ff316 	blt	r12,r16,508dd84 <__alt_data_end+0xfffbfb84>
 508ddb8:	da412517 	ldw	r9,1172(sp)
 508ddbc:	b005883a 	mov	r2,r22
 508ddc0:	802d883a 	mov	r22,r16
 508ddc4:	1021883a 	mov	r16,r2
 508ddc8:	da812317 	ldw	r10,1164(sp)
 508ddcc:	1d87883a 	add	r3,r3,r22
 508ddd0:	45800115 	stw	r22,4(r8)
 508ddd4:	42800015 	stw	r10,0(r8)
 508ddd8:	d8c11c15 	stw	r3,1136(sp)
 508dddc:	d9011b15 	stw	r4,1132(sp)
 508dde0:	008001c4 	movi	r2,7
 508dde4:	11008d16 	blt	r2,r4,508e01c <___vfiprintf_internal_r+0x106c>
 508dde8:	42000204 	addi	r8,r8,8
 508ddec:	20800044 	addi	r2,r4,1
 508ddf0:	200b883a 	mov	r5,r4
 508ddf4:	003db706 	br	508d4d4 <__alt_data_end+0xfffbf2d4>
 508ddf8:	d9012017 	ldw	r4,1152(sp)
 508ddfc:	a00b883a 	mov	r5,r20
 508de00:	d9811a04 	addi	r6,sp,1128
 508de04:	db012b15 	stw	r12,1196(sp)
 508de08:	db812a15 	stw	r14,1192(sp)
 508de0c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508de10:	db012b17 	ldw	r12,1196(sp)
 508de14:	db812a17 	ldw	r14,1192(sp)
 508de18:	103f9f1e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508de1c:	d9411b17 	ldw	r5,1132(sp)
 508de20:	d8c11c17 	ldw	r3,1136(sp)
 508de24:	d811883a 	mov	r8,sp
 508de28:	29000044 	addi	r4,r5,1
 508de2c:	003fd306 	br	508dd7c <__alt_data_end+0xfffbfb7c>
 508de30:	18006c1e 	bne	r3,zero,508dfe4 <___vfiprintf_internal_r+0x1034>
 508de34:	70004f26 	beq	r14,zero,508df74 <___vfiprintf_internal_r+0xfc4>
 508de38:	d8811d04 	addi	r2,sp,1140
 508de3c:	00c00084 	movi	r3,2
 508de40:	d8800015 	stw	r2,0(sp)
 508de44:	d8c00115 	stw	r3,4(sp)
 508de48:	2005883a 	mov	r2,r4
 508de4c:	d811883a 	mov	r8,sp
 508de50:	003d9b06 	br	508d4c0 <__alt_data_end+0xfffbf2c0>
 508de54:	1800571e 	bne	r3,zero,508dfb4 <___vfiprintf_internal_r+0x1004>
 508de58:	000b883a 	mov	r5,zero
 508de5c:	00800044 	movi	r2,1
 508de60:	d811883a 	mov	r8,sp
 508de64:	003d9906 	br	508d4cc <__alt_data_end+0xfffbf2cc>
 508de68:	10803fcc 	andi	r2,r2,255
 508de6c:	1000251e 	bne	r2,zero,508df04 <___vfiprintf_internal_r+0xf54>
 508de70:	a880004c 	andi	r2,r21,1
 508de74:	10007826 	beq	r2,zero,508e058 <___vfiprintf_internal_r+0x10a8>
 508de78:	00800c04 	movi	r2,48
 508de7c:	d8c109c4 	addi	r3,sp,1063
 508de80:	d88109c5 	stb	r2,1063(sp)
 508de84:	dc412717 	ldw	r17,1180(sp)
 508de88:	d8c12415 	stw	r3,1168(sp)
 508de8c:	003d4406 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508de90:	d9012617 	ldw	r4,1176(sp)
 508de94:	dc410a04 	addi	r17,sp,1064
 508de98:	908003cc 	andi	r2,r18,15
 508de9c:	b006973a 	slli	r3,r22,28
 508dea0:	2085883a 	add	r2,r4,r2
 508dea4:	9024d13a 	srli	r18,r18,4
 508dea8:	10800003 	ldbu	r2,0(r2)
 508deac:	b02cd13a 	srli	r22,r22,4
 508deb0:	8c7fffc4 	addi	r17,r17,-1
 508deb4:	1ca4b03a 	or	r18,r3,r18
 508deb8:	88800005 	stb	r2,0(r17)
 508debc:	9584b03a 	or	r2,r18,r22
 508dec0:	103ff51e 	bne	r2,zero,508de98 <__alt_data_end+0xfffbfc98>
 508dec4:	dac11e17 	ldw	r11,1144(sp)
 508dec8:	dc412415 	stw	r17,1168(sp)
 508decc:	5c63c83a 	sub	r17,r11,r17
 508ded0:	003d3306 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508ded4:	1800941e 	bne	r3,zero,508e128 <___vfiprintf_internal_r+0x1178>
 508ded8:	d8811d87 	ldb	r2,1142(sp)
 508dedc:	10006b26 	beq	r2,zero,508e08c <___vfiprintf_internal_r+0x10dc>
 508dee0:	00c00044 	movi	r3,1
 508dee4:	d9011d84 	addi	r4,sp,1142
 508dee8:	1805883a 	mov	r2,r3
 508deec:	d9000015 	stw	r4,0(sp)
 508def0:	d8c00115 	stw	r3,4(sp)
 508def4:	d811883a 	mov	r8,sp
 508def8:	003f2306 	br	508db88 <__alt_data_end+0xfffbf988>
 508defc:	8023883a 	mov	r17,r16
 508df00:	003c7d06 	br	508d0f8 <__alt_data_end+0xfffbeef8>
 508df04:	da810a04 	addi	r10,sp,1064
 508df08:	da812415 	stw	r10,1168(sp)
 508df0c:	003d2406 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508df10:	d9012017 	ldw	r4,1152(sp)
 508df14:	a00b883a 	mov	r5,r20
 508df18:	d9811a04 	addi	r6,sp,1128
 508df1c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508df20:	103f5d1e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508df24:	d8c11c17 	ldw	r3,1136(sp)
 508df28:	d811883a 	mov	r8,sp
 508df2c:	003f7306 	br	508dcfc <__alt_data_end+0xfffbfafc>
 508df30:	1c800017 	ldw	r18,0(r3)
 508df34:	dac12117 	ldw	r11,1156(sp)
 508df38:	902dd7fa 	srai	r22,r18,31
 508df3c:	5ac00104 	addi	r11,r11,4
 508df40:	dac12115 	stw	r11,1156(sp)
 508df44:	b005883a 	mov	r2,r22
 508df48:	003e5406 	br	508d89c <__alt_data_end+0xfffbf69c>
 508df4c:	00800084 	movi	r2,2
 508df50:	9588b03a 	or	r4,r18,r22
 508df54:	003cf506 	br	508d32c <__alt_data_end+0xfffbf12c>
 508df58:	d9012017 	ldw	r4,1152(sp)
 508df5c:	a00b883a 	mov	r5,r20
 508df60:	d9811a04 	addi	r6,sp,1128
 508df64:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508df68:	103f4b1e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508df6c:	d811883a 	mov	r8,sp
 508df70:	003cd106 	br	508d2b8 <__alt_data_end+0xfffbf0b8>
 508df74:	000b883a 	mov	r5,zero
 508df78:	2005883a 	mov	r2,r4
 508df7c:	d811883a 	mov	r8,sp
 508df80:	003d5206 	br	508d4cc <__alt_data_end+0xfffbf2cc>
 508df84:	10803fcc 	andi	r2,r2,255
 508df88:	1080201c 	xori	r2,r2,128
 508df8c:	10bfe004 	addi	r2,r2,-128
 508df90:	01000c04 	movi	r4,48
 508df94:	11008e26 	beq	r2,r4,508e1d0 <___vfiprintf_internal_r+0x1220>
 508df98:	da812417 	ldw	r10,1168(sp)
 508df9c:	dac11e17 	ldw	r11,1144(sp)
 508dfa0:	193fffc5 	stb	r4,-1(r3)
 508dfa4:	52bfffc4 	addi	r10,r10,-1
 508dfa8:	da812415 	stw	r10,1168(sp)
 508dfac:	5aa3c83a 	sub	r17,r11,r10
 508dfb0:	003cfb06 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508dfb4:	d9012017 	ldw	r4,1152(sp)
 508dfb8:	a00b883a 	mov	r5,r20
 508dfbc:	d9811a04 	addi	r6,sp,1128
 508dfc0:	da412b15 	stw	r9,1196(sp)
 508dfc4:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dfc8:	da412b17 	ldw	r9,1196(sp)
 508dfcc:	103f321e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508dfd0:	d9411b17 	ldw	r5,1132(sp)
 508dfd4:	d8c11c17 	ldw	r3,1136(sp)
 508dfd8:	d811883a 	mov	r8,sp
 508dfdc:	28800044 	addi	r2,r5,1
 508dfe0:	003d3a06 	br	508d4cc <__alt_data_end+0xfffbf2cc>
 508dfe4:	d9012017 	ldw	r4,1152(sp)
 508dfe8:	a00b883a 	mov	r5,r20
 508dfec:	d9811a04 	addi	r6,sp,1128
 508dff0:	da412b15 	stw	r9,1196(sp)
 508dff4:	db812a15 	stw	r14,1192(sp)
 508dff8:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508dffc:	da412b17 	ldw	r9,1196(sp)
 508e000:	db812a17 	ldw	r14,1192(sp)
 508e004:	103f241e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508e008:	d9411b17 	ldw	r5,1132(sp)
 508e00c:	d8c11c17 	ldw	r3,1136(sp)
 508e010:	d811883a 	mov	r8,sp
 508e014:	28800044 	addi	r2,r5,1
 508e018:	003d1f06 	br	508d498 <__alt_data_end+0xfffbf298>
 508e01c:	1800781e 	bne	r3,zero,508e200 <___vfiprintf_internal_r+0x1250>
 508e020:	000b883a 	mov	r5,zero
 508e024:	00800044 	movi	r2,1
 508e028:	d811883a 	mov	r8,sp
 508e02c:	003d2906 	br	508d4d4 <__alt_data_end+0xfffbf2d4>
 508e030:	d9012017 	ldw	r4,1152(sp)
 508e034:	a00b883a 	mov	r5,r20
 508e038:	d9811a04 	addi	r6,sp,1128
 508e03c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508e040:	103f151e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508e044:	d8811b17 	ldw	r2,1132(sp)
 508e048:	d8c11c17 	ldw	r3,1136(sp)
 508e04c:	d811883a 	mov	r8,sp
 508e050:	10800044 	addi	r2,r2,1
 508e054:	003d4406 	br	508d568 <__alt_data_end+0xfffbf368>
 508e058:	dac10a04 	addi	r11,sp,1064
 508e05c:	dac12415 	stw	r11,1168(sp)
 508e060:	003ccf06 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508e064:	04a5c83a 	sub	r18,zero,r18
 508e068:	9004c03a 	cmpne	r2,r18,zero
 508e06c:	05adc83a 	sub	r22,zero,r22
 508e070:	b0adc83a 	sub	r22,r22,r2
 508e074:	03000b44 	movi	r12,45
 508e078:	db011d85 	stb	r12,1142(sp)
 508e07c:	4823883a 	mov	r17,r9
 508e080:	00800044 	movi	r2,1
 508e084:	9588b03a 	or	r4,r18,r22
 508e088:	003cab06 	br	508d338 <__alt_data_end+0xfffbf138>
 508e08c:	000b883a 	mov	r5,zero
 508e090:	00800044 	movi	r2,1
 508e094:	d811883a 	mov	r8,sp
 508e098:	703d0c26 	beq	r14,zero,508d4cc <__alt_data_end+0xfffbf2cc>
 508e09c:	00c00084 	movi	r3,2
 508e0a0:	d9011d04 	addi	r4,sp,1140
 508e0a4:	d9000015 	stw	r4,0(sp)
 508e0a8:	d8c00115 	stw	r3,4(sp)
 508e0ac:	003d0406 	br	508d4c0 <__alt_data_end+0xfffbf2c0>
 508e0b0:	80c00007 	ldb	r3,0(r16)
 508e0b4:	003c1d06 	br	508d12c <__alt_data_end+0xfffbef2c>
 508e0b8:	a880040c 	andi	r2,r21,16
 508e0bc:	1000091e 	bne	r2,zero,508e0e4 <___vfiprintf_internal_r+0x1134>
 508e0c0:	aac0100c 	andi	r11,r21,64
 508e0c4:	58000726 	beq	r11,zero,508e0e4 <___vfiprintf_internal_r+0x1134>
 508e0c8:	da812117 	ldw	r10,1156(sp)
 508e0cc:	dac12217 	ldw	r11,1160(sp)
 508e0d0:	50800017 	ldw	r2,0(r10)
 508e0d4:	52800104 	addi	r10,r10,4
 508e0d8:	da812115 	stw	r10,1156(sp)
 508e0dc:	12c0000d 	sth	r11,0(r2)
 508e0e0:	003be806 	br	508d084 <__alt_data_end+0xfffbee84>
 508e0e4:	da812117 	ldw	r10,1156(sp)
 508e0e8:	dac12217 	ldw	r11,1160(sp)
 508e0ec:	50800017 	ldw	r2,0(r10)
 508e0f0:	52800104 	addi	r10,r10,4
 508e0f4:	da812115 	stw	r10,1156(sp)
 508e0f8:	12c00015 	stw	r11,0(r2)
 508e0fc:	003be106 	br	508d084 <__alt_data_end+0xfffbee84>
 508e100:	00800084 	movi	r2,2
 508e104:	003c8906 	br	508d32c <__alt_data_end+0xfffbf12c>
 508e108:	a900100c 	andi	r4,r21,64
 508e10c:	20001f26 	beq	r4,zero,508e18c <___vfiprintf_internal_r+0x11dc>
 508e110:	da812117 	ldw	r10,1156(sp)
 508e114:	1480000b 	ldhu	r18,0(r2)
 508e118:	002d883a 	mov	r22,zero
 508e11c:	52800104 	addi	r10,r10,4
 508e120:	da812115 	stw	r10,1156(sp)
 508e124:	003dae06 	br	508d7e0 <__alt_data_end+0xfffbf5e0>
 508e128:	d9012017 	ldw	r4,1152(sp)
 508e12c:	a00b883a 	mov	r5,r20
 508e130:	d9811a04 	addi	r6,sp,1128
 508e134:	da412b15 	stw	r9,1196(sp)
 508e138:	db812a15 	stw	r14,1192(sp)
 508e13c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508e140:	da412b17 	ldw	r9,1196(sp)
 508e144:	db812a17 	ldw	r14,1192(sp)
 508e148:	103ed31e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508e14c:	d9411b17 	ldw	r5,1132(sp)
 508e150:	d8c11c17 	ldw	r3,1136(sp)
 508e154:	d811883a 	mov	r8,sp
 508e158:	28800044 	addi	r2,r5,1
 508e15c:	003e7f06 	br	508db5c <__alt_data_end+0xfffbf95c>
 508e160:	9825883a 	mov	r18,r19
 508e164:	003d3406 	br	508d638 <__alt_data_end+0xfffbf438>
 508e168:	4823883a 	mov	r17,r9
 508e16c:	003e0806 	br	508d990 <__alt_data_end+0xfffbf790>
 508e170:	d9012017 	ldw	r4,1152(sp)
 508e174:	a00b883a 	mov	r5,r20
 508e178:	d9811a04 	addi	r6,sp,1128
 508e17c:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508e180:	103ec51e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508e184:	d8c11c17 	ldw	r3,1136(sp)
 508e188:	003ee006 	br	508dd0c <__alt_data_end+0xfffbfb0c>
 508e18c:	dac12117 	ldw	r11,1156(sp)
 508e190:	14800017 	ldw	r18,0(r2)
 508e194:	002d883a 	mov	r22,zero
 508e198:	5ac00104 	addi	r11,r11,4
 508e19c:	dac12115 	stw	r11,1156(sp)
 508e1a0:	003d8f06 	br	508d7e0 <__alt_data_end+0xfffbf5e0>
 508e1a4:	02c14274 	movhi	r11,1289
 508e1a8:	5ad55304 	addi	r11,r11,21836
 508e1ac:	dac12315 	stw	r11,1164(sp)
 508e1b0:	003ce306 	br	508d540 <__alt_data_end+0xfffbf340>
 508e1b4:	80c00043 	ldbu	r3,1(r16)
 508e1b8:	ad400814 	ori	r21,r21,32
 508e1bc:	84000044 	addi	r16,r16,1
 508e1c0:	18c03fcc 	andi	r3,r3,255
 508e1c4:	18c0201c 	xori	r3,r3,128
 508e1c8:	18ffe004 	addi	r3,r3,-128
 508e1cc:	003bd706 	br	508d12c <__alt_data_end+0xfffbef2c>
 508e1d0:	dac11e17 	ldw	r11,1144(sp)
 508e1d4:	d8c12417 	ldw	r3,1168(sp)
 508e1d8:	58e3c83a 	sub	r17,r11,r3
 508e1dc:	003c7006 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508e1e0:	da012a15 	stw	r8,1192(sp)
 508e1e4:	50829c80 	call	50829c8 <strlen>
 508e1e8:	1023883a 	mov	r17,r2
 508e1ec:	db011d83 	ldbu	r12,1142(sp)
 508e1f0:	dd812115 	stw	r22,1156(sp)
 508e1f4:	0013883a 	mov	r9,zero
 508e1f8:	da012a17 	ldw	r8,1192(sp)
 508e1fc:	003c6806 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508e200:	d9012017 	ldw	r4,1152(sp)
 508e204:	a00b883a 	mov	r5,r20
 508e208:	d9811a04 	addi	r6,sp,1128
 508e20c:	da412b15 	stw	r9,1196(sp)
 508e210:	508ce9c0 	call	508ce9c <__sprint_r.part.0>
 508e214:	da412b17 	ldw	r9,1196(sp)
 508e218:	103e9f1e 	bne	r2,zero,508dc98 <__alt_data_end+0xfffbfa98>
 508e21c:	d9411b17 	ldw	r5,1132(sp)
 508e220:	d8c11c17 	ldw	r3,1136(sp)
 508e224:	d811883a 	mov	r8,sp
 508e228:	28800044 	addi	r2,r5,1
 508e22c:	003ca906 	br	508d4d4 <__alt_data_end+0xfffbf2d4>
 508e230:	d9411b17 	ldw	r5,1132(sp)
 508e234:	01014274 	movhi	r4,1289
 508e238:	21155704 	addi	r4,r4,21852
 508e23c:	d9012315 	stw	r4,1164(sp)
 508e240:	29400044 	addi	r5,r5,1
 508e244:	003c8806 	br	508d468 <__alt_data_end+0xfffbf268>
 508e248:	00800184 	movi	r2,6
 508e24c:	1240012e 	bgeu	r2,r9,508e254 <___vfiprintf_internal_r+0x12a4>
 508e250:	1013883a 	mov	r9,r2
 508e254:	4823883a 	mov	r17,r9
 508e258:	4825883a 	mov	r18,r9
 508e25c:	48001516 	blt	r9,zero,508e2b4 <___vfiprintf_internal_r+0x1304>
 508e260:	00814274 	movhi	r2,1289
 508e264:	1094e704 	addi	r2,r2,21404
 508e268:	dd812115 	stw	r22,1156(sp)
 508e26c:	d8812415 	stw	r2,1168(sp)
 508e270:	003d6f06 	br	508d830 <__alt_data_end+0xfffbf630>
 508e274:	d9411b17 	ldw	r5,1132(sp)
 508e278:	02c14274 	movhi	r11,1289
 508e27c:	5ad55704 	addi	r11,r11,21852
 508e280:	dac12315 	stw	r11,1164(sp)
 508e284:	29400044 	addi	r5,r5,1
 508e288:	003ce106 	br	508d610 <__alt_data_end+0xfffbf410>
 508e28c:	01014274 	movhi	r4,1289
 508e290:	21155304 	addi	r4,r4,21836
 508e294:	d9012315 	stw	r4,1164(sp)
 508e298:	1009883a 	mov	r4,r2
 508e29c:	003eca06 	br	508ddc8 <__alt_data_end+0xfffbfbc8>
 508e2a0:	4823883a 	mov	r17,r9
 508e2a4:	db011d83 	ldbu	r12,1142(sp)
 508e2a8:	dd812115 	stw	r22,1156(sp)
 508e2ac:	0013883a 	mov	r9,zero
 508e2b0:	003c3b06 	br	508d3a0 <__alt_data_end+0xfffbf1a0>
 508e2b4:	0025883a 	mov	r18,zero
 508e2b8:	003fe906 	br	508e260 <__alt_data_end+0xfffc0060>
 508e2bc:	dac12117 	ldw	r11,1156(sp)
 508e2c0:	8005883a 	mov	r2,r16
 508e2c4:	5021883a 	mov	r16,r10
 508e2c8:	5a400017 	ldw	r9,0(r11)
 508e2cc:	58c00104 	addi	r3,r11,4
 508e2d0:	d8c12115 	stw	r3,1156(sp)
 508e2d4:	48000a16 	blt	r9,zero,508e300 <___vfiprintf_internal_r+0x1350>
 508e2d8:	10c00047 	ldb	r3,1(r2)
 508e2dc:	003b9306 	br	508d12c <__alt_data_end+0xfffbef2c>
 508e2e0:	043fffc4 	movi	r16,-1
 508e2e4:	003d0206 	br	508d6f0 <__alt_data_end+0xfffbf4f0>
 508e2e8:	94c0010e 	bge	r18,r19,508e2f0 <___vfiprintf_internal_r+0x1340>
 508e2ec:	9825883a 	mov	r18,r19
 508e2f0:	da812217 	ldw	r10,1160(sp)
 508e2f4:	5495883a 	add	r10,r10,r18
 508e2f8:	da812215 	stw	r10,1160(sp)
 508e2fc:	003cd106 	br	508d644 <__alt_data_end+0xfffbf444>
 508e300:	027fffc4 	movi	r9,-1
 508e304:	10c00047 	ldb	r3,1(r2)
 508e308:	003b8806 	br	508d12c <__alt_data_end+0xfffbef2c>

0508e30c <__vfiprintf_internal>:
 508e30c:	2007883a 	mov	r3,r4
 508e310:	01014274 	movhi	r4,1289
 508e314:	211c5604 	addi	r4,r4,29016
 508e318:	21000017 	ldw	r4,0(r4)
 508e31c:	2805883a 	mov	r2,r5
 508e320:	300f883a 	mov	r7,r6
 508e324:	180b883a 	mov	r5,r3
 508e328:	100d883a 	mov	r6,r2
 508e32c:	508cfb01 	jmpi	508cfb0 <___vfiprintf_internal_r>

0508e330 <_write_r>:
 508e330:	defffd04 	addi	sp,sp,-12
 508e334:	dc000015 	stw	r16,0(sp)
 508e338:	040142b4 	movhi	r16,1290
 508e33c:	dc400115 	stw	r17,4(sp)
 508e340:	84232d04 	addi	r16,r16,-29516
 508e344:	2023883a 	mov	r17,r4
 508e348:	2809883a 	mov	r4,r5
 508e34c:	300b883a 	mov	r5,r6
 508e350:	380d883a 	mov	r6,r7
 508e354:	dfc00215 	stw	ra,8(sp)
 508e358:	80000015 	stw	zero,0(r16)
 508e35c:	50928440 	call	5092844 <write>
 508e360:	00ffffc4 	movi	r3,-1
 508e364:	10c00526 	beq	r2,r3,508e37c <_write_r+0x4c>
 508e368:	dfc00217 	ldw	ra,8(sp)
 508e36c:	dc400117 	ldw	r17,4(sp)
 508e370:	dc000017 	ldw	r16,0(sp)
 508e374:	dec00304 	addi	sp,sp,12
 508e378:	f800283a 	ret
 508e37c:	80c00017 	ldw	r3,0(r16)
 508e380:	183ff926 	beq	r3,zero,508e368 <__alt_data_end+0xfffc0168>
 508e384:	88c00015 	stw	r3,0(r17)
 508e388:	003ff706 	br	508e368 <__alt_data_end+0xfffc0168>

0508e38c <_close_r>:
 508e38c:	defffd04 	addi	sp,sp,-12
 508e390:	dc000015 	stw	r16,0(sp)
 508e394:	040142b4 	movhi	r16,1290
 508e398:	dc400115 	stw	r17,4(sp)
 508e39c:	84232d04 	addi	r16,r16,-29516
 508e3a0:	2023883a 	mov	r17,r4
 508e3a4:	2809883a 	mov	r4,r5
 508e3a8:	dfc00215 	stw	ra,8(sp)
 508e3ac:	80000015 	stw	zero,0(r16)
 508e3b0:	5091e080 	call	5091e08 <close>
 508e3b4:	00ffffc4 	movi	r3,-1
 508e3b8:	10c00526 	beq	r2,r3,508e3d0 <_close_r+0x44>
 508e3bc:	dfc00217 	ldw	ra,8(sp)
 508e3c0:	dc400117 	ldw	r17,4(sp)
 508e3c4:	dc000017 	ldw	r16,0(sp)
 508e3c8:	dec00304 	addi	sp,sp,12
 508e3cc:	f800283a 	ret
 508e3d0:	80c00017 	ldw	r3,0(r16)
 508e3d4:	183ff926 	beq	r3,zero,508e3bc <__alt_data_end+0xfffc01bc>
 508e3d8:	88c00015 	stw	r3,0(r17)
 508e3dc:	003ff706 	br	508e3bc <__alt_data_end+0xfffc01bc>

0508e3e0 <_calloc_r>:
 508e3e0:	298b383a 	mul	r5,r5,r6
 508e3e4:	defffe04 	addi	sp,sp,-8
 508e3e8:	dc000015 	stw	r16,0(sp)
 508e3ec:	dfc00115 	stw	ra,4(sp)
 508e3f0:	50898500 	call	5089850 <_malloc_r>
 508e3f4:	1021883a 	mov	r16,r2
 508e3f8:	10002826 	beq	r2,zero,508e49c <_calloc_r+0xbc>
 508e3fc:	11bfff17 	ldw	r6,-4(r2)
 508e400:	00bfff04 	movi	r2,-4
 508e404:	00c00904 	movi	r3,36
 508e408:	308c703a 	and	r6,r6,r2
 508e40c:	308d883a 	add	r6,r6,r2
 508e410:	19801436 	bltu	r3,r6,508e464 <_calloc_r+0x84>
 508e414:	008004c4 	movi	r2,19
 508e418:	11800936 	bltu	r2,r6,508e440 <_calloc_r+0x60>
 508e41c:	8005883a 	mov	r2,r16
 508e420:	10000015 	stw	zero,0(r2)
 508e424:	10000115 	stw	zero,4(r2)
 508e428:	10000215 	stw	zero,8(r2)
 508e42c:	8005883a 	mov	r2,r16
 508e430:	dfc00117 	ldw	ra,4(sp)
 508e434:	dc000017 	ldw	r16,0(sp)
 508e438:	dec00204 	addi	sp,sp,8
 508e43c:	f800283a 	ret
 508e440:	80000015 	stw	zero,0(r16)
 508e444:	80000115 	stw	zero,4(r16)
 508e448:	008006c4 	movi	r2,27
 508e44c:	11800d2e 	bgeu	r2,r6,508e484 <_calloc_r+0xa4>
 508e450:	80000215 	stw	zero,8(r16)
 508e454:	80000315 	stw	zero,12(r16)
 508e458:	30c00c26 	beq	r6,r3,508e48c <_calloc_r+0xac>
 508e45c:	80800404 	addi	r2,r16,16
 508e460:	003fef06 	br	508e420 <__alt_data_end+0xfffc0220>
 508e464:	8009883a 	mov	r4,r16
 508e468:	000b883a 	mov	r5,zero
 508e46c:	508a3740 	call	508a374 <memset>
 508e470:	8005883a 	mov	r2,r16
 508e474:	dfc00117 	ldw	ra,4(sp)
 508e478:	dc000017 	ldw	r16,0(sp)
 508e47c:	dec00204 	addi	sp,sp,8
 508e480:	f800283a 	ret
 508e484:	80800204 	addi	r2,r16,8
 508e488:	003fe506 	br	508e420 <__alt_data_end+0xfffc0220>
 508e48c:	80000415 	stw	zero,16(r16)
 508e490:	80800604 	addi	r2,r16,24
 508e494:	80000515 	stw	zero,20(r16)
 508e498:	003fe106 	br	508e420 <__alt_data_end+0xfffc0220>
 508e49c:	0005883a 	mov	r2,zero
 508e4a0:	003fe306 	br	508e430 <__alt_data_end+0xfffc0230>

0508e4a4 <_fclose_r>:
 508e4a4:	28003226 	beq	r5,zero,508e570 <_fclose_r+0xcc>
 508e4a8:	defffc04 	addi	sp,sp,-16
 508e4ac:	dc400115 	stw	r17,4(sp)
 508e4b0:	2023883a 	mov	r17,r4
 508e4b4:	dc000015 	stw	r16,0(sp)
 508e4b8:	dfc00315 	stw	ra,12(sp)
 508e4bc:	dc800215 	stw	r18,8(sp)
 508e4c0:	2821883a 	mov	r16,r5
 508e4c4:	5088b500 	call	5088b50 <__sfp_lock_acquire>
 508e4c8:	88000226 	beq	r17,zero,508e4d4 <_fclose_r+0x30>
 508e4cc:	88800e17 	ldw	r2,56(r17)
 508e4d0:	10002926 	beq	r2,zero,508e578 <_fclose_r+0xd4>
 508e4d4:	8080030f 	ldh	r2,12(r16)
 508e4d8:	10002226 	beq	r2,zero,508e564 <_fclose_r+0xc0>
 508e4dc:	8809883a 	mov	r4,r17
 508e4e0:	800b883a 	mov	r5,r16
 508e4e4:	50885980 	call	5088598 <_fflush_r>
 508e4e8:	1025883a 	mov	r18,r2
 508e4ec:	80800b17 	ldw	r2,44(r16)
 508e4f0:	10000426 	beq	r2,zero,508e504 <_fclose_r+0x60>
 508e4f4:	81400717 	ldw	r5,28(r16)
 508e4f8:	8809883a 	mov	r4,r17
 508e4fc:	103ee83a 	callr	r2
 508e500:	10002616 	blt	r2,zero,508e59c <_fclose_r+0xf8>
 508e504:	8080030b 	ldhu	r2,12(r16)
 508e508:	1080200c 	andi	r2,r2,128
 508e50c:	10001f1e 	bne	r2,zero,508e58c <_fclose_r+0xe8>
 508e510:	81400c17 	ldw	r5,48(r16)
 508e514:	28000526 	beq	r5,zero,508e52c <_fclose_r+0x88>
 508e518:	80801004 	addi	r2,r16,64
 508e51c:	28800226 	beq	r5,r2,508e528 <_fclose_r+0x84>
 508e520:	8809883a 	mov	r4,r17
 508e524:	5088cb40 	call	5088cb4 <_free_r>
 508e528:	80000c15 	stw	zero,48(r16)
 508e52c:	81401117 	ldw	r5,68(r16)
 508e530:	28000326 	beq	r5,zero,508e540 <_fclose_r+0x9c>
 508e534:	8809883a 	mov	r4,r17
 508e538:	5088cb40 	call	5088cb4 <_free_r>
 508e53c:	80001115 	stw	zero,68(r16)
 508e540:	8000030d 	sth	zero,12(r16)
 508e544:	5088b540 	call	5088b54 <__sfp_lock_release>
 508e548:	9005883a 	mov	r2,r18
 508e54c:	dfc00317 	ldw	ra,12(sp)
 508e550:	dc800217 	ldw	r18,8(sp)
 508e554:	dc400117 	ldw	r17,4(sp)
 508e558:	dc000017 	ldw	r16,0(sp)
 508e55c:	dec00404 	addi	sp,sp,16
 508e560:	f800283a 	ret
 508e564:	5088b540 	call	5088b54 <__sfp_lock_release>
 508e568:	0005883a 	mov	r2,zero
 508e56c:	003ff706 	br	508e54c <__alt_data_end+0xfffc034c>
 508e570:	0005883a 	mov	r2,zero
 508e574:	f800283a 	ret
 508e578:	8809883a 	mov	r4,r17
 508e57c:	5088b400 	call	5088b40 <__sinit>
 508e580:	8080030f 	ldh	r2,12(r16)
 508e584:	103fd51e 	bne	r2,zero,508e4dc <__alt_data_end+0xfffc02dc>
 508e588:	003ff606 	br	508e564 <__alt_data_end+0xfffc0364>
 508e58c:	81400417 	ldw	r5,16(r16)
 508e590:	8809883a 	mov	r4,r17
 508e594:	5088cb40 	call	5088cb4 <_free_r>
 508e598:	003fdd06 	br	508e510 <__alt_data_end+0xfffc0310>
 508e59c:	04bfffc4 	movi	r18,-1
 508e5a0:	003fd806 	br	508e504 <__alt_data_end+0xfffc0304>

0508e5a4 <fclose>:
 508e5a4:	00814274 	movhi	r2,1289
 508e5a8:	109c5604 	addi	r2,r2,29016
 508e5ac:	200b883a 	mov	r5,r4
 508e5b0:	11000017 	ldw	r4,0(r2)
 508e5b4:	508e4a41 	jmpi	508e4a4 <_fclose_r>

0508e5b8 <_fputwc_r>:
 508e5b8:	3080030b 	ldhu	r2,12(r6)
 508e5bc:	defff804 	addi	sp,sp,-32
 508e5c0:	dcc00415 	stw	r19,16(sp)
 508e5c4:	dc800315 	stw	r18,12(sp)
 508e5c8:	dc000115 	stw	r16,4(sp)
 508e5cc:	dfc00715 	stw	ra,28(sp)
 508e5d0:	dd400615 	stw	r21,24(sp)
 508e5d4:	dd000515 	stw	r20,20(sp)
 508e5d8:	dc400215 	stw	r17,8(sp)
 508e5dc:	10c8000c 	andi	r3,r2,8192
 508e5e0:	3021883a 	mov	r16,r6
 508e5e4:	2027883a 	mov	r19,r4
 508e5e8:	2825883a 	mov	r18,r5
 508e5ec:	1800051e 	bne	r3,zero,508e604 <_fputwc_r+0x4c>
 508e5f0:	30c01917 	ldw	r3,100(r6)
 508e5f4:	10880014 	ori	r2,r2,8192
 508e5f8:	3080030d 	sth	r2,12(r6)
 508e5fc:	18880014 	ori	r2,r3,8192
 508e600:	30801915 	stw	r2,100(r6)
 508e604:	50896400 	call	5089640 <__locale_mb_cur_max>
 508e608:	00c00044 	movi	r3,1
 508e60c:	10c03e26 	beq	r2,r3,508e708 <_fputwc_r+0x150>
 508e610:	9809883a 	mov	r4,r19
 508e614:	d80b883a 	mov	r5,sp
 508e618:	900d883a 	mov	r6,r18
 508e61c:	81c01704 	addi	r7,r16,92
 508e620:	508ea680 	call	508ea68 <_wcrtomb_r>
 508e624:	1029883a 	mov	r20,r2
 508e628:	00bfffc4 	movi	r2,-1
 508e62c:	a0802026 	beq	r20,r2,508e6b0 <_fputwc_r+0xf8>
 508e630:	d9400003 	ldbu	r5,0(sp)
 508e634:	a0001c26 	beq	r20,zero,508e6a8 <_fputwc_r+0xf0>
 508e638:	0023883a 	mov	r17,zero
 508e63c:	05400284 	movi	r21,10
 508e640:	00000906 	br	508e668 <_fputwc_r+0xb0>
 508e644:	80800017 	ldw	r2,0(r16)
 508e648:	11400005 	stb	r5,0(r2)
 508e64c:	80c00017 	ldw	r3,0(r16)
 508e650:	18c00044 	addi	r3,r3,1
 508e654:	80c00015 	stw	r3,0(r16)
 508e658:	8c400044 	addi	r17,r17,1
 508e65c:	dc45883a 	add	r2,sp,r17
 508e660:	8d00112e 	bgeu	r17,r20,508e6a8 <_fputwc_r+0xf0>
 508e664:	11400003 	ldbu	r5,0(r2)
 508e668:	80c00217 	ldw	r3,8(r16)
 508e66c:	18ffffc4 	addi	r3,r3,-1
 508e670:	80c00215 	stw	r3,8(r16)
 508e674:	183ff30e 	bge	r3,zero,508e644 <__alt_data_end+0xfffc0444>
 508e678:	80800617 	ldw	r2,24(r16)
 508e67c:	18801916 	blt	r3,r2,508e6e4 <_fputwc_r+0x12c>
 508e680:	80800017 	ldw	r2,0(r16)
 508e684:	11400005 	stb	r5,0(r2)
 508e688:	80800017 	ldw	r2,0(r16)
 508e68c:	10c00003 	ldbu	r3,0(r2)
 508e690:	10800044 	addi	r2,r2,1
 508e694:	1d402326 	beq	r3,r21,508e724 <_fputwc_r+0x16c>
 508e698:	80800015 	stw	r2,0(r16)
 508e69c:	8c400044 	addi	r17,r17,1
 508e6a0:	dc45883a 	add	r2,sp,r17
 508e6a4:	8d3fef36 	bltu	r17,r20,508e664 <__alt_data_end+0xfffc0464>
 508e6a8:	9005883a 	mov	r2,r18
 508e6ac:	00000406 	br	508e6c0 <_fputwc_r+0x108>
 508e6b0:	80c0030b 	ldhu	r3,12(r16)
 508e6b4:	a005883a 	mov	r2,r20
 508e6b8:	18c01014 	ori	r3,r3,64
 508e6bc:	80c0030d 	sth	r3,12(r16)
 508e6c0:	dfc00717 	ldw	ra,28(sp)
 508e6c4:	dd400617 	ldw	r21,24(sp)
 508e6c8:	dd000517 	ldw	r20,20(sp)
 508e6cc:	dcc00417 	ldw	r19,16(sp)
 508e6d0:	dc800317 	ldw	r18,12(sp)
 508e6d4:	dc400217 	ldw	r17,8(sp)
 508e6d8:	dc000117 	ldw	r16,4(sp)
 508e6dc:	dec00804 	addi	sp,sp,32
 508e6e0:	f800283a 	ret
 508e6e4:	9809883a 	mov	r4,r19
 508e6e8:	29403fcc 	andi	r5,r5,255
 508e6ec:	800d883a 	mov	r6,r16
 508e6f0:	508e8f80 	call	508e8f8 <__swbuf_r>
 508e6f4:	10bfffe0 	cmpeqi	r2,r2,-1
 508e6f8:	10803fcc 	andi	r2,r2,255
 508e6fc:	103fd626 	beq	r2,zero,508e658 <__alt_data_end+0xfffc0458>
 508e700:	00bfffc4 	movi	r2,-1
 508e704:	003fee06 	br	508e6c0 <__alt_data_end+0xfffc04c0>
 508e708:	90ffffc4 	addi	r3,r18,-1
 508e70c:	01003f84 	movi	r4,254
 508e710:	20ffbf36 	bltu	r4,r3,508e610 <__alt_data_end+0xfffc0410>
 508e714:	900b883a 	mov	r5,r18
 508e718:	dc800005 	stb	r18,0(sp)
 508e71c:	1029883a 	mov	r20,r2
 508e720:	003fc506 	br	508e638 <__alt_data_end+0xfffc0438>
 508e724:	9809883a 	mov	r4,r19
 508e728:	a80b883a 	mov	r5,r21
 508e72c:	800d883a 	mov	r6,r16
 508e730:	508e8f80 	call	508e8f8 <__swbuf_r>
 508e734:	10bfffe0 	cmpeqi	r2,r2,-1
 508e738:	003fef06 	br	508e6f8 <__alt_data_end+0xfffc04f8>

0508e73c <fputwc>:
 508e73c:	defffc04 	addi	sp,sp,-16
 508e740:	dc000115 	stw	r16,4(sp)
 508e744:	04014274 	movhi	r16,1289
 508e748:	841c5604 	addi	r16,r16,29016
 508e74c:	dc400215 	stw	r17,8(sp)
 508e750:	2023883a 	mov	r17,r4
 508e754:	81000017 	ldw	r4,0(r16)
 508e758:	dfc00315 	stw	ra,12(sp)
 508e75c:	280d883a 	mov	r6,r5
 508e760:	20000626 	beq	r4,zero,508e77c <fputwc+0x40>
 508e764:	20800e17 	ldw	r2,56(r4)
 508e768:	1000041e 	bne	r2,zero,508e77c <fputwc+0x40>
 508e76c:	d9400015 	stw	r5,0(sp)
 508e770:	5088b400 	call	5088b40 <__sinit>
 508e774:	81000017 	ldw	r4,0(r16)
 508e778:	d9800017 	ldw	r6,0(sp)
 508e77c:	880b883a 	mov	r5,r17
 508e780:	dfc00317 	ldw	ra,12(sp)
 508e784:	dc400217 	ldw	r17,8(sp)
 508e788:	dc000117 	ldw	r16,4(sp)
 508e78c:	dec00404 	addi	sp,sp,16
 508e790:	508e5b81 	jmpi	508e5b8 <_fputwc_r>

0508e794 <_fstat_r>:
 508e794:	defffd04 	addi	sp,sp,-12
 508e798:	dc000015 	stw	r16,0(sp)
 508e79c:	040142b4 	movhi	r16,1290
 508e7a0:	dc400115 	stw	r17,4(sp)
 508e7a4:	84232d04 	addi	r16,r16,-29516
 508e7a8:	2023883a 	mov	r17,r4
 508e7ac:	2809883a 	mov	r4,r5
 508e7b0:	300b883a 	mov	r5,r6
 508e7b4:	dfc00215 	stw	ra,8(sp)
 508e7b8:	80000015 	stw	zero,0(r16)
 508e7bc:	5091f540 	call	5091f54 <fstat>
 508e7c0:	00ffffc4 	movi	r3,-1
 508e7c4:	10c00526 	beq	r2,r3,508e7dc <_fstat_r+0x48>
 508e7c8:	dfc00217 	ldw	ra,8(sp)
 508e7cc:	dc400117 	ldw	r17,4(sp)
 508e7d0:	dc000017 	ldw	r16,0(sp)
 508e7d4:	dec00304 	addi	sp,sp,12
 508e7d8:	f800283a 	ret
 508e7dc:	80c00017 	ldw	r3,0(r16)
 508e7e0:	183ff926 	beq	r3,zero,508e7c8 <__alt_data_end+0xfffc05c8>
 508e7e4:	88c00015 	stw	r3,0(r17)
 508e7e8:	003ff706 	br	508e7c8 <__alt_data_end+0xfffc05c8>

0508e7ec <_isatty_r>:
 508e7ec:	defffd04 	addi	sp,sp,-12
 508e7f0:	dc000015 	stw	r16,0(sp)
 508e7f4:	040142b4 	movhi	r16,1290
 508e7f8:	dc400115 	stw	r17,4(sp)
 508e7fc:	84232d04 	addi	r16,r16,-29516
 508e800:	2023883a 	mov	r17,r4
 508e804:	2809883a 	mov	r4,r5
 508e808:	dfc00215 	stw	ra,8(sp)
 508e80c:	80000015 	stw	zero,0(r16)
 508e810:	50922040 	call	5092204 <isatty>
 508e814:	00ffffc4 	movi	r3,-1
 508e818:	10c00526 	beq	r2,r3,508e830 <_isatty_r+0x44>
 508e81c:	dfc00217 	ldw	ra,8(sp)
 508e820:	dc400117 	ldw	r17,4(sp)
 508e824:	dc000017 	ldw	r16,0(sp)
 508e828:	dec00304 	addi	sp,sp,12
 508e82c:	f800283a 	ret
 508e830:	80c00017 	ldw	r3,0(r16)
 508e834:	183ff926 	beq	r3,zero,508e81c <__alt_data_end+0xfffc061c>
 508e838:	88c00015 	stw	r3,0(r17)
 508e83c:	003ff706 	br	508e81c <__alt_data_end+0xfffc061c>

0508e840 <_lseek_r>:
 508e840:	defffd04 	addi	sp,sp,-12
 508e844:	dc000015 	stw	r16,0(sp)
 508e848:	040142b4 	movhi	r16,1290
 508e84c:	dc400115 	stw	r17,4(sp)
 508e850:	84232d04 	addi	r16,r16,-29516
 508e854:	2023883a 	mov	r17,r4
 508e858:	2809883a 	mov	r4,r5
 508e85c:	300b883a 	mov	r5,r6
 508e860:	380d883a 	mov	r6,r7
 508e864:	dfc00215 	stw	ra,8(sp)
 508e868:	80000015 	stw	zero,0(r16)
 508e86c:	50923dc0 	call	50923dc <lseek>
 508e870:	00ffffc4 	movi	r3,-1
 508e874:	10c00526 	beq	r2,r3,508e88c <_lseek_r+0x4c>
 508e878:	dfc00217 	ldw	ra,8(sp)
 508e87c:	dc400117 	ldw	r17,4(sp)
 508e880:	dc000017 	ldw	r16,0(sp)
 508e884:	dec00304 	addi	sp,sp,12
 508e888:	f800283a 	ret
 508e88c:	80c00017 	ldw	r3,0(r16)
 508e890:	183ff926 	beq	r3,zero,508e878 <__alt_data_end+0xfffc0678>
 508e894:	88c00015 	stw	r3,0(r17)
 508e898:	003ff706 	br	508e878 <__alt_data_end+0xfffc0678>

0508e89c <_read_r>:
 508e89c:	defffd04 	addi	sp,sp,-12
 508e8a0:	dc000015 	stw	r16,0(sp)
 508e8a4:	040142b4 	movhi	r16,1290
 508e8a8:	dc400115 	stw	r17,4(sp)
 508e8ac:	84232d04 	addi	r16,r16,-29516
 508e8b0:	2023883a 	mov	r17,r4
 508e8b4:	2809883a 	mov	r4,r5
 508e8b8:	300b883a 	mov	r5,r6
 508e8bc:	380d883a 	mov	r6,r7
 508e8c0:	dfc00215 	stw	ra,8(sp)
 508e8c4:	80000015 	stw	zero,0(r16)
 508e8c8:	50925b80 	call	50925b8 <read>
 508e8cc:	00ffffc4 	movi	r3,-1
 508e8d0:	10c00526 	beq	r2,r3,508e8e8 <_read_r+0x4c>
 508e8d4:	dfc00217 	ldw	ra,8(sp)
 508e8d8:	dc400117 	ldw	r17,4(sp)
 508e8dc:	dc000017 	ldw	r16,0(sp)
 508e8e0:	dec00304 	addi	sp,sp,12
 508e8e4:	f800283a 	ret
 508e8e8:	80c00017 	ldw	r3,0(r16)
 508e8ec:	183ff926 	beq	r3,zero,508e8d4 <__alt_data_end+0xfffc06d4>
 508e8f0:	88c00015 	stw	r3,0(r17)
 508e8f4:	003ff706 	br	508e8d4 <__alt_data_end+0xfffc06d4>

0508e8f8 <__swbuf_r>:
 508e8f8:	defffc04 	addi	sp,sp,-16
 508e8fc:	dc800215 	stw	r18,8(sp)
 508e900:	dc400115 	stw	r17,4(sp)
 508e904:	dc000015 	stw	r16,0(sp)
 508e908:	dfc00315 	stw	ra,12(sp)
 508e90c:	2025883a 	mov	r18,r4
 508e910:	2823883a 	mov	r17,r5
 508e914:	3021883a 	mov	r16,r6
 508e918:	20000226 	beq	r4,zero,508e924 <__swbuf_r+0x2c>
 508e91c:	20800e17 	ldw	r2,56(r4)
 508e920:	10004126 	beq	r2,zero,508ea28 <__swbuf_r+0x130>
 508e924:	80c00617 	ldw	r3,24(r16)
 508e928:	8180030b 	ldhu	r6,12(r16)
 508e92c:	80c00215 	stw	r3,8(r16)
 508e930:	30c0020c 	andi	r3,r6,8
 508e934:	18003526 	beq	r3,zero,508ea0c <__swbuf_r+0x114>
 508e938:	80c00417 	ldw	r3,16(r16)
 508e93c:	18003326 	beq	r3,zero,508ea0c <__swbuf_r+0x114>
 508e940:	3088000c 	andi	r2,r6,8192
 508e944:	8c403fcc 	andi	r17,r17,255
 508e948:	10001726 	beq	r2,zero,508e9a8 <__swbuf_r+0xb0>
 508e94c:	80800017 	ldw	r2,0(r16)
 508e950:	81000517 	ldw	r4,20(r16)
 508e954:	10c7c83a 	sub	r3,r2,r3
 508e958:	19001d0e 	bge	r3,r4,508e9d0 <__swbuf_r+0xd8>
 508e95c:	18c00044 	addi	r3,r3,1
 508e960:	81400217 	ldw	r5,8(r16)
 508e964:	11000044 	addi	r4,r2,1
 508e968:	81000015 	stw	r4,0(r16)
 508e96c:	297fffc4 	addi	r5,r5,-1
 508e970:	81400215 	stw	r5,8(r16)
 508e974:	14400005 	stb	r17,0(r2)
 508e978:	80800517 	ldw	r2,20(r16)
 508e97c:	10c01d26 	beq	r2,r3,508e9f4 <__swbuf_r+0xfc>
 508e980:	8080030b 	ldhu	r2,12(r16)
 508e984:	1080004c 	andi	r2,r2,1
 508e988:	1000181e 	bne	r2,zero,508e9ec <__swbuf_r+0xf4>
 508e98c:	8805883a 	mov	r2,r17
 508e990:	dfc00317 	ldw	ra,12(sp)
 508e994:	dc800217 	ldw	r18,8(sp)
 508e998:	dc400117 	ldw	r17,4(sp)
 508e99c:	dc000017 	ldw	r16,0(sp)
 508e9a0:	dec00404 	addi	sp,sp,16
 508e9a4:	f800283a 	ret
 508e9a8:	81001917 	ldw	r4,100(r16)
 508e9ac:	00b7ffc4 	movi	r2,-8193
 508e9b0:	31880014 	ori	r6,r6,8192
 508e9b4:	2084703a 	and	r2,r4,r2
 508e9b8:	80801915 	stw	r2,100(r16)
 508e9bc:	80800017 	ldw	r2,0(r16)
 508e9c0:	81000517 	ldw	r4,20(r16)
 508e9c4:	8180030d 	sth	r6,12(r16)
 508e9c8:	10c7c83a 	sub	r3,r2,r3
 508e9cc:	193fe316 	blt	r3,r4,508e95c <__alt_data_end+0xfffc075c>
 508e9d0:	9009883a 	mov	r4,r18
 508e9d4:	800b883a 	mov	r5,r16
 508e9d8:	50885980 	call	5088598 <_fflush_r>
 508e9dc:	1000091e 	bne	r2,zero,508ea04 <__swbuf_r+0x10c>
 508e9e0:	80800017 	ldw	r2,0(r16)
 508e9e4:	00c00044 	movi	r3,1
 508e9e8:	003fdd06 	br	508e960 <__alt_data_end+0xfffc0760>
 508e9ec:	00800284 	movi	r2,10
 508e9f0:	88bfe61e 	bne	r17,r2,508e98c <__alt_data_end+0xfffc078c>
 508e9f4:	9009883a 	mov	r4,r18
 508e9f8:	800b883a 	mov	r5,r16
 508e9fc:	50885980 	call	5088598 <_fflush_r>
 508ea00:	103fe226 	beq	r2,zero,508e98c <__alt_data_end+0xfffc078c>
 508ea04:	00bfffc4 	movi	r2,-1
 508ea08:	003fe106 	br	508e990 <__alt_data_end+0xfffc0790>
 508ea0c:	9009883a 	mov	r4,r18
 508ea10:	800b883a 	mov	r5,r16
 508ea14:	5086b400 	call	5086b40 <__swsetup_r>
 508ea18:	1000051e 	bne	r2,zero,508ea30 <__swbuf_r+0x138>
 508ea1c:	8180030b 	ldhu	r6,12(r16)
 508ea20:	80c00417 	ldw	r3,16(r16)
 508ea24:	003fc606 	br	508e940 <__alt_data_end+0xfffc0740>
 508ea28:	5088b400 	call	5088b40 <__sinit>
 508ea2c:	003fbd06 	br	508e924 <__alt_data_end+0xfffc0724>
 508ea30:	80c0030b 	ldhu	r3,12(r16)
 508ea34:	00bfffc4 	movi	r2,-1
 508ea38:	18c01014 	ori	r3,r3,64
 508ea3c:	80c0030d 	sth	r3,12(r16)
 508ea40:	00c00244 	movi	r3,9
 508ea44:	90c00015 	stw	r3,0(r18)
 508ea48:	003fd106 	br	508e990 <__alt_data_end+0xfffc0790>

0508ea4c <__swbuf>:
 508ea4c:	00c14274 	movhi	r3,1289
 508ea50:	18dc5604 	addi	r3,r3,29016
 508ea54:	2005883a 	mov	r2,r4
 508ea58:	19000017 	ldw	r4,0(r3)
 508ea5c:	280d883a 	mov	r6,r5
 508ea60:	100b883a 	mov	r5,r2
 508ea64:	508e8f81 	jmpi	508e8f8 <__swbuf_r>

0508ea68 <_wcrtomb_r>:
 508ea68:	defff604 	addi	sp,sp,-40
 508ea6c:	00814274 	movhi	r2,1289
 508ea70:	dc800815 	stw	r18,32(sp)
 508ea74:	dc400715 	stw	r17,28(sp)
 508ea78:	dc000615 	stw	r16,24(sp)
 508ea7c:	109c5a04 	addi	r2,r2,29032
 508ea80:	dfc00915 	stw	ra,36(sp)
 508ea84:	2021883a 	mov	r16,r4
 508ea88:	3823883a 	mov	r17,r7
 508ea8c:	14800017 	ldw	r18,0(r2)
 508ea90:	28001426 	beq	r5,zero,508eae4 <_wcrtomb_r+0x7c>
 508ea94:	d9400415 	stw	r5,16(sp)
 508ea98:	d9800515 	stw	r6,20(sp)
 508ea9c:	50896340 	call	5089634 <__locale_charset>
 508eaa0:	d9400417 	ldw	r5,16(sp)
 508eaa4:	d9800517 	ldw	r6,20(sp)
 508eaa8:	8009883a 	mov	r4,r16
 508eaac:	dc400015 	stw	r17,0(sp)
 508eab0:	100f883a 	mov	r7,r2
 508eab4:	903ee83a 	callr	r18
 508eab8:	00ffffc4 	movi	r3,-1
 508eabc:	10c0031e 	bne	r2,r3,508eacc <_wcrtomb_r+0x64>
 508eac0:	88000015 	stw	zero,0(r17)
 508eac4:	00c02284 	movi	r3,138
 508eac8:	80c00015 	stw	r3,0(r16)
 508eacc:	dfc00917 	ldw	ra,36(sp)
 508ead0:	dc800817 	ldw	r18,32(sp)
 508ead4:	dc400717 	ldw	r17,28(sp)
 508ead8:	dc000617 	ldw	r16,24(sp)
 508eadc:	dec00a04 	addi	sp,sp,40
 508eae0:	f800283a 	ret
 508eae4:	50896340 	call	5089634 <__locale_charset>
 508eae8:	8009883a 	mov	r4,r16
 508eaec:	dc400015 	stw	r17,0(sp)
 508eaf0:	d9400104 	addi	r5,sp,4
 508eaf4:	000d883a 	mov	r6,zero
 508eaf8:	100f883a 	mov	r7,r2
 508eafc:	903ee83a 	callr	r18
 508eb00:	003fed06 	br	508eab8 <__alt_data_end+0xfffc08b8>

0508eb04 <wcrtomb>:
 508eb04:	defff504 	addi	sp,sp,-44
 508eb08:	dc400515 	stw	r17,20(sp)
 508eb0c:	dc000415 	stw	r16,16(sp)
 508eb10:	dfc00a15 	stw	ra,40(sp)
 508eb14:	dd400915 	stw	r21,36(sp)
 508eb18:	dd000815 	stw	r20,32(sp)
 508eb1c:	dcc00715 	stw	r19,28(sp)
 508eb20:	dc800615 	stw	r18,24(sp)
 508eb24:	2021883a 	mov	r16,r4
 508eb28:	3023883a 	mov	r17,r6
 508eb2c:	20001d26 	beq	r4,zero,508eba4 <wcrtomb+0xa0>
 508eb30:	04814274 	movhi	r18,1289
 508eb34:	949c5604 	addi	r18,r18,29016
 508eb38:	00814274 	movhi	r2,1289
 508eb3c:	95400017 	ldw	r21,0(r18)
 508eb40:	109c5a04 	addi	r2,r2,29032
 508eb44:	15000017 	ldw	r20,0(r2)
 508eb48:	2827883a 	mov	r19,r5
 508eb4c:	50896340 	call	5089634 <__locale_charset>
 508eb50:	a809883a 	mov	r4,r21
 508eb54:	dc400015 	stw	r17,0(sp)
 508eb58:	800b883a 	mov	r5,r16
 508eb5c:	980d883a 	mov	r6,r19
 508eb60:	100f883a 	mov	r7,r2
 508eb64:	a03ee83a 	callr	r20
 508eb68:	00ffffc4 	movi	r3,-1
 508eb6c:	10c0041e 	bne	r2,r3,508eb80 <wcrtomb+0x7c>
 508eb70:	90c00017 	ldw	r3,0(r18)
 508eb74:	01002284 	movi	r4,138
 508eb78:	88000015 	stw	zero,0(r17)
 508eb7c:	19000015 	stw	r4,0(r3)
 508eb80:	dfc00a17 	ldw	ra,40(sp)
 508eb84:	dd400917 	ldw	r21,36(sp)
 508eb88:	dd000817 	ldw	r20,32(sp)
 508eb8c:	dcc00717 	ldw	r19,28(sp)
 508eb90:	dc800617 	ldw	r18,24(sp)
 508eb94:	dc400517 	ldw	r17,20(sp)
 508eb98:	dc000417 	ldw	r16,16(sp)
 508eb9c:	dec00b04 	addi	sp,sp,44
 508eba0:	f800283a 	ret
 508eba4:	04814274 	movhi	r18,1289
 508eba8:	949c5604 	addi	r18,r18,29016
 508ebac:	00814274 	movhi	r2,1289
 508ebb0:	94c00017 	ldw	r19,0(r18)
 508ebb4:	109c5a04 	addi	r2,r2,29032
 508ebb8:	14000017 	ldw	r16,0(r2)
 508ebbc:	50896340 	call	5089634 <__locale_charset>
 508ebc0:	9809883a 	mov	r4,r19
 508ebc4:	dc400015 	stw	r17,0(sp)
 508ebc8:	d9400104 	addi	r5,sp,4
 508ebcc:	000d883a 	mov	r6,zero
 508ebd0:	100f883a 	mov	r7,r2
 508ebd4:	803ee83a 	callr	r16
 508ebd8:	003fe306 	br	508eb68 <__alt_data_end+0xfffc0968>

0508ebdc <__ascii_wctomb>:
 508ebdc:	28000526 	beq	r5,zero,508ebf4 <__ascii_wctomb+0x18>
 508ebe0:	00803fc4 	movi	r2,255
 508ebe4:	11800536 	bltu	r2,r6,508ebfc <__ascii_wctomb+0x20>
 508ebe8:	29800005 	stb	r6,0(r5)
 508ebec:	00800044 	movi	r2,1
 508ebf0:	f800283a 	ret
 508ebf4:	0005883a 	mov	r2,zero
 508ebf8:	f800283a 	ret
 508ebfc:	00802284 	movi	r2,138
 508ec00:	20800015 	stw	r2,0(r4)
 508ec04:	00bfffc4 	movi	r2,-1
 508ec08:	f800283a 	ret

0508ec0c <_wctomb_r>:
 508ec0c:	00814274 	movhi	r2,1289
 508ec10:	defff904 	addi	sp,sp,-28
 508ec14:	109c5a04 	addi	r2,r2,29032
 508ec18:	dfc00615 	stw	ra,24(sp)
 508ec1c:	dc400515 	stw	r17,20(sp)
 508ec20:	dc000415 	stw	r16,16(sp)
 508ec24:	3823883a 	mov	r17,r7
 508ec28:	14000017 	ldw	r16,0(r2)
 508ec2c:	d9000115 	stw	r4,4(sp)
 508ec30:	d9400215 	stw	r5,8(sp)
 508ec34:	d9800315 	stw	r6,12(sp)
 508ec38:	50896340 	call	5089634 <__locale_charset>
 508ec3c:	d9000117 	ldw	r4,4(sp)
 508ec40:	d9400217 	ldw	r5,8(sp)
 508ec44:	d9800317 	ldw	r6,12(sp)
 508ec48:	dc400015 	stw	r17,0(sp)
 508ec4c:	100f883a 	mov	r7,r2
 508ec50:	803ee83a 	callr	r16
 508ec54:	dfc00617 	ldw	ra,24(sp)
 508ec58:	dc400517 	ldw	r17,20(sp)
 508ec5c:	dc000417 	ldw	r16,16(sp)
 508ec60:	dec00704 	addi	sp,sp,28
 508ec64:	f800283a 	ret

0508ec68 <__udivdi3>:
 508ec68:	defff504 	addi	sp,sp,-44
 508ec6c:	dcc00415 	stw	r19,16(sp)
 508ec70:	dc000115 	stw	r16,4(sp)
 508ec74:	dfc00a15 	stw	ra,40(sp)
 508ec78:	df000915 	stw	fp,36(sp)
 508ec7c:	ddc00815 	stw	r23,32(sp)
 508ec80:	dd800715 	stw	r22,28(sp)
 508ec84:	dd400615 	stw	r21,24(sp)
 508ec88:	dd000515 	stw	r20,20(sp)
 508ec8c:	dc800315 	stw	r18,12(sp)
 508ec90:	dc400215 	stw	r17,8(sp)
 508ec94:	2027883a 	mov	r19,r4
 508ec98:	2821883a 	mov	r16,r5
 508ec9c:	3800421e 	bne	r7,zero,508eda8 <__udivdi3+0x140>
 508eca0:	3025883a 	mov	r18,r6
 508eca4:	2023883a 	mov	r17,r4
 508eca8:	2980542e 	bgeu	r5,r6,508edfc <__udivdi3+0x194>
 508ecac:	00bfffd4 	movui	r2,65535
 508ecb0:	282d883a 	mov	r22,r5
 508ecb4:	1180a836 	bltu	r2,r6,508ef58 <__udivdi3+0x2f0>
 508ecb8:	00803fc4 	movi	r2,255
 508ecbc:	1181422e 	bgeu	r2,r6,508f1c8 <__udivdi3+0x560>
 508ecc0:	00800204 	movi	r2,8
 508ecc4:	1007883a 	mov	r3,r2
 508ecc8:	3084d83a 	srl	r2,r6,r2
 508eccc:	01014274 	movhi	r4,1289
 508ecd0:	21155b04 	addi	r4,r4,21868
 508ecd4:	2085883a 	add	r2,r4,r2
 508ecd8:	10800003 	ldbu	r2,0(r2)
 508ecdc:	10c7883a 	add	r3,r2,r3
 508ece0:	00800804 	movi	r2,32
 508ece4:	10c5c83a 	sub	r2,r2,r3
 508ece8:	10000526 	beq	r2,zero,508ed00 <__udivdi3+0x98>
 508ecec:	80a0983a 	sll	r16,r16,r2
 508ecf0:	98c6d83a 	srl	r3,r19,r3
 508ecf4:	30a4983a 	sll	r18,r6,r2
 508ecf8:	98a2983a 	sll	r17,r19,r2
 508ecfc:	80ecb03a 	or	r22,r16,r3
 508ed00:	902ad43a 	srli	r21,r18,16
 508ed04:	b009883a 	mov	r4,r22
 508ed08:	953fffcc 	andi	r20,r18,65535
 508ed0c:	a80b883a 	mov	r5,r21
 508ed10:	50827c80 	call	50827c8 <__umodsi3>
 508ed14:	b009883a 	mov	r4,r22
 508ed18:	a80b883a 	mov	r5,r21
 508ed1c:	1027883a 	mov	r19,r2
 508ed20:	50827c00 	call	50827c0 <__udivsi3>
 508ed24:	1021883a 	mov	r16,r2
 508ed28:	8806d43a 	srli	r3,r17,16
 508ed2c:	9804943a 	slli	r2,r19,16
 508ed30:	8527383a 	mul	r19,r16,r20
 508ed34:	10c4b03a 	or	r2,r2,r3
 508ed38:	14c0052e 	bgeu	r2,r19,508ed50 <__udivdi3+0xe8>
 508ed3c:	1485883a 	add	r2,r2,r18
 508ed40:	80ffffc4 	addi	r3,r16,-1
 508ed44:	14800136 	bltu	r2,r18,508ed4c <__udivdi3+0xe4>
 508ed48:	14c13436 	bltu	r2,r19,508f21c <__udivdi3+0x5b4>
 508ed4c:	1821883a 	mov	r16,r3
 508ed50:	14e7c83a 	sub	r19,r2,r19
 508ed54:	9809883a 	mov	r4,r19
 508ed58:	a80b883a 	mov	r5,r21
 508ed5c:	50827c80 	call	50827c8 <__umodsi3>
 508ed60:	102d883a 	mov	r22,r2
 508ed64:	9809883a 	mov	r4,r19
 508ed68:	a80b883a 	mov	r5,r21
 508ed6c:	50827c00 	call	50827c0 <__udivsi3>
 508ed70:	b02c943a 	slli	r22,r22,16
 508ed74:	1529383a 	mul	r20,r2,r20
 508ed78:	8c7fffcc 	andi	r17,r17,65535
 508ed7c:	b462b03a 	or	r17,r22,r17
 508ed80:	8d00052e 	bgeu	r17,r20,508ed98 <__udivdi3+0x130>
 508ed84:	8ca3883a 	add	r17,r17,r18
 508ed88:	10ffffc4 	addi	r3,r2,-1
 508ed8c:	8c80f636 	bltu	r17,r18,508f168 <__udivdi3+0x500>
 508ed90:	8d00f52e 	bgeu	r17,r20,508f168 <__udivdi3+0x500>
 508ed94:	10bfff84 	addi	r2,r2,-2
 508ed98:	8020943a 	slli	r16,r16,16
 508ed9c:	0007883a 	mov	r3,zero
 508eda0:	1404b03a 	or	r2,r2,r16
 508eda4:	00005b06 	br	508ef14 <__udivdi3+0x2ac>
 508eda8:	29c05836 	bltu	r5,r7,508ef0c <__udivdi3+0x2a4>
 508edac:	00bfffd4 	movui	r2,65535
 508edb0:	11c0642e 	bgeu	r2,r7,508ef44 <__udivdi3+0x2dc>
 508edb4:	00804034 	movhi	r2,256
 508edb8:	10bfffc4 	addi	r2,r2,-1
 508edbc:	11c0f32e 	bgeu	r2,r7,508f18c <__udivdi3+0x524>
 508edc0:	00c00604 	movi	r3,24
 508edc4:	180b883a 	mov	r5,r3
 508edc8:	38c6d83a 	srl	r3,r7,r3
 508edcc:	00814274 	movhi	r2,1289
 508edd0:	10955b04 	addi	r2,r2,21868
 508edd4:	10c7883a 	add	r3,r2,r3
 508edd8:	18c00003 	ldbu	r3,0(r3)
 508eddc:	01000804 	movi	r4,32
 508ede0:	1947883a 	add	r3,r3,r5
 508ede4:	20e5c83a 	sub	r18,r4,r3
 508ede8:	9000661e 	bne	r18,zero,508ef84 <__udivdi3+0x31c>
 508edec:	3c00f936 	bltu	r7,r16,508f1d4 <__udivdi3+0x56c>
 508edf0:	9985403a 	cmpgeu	r2,r19,r6
 508edf4:	0007883a 	mov	r3,zero
 508edf8:	00004606 	br	508ef14 <__udivdi3+0x2ac>
 508edfc:	3000041e 	bne	r6,zero,508ee10 <__udivdi3+0x1a8>
 508ee00:	01000044 	movi	r4,1
 508ee04:	000b883a 	mov	r5,zero
 508ee08:	50827c00 	call	50827c0 <__udivsi3>
 508ee0c:	1025883a 	mov	r18,r2
 508ee10:	00bfffd4 	movui	r2,65535
 508ee14:	1480562e 	bgeu	r2,r18,508ef70 <__udivdi3+0x308>
 508ee18:	00804034 	movhi	r2,256
 508ee1c:	10bfffc4 	addi	r2,r2,-1
 508ee20:	1480e32e 	bgeu	r2,r18,508f1b0 <__udivdi3+0x548>
 508ee24:	00800604 	movi	r2,24
 508ee28:	1007883a 	mov	r3,r2
 508ee2c:	9084d83a 	srl	r2,r18,r2
 508ee30:	01014274 	movhi	r4,1289
 508ee34:	21155b04 	addi	r4,r4,21868
 508ee38:	2085883a 	add	r2,r4,r2
 508ee3c:	10800003 	ldbu	r2,0(r2)
 508ee40:	10c5883a 	add	r2,r2,r3
 508ee44:	00c00804 	movi	r3,32
 508ee48:	1887c83a 	sub	r3,r3,r2
 508ee4c:	1800911e 	bne	r3,zero,508f094 <__udivdi3+0x42c>
 508ee50:	9028d43a 	srli	r20,r18,16
 508ee54:	84a1c83a 	sub	r16,r16,r18
 508ee58:	957fffcc 	andi	r21,r18,65535
 508ee5c:	00c00044 	movi	r3,1
 508ee60:	8009883a 	mov	r4,r16
 508ee64:	a00b883a 	mov	r5,r20
 508ee68:	d8c00015 	stw	r3,0(sp)
 508ee6c:	50827c80 	call	50827c8 <__umodsi3>
 508ee70:	8009883a 	mov	r4,r16
 508ee74:	a00b883a 	mov	r5,r20
 508ee78:	1027883a 	mov	r19,r2
 508ee7c:	50827c00 	call	50827c0 <__udivsi3>
 508ee80:	1021883a 	mov	r16,r2
 508ee84:	880cd43a 	srli	r6,r17,16
 508ee88:	9804943a 	slli	r2,r19,16
 508ee8c:	8567383a 	mul	r19,r16,r21
 508ee90:	d8c00017 	ldw	r3,0(sp)
 508ee94:	1188b03a 	or	r4,r2,r6
 508ee98:	24c0052e 	bgeu	r4,r19,508eeb0 <__udivdi3+0x248>
 508ee9c:	2489883a 	add	r4,r4,r18
 508eea0:	80bfffc4 	addi	r2,r16,-1
 508eea4:	24800136 	bltu	r4,r18,508eeac <__udivdi3+0x244>
 508eea8:	24c0d936 	bltu	r4,r19,508f210 <__udivdi3+0x5a8>
 508eeac:	1021883a 	mov	r16,r2
 508eeb0:	24e7c83a 	sub	r19,r4,r19
 508eeb4:	9809883a 	mov	r4,r19
 508eeb8:	a00b883a 	mov	r5,r20
 508eebc:	d8c00015 	stw	r3,0(sp)
 508eec0:	50827c80 	call	50827c8 <__umodsi3>
 508eec4:	102d883a 	mov	r22,r2
 508eec8:	9809883a 	mov	r4,r19
 508eecc:	a00b883a 	mov	r5,r20
 508eed0:	50827c00 	call	50827c0 <__udivsi3>
 508eed4:	b02c943a 	slli	r22,r22,16
 508eed8:	156b383a 	mul	r21,r2,r21
 508eedc:	8c7fffcc 	andi	r17,r17,65535
 508eee0:	b462b03a 	or	r17,r22,r17
 508eee4:	d8c00017 	ldw	r3,0(sp)
 508eee8:	8d40052e 	bgeu	r17,r21,508ef00 <__udivdi3+0x298>
 508eeec:	8ca3883a 	add	r17,r17,r18
 508eef0:	113fffc4 	addi	r4,r2,-1
 508eef4:	8c809a36 	bltu	r17,r18,508f160 <__udivdi3+0x4f8>
 508eef8:	8d40992e 	bgeu	r17,r21,508f160 <__udivdi3+0x4f8>
 508eefc:	10bfff84 	addi	r2,r2,-2
 508ef00:	8020943a 	slli	r16,r16,16
 508ef04:	1404b03a 	or	r2,r2,r16
 508ef08:	00000206 	br	508ef14 <__udivdi3+0x2ac>
 508ef0c:	0007883a 	mov	r3,zero
 508ef10:	0005883a 	mov	r2,zero
 508ef14:	dfc00a17 	ldw	ra,40(sp)
 508ef18:	df000917 	ldw	fp,36(sp)
 508ef1c:	ddc00817 	ldw	r23,32(sp)
 508ef20:	dd800717 	ldw	r22,28(sp)
 508ef24:	dd400617 	ldw	r21,24(sp)
 508ef28:	dd000517 	ldw	r20,20(sp)
 508ef2c:	dcc00417 	ldw	r19,16(sp)
 508ef30:	dc800317 	ldw	r18,12(sp)
 508ef34:	dc400217 	ldw	r17,8(sp)
 508ef38:	dc000117 	ldw	r16,4(sp)
 508ef3c:	dec00b04 	addi	sp,sp,44
 508ef40:	f800283a 	ret
 508ef44:	00803fc4 	movi	r2,255
 508ef48:	11c0932e 	bgeu	r2,r7,508f198 <__udivdi3+0x530>
 508ef4c:	00c00204 	movi	r3,8
 508ef50:	180b883a 	mov	r5,r3
 508ef54:	003f9c06 	br	508edc8 <__alt_data_end+0xfffc0bc8>
 508ef58:	00804034 	movhi	r2,256
 508ef5c:	10bfffc4 	addi	r2,r2,-1
 508ef60:	1180902e 	bgeu	r2,r6,508f1a4 <__udivdi3+0x53c>
 508ef64:	00800604 	movi	r2,24
 508ef68:	1007883a 	mov	r3,r2
 508ef6c:	003f5606 	br	508ecc8 <__alt_data_end+0xfffc0ac8>
 508ef70:	00803fc4 	movi	r2,255
 508ef74:	1480912e 	bgeu	r2,r18,508f1bc <__udivdi3+0x554>
 508ef78:	00800204 	movi	r2,8
 508ef7c:	1007883a 	mov	r3,r2
 508ef80:	003faa06 	br	508ee2c <__alt_data_end+0xfffc0c2c>
 508ef84:	30eed83a 	srl	r23,r6,r3
 508ef88:	3c8e983a 	sll	r7,r7,r18
 508ef8c:	80f8d83a 	srl	fp,r16,r3
 508ef90:	98c6d83a 	srl	r3,r19,r3
 508ef94:	3deeb03a 	or	r23,r7,r23
 508ef98:	b828d43a 	srli	r20,r23,16
 508ef9c:	84a0983a 	sll	r16,r16,r18
 508efa0:	e009883a 	mov	r4,fp
 508efa4:	a00b883a 	mov	r5,r20
 508efa8:	80e2b03a 	or	r17,r16,r3
 508efac:	34aa983a 	sll	r21,r6,r18
 508efb0:	50827c80 	call	50827c8 <__umodsi3>
 508efb4:	e009883a 	mov	r4,fp
 508efb8:	a00b883a 	mov	r5,r20
 508efbc:	102d883a 	mov	r22,r2
 508efc0:	50827c00 	call	50827c0 <__udivsi3>
 508efc4:	1021883a 	mov	r16,r2
 508efc8:	bf3fffcc 	andi	fp,r23,65535
 508efcc:	b004943a 	slli	r2,r22,16
 508efd0:	8808d43a 	srli	r4,r17,16
 508efd4:	872d383a 	mul	r22,r16,fp
 508efd8:	1104b03a 	or	r2,r2,r4
 508efdc:	1580042e 	bgeu	r2,r22,508eff0 <__udivdi3+0x388>
 508efe0:	15c5883a 	add	r2,r2,r23
 508efe4:	80ffffc4 	addi	r3,r16,-1
 508efe8:	15c0812e 	bgeu	r2,r23,508f1f0 <__udivdi3+0x588>
 508efec:	1821883a 	mov	r16,r3
 508eff0:	15adc83a 	sub	r22,r2,r22
 508eff4:	b009883a 	mov	r4,r22
 508eff8:	a00b883a 	mov	r5,r20
 508effc:	50827c80 	call	50827c8 <__umodsi3>
 508f000:	a00b883a 	mov	r5,r20
 508f004:	b009883a 	mov	r4,r22
 508f008:	d8800015 	stw	r2,0(sp)
 508f00c:	50827c00 	call	50827c0 <__udivsi3>
 508f010:	d8c00017 	ldw	r3,0(sp)
 508f014:	170b383a 	mul	r5,r2,fp
 508f018:	8c7fffcc 	andi	r17,r17,65535
 508f01c:	1806943a 	slli	r3,r3,16
 508f020:	1c46b03a 	or	r3,r3,r17
 508f024:	1940042e 	bgeu	r3,r5,508f038 <__udivdi3+0x3d0>
 508f028:	1dc7883a 	add	r3,r3,r23
 508f02c:	113fffc4 	addi	r4,r2,-1
 508f030:	1dc06b2e 	bgeu	r3,r23,508f1e0 <__udivdi3+0x578>
 508f034:	2005883a 	mov	r2,r4
 508f038:	8020943a 	slli	r16,r16,16
 508f03c:	a9ffffcc 	andi	r7,r21,65535
 508f040:	a82ad43a 	srli	r21,r21,16
 508f044:	1404b03a 	or	r2,r2,r16
 508f048:	113fffcc 	andi	r4,r2,65535
 508f04c:	100cd43a 	srli	r6,r2,16
 508f050:	21d3383a 	mul	r9,r4,r7
 508f054:	2549383a 	mul	r4,r4,r21
 508f058:	31cf383a 	mul	r7,r6,r7
 508f05c:	4810d43a 	srli	r8,r9,16
 508f060:	1947c83a 	sub	r3,r3,r5
 508f064:	3909883a 	add	r4,r7,r4
 508f068:	2209883a 	add	r4,r4,r8
 508f06c:	354d383a 	mul	r6,r6,r21
 508f070:	21c0022e 	bgeu	r4,r7,508f07c <__udivdi3+0x414>
 508f074:	01400074 	movhi	r5,1
 508f078:	314d883a 	add	r6,r6,r5
 508f07c:	202ad43a 	srli	r21,r4,16
 508f080:	354d883a 	add	r6,r6,r21
 508f084:	19803f36 	bltu	r3,r6,508f184 <__udivdi3+0x51c>
 508f088:	19803926 	beq	r3,r6,508f170 <__udivdi3+0x508>
 508f08c:	0007883a 	mov	r3,zero
 508f090:	003fa006 	br	508ef14 <__alt_data_end+0xfffc0d14>
 508f094:	90e4983a 	sll	r18,r18,r3
 508f098:	80aad83a 	srl	r21,r16,r2
 508f09c:	80e0983a 	sll	r16,r16,r3
 508f0a0:	9028d43a 	srli	r20,r18,16
 508f0a4:	9884d83a 	srl	r2,r19,r2
 508f0a8:	a809883a 	mov	r4,r21
 508f0ac:	a00b883a 	mov	r5,r20
 508f0b0:	80acb03a 	or	r22,r16,r2
 508f0b4:	98e2983a 	sll	r17,r19,r3
 508f0b8:	50827c80 	call	50827c8 <__umodsi3>
 508f0bc:	a809883a 	mov	r4,r21
 508f0c0:	a00b883a 	mov	r5,r20
 508f0c4:	1021883a 	mov	r16,r2
 508f0c8:	50827c00 	call	50827c0 <__udivsi3>
 508f0cc:	957fffcc 	andi	r21,r18,65535
 508f0d0:	8020943a 	slli	r16,r16,16
 508f0d4:	b00ad43a 	srli	r5,r22,16
 508f0d8:	1567383a 	mul	r19,r2,r21
 508f0dc:	102f883a 	mov	r23,r2
 508f0e0:	8148b03a 	or	r4,r16,r5
 508f0e4:	24c0062e 	bgeu	r4,r19,508f100 <__udivdi3+0x498>
 508f0e8:	2489883a 	add	r4,r4,r18
 508f0ec:	10bfffc4 	addi	r2,r2,-1
 508f0f0:	24804536 	bltu	r4,r18,508f208 <__udivdi3+0x5a0>
 508f0f4:	24c0442e 	bgeu	r4,r19,508f208 <__udivdi3+0x5a0>
 508f0f8:	bdffff84 	addi	r23,r23,-2
 508f0fc:	2489883a 	add	r4,r4,r18
 508f100:	24e7c83a 	sub	r19,r4,r19
 508f104:	9809883a 	mov	r4,r19
 508f108:	a00b883a 	mov	r5,r20
 508f10c:	50827c80 	call	50827c8 <__umodsi3>
 508f110:	1021883a 	mov	r16,r2
 508f114:	9809883a 	mov	r4,r19
 508f118:	a00b883a 	mov	r5,r20
 508f11c:	50827c00 	call	50827c0 <__udivsi3>
 508f120:	8020943a 	slli	r16,r16,16
 508f124:	1007883a 	mov	r3,r2
 508f128:	1545383a 	mul	r2,r2,r21
 508f12c:	b13fffcc 	andi	r4,r22,65535
 508f130:	8108b03a 	or	r4,r16,r4
 508f134:	2080062e 	bgeu	r4,r2,508f150 <__udivdi3+0x4e8>
 508f138:	2489883a 	add	r4,r4,r18
 508f13c:	197fffc4 	addi	r5,r3,-1
 508f140:	24802f36 	bltu	r4,r18,508f200 <__udivdi3+0x598>
 508f144:	20802e2e 	bgeu	r4,r2,508f200 <__udivdi3+0x598>
 508f148:	18ffff84 	addi	r3,r3,-2
 508f14c:	2489883a 	add	r4,r4,r18
 508f150:	b82e943a 	slli	r23,r23,16
 508f154:	20a1c83a 	sub	r16,r4,r2
 508f158:	1dc6b03a 	or	r3,r3,r23
 508f15c:	003f4006 	br	508ee60 <__alt_data_end+0xfffc0c60>
 508f160:	2005883a 	mov	r2,r4
 508f164:	003f6606 	br	508ef00 <__alt_data_end+0xfffc0d00>
 508f168:	1805883a 	mov	r2,r3
 508f16c:	003f0a06 	br	508ed98 <__alt_data_end+0xfffc0b98>
 508f170:	2006943a 	slli	r3,r4,16
 508f174:	9c88983a 	sll	r4,r19,r18
 508f178:	4a7fffcc 	andi	r9,r9,65535
 508f17c:	1a47883a 	add	r3,r3,r9
 508f180:	20ffc22e 	bgeu	r4,r3,508f08c <__alt_data_end+0xfffc0e8c>
 508f184:	10bfffc4 	addi	r2,r2,-1
 508f188:	003fc006 	br	508f08c <__alt_data_end+0xfffc0e8c>
 508f18c:	00c00404 	movi	r3,16
 508f190:	180b883a 	mov	r5,r3
 508f194:	003f0c06 	br	508edc8 <__alt_data_end+0xfffc0bc8>
 508f198:	0007883a 	mov	r3,zero
 508f19c:	000b883a 	mov	r5,zero
 508f1a0:	003f0906 	br	508edc8 <__alt_data_end+0xfffc0bc8>
 508f1a4:	00800404 	movi	r2,16
 508f1a8:	1007883a 	mov	r3,r2
 508f1ac:	003ec606 	br	508ecc8 <__alt_data_end+0xfffc0ac8>
 508f1b0:	00800404 	movi	r2,16
 508f1b4:	1007883a 	mov	r3,r2
 508f1b8:	003f1c06 	br	508ee2c <__alt_data_end+0xfffc0c2c>
 508f1bc:	0005883a 	mov	r2,zero
 508f1c0:	0007883a 	mov	r3,zero
 508f1c4:	003f1906 	br	508ee2c <__alt_data_end+0xfffc0c2c>
 508f1c8:	0005883a 	mov	r2,zero
 508f1cc:	0007883a 	mov	r3,zero
 508f1d0:	003ebd06 	br	508ecc8 <__alt_data_end+0xfffc0ac8>
 508f1d4:	0007883a 	mov	r3,zero
 508f1d8:	00800044 	movi	r2,1
 508f1dc:	003f4d06 	br	508ef14 <__alt_data_end+0xfffc0d14>
 508f1e0:	197f942e 	bgeu	r3,r5,508f034 <__alt_data_end+0xfffc0e34>
 508f1e4:	10bfff84 	addi	r2,r2,-2
 508f1e8:	1dc7883a 	add	r3,r3,r23
 508f1ec:	003f9206 	br	508f038 <__alt_data_end+0xfffc0e38>
 508f1f0:	15bf7e2e 	bgeu	r2,r22,508efec <__alt_data_end+0xfffc0dec>
 508f1f4:	843fff84 	addi	r16,r16,-2
 508f1f8:	15c5883a 	add	r2,r2,r23
 508f1fc:	003f7c06 	br	508eff0 <__alt_data_end+0xfffc0df0>
 508f200:	2807883a 	mov	r3,r5
 508f204:	003fd206 	br	508f150 <__alt_data_end+0xfffc0f50>
 508f208:	102f883a 	mov	r23,r2
 508f20c:	003fbc06 	br	508f100 <__alt_data_end+0xfffc0f00>
 508f210:	843fff84 	addi	r16,r16,-2
 508f214:	2489883a 	add	r4,r4,r18
 508f218:	003f2506 	br	508eeb0 <__alt_data_end+0xfffc0cb0>
 508f21c:	843fff84 	addi	r16,r16,-2
 508f220:	1485883a 	add	r2,r2,r18
 508f224:	003eca06 	br	508ed50 <__alt_data_end+0xfffc0b50>

0508f228 <__umoddi3>:
 508f228:	defff404 	addi	sp,sp,-48
 508f22c:	ddc00915 	stw	r23,36(sp)
 508f230:	dc400315 	stw	r17,12(sp)
 508f234:	dc000215 	stw	r16,8(sp)
 508f238:	dfc00b15 	stw	ra,44(sp)
 508f23c:	df000a15 	stw	fp,40(sp)
 508f240:	dd800815 	stw	r22,32(sp)
 508f244:	dd400715 	stw	r21,28(sp)
 508f248:	dd000615 	stw	r20,24(sp)
 508f24c:	dcc00515 	stw	r19,20(sp)
 508f250:	dc800415 	stw	r18,16(sp)
 508f254:	2021883a 	mov	r16,r4
 508f258:	2823883a 	mov	r17,r5
 508f25c:	282f883a 	mov	r23,r5
 508f260:	3800381e 	bne	r7,zero,508f344 <__umoddi3+0x11c>
 508f264:	3027883a 	mov	r19,r6
 508f268:	2029883a 	mov	r20,r4
 508f26c:	29804e2e 	bgeu	r5,r6,508f3a8 <__umoddi3+0x180>
 508f270:	00bfffd4 	movui	r2,65535
 508f274:	11809c36 	bltu	r2,r6,508f4e8 <__umoddi3+0x2c0>
 508f278:	00803fc4 	movi	r2,255
 508f27c:	11813b2e 	bgeu	r2,r6,508f76c <__umoddi3+0x544>
 508f280:	01400204 	movi	r5,8
 508f284:	2805883a 	mov	r2,r5
 508f288:	314ad83a 	srl	r5,r6,r5
 508f28c:	00c14274 	movhi	r3,1289
 508f290:	18d55b04 	addi	r3,r3,21868
 508f294:	194b883a 	add	r5,r3,r5
 508f298:	29000003 	ldbu	r4,0(r5)
 508f29c:	2089883a 	add	r4,r4,r2
 508f2a0:	00800804 	movi	r2,32
 508f2a4:	1105c83a 	sub	r2,r2,r4
 508f2a8:	1000ec26 	beq	r2,zero,508f65c <__umoddi3+0x434>
 508f2ac:	88a2983a 	sll	r17,r17,r2
 508f2b0:	8108d83a 	srl	r4,r16,r4
 508f2b4:	30a6983a 	sll	r19,r6,r2
 508f2b8:	80a8983a 	sll	r20,r16,r2
 508f2bc:	1025883a 	mov	r18,r2
 508f2c0:	892eb03a 	or	r23,r17,r4
 508f2c4:	982cd43a 	srli	r22,r19,16
 508f2c8:	b809883a 	mov	r4,r23
 508f2cc:	9d7fffcc 	andi	r21,r19,65535
 508f2d0:	b00b883a 	mov	r5,r22
 508f2d4:	50827c80 	call	50827c8 <__umodsi3>
 508f2d8:	b809883a 	mov	r4,r23
 508f2dc:	b00b883a 	mov	r5,r22
 508f2e0:	1021883a 	mov	r16,r2
 508f2e4:	50827c00 	call	50827c0 <__udivsi3>
 508f2e8:	8020943a 	slli	r16,r16,16
 508f2ec:	a00cd43a 	srli	r6,r20,16
 508f2f0:	1545383a 	mul	r2,r2,r21
 508f2f4:	8188b03a 	or	r4,r16,r6
 508f2f8:	2080042e 	bgeu	r4,r2,508f30c <__umoddi3+0xe4>
 508f2fc:	24c9883a 	add	r4,r4,r19
 508f300:	24c00236 	bltu	r4,r19,508f30c <__umoddi3+0xe4>
 508f304:	2080012e 	bgeu	r4,r2,508f30c <__umoddi3+0xe4>
 508f308:	24c9883a 	add	r4,r4,r19
 508f30c:	20a3c83a 	sub	r17,r4,r2
 508f310:	8809883a 	mov	r4,r17
 508f314:	b00b883a 	mov	r5,r22
 508f318:	50827c80 	call	50827c8 <__umodsi3>
 508f31c:	8809883a 	mov	r4,r17
 508f320:	b00b883a 	mov	r5,r22
 508f324:	1021883a 	mov	r16,r2
 508f328:	50827c00 	call	50827c0 <__udivsi3>
 508f32c:	8006943a 	slli	r3,r16,16
 508f330:	1545383a 	mul	r2,r2,r21
 508f334:	a13fffcc 	andi	r4,r20,65535
 508f338:	1906b03a 	or	r3,r3,r4
 508f33c:	1880532e 	bgeu	r3,r2,508f48c <__umoddi3+0x264>
 508f340:	00004e06 	br	508f47c <__umoddi3+0x254>
 508f344:	29c05536 	bltu	r5,r7,508f49c <__umoddi3+0x274>
 508f348:	00bfffd4 	movui	r2,65535
 508f34c:	11c0612e 	bgeu	r2,r7,508f4d4 <__umoddi3+0x2ac>
 508f350:	00804034 	movhi	r2,256
 508f354:	10bfffc4 	addi	r2,r2,-1
 508f358:	11c0f82e 	bgeu	r2,r7,508f73c <__umoddi3+0x514>
 508f35c:	01400604 	movi	r5,24
 508f360:	282b883a 	mov	r21,r5
 508f364:	394ad83a 	srl	r5,r7,r5
 508f368:	00c14274 	movhi	r3,1289
 508f36c:	18d55b04 	addi	r3,r3,21868
 508f370:	194b883a 	add	r5,r3,r5
 508f374:	28800003 	ldbu	r2,0(r5)
 508f378:	00c00804 	movi	r3,32
 508f37c:	156b883a 	add	r21,r2,r21
 508f380:	1d69c83a 	sub	r20,r3,r21
 508f384:	a000631e 	bne	r20,zero,508f514 <__umoddi3+0x2ec>
 508f388:	3c400136 	bltu	r7,r17,508f390 <__umoddi3+0x168>
 508f38c:	81810436 	bltu	r16,r6,508f7a0 <__umoddi3+0x578>
 508f390:	8185c83a 	sub	r2,r16,r6
 508f394:	89e3c83a 	sub	r17,r17,r7
 508f398:	8087803a 	cmpltu	r3,r16,r2
 508f39c:	88efc83a 	sub	r23,r17,r3
 508f3a0:	b807883a 	mov	r3,r23
 508f3a4:	00003f06 	br	508f4a4 <__umoddi3+0x27c>
 508f3a8:	3000041e 	bne	r6,zero,508f3bc <__umoddi3+0x194>
 508f3ac:	01000044 	movi	r4,1
 508f3b0:	000b883a 	mov	r5,zero
 508f3b4:	50827c00 	call	50827c0 <__udivsi3>
 508f3b8:	1027883a 	mov	r19,r2
 508f3bc:	00bfffd4 	movui	r2,65535
 508f3c0:	14c04f2e 	bgeu	r2,r19,508f500 <__umoddi3+0x2d8>
 508f3c4:	00804034 	movhi	r2,256
 508f3c8:	10bfffc4 	addi	r2,r2,-1
 508f3cc:	14c0e42e 	bgeu	r2,r19,508f760 <__umoddi3+0x538>
 508f3d0:	00800604 	movi	r2,24
 508f3d4:	1007883a 	mov	r3,r2
 508f3d8:	9884d83a 	srl	r2,r19,r2
 508f3dc:	01014274 	movhi	r4,1289
 508f3e0:	21155b04 	addi	r4,r4,21868
 508f3e4:	2085883a 	add	r2,r4,r2
 508f3e8:	11000003 	ldbu	r4,0(r2)
 508f3ec:	00800804 	movi	r2,32
 508f3f0:	20c7883a 	add	r3,r4,r3
 508f3f4:	10c5c83a 	sub	r2,r2,r3
 508f3f8:	10009a1e 	bne	r2,zero,508f664 <__umoddi3+0x43c>
 508f3fc:	982cd43a 	srli	r22,r19,16
 508f400:	8ce3c83a 	sub	r17,r17,r19
 508f404:	9c3fffcc 	andi	r16,r19,65535
 508f408:	0025883a 	mov	r18,zero
 508f40c:	8809883a 	mov	r4,r17
 508f410:	b00b883a 	mov	r5,r22
 508f414:	50827c80 	call	50827c8 <__umodsi3>
 508f418:	8809883a 	mov	r4,r17
 508f41c:	b00b883a 	mov	r5,r22
 508f420:	102b883a 	mov	r21,r2
 508f424:	50827c00 	call	50827c0 <__udivsi3>
 508f428:	a806943a 	slli	r3,r21,16
 508f42c:	a008d43a 	srli	r4,r20,16
 508f430:	1405383a 	mul	r2,r2,r16
 508f434:	190cb03a 	or	r6,r3,r4
 508f438:	3080032e 	bgeu	r6,r2,508f448 <__umoddi3+0x220>
 508f43c:	34cd883a 	add	r6,r6,r19
 508f440:	34c00136 	bltu	r6,r19,508f448 <__umoddi3+0x220>
 508f444:	3080d436 	bltu	r6,r2,508f798 <__umoddi3+0x570>
 508f448:	30abc83a 	sub	r21,r6,r2
 508f44c:	a809883a 	mov	r4,r21
 508f450:	b00b883a 	mov	r5,r22
 508f454:	50827c80 	call	50827c8 <__umodsi3>
 508f458:	1023883a 	mov	r17,r2
 508f45c:	a809883a 	mov	r4,r21
 508f460:	b00b883a 	mov	r5,r22
 508f464:	50827c00 	call	50827c0 <__udivsi3>
 508f468:	8822943a 	slli	r17,r17,16
 508f46c:	1405383a 	mul	r2,r2,r16
 508f470:	a13fffcc 	andi	r4,r20,65535
 508f474:	8906b03a 	or	r3,r17,r4
 508f478:	1880042e 	bgeu	r3,r2,508f48c <__umoddi3+0x264>
 508f47c:	1cc7883a 	add	r3,r3,r19
 508f480:	1cc00236 	bltu	r3,r19,508f48c <__umoddi3+0x264>
 508f484:	1880012e 	bgeu	r3,r2,508f48c <__umoddi3+0x264>
 508f488:	1cc7883a 	add	r3,r3,r19
 508f48c:	1887c83a 	sub	r3,r3,r2
 508f490:	1c84d83a 	srl	r2,r3,r18
 508f494:	0007883a 	mov	r3,zero
 508f498:	00000206 	br	508f4a4 <__umoddi3+0x27c>
 508f49c:	2005883a 	mov	r2,r4
 508f4a0:	2807883a 	mov	r3,r5
 508f4a4:	dfc00b17 	ldw	ra,44(sp)
 508f4a8:	df000a17 	ldw	fp,40(sp)
 508f4ac:	ddc00917 	ldw	r23,36(sp)
 508f4b0:	dd800817 	ldw	r22,32(sp)
 508f4b4:	dd400717 	ldw	r21,28(sp)
 508f4b8:	dd000617 	ldw	r20,24(sp)
 508f4bc:	dcc00517 	ldw	r19,20(sp)
 508f4c0:	dc800417 	ldw	r18,16(sp)
 508f4c4:	dc400317 	ldw	r17,12(sp)
 508f4c8:	dc000217 	ldw	r16,8(sp)
 508f4cc:	dec00c04 	addi	sp,sp,48
 508f4d0:	f800283a 	ret
 508f4d4:	00803fc4 	movi	r2,255
 508f4d8:	11c0952e 	bgeu	r2,r7,508f730 <__umoddi3+0x508>
 508f4dc:	01400204 	movi	r5,8
 508f4e0:	282b883a 	mov	r21,r5
 508f4e4:	003f9f06 	br	508f364 <__alt_data_end+0xfffc1164>
 508f4e8:	00804034 	movhi	r2,256
 508f4ec:	10bfffc4 	addi	r2,r2,-1
 508f4f0:	1180952e 	bgeu	r2,r6,508f748 <__umoddi3+0x520>
 508f4f4:	01400604 	movi	r5,24
 508f4f8:	2805883a 	mov	r2,r5
 508f4fc:	003f6206 	br	508f288 <__alt_data_end+0xfffc1088>
 508f500:	00803fc4 	movi	r2,255
 508f504:	14c0932e 	bgeu	r2,r19,508f754 <__umoddi3+0x52c>
 508f508:	00800204 	movi	r2,8
 508f50c:	1007883a 	mov	r3,r2
 508f510:	003fb106 	br	508f3d8 <__alt_data_end+0xfffc11d8>
 508f514:	3548d83a 	srl	r4,r6,r21
 508f518:	3d0e983a 	sll	r7,r7,r20
 508f51c:	8d10983a 	sll	r8,r17,r20
 508f520:	8d6cd83a 	srl	r22,r17,r21
 508f524:	3922b03a 	or	r17,r7,r4
 508f528:	882ed43a 	srli	r23,r17,16
 508f52c:	8564d83a 	srl	r18,r16,r21
 508f530:	b009883a 	mov	r4,r22
 508f534:	b80b883a 	mov	r5,r23
 508f538:	44a4b03a 	or	r18,r8,r18
 508f53c:	3526983a 	sll	r19,r6,r20
 508f540:	50827c80 	call	50827c8 <__umodsi3>
 508f544:	b009883a 	mov	r4,r22
 508f548:	b80b883a 	mov	r5,r23
 508f54c:	1039883a 	mov	fp,r2
 508f550:	50827c00 	call	50827c0 <__udivsi3>
 508f554:	102d883a 	mov	r22,r2
 508f558:	8a3fffcc 	andi	r8,r17,65535
 508f55c:	e004943a 	slli	r2,fp,16
 508f560:	900cd43a 	srli	r6,r18,16
 508f564:	b239383a 	mul	fp,r22,r8
 508f568:	8520983a 	sll	r16,r16,r20
 508f56c:	118ab03a 	or	r5,r2,r6
 508f570:	2f00042e 	bgeu	r5,fp,508f584 <__umoddi3+0x35c>
 508f574:	2c4b883a 	add	r5,r5,r17
 508f578:	b0bfffc4 	addi	r2,r22,-1
 508f57c:	2c40822e 	bgeu	r5,r17,508f788 <__umoddi3+0x560>
 508f580:	102d883a 	mov	r22,r2
 508f584:	2f39c83a 	sub	fp,r5,fp
 508f588:	e009883a 	mov	r4,fp
 508f58c:	b80b883a 	mov	r5,r23
 508f590:	da000115 	stw	r8,4(sp)
 508f594:	50827c80 	call	50827c8 <__umodsi3>
 508f598:	e009883a 	mov	r4,fp
 508f59c:	b80b883a 	mov	r5,r23
 508f5a0:	d8800015 	stw	r2,0(sp)
 508f5a4:	50827c00 	call	50827c0 <__udivsi3>
 508f5a8:	d9800017 	ldw	r6,0(sp)
 508f5ac:	da000117 	ldw	r8,4(sp)
 508f5b0:	94bfffcc 	andi	r18,r18,65535
 508f5b4:	300c943a 	slli	r6,r6,16
 508f5b8:	1209383a 	mul	r4,r2,r8
 508f5bc:	3490b03a 	or	r8,r6,r18
 508f5c0:	4100042e 	bgeu	r8,r4,508f5d4 <__umoddi3+0x3ac>
 508f5c4:	4451883a 	add	r8,r8,r17
 508f5c8:	10ffffc4 	addi	r3,r2,-1
 508f5cc:	44406a2e 	bgeu	r8,r17,508f778 <__umoddi3+0x550>
 508f5d0:	1805883a 	mov	r2,r3
 508f5d4:	b012943a 	slli	r9,r22,16
 508f5d8:	9abfffcc 	andi	r10,r19,65535
 508f5dc:	980ed43a 	srli	r7,r19,16
 508f5e0:	124ab03a 	or	r5,r2,r9
 508f5e4:	2a7fffcc 	andi	r9,r5,65535
 508f5e8:	280ad43a 	srli	r5,r5,16
 508f5ec:	4a8d383a 	mul	r6,r9,r10
 508f5f0:	49d3383a 	mul	r9,r9,r7
 508f5f4:	2a95383a 	mul	r10,r5,r10
 508f5f8:	3004d43a 	srli	r2,r6,16
 508f5fc:	4111c83a 	sub	r8,r8,r4
 508f600:	5253883a 	add	r9,r10,r9
 508f604:	4893883a 	add	r9,r9,r2
 508f608:	29cb383a 	mul	r5,r5,r7
 508f60c:	4a80022e 	bgeu	r9,r10,508f618 <__umoddi3+0x3f0>
 508f610:	00800074 	movhi	r2,1
 508f614:	288b883a 	add	r5,r5,r2
 508f618:	4808d43a 	srli	r4,r9,16
 508f61c:	4812943a 	slli	r9,r9,16
 508f620:	31bfffcc 	andi	r6,r6,65535
 508f624:	290b883a 	add	r5,r5,r4
 508f628:	498d883a 	add	r6,r9,r6
 508f62c:	41403a36 	bltu	r8,r5,508f718 <__umoddi3+0x4f0>
 508f630:	41405d26 	beq	r8,r5,508f7a8 <__umoddi3+0x580>
 508f634:	4149c83a 	sub	r4,r8,r5
 508f638:	300f883a 	mov	r7,r6
 508f63c:	81cfc83a 	sub	r7,r16,r7
 508f640:	81c7803a 	cmpltu	r3,r16,r7
 508f644:	20c7c83a 	sub	r3,r4,r3
 508f648:	1d44983a 	sll	r2,r3,r21
 508f64c:	3d0ed83a 	srl	r7,r7,r20
 508f650:	1d06d83a 	srl	r3,r3,r20
 508f654:	11c4b03a 	or	r2,r2,r7
 508f658:	003f9206 	br	508f4a4 <__alt_data_end+0xfffc12a4>
 508f65c:	0025883a 	mov	r18,zero
 508f660:	003f1806 	br	508f2c4 <__alt_data_end+0xfffc10c4>
 508f664:	98a6983a 	sll	r19,r19,r2
 508f668:	88e8d83a 	srl	r20,r17,r3
 508f66c:	80c6d83a 	srl	r3,r16,r3
 508f670:	982cd43a 	srli	r22,r19,16
 508f674:	88a2983a 	sll	r17,r17,r2
 508f678:	a009883a 	mov	r4,r20
 508f67c:	b00b883a 	mov	r5,r22
 508f680:	88eab03a 	or	r21,r17,r3
 508f684:	1025883a 	mov	r18,r2
 508f688:	50827c80 	call	50827c8 <__umodsi3>
 508f68c:	a009883a 	mov	r4,r20
 508f690:	b00b883a 	mov	r5,r22
 508f694:	1023883a 	mov	r17,r2
 508f698:	50827c00 	call	50827c0 <__udivsi3>
 508f69c:	9f3fffcc 	andi	fp,r19,65535
 508f6a0:	8822943a 	slli	r17,r17,16
 508f6a4:	a80ad43a 	srli	r5,r21,16
 508f6a8:	1705383a 	mul	r2,r2,fp
 508f6ac:	84a8983a 	sll	r20,r16,r18
 508f6b0:	8948b03a 	or	r4,r17,r5
 508f6b4:	2080042e 	bgeu	r4,r2,508f6c8 <__umoddi3+0x4a0>
 508f6b8:	24c9883a 	add	r4,r4,r19
 508f6bc:	24c00236 	bltu	r4,r19,508f6c8 <__umoddi3+0x4a0>
 508f6c0:	2080012e 	bgeu	r4,r2,508f6c8 <__umoddi3+0x4a0>
 508f6c4:	24c9883a 	add	r4,r4,r19
 508f6c8:	20afc83a 	sub	r23,r4,r2
 508f6cc:	b809883a 	mov	r4,r23
 508f6d0:	b00b883a 	mov	r5,r22
 508f6d4:	50827c80 	call	50827c8 <__umodsi3>
 508f6d8:	1023883a 	mov	r17,r2
 508f6dc:	b809883a 	mov	r4,r23
 508f6e0:	b00b883a 	mov	r5,r22
 508f6e4:	50827c00 	call	50827c0 <__udivsi3>
 508f6e8:	8822943a 	slli	r17,r17,16
 508f6ec:	1705383a 	mul	r2,r2,fp
 508f6f0:	a93fffcc 	andi	r4,r21,65535
 508f6f4:	8908b03a 	or	r4,r17,r4
 508f6f8:	2080042e 	bgeu	r4,r2,508f70c <__umoddi3+0x4e4>
 508f6fc:	24c9883a 	add	r4,r4,r19
 508f700:	24c00236 	bltu	r4,r19,508f70c <__umoddi3+0x4e4>
 508f704:	2080012e 	bgeu	r4,r2,508f70c <__umoddi3+0x4e4>
 508f708:	24c9883a 	add	r4,r4,r19
 508f70c:	20a3c83a 	sub	r17,r4,r2
 508f710:	e021883a 	mov	r16,fp
 508f714:	003f3d06 	br	508f40c <__alt_data_end+0xfffc120c>
 508f718:	34cfc83a 	sub	r7,r6,r19
 508f71c:	2c4bc83a 	sub	r5,r5,r17
 508f720:	31cd803a 	cmpltu	r6,r6,r7
 508f724:	298dc83a 	sub	r6,r5,r6
 508f728:	4189c83a 	sub	r4,r8,r6
 508f72c:	003fc306 	br	508f63c <__alt_data_end+0xfffc143c>
 508f730:	000b883a 	mov	r5,zero
 508f734:	002b883a 	mov	r21,zero
 508f738:	003f0a06 	br	508f364 <__alt_data_end+0xfffc1164>
 508f73c:	01400404 	movi	r5,16
 508f740:	282b883a 	mov	r21,r5
 508f744:	003f0706 	br	508f364 <__alt_data_end+0xfffc1164>
 508f748:	01400404 	movi	r5,16
 508f74c:	2805883a 	mov	r2,r5
 508f750:	003ecd06 	br	508f288 <__alt_data_end+0xfffc1088>
 508f754:	0005883a 	mov	r2,zero
 508f758:	0007883a 	mov	r3,zero
 508f75c:	003f1e06 	br	508f3d8 <__alt_data_end+0xfffc11d8>
 508f760:	00800404 	movi	r2,16
 508f764:	1007883a 	mov	r3,r2
 508f768:	003f1b06 	br	508f3d8 <__alt_data_end+0xfffc11d8>
 508f76c:	000b883a 	mov	r5,zero
 508f770:	0005883a 	mov	r2,zero
 508f774:	003ec406 	br	508f288 <__alt_data_end+0xfffc1088>
 508f778:	413f952e 	bgeu	r8,r4,508f5d0 <__alt_data_end+0xfffc13d0>
 508f77c:	10bfff84 	addi	r2,r2,-2
 508f780:	4451883a 	add	r8,r8,r17
 508f784:	003f9306 	br	508f5d4 <__alt_data_end+0xfffc13d4>
 508f788:	2f3f7d2e 	bgeu	r5,fp,508f580 <__alt_data_end+0xfffc1380>
 508f78c:	b5bfff84 	addi	r22,r22,-2
 508f790:	2c4b883a 	add	r5,r5,r17
 508f794:	003f7b06 	br	508f584 <__alt_data_end+0xfffc1384>
 508f798:	34cd883a 	add	r6,r6,r19
 508f79c:	003f2a06 	br	508f448 <__alt_data_end+0xfffc1248>
 508f7a0:	8005883a 	mov	r2,r16
 508f7a4:	003efe06 	br	508f3a0 <__alt_data_end+0xfffc11a0>
 508f7a8:	81bfdb36 	bltu	r16,r6,508f718 <__alt_data_end+0xfffc1518>
 508f7ac:	300f883a 	mov	r7,r6
 508f7b0:	0009883a 	mov	r4,zero
 508f7b4:	003fa106 	br	508f63c <__alt_data_end+0xfffc143c>

0508f7b8 <__adddf3>:
 508f7b8:	02000434 	movhi	r8,16
 508f7bc:	423fffc4 	addi	r8,r8,-1
 508f7c0:	defffb04 	addi	sp,sp,-20
 508f7c4:	2a12703a 	and	r9,r5,r8
 508f7c8:	2806d7fa 	srli	r3,r5,31
 508f7cc:	3a10703a 	and	r8,r7,r8
 508f7d0:	3804d53a 	srli	r2,r7,20
 508f7d4:	3014d77a 	srli	r10,r6,29
 508f7d8:	dc000015 	stw	r16,0(sp)
 508f7dc:	481290fa 	slli	r9,r9,3
 508f7e0:	2820d53a 	srli	r16,r5,20
 508f7e4:	401090fa 	slli	r8,r8,3
 508f7e8:	200ad77a 	srli	r5,r4,29
 508f7ec:	380ed7fa 	srli	r7,r7,31
 508f7f0:	dc800215 	stw	r18,8(sp)
 508f7f4:	dc400115 	stw	r17,4(sp)
 508f7f8:	dfc00415 	stw	ra,16(sp)
 508f7fc:	dcc00315 	stw	r19,12(sp)
 508f800:	1c803fcc 	andi	r18,r3,255
 508f804:	8401ffcc 	andi	r16,r16,2047
 508f808:	494ab03a 	or	r5,r9,r5
 508f80c:	202290fa 	slli	r17,r4,3
 508f810:	1081ffcc 	andi	r2,r2,2047
 508f814:	4290b03a 	or	r8,r8,r10
 508f818:	300c90fa 	slli	r6,r6,3
 508f81c:	91c07026 	beq	r18,r7,508f9e0 <__adddf3+0x228>
 508f820:	8087c83a 	sub	r3,r16,r2
 508f824:	00c0b30e 	bge	zero,r3,508faf4 <__adddf3+0x33c>
 508f828:	10002a1e 	bne	r2,zero,508f8d4 <__adddf3+0x11c>
 508f82c:	4184b03a 	or	r2,r8,r6
 508f830:	1000991e 	bne	r2,zero,508fa98 <__adddf3+0x2e0>
 508f834:	888001cc 	andi	r2,r17,7
 508f838:	10005b26 	beq	r2,zero,508f9a8 <__adddf3+0x1f0>
 508f83c:	88c003cc 	andi	r3,r17,15
 508f840:	00800104 	movi	r2,4
 508f844:	18805826 	beq	r3,r2,508f9a8 <__adddf3+0x1f0>
 508f848:	89800104 	addi	r6,r17,4
 508f84c:	3463803a 	cmpltu	r17,r6,r17
 508f850:	2c4b883a 	add	r5,r5,r17
 508f854:	2880202c 	andhi	r2,r5,128
 508f858:	9007883a 	mov	r3,r18
 508f85c:	3023883a 	mov	r17,r6
 508f860:	10005426 	beq	r2,zero,508f9b4 <__adddf3+0x1fc>
 508f864:	84000044 	addi	r16,r16,1
 508f868:	0081ffc4 	movi	r2,2047
 508f86c:	8080c126 	beq	r16,r2,508fb74 <__adddf3+0x3bc>
 508f870:	013fe034 	movhi	r4,65408
 508f874:	213fffc4 	addi	r4,r4,-1
 508f878:	290a703a 	and	r5,r5,r4
 508f87c:	2804977a 	slli	r2,r5,29
 508f880:	280a927a 	slli	r5,r5,9
 508f884:	8822d0fa 	srli	r17,r17,3
 508f888:	8401ffcc 	andi	r16,r16,2047
 508f88c:	2808d33a 	srli	r4,r5,12
 508f890:	1444b03a 	or	r2,r2,r17
 508f894:	8401ffcc 	andi	r16,r16,2047
 508f898:	800a953a 	slli	r5,r16,20
 508f89c:	18c03fcc 	andi	r3,r3,255
 508f8a0:	04000434 	movhi	r16,16
 508f8a4:	180697fa 	slli	r3,r3,31
 508f8a8:	843fffc4 	addi	r16,r16,-1
 508f8ac:	2420703a 	and	r16,r4,r16
 508f8b0:	8160b03a 	or	r16,r16,r5
 508f8b4:	80c6b03a 	or	r3,r16,r3
 508f8b8:	dfc00417 	ldw	ra,16(sp)
 508f8bc:	dcc00317 	ldw	r19,12(sp)
 508f8c0:	dc800217 	ldw	r18,8(sp)
 508f8c4:	dc400117 	ldw	r17,4(sp)
 508f8c8:	dc000017 	ldw	r16,0(sp)
 508f8cc:	dec00504 	addi	sp,sp,20
 508f8d0:	f800283a 	ret
 508f8d4:	0081ffc4 	movi	r2,2047
 508f8d8:	80bfd626 	beq	r16,r2,508f834 <__alt_data_end+0xfffc1634>
 508f8dc:	42002034 	orhi	r8,r8,128
 508f8e0:	00800e04 	movi	r2,56
 508f8e4:	10c0a616 	blt	r2,r3,508fb80 <__adddf3+0x3c8>
 508f8e8:	008007c4 	movi	r2,31
 508f8ec:	10c0c916 	blt	r2,r3,508fc14 <__adddf3+0x45c>
 508f8f0:	00800804 	movi	r2,32
 508f8f4:	10c5c83a 	sub	r2,r2,r3
 508f8f8:	408e983a 	sll	r7,r8,r2
 508f8fc:	30c8d83a 	srl	r4,r6,r3
 508f900:	3084983a 	sll	r2,r6,r2
 508f904:	40c6d83a 	srl	r3,r8,r3
 508f908:	390cb03a 	or	r6,r7,r4
 508f90c:	1004c03a 	cmpne	r2,r2,zero
 508f910:	308cb03a 	or	r6,r6,r2
 508f914:	898dc83a 	sub	r6,r17,r6
 508f918:	89a3803a 	cmpltu	r17,r17,r6
 508f91c:	28cbc83a 	sub	r5,r5,r3
 508f920:	2c4bc83a 	sub	r5,r5,r17
 508f924:	3023883a 	mov	r17,r6
 508f928:	2880202c 	andhi	r2,r5,128
 508f92c:	10006d26 	beq	r2,zero,508fae4 <__adddf3+0x32c>
 508f930:	04c02034 	movhi	r19,128
 508f934:	9cffffc4 	addi	r19,r19,-1
 508f938:	2ce6703a 	and	r19,r5,r19
 508f93c:	98007e26 	beq	r19,zero,508fb38 <__adddf3+0x380>
 508f940:	9809883a 	mov	r4,r19
 508f944:	5091d540 	call	5091d54 <__clzsi2>
 508f948:	10fffe04 	addi	r3,r2,-8
 508f94c:	010007c4 	movi	r4,31
 508f950:	20c07f16 	blt	r4,r3,508fb50 <__adddf3+0x398>
 508f954:	01400a04 	movi	r5,40
 508f958:	2885c83a 	sub	r2,r5,r2
 508f95c:	888ad83a 	srl	r5,r17,r2
 508f960:	98e6983a 	sll	r19,r19,r3
 508f964:	88e2983a 	sll	r17,r17,r3
 508f968:	2ce6b03a 	or	r19,r5,r19
 508f96c:	1c007c16 	blt	r3,r16,508fb60 <__adddf3+0x3a8>
 508f970:	1c21c83a 	sub	r16,r3,r16
 508f974:	81400044 	addi	r5,r16,1
 508f978:	00c007c4 	movi	r3,31
 508f97c:	19409816 	blt	r3,r5,508fbe0 <__adddf3+0x428>
 508f980:	1c21c83a 	sub	r16,r3,r16
 508f984:	8c08983a 	sll	r4,r17,r16
 508f988:	8946d83a 	srl	r3,r17,r5
 508f98c:	9c20983a 	sll	r16,r19,r16
 508f990:	2008c03a 	cmpne	r4,r4,zero
 508f994:	994ad83a 	srl	r5,r19,r5
 508f998:	1c06b03a 	or	r3,r3,r16
 508f99c:	1922b03a 	or	r17,r3,r4
 508f9a0:	0021883a 	mov	r16,zero
 508f9a4:	003fa306 	br	508f834 <__alt_data_end+0xfffc1634>
 508f9a8:	2880202c 	andhi	r2,r5,128
 508f9ac:	9007883a 	mov	r3,r18
 508f9b0:	103fac1e 	bne	r2,zero,508f864 <__alt_data_end+0xfffc1664>
 508f9b4:	2804977a 	slli	r2,r5,29
 508f9b8:	8822d0fa 	srli	r17,r17,3
 508f9bc:	0101ffc4 	movi	r4,2047
 508f9c0:	280ad0fa 	srli	r5,r5,3
 508f9c4:	1444b03a 	or	r2,r2,r17
 508f9c8:	81002c26 	beq	r16,r4,508fa7c <__adddf3+0x2c4>
 508f9cc:	8120703a 	and	r16,r16,r4
 508f9d0:	01000434 	movhi	r4,16
 508f9d4:	213fffc4 	addi	r4,r4,-1
 508f9d8:	2908703a 	and	r4,r5,r4
 508f9dc:	003fad06 	br	508f894 <__alt_data_end+0xfffc1694>
 508f9e0:	8089c83a 	sub	r4,r16,r2
 508f9e4:	01006a0e 	bge	zero,r4,508fb90 <__adddf3+0x3d8>
 508f9e8:	10003326 	beq	r2,zero,508fab8 <__adddf3+0x300>
 508f9ec:	0081ffc4 	movi	r2,2047
 508f9f0:	80bf9026 	beq	r16,r2,508f834 <__alt_data_end+0xfffc1634>
 508f9f4:	42002034 	orhi	r8,r8,128
 508f9f8:	00800e04 	movi	r2,56
 508f9fc:	1100b116 	blt	r2,r4,508fcc4 <__adddf3+0x50c>
 508fa00:	008007c4 	movi	r2,31
 508fa04:	1100e216 	blt	r2,r4,508fd90 <__adddf3+0x5d8>
 508fa08:	00800804 	movi	r2,32
 508fa0c:	1105c83a 	sub	r2,r2,r4
 508fa10:	4092983a 	sll	r9,r8,r2
 508fa14:	310ed83a 	srl	r7,r6,r4
 508fa18:	3084983a 	sll	r2,r6,r2
 508fa1c:	4110d83a 	srl	r8,r8,r4
 508fa20:	49ccb03a 	or	r6,r9,r7
 508fa24:	1004c03a 	cmpne	r2,r2,zero
 508fa28:	308cb03a 	or	r6,r6,r2
 508fa2c:	344d883a 	add	r6,r6,r17
 508fa30:	3463803a 	cmpltu	r17,r6,r17
 508fa34:	414b883a 	add	r5,r8,r5
 508fa38:	2c4b883a 	add	r5,r5,r17
 508fa3c:	3023883a 	mov	r17,r6
 508fa40:	2880202c 	andhi	r2,r5,128
 508fa44:	10002726 	beq	r2,zero,508fae4 <__adddf3+0x32c>
 508fa48:	84000044 	addi	r16,r16,1
 508fa4c:	0081ffc4 	movi	r2,2047
 508fa50:	8080ae26 	beq	r16,r2,508fd0c <__adddf3+0x554>
 508fa54:	00bfe034 	movhi	r2,65408
 508fa58:	10bfffc4 	addi	r2,r2,-1
 508fa5c:	288a703a 	and	r5,r5,r2
 508fa60:	880cd07a 	srli	r6,r17,1
 508fa64:	280897fa 	slli	r4,r5,31
 508fa68:	88c0004c 	andi	r3,r17,1
 508fa6c:	30e2b03a 	or	r17,r6,r3
 508fa70:	280ad07a 	srli	r5,r5,1
 508fa74:	8922b03a 	or	r17,r17,r4
 508fa78:	003f6e06 	br	508f834 <__alt_data_end+0xfffc1634>
 508fa7c:	1148b03a 	or	r4,r2,r5
 508fa80:	20003c26 	beq	r4,zero,508fb74 <__adddf3+0x3bc>
 508fa84:	29000234 	orhi	r4,r5,8
 508fa88:	01400434 	movhi	r5,16
 508fa8c:	297fffc4 	addi	r5,r5,-1
 508fa90:	2148703a 	and	r4,r4,r5
 508fa94:	003f7f06 	br	508f894 <__alt_data_end+0xfffc1694>
 508fa98:	18ffffc4 	addi	r3,r3,-1
 508fa9c:	18004d1e 	bne	r3,zero,508fbd4 <__adddf3+0x41c>
 508faa0:	898dc83a 	sub	r6,r17,r6
 508faa4:	89a3803a 	cmpltu	r17,r17,r6
 508faa8:	2a0bc83a 	sub	r5,r5,r8
 508faac:	2c4bc83a 	sub	r5,r5,r17
 508fab0:	3023883a 	mov	r17,r6
 508fab4:	003f9c06 	br	508f928 <__alt_data_end+0xfffc1728>
 508fab8:	4184b03a 	or	r2,r8,r6
 508fabc:	103f5d26 	beq	r2,zero,508f834 <__alt_data_end+0xfffc1634>
 508fac0:	213fffc4 	addi	r4,r4,-1
 508fac4:	203fd926 	beq	r4,zero,508fa2c <__alt_data_end+0xfffc182c>
 508fac8:	0081ffc4 	movi	r2,2047
 508facc:	80bfca1e 	bne	r16,r2,508f9f8 <__alt_data_end+0xfffc17f8>
 508fad0:	003f5806 	br	508f834 <__alt_data_end+0xfffc1634>
 508fad4:	10c8b03a 	or	r4,r2,r3
 508fad8:	20008b26 	beq	r4,zero,508fd08 <__adddf3+0x550>
 508fadc:	100b883a 	mov	r5,r2
 508fae0:	1823883a 	mov	r17,r3
 508fae4:	888001cc 	andi	r2,r17,7
 508fae8:	103f541e 	bne	r2,zero,508f83c <__alt_data_end+0xfffc163c>
 508faec:	9007883a 	mov	r3,r18
 508faf0:	003fb006 	br	508f9b4 <__alt_data_end+0xfffc17b4>
 508faf4:	1800531e 	bne	r3,zero,508fc44 <__adddf3+0x48c>
 508faf8:	80800044 	addi	r2,r16,1
 508fafc:	1081ffcc 	andi	r2,r2,2047
 508fb00:	00c00044 	movi	r3,1
 508fb04:	1880990e 	bge	r3,r2,508fd6c <__adddf3+0x5b4>
 508fb08:	8985c83a 	sub	r2,r17,r6
 508fb0c:	8887803a 	cmpltu	r3,r17,r2
 508fb10:	2a27c83a 	sub	r19,r5,r8
 508fb14:	98e7c83a 	sub	r19,r19,r3
 508fb18:	98c0202c 	andhi	r3,r19,128
 508fb1c:	18006226 	beq	r3,zero,508fca8 <__adddf3+0x4f0>
 508fb20:	3463c83a 	sub	r17,r6,r17
 508fb24:	4151c83a 	sub	r8,r8,r5
 508fb28:	344d803a 	cmpltu	r6,r6,r17
 508fb2c:	41a7c83a 	sub	r19,r8,r6
 508fb30:	3825883a 	mov	r18,r7
 508fb34:	983f821e 	bne	r19,zero,508f940 <__alt_data_end+0xfffc1740>
 508fb38:	8809883a 	mov	r4,r17
 508fb3c:	5091d540 	call	5091d54 <__clzsi2>
 508fb40:	10800804 	addi	r2,r2,32
 508fb44:	10fffe04 	addi	r3,r2,-8
 508fb48:	010007c4 	movi	r4,31
 508fb4c:	20ff810e 	bge	r4,r3,508f954 <__alt_data_end+0xfffc1754>
 508fb50:	14fff604 	addi	r19,r2,-40
 508fb54:	8ce6983a 	sll	r19,r17,r19
 508fb58:	0023883a 	mov	r17,zero
 508fb5c:	1c3f840e 	bge	r3,r16,508f970 <__alt_data_end+0xfffc1770>
 508fb60:	017fe034 	movhi	r5,65408
 508fb64:	297fffc4 	addi	r5,r5,-1
 508fb68:	80e1c83a 	sub	r16,r16,r3
 508fb6c:	994a703a 	and	r5,r19,r5
 508fb70:	003f3006 	br	508f834 <__alt_data_end+0xfffc1634>
 508fb74:	0009883a 	mov	r4,zero
 508fb78:	0005883a 	mov	r2,zero
 508fb7c:	003f4506 	br	508f894 <__alt_data_end+0xfffc1694>
 508fb80:	418cb03a 	or	r6,r8,r6
 508fb84:	300cc03a 	cmpne	r6,r6,zero
 508fb88:	0007883a 	mov	r3,zero
 508fb8c:	003f6106 	br	508f914 <__alt_data_end+0xfffc1714>
 508fb90:	2000921e 	bne	r4,zero,508fddc <__adddf3+0x624>
 508fb94:	80800044 	addi	r2,r16,1
 508fb98:	11c1ffcc 	andi	r7,r2,2047
 508fb9c:	01000044 	movi	r4,1
 508fba0:	21c0610e 	bge	r4,r7,508fd28 <__adddf3+0x570>
 508fba4:	0101ffc4 	movi	r4,2047
 508fba8:	1100a326 	beq	r2,r4,508fe38 <__adddf3+0x680>
 508fbac:	344d883a 	add	r6,r6,r17
 508fbb0:	3463803a 	cmpltu	r17,r6,r17
 508fbb4:	414b883a 	add	r5,r8,r5
 508fbb8:	2c4b883a 	add	r5,r5,r17
 508fbbc:	282297fa 	slli	r17,r5,31
 508fbc0:	300cd07a 	srli	r6,r6,1
 508fbc4:	280ad07a 	srli	r5,r5,1
 508fbc8:	1021883a 	mov	r16,r2
 508fbcc:	89a2b03a 	or	r17,r17,r6
 508fbd0:	003f1806 	br	508f834 <__alt_data_end+0xfffc1634>
 508fbd4:	0081ffc4 	movi	r2,2047
 508fbd8:	80bf411e 	bne	r16,r2,508f8e0 <__alt_data_end+0xfffc16e0>
 508fbdc:	003f1506 	br	508f834 <__alt_data_end+0xfffc1634>
 508fbe0:	80bff844 	addi	r2,r16,-31
 508fbe4:	00c00804 	movi	r3,32
 508fbe8:	9884d83a 	srl	r2,r19,r2
 508fbec:	28c04a26 	beq	r5,r3,508fd18 <__adddf3+0x560>
 508fbf0:	00c00fc4 	movi	r3,63
 508fbf4:	1c21c83a 	sub	r16,r3,r16
 508fbf8:	9c26983a 	sll	r19,r19,r16
 508fbfc:	9c62b03a 	or	r17,r19,r17
 508fc00:	8822c03a 	cmpne	r17,r17,zero
 508fc04:	88a2b03a 	or	r17,r17,r2
 508fc08:	000b883a 	mov	r5,zero
 508fc0c:	0021883a 	mov	r16,zero
 508fc10:	003fb406 	br	508fae4 <__alt_data_end+0xfffc18e4>
 508fc14:	18bff804 	addi	r2,r3,-32
 508fc18:	01000804 	movi	r4,32
 508fc1c:	4084d83a 	srl	r2,r8,r2
 508fc20:	19003f26 	beq	r3,r4,508fd20 <__adddf3+0x568>
 508fc24:	01001004 	movi	r4,64
 508fc28:	20c7c83a 	sub	r3,r4,r3
 508fc2c:	40d0983a 	sll	r8,r8,r3
 508fc30:	418cb03a 	or	r6,r8,r6
 508fc34:	300cc03a 	cmpne	r6,r6,zero
 508fc38:	308cb03a 	or	r6,r6,r2
 508fc3c:	0007883a 	mov	r3,zero
 508fc40:	003f3406 	br	508f914 <__alt_data_end+0xfffc1714>
 508fc44:	80002326 	beq	r16,zero,508fcd4 <__adddf3+0x51c>
 508fc48:	0101ffc4 	movi	r4,2047
 508fc4c:	11005e26 	beq	r2,r4,508fdc8 <__adddf3+0x610>
 508fc50:	00c7c83a 	sub	r3,zero,r3
 508fc54:	29402034 	orhi	r5,r5,128
 508fc58:	01000e04 	movi	r4,56
 508fc5c:	20c07216 	blt	r4,r3,508fe28 <__adddf3+0x670>
 508fc60:	010007c4 	movi	r4,31
 508fc64:	20c0ce16 	blt	r4,r3,508ffa0 <__adddf3+0x7e8>
 508fc68:	01000804 	movi	r4,32
 508fc6c:	20c9c83a 	sub	r4,r4,r3
 508fc70:	2914983a 	sll	r10,r5,r4
 508fc74:	88d2d83a 	srl	r9,r17,r3
 508fc78:	8908983a 	sll	r4,r17,r4
 508fc7c:	28c6d83a 	srl	r3,r5,r3
 508fc80:	5262b03a 	or	r17,r10,r9
 508fc84:	2008c03a 	cmpne	r4,r4,zero
 508fc88:	8922b03a 	or	r17,r17,r4
 508fc8c:	3463c83a 	sub	r17,r6,r17
 508fc90:	40c7c83a 	sub	r3,r8,r3
 508fc94:	344d803a 	cmpltu	r6,r6,r17
 508fc98:	198bc83a 	sub	r5,r3,r6
 508fc9c:	1021883a 	mov	r16,r2
 508fca0:	3825883a 	mov	r18,r7
 508fca4:	003f2006 	br	508f928 <__alt_data_end+0xfffc1728>
 508fca8:	9886b03a 	or	r3,r19,r2
 508fcac:	1800141e 	bne	r3,zero,508fd00 <__adddf3+0x548>
 508fcb0:	0007883a 	mov	r3,zero
 508fcb4:	000b883a 	mov	r5,zero
 508fcb8:	0023883a 	mov	r17,zero
 508fcbc:	0021883a 	mov	r16,zero
 508fcc0:	003f3c06 	br	508f9b4 <__alt_data_end+0xfffc17b4>
 508fcc4:	418cb03a 	or	r6,r8,r6
 508fcc8:	300cc03a 	cmpne	r6,r6,zero
 508fccc:	0011883a 	mov	r8,zero
 508fcd0:	003f5606 	br	508fa2c <__alt_data_end+0xfffc182c>
 508fcd4:	2c48b03a 	or	r4,r5,r17
 508fcd8:	20003b26 	beq	r4,zero,508fdc8 <__adddf3+0x610>
 508fcdc:	00c6303a 	nor	r3,zero,r3
 508fce0:	1800371e 	bne	r3,zero,508fdc0 <__adddf3+0x608>
 508fce4:	3463c83a 	sub	r17,r6,r17
 508fce8:	414bc83a 	sub	r5,r8,r5
 508fcec:	344d803a 	cmpltu	r6,r6,r17
 508fcf0:	298bc83a 	sub	r5,r5,r6
 508fcf4:	1021883a 	mov	r16,r2
 508fcf8:	3825883a 	mov	r18,r7
 508fcfc:	003f0a06 	br	508f928 <__alt_data_end+0xfffc1728>
 508fd00:	1023883a 	mov	r17,r2
 508fd04:	003f0d06 	br	508f93c <__alt_data_end+0xfffc173c>
 508fd08:	0007883a 	mov	r3,zero
 508fd0c:	000b883a 	mov	r5,zero
 508fd10:	0023883a 	mov	r17,zero
 508fd14:	003f2706 	br	508f9b4 <__alt_data_end+0xfffc17b4>
 508fd18:	0027883a 	mov	r19,zero
 508fd1c:	003fb706 	br	508fbfc <__alt_data_end+0xfffc19fc>
 508fd20:	0011883a 	mov	r8,zero
 508fd24:	003fc206 	br	508fc30 <__alt_data_end+0xfffc1a30>
 508fd28:	2c44b03a 	or	r2,r5,r17
 508fd2c:	8000871e 	bne	r16,zero,508ff4c <__adddf3+0x794>
 508fd30:	1000b126 	beq	r2,zero,508fff8 <__adddf3+0x840>
 508fd34:	4184b03a 	or	r2,r8,r6
 508fd38:	103ebe26 	beq	r2,zero,508f834 <__alt_data_end+0xfffc1634>
 508fd3c:	3445883a 	add	r2,r6,r17
 508fd40:	1463803a 	cmpltu	r17,r2,r17
 508fd44:	414b883a 	add	r5,r8,r5
 508fd48:	2c4b883a 	add	r5,r5,r17
 508fd4c:	28c0202c 	andhi	r3,r5,128
 508fd50:	1023883a 	mov	r17,r2
 508fd54:	183f6326 	beq	r3,zero,508fae4 <__alt_data_end+0xfffc18e4>
 508fd58:	00bfe034 	movhi	r2,65408
 508fd5c:	10bfffc4 	addi	r2,r2,-1
 508fd60:	2021883a 	mov	r16,r4
 508fd64:	288a703a 	and	r5,r5,r2
 508fd68:	003eb206 	br	508f834 <__alt_data_end+0xfffc1634>
 508fd6c:	2c44b03a 	or	r2,r5,r17
 508fd70:	8000251e 	bne	r16,zero,508fe08 <__adddf3+0x650>
 508fd74:	10004b1e 	bne	r2,zero,508fea4 <__adddf3+0x6ec>
 508fd78:	4184b03a 	or	r2,r8,r6
 508fd7c:	103fe226 	beq	r2,zero,508fd08 <__alt_data_end+0xfffc1b08>
 508fd80:	400b883a 	mov	r5,r8
 508fd84:	3023883a 	mov	r17,r6
 508fd88:	3825883a 	mov	r18,r7
 508fd8c:	003ea906 	br	508f834 <__alt_data_end+0xfffc1634>
 508fd90:	20bff804 	addi	r2,r4,-32
 508fd94:	01c00804 	movi	r7,32
 508fd98:	4084d83a 	srl	r2,r8,r2
 508fd9c:	21c07e26 	beq	r4,r7,508ff98 <__adddf3+0x7e0>
 508fda0:	01c01004 	movi	r7,64
 508fda4:	3909c83a 	sub	r4,r7,r4
 508fda8:	4110983a 	sll	r8,r8,r4
 508fdac:	418cb03a 	or	r6,r8,r6
 508fdb0:	300cc03a 	cmpne	r6,r6,zero
 508fdb4:	308cb03a 	or	r6,r6,r2
 508fdb8:	0011883a 	mov	r8,zero
 508fdbc:	003f1b06 	br	508fa2c <__alt_data_end+0xfffc182c>
 508fdc0:	0101ffc4 	movi	r4,2047
 508fdc4:	113fa41e 	bne	r2,r4,508fc58 <__alt_data_end+0xfffc1a58>
 508fdc8:	400b883a 	mov	r5,r8
 508fdcc:	3023883a 	mov	r17,r6
 508fdd0:	1021883a 	mov	r16,r2
 508fdd4:	3825883a 	mov	r18,r7
 508fdd8:	003e9606 	br	508f834 <__alt_data_end+0xfffc1634>
 508fddc:	80001a1e 	bne	r16,zero,508fe48 <__adddf3+0x690>
 508fde0:	2c4eb03a 	or	r7,r5,r17
 508fde4:	38005526 	beq	r7,zero,508ff3c <__adddf3+0x784>
 508fde8:	0108303a 	nor	r4,zero,r4
 508fdec:	2000511e 	bne	r4,zero,508ff34 <__adddf3+0x77c>
 508fdf0:	89a3883a 	add	r17,r17,r6
 508fdf4:	414b883a 	add	r5,r8,r5
 508fdf8:	898d803a 	cmpltu	r6,r17,r6
 508fdfc:	298b883a 	add	r5,r5,r6
 508fe00:	1021883a 	mov	r16,r2
 508fe04:	003f0e06 	br	508fa40 <__alt_data_end+0xfffc1840>
 508fe08:	1000341e 	bne	r2,zero,508fedc <__adddf3+0x724>
 508fe0c:	4184b03a 	or	r2,r8,r6
 508fe10:	10006f26 	beq	r2,zero,508ffd0 <__adddf3+0x818>
 508fe14:	400b883a 	mov	r5,r8
 508fe18:	3023883a 	mov	r17,r6
 508fe1c:	3825883a 	mov	r18,r7
 508fe20:	0401ffc4 	movi	r16,2047
 508fe24:	003e8306 	br	508f834 <__alt_data_end+0xfffc1634>
 508fe28:	2c62b03a 	or	r17,r5,r17
 508fe2c:	8822c03a 	cmpne	r17,r17,zero
 508fe30:	0007883a 	mov	r3,zero
 508fe34:	003f9506 	br	508fc8c <__alt_data_end+0xfffc1a8c>
 508fe38:	1021883a 	mov	r16,r2
 508fe3c:	000b883a 	mov	r5,zero
 508fe40:	0023883a 	mov	r17,zero
 508fe44:	003edb06 	br	508f9b4 <__alt_data_end+0xfffc17b4>
 508fe48:	01c1ffc4 	movi	r7,2047
 508fe4c:	11c03b26 	beq	r2,r7,508ff3c <__adddf3+0x784>
 508fe50:	0109c83a 	sub	r4,zero,r4
 508fe54:	29402034 	orhi	r5,r5,128
 508fe58:	01c00e04 	movi	r7,56
 508fe5c:	39006216 	blt	r7,r4,508ffe8 <__adddf3+0x830>
 508fe60:	01c007c4 	movi	r7,31
 508fe64:	39006b16 	blt	r7,r4,5090014 <__adddf3+0x85c>
 508fe68:	01c00804 	movi	r7,32
 508fe6c:	390fc83a 	sub	r7,r7,r4
 508fe70:	29d4983a 	sll	r10,r5,r7
 508fe74:	8912d83a 	srl	r9,r17,r4
 508fe78:	89ce983a 	sll	r7,r17,r7
 508fe7c:	2908d83a 	srl	r4,r5,r4
 508fe80:	5262b03a 	or	r17,r10,r9
 508fe84:	380ac03a 	cmpne	r5,r7,zero
 508fe88:	8962b03a 	or	r17,r17,r5
 508fe8c:	89a3883a 	add	r17,r17,r6
 508fe90:	2211883a 	add	r8,r4,r8
 508fe94:	898d803a 	cmpltu	r6,r17,r6
 508fe98:	418b883a 	add	r5,r8,r6
 508fe9c:	1021883a 	mov	r16,r2
 508fea0:	003ee706 	br	508fa40 <__alt_data_end+0xfffc1840>
 508fea4:	4184b03a 	or	r2,r8,r6
 508fea8:	103e6226 	beq	r2,zero,508f834 <__alt_data_end+0xfffc1634>
 508feac:	8987c83a 	sub	r3,r17,r6
 508feb0:	88c9803a 	cmpltu	r4,r17,r3
 508feb4:	2a05c83a 	sub	r2,r5,r8
 508feb8:	1105c83a 	sub	r2,r2,r4
 508febc:	1100202c 	andhi	r4,r2,128
 508fec0:	203f0426 	beq	r4,zero,508fad4 <__alt_data_end+0xfffc18d4>
 508fec4:	3463c83a 	sub	r17,r6,r17
 508fec8:	414bc83a 	sub	r5,r8,r5
 508fecc:	344d803a 	cmpltu	r6,r6,r17
 508fed0:	298bc83a 	sub	r5,r5,r6
 508fed4:	3825883a 	mov	r18,r7
 508fed8:	003e5606 	br	508f834 <__alt_data_end+0xfffc1634>
 508fedc:	4184b03a 	or	r2,r8,r6
 508fee0:	10002b26 	beq	r2,zero,508ff90 <__adddf3+0x7d8>
 508fee4:	2804d0fa 	srli	r2,r5,3
 508fee8:	8822d0fa 	srli	r17,r17,3
 508feec:	280a977a 	slli	r5,r5,29
 508fef0:	10c0022c 	andhi	r3,r2,8
 508fef4:	2c62b03a 	or	r17,r5,r17
 508fef8:	18000826 	beq	r3,zero,508ff1c <__adddf3+0x764>
 508fefc:	4008d0fa 	srli	r4,r8,3
 508ff00:	20c0022c 	andhi	r3,r4,8
 508ff04:	1800051e 	bne	r3,zero,508ff1c <__adddf3+0x764>
 508ff08:	300cd0fa 	srli	r6,r6,3
 508ff0c:	4010977a 	slli	r8,r8,29
 508ff10:	2005883a 	mov	r2,r4
 508ff14:	3825883a 	mov	r18,r7
 508ff18:	41a2b03a 	or	r17,r8,r6
 508ff1c:	880ad77a 	srli	r5,r17,29
 508ff20:	100490fa 	slli	r2,r2,3
 508ff24:	882290fa 	slli	r17,r17,3
 508ff28:	0401ffc4 	movi	r16,2047
 508ff2c:	288ab03a 	or	r5,r5,r2
 508ff30:	003e4006 	br	508f834 <__alt_data_end+0xfffc1634>
 508ff34:	01c1ffc4 	movi	r7,2047
 508ff38:	11ffc71e 	bne	r2,r7,508fe58 <__alt_data_end+0xfffc1c58>
 508ff3c:	400b883a 	mov	r5,r8
 508ff40:	3023883a 	mov	r17,r6
 508ff44:	1021883a 	mov	r16,r2
 508ff48:	003e3a06 	br	508f834 <__alt_data_end+0xfffc1634>
 508ff4c:	10002d26 	beq	r2,zero,5090004 <__adddf3+0x84c>
 508ff50:	4184b03a 	or	r2,r8,r6
 508ff54:	10000e26 	beq	r2,zero,508ff90 <__adddf3+0x7d8>
 508ff58:	2804d0fa 	srli	r2,r5,3
 508ff5c:	8822d0fa 	srli	r17,r17,3
 508ff60:	280a977a 	slli	r5,r5,29
 508ff64:	10c0022c 	andhi	r3,r2,8
 508ff68:	2c62b03a 	or	r17,r5,r17
 508ff6c:	183feb26 	beq	r3,zero,508ff1c <__alt_data_end+0xfffc1d1c>
 508ff70:	4008d0fa 	srli	r4,r8,3
 508ff74:	20c0022c 	andhi	r3,r4,8
 508ff78:	183fe81e 	bne	r3,zero,508ff1c <__alt_data_end+0xfffc1d1c>
 508ff7c:	300cd0fa 	srli	r6,r6,3
 508ff80:	4010977a 	slli	r8,r8,29
 508ff84:	2005883a 	mov	r2,r4
 508ff88:	41a2b03a 	or	r17,r8,r6
 508ff8c:	003fe306 	br	508ff1c <__alt_data_end+0xfffc1d1c>
 508ff90:	0401ffc4 	movi	r16,2047
 508ff94:	003e2706 	br	508f834 <__alt_data_end+0xfffc1634>
 508ff98:	0011883a 	mov	r8,zero
 508ff9c:	003f8306 	br	508fdac <__alt_data_end+0xfffc1bac>
 508ffa0:	193ff804 	addi	r4,r3,-32
 508ffa4:	02400804 	movi	r9,32
 508ffa8:	2908d83a 	srl	r4,r5,r4
 508ffac:	1a402526 	beq	r3,r9,5090044 <__adddf3+0x88c>
 508ffb0:	02401004 	movi	r9,64
 508ffb4:	48c7c83a 	sub	r3,r9,r3
 508ffb8:	28ca983a 	sll	r5,r5,r3
 508ffbc:	2c62b03a 	or	r17,r5,r17
 508ffc0:	8822c03a 	cmpne	r17,r17,zero
 508ffc4:	8922b03a 	or	r17,r17,r4
 508ffc8:	0007883a 	mov	r3,zero
 508ffcc:	003f2f06 	br	508fc8c <__alt_data_end+0xfffc1a8c>
 508ffd0:	01402034 	movhi	r5,128
 508ffd4:	0007883a 	mov	r3,zero
 508ffd8:	297fffc4 	addi	r5,r5,-1
 508ffdc:	047ffe04 	movi	r17,-8
 508ffe0:	0401ffc4 	movi	r16,2047
 508ffe4:	003e7306 	br	508f9b4 <__alt_data_end+0xfffc17b4>
 508ffe8:	2c62b03a 	or	r17,r5,r17
 508ffec:	8822c03a 	cmpne	r17,r17,zero
 508fff0:	0009883a 	mov	r4,zero
 508fff4:	003fa506 	br	508fe8c <__alt_data_end+0xfffc1c8c>
 508fff8:	400b883a 	mov	r5,r8
 508fffc:	3023883a 	mov	r17,r6
 5090000:	003e0c06 	br	508f834 <__alt_data_end+0xfffc1634>
 5090004:	400b883a 	mov	r5,r8
 5090008:	3023883a 	mov	r17,r6
 509000c:	0401ffc4 	movi	r16,2047
 5090010:	003e0806 	br	508f834 <__alt_data_end+0xfffc1634>
 5090014:	21fff804 	addi	r7,r4,-32
 5090018:	02400804 	movi	r9,32
 509001c:	29ced83a 	srl	r7,r5,r7
 5090020:	22400a26 	beq	r4,r9,509004c <__adddf3+0x894>
 5090024:	02401004 	movi	r9,64
 5090028:	4909c83a 	sub	r4,r9,r4
 509002c:	290a983a 	sll	r5,r5,r4
 5090030:	2c62b03a 	or	r17,r5,r17
 5090034:	8822c03a 	cmpne	r17,r17,zero
 5090038:	89e2b03a 	or	r17,r17,r7
 509003c:	0009883a 	mov	r4,zero
 5090040:	003f9206 	br	508fe8c <__alt_data_end+0xfffc1c8c>
 5090044:	000b883a 	mov	r5,zero
 5090048:	003fdc06 	br	508ffbc <__alt_data_end+0xfffc1dbc>
 509004c:	000b883a 	mov	r5,zero
 5090050:	003ff706 	br	5090030 <__alt_data_end+0xfffc1e30>

05090054 <__divdf3>:
 5090054:	defff204 	addi	sp,sp,-56
 5090058:	dd000815 	stw	r20,32(sp)
 509005c:	2828d53a 	srli	r20,r5,20
 5090060:	dd800a15 	stw	r22,40(sp)
 5090064:	282cd7fa 	srli	r22,r5,31
 5090068:	dc000415 	stw	r16,16(sp)
 509006c:	04000434 	movhi	r16,16
 5090070:	df000c15 	stw	fp,48(sp)
 5090074:	dcc00715 	stw	r19,28(sp)
 5090078:	dc800615 	stw	r18,24(sp)
 509007c:	dc400515 	stw	r17,20(sp)
 5090080:	843fffc4 	addi	r16,r16,-1
 5090084:	dfc00d15 	stw	ra,52(sp)
 5090088:	ddc00b15 	stw	r23,44(sp)
 509008c:	dd400915 	stw	r21,36(sp)
 5090090:	a501ffcc 	andi	r20,r20,2047
 5090094:	2025883a 	mov	r18,r4
 5090098:	2027883a 	mov	r19,r4
 509009c:	2c22703a 	and	r17,r5,r16
 50900a0:	b7003fcc 	andi	fp,r22,255
 50900a4:	a0005e26 	beq	r20,zero,5090220 <__divdf3+0x1cc>
 50900a8:	0081ffc4 	movi	r2,2047
 50900ac:	a0803526 	beq	r20,r2,5090184 <__divdf3+0x130>
 50900b0:	8c000434 	orhi	r16,r17,16
 50900b4:	2004d77a 	srli	r2,r4,29
 50900b8:	802090fa 	slli	r16,r16,3
 50900bc:	202690fa 	slli	r19,r4,3
 50900c0:	a53f0044 	addi	r20,r20,-1023
 50900c4:	80a2b03a 	or	r17,r16,r2
 50900c8:	0025883a 	mov	r18,zero
 50900cc:	0011883a 	mov	r8,zero
 50900d0:	380ad53a 	srli	r5,r7,20
 50900d4:	382ed7fa 	srli	r23,r7,31
 50900d8:	04000434 	movhi	r16,16
 50900dc:	843fffc4 	addi	r16,r16,-1
 50900e0:	2941ffcc 	andi	r5,r5,2047
 50900e4:	302b883a 	mov	r21,r6
 50900e8:	3c20703a 	and	r16,r7,r16
 50900ec:	ba403fcc 	andi	r9,r23,255
 50900f0:	28006726 	beq	r5,zero,5090290 <__divdf3+0x23c>
 50900f4:	0081ffc4 	movi	r2,2047
 50900f8:	28805f26 	beq	r5,r2,5090278 <__divdf3+0x224>
 50900fc:	84000434 	orhi	r16,r16,16
 5090100:	3004d77a 	srli	r2,r6,29
 5090104:	802090fa 	slli	r16,r16,3
 5090108:	302a90fa 	slli	r21,r6,3
 509010c:	297f0044 	addi	r5,r5,-1023
 5090110:	80a0b03a 	or	r16,r16,r2
 5090114:	000f883a 	mov	r7,zero
 5090118:	3c86b03a 	or	r3,r7,r18
 509011c:	180690ba 	slli	r3,r3,2
 5090120:	00814274 	movhi	r2,1289
 5090124:	10805104 	addi	r2,r2,324
 5090128:	1887883a 	add	r3,r3,r2
 509012c:	18c00017 	ldw	r3,0(r3)
 5090130:	b5c8f03a 	xor	r4,r22,r23
 5090134:	200d883a 	mov	r6,r4
 5090138:	24803fcc 	andi	r18,r4,255
 509013c:	a169c83a 	sub	r20,r20,r5
 5090140:	1800683a 	jmp	r3
 5090144:	0509038c 	andi	r20,zero,9230
 5090148:	050901bc 	xorhi	r20,zero,9222
 509014c:	05090350 	cmplti	r20,zero,9229
 5090150:	050901a0 	cmpeqi	r20,zero,9222
 5090154:	05090350 	cmplti	r20,zero,9229
 5090158:	05090324 	muli	r20,zero,9228
 509015c:	05090350 	cmplti	r20,zero,9229
 5090160:	050901a0 	cmpeqi	r20,zero,9222
 5090164:	050901bc 	xorhi	r20,zero,9222
 5090168:	050901bc 	xorhi	r20,zero,9222
 509016c:	05090324 	muli	r20,zero,9228
 5090170:	050901a0 	cmpeqi	r20,zero,9222
 5090174:	050901b0 	cmpltui	r20,zero,9222
 5090178:	050901b0 	cmpltui	r20,zero,9222
 509017c:	050901b0 	cmpltui	r20,zero,9222
 5090180:	05090360 	cmpeqi	r20,zero,9229
 5090184:	8904b03a 	or	r2,r17,r4
 5090188:	1000631e 	bne	r2,zero,5090318 <__divdf3+0x2c4>
 509018c:	04800204 	movi	r18,8
 5090190:	0023883a 	mov	r17,zero
 5090194:	0027883a 	mov	r19,zero
 5090198:	02000084 	movi	r8,2
 509019c:	003fcc06 	br	50900d0 <__alt_data_end+0xfffc1ed0>
 50901a0:	8023883a 	mov	r17,r16
 50901a4:	a827883a 	mov	r19,r21
 50901a8:	4839883a 	mov	fp,r9
 50901ac:	3811883a 	mov	r8,r7
 50901b0:	00800084 	movi	r2,2
 50901b4:	40812a1e 	bne	r8,r2,5090660 <__divdf3+0x60c>
 50901b8:	e025883a 	mov	r18,fp
 50901bc:	9180004c 	andi	r6,r18,1
 50901c0:	0101ffc4 	movi	r4,2047
 50901c4:	000b883a 	mov	r5,zero
 50901c8:	0027883a 	mov	r19,zero
 50901cc:	2008953a 	slli	r4,r4,20
 50901d0:	30c03fcc 	andi	r3,r6,255
 50901d4:	04000434 	movhi	r16,16
 50901d8:	180697fa 	slli	r3,r3,31
 50901dc:	843fffc4 	addi	r16,r16,-1
 50901e0:	2c20703a 	and	r16,r5,r16
 50901e4:	8120b03a 	or	r16,r16,r4
 50901e8:	80c6b03a 	or	r3,r16,r3
 50901ec:	9805883a 	mov	r2,r19
 50901f0:	dfc00d17 	ldw	ra,52(sp)
 50901f4:	df000c17 	ldw	fp,48(sp)
 50901f8:	ddc00b17 	ldw	r23,44(sp)
 50901fc:	dd800a17 	ldw	r22,40(sp)
 5090200:	dd400917 	ldw	r21,36(sp)
 5090204:	dd000817 	ldw	r20,32(sp)
 5090208:	dcc00717 	ldw	r19,28(sp)
 509020c:	dc800617 	ldw	r18,24(sp)
 5090210:	dc400517 	ldw	r17,20(sp)
 5090214:	dc000417 	ldw	r16,16(sp)
 5090218:	dec00e04 	addi	sp,sp,56
 509021c:	f800283a 	ret
 5090220:	8904b03a 	or	r2,r17,r4
 5090224:	10003726 	beq	r2,zero,5090304 <__divdf3+0x2b0>
 5090228:	88011c26 	beq	r17,zero,509069c <__divdf3+0x648>
 509022c:	8809883a 	mov	r4,r17
 5090230:	d9800315 	stw	r6,12(sp)
 5090234:	d9c00115 	stw	r7,4(sp)
 5090238:	5091d540 	call	5091d54 <__clzsi2>
 509023c:	d9800317 	ldw	r6,12(sp)
 5090240:	d9c00117 	ldw	r7,4(sp)
 5090244:	1007883a 	mov	r3,r2
 5090248:	01000a04 	movi	r4,40
 509024c:	1cfffe04 	addi	r19,r3,-8
 5090250:	20c9c83a 	sub	r4,r4,r3
 5090254:	8cca983a 	sll	r5,r17,r19
 5090258:	9108d83a 	srl	r4,r18,r4
 509025c:	94e6983a 	sll	r19,r18,r19
 5090260:	2162b03a 	or	r17,r4,r5
 5090264:	053f0344 	movi	r20,-1011
 5090268:	a0e9c83a 	sub	r20,r20,r3
 509026c:	0025883a 	mov	r18,zero
 5090270:	0011883a 	mov	r8,zero
 5090274:	003f9606 	br	50900d0 <__alt_data_end+0xfffc1ed0>
 5090278:	8184b03a 	or	r2,r16,r6
 509027c:	10001f1e 	bne	r2,zero,50902fc <__divdf3+0x2a8>
 5090280:	0021883a 	mov	r16,zero
 5090284:	002b883a 	mov	r21,zero
 5090288:	01c00084 	movi	r7,2
 509028c:	003fa206 	br	5090118 <__alt_data_end+0xfffc1f18>
 5090290:	8184b03a 	or	r2,r16,r6
 5090294:	10001526 	beq	r2,zero,50902ec <__divdf3+0x298>
 5090298:	80010c26 	beq	r16,zero,50906cc <__divdf3+0x678>
 509029c:	8009883a 	mov	r4,r16
 50902a0:	d9800315 	stw	r6,12(sp)
 50902a4:	da000215 	stw	r8,8(sp)
 50902a8:	da400015 	stw	r9,0(sp)
 50902ac:	5091d540 	call	5091d54 <__clzsi2>
 50902b0:	d9800317 	ldw	r6,12(sp)
 50902b4:	da000217 	ldw	r8,8(sp)
 50902b8:	da400017 	ldw	r9,0(sp)
 50902bc:	1007883a 	mov	r3,r2
 50902c0:	01000a04 	movi	r4,40
 50902c4:	1d7ffe04 	addi	r21,r3,-8
 50902c8:	20c9c83a 	sub	r4,r4,r3
 50902cc:	8560983a 	sll	r16,r16,r21
 50902d0:	3108d83a 	srl	r4,r6,r4
 50902d4:	356a983a 	sll	r21,r6,r21
 50902d8:	2420b03a 	or	r16,r4,r16
 50902dc:	017f0344 	movi	r5,-1011
 50902e0:	28cbc83a 	sub	r5,r5,r3
 50902e4:	000f883a 	mov	r7,zero
 50902e8:	003f8b06 	br	5090118 <__alt_data_end+0xfffc1f18>
 50902ec:	0021883a 	mov	r16,zero
 50902f0:	002b883a 	mov	r21,zero
 50902f4:	01c00044 	movi	r7,1
 50902f8:	003f8706 	br	5090118 <__alt_data_end+0xfffc1f18>
 50902fc:	01c000c4 	movi	r7,3
 5090300:	003f8506 	br	5090118 <__alt_data_end+0xfffc1f18>
 5090304:	04800104 	movi	r18,4
 5090308:	0023883a 	mov	r17,zero
 509030c:	0027883a 	mov	r19,zero
 5090310:	02000044 	movi	r8,1
 5090314:	003f6e06 	br	50900d0 <__alt_data_end+0xfffc1ed0>
 5090318:	04800304 	movi	r18,12
 509031c:	020000c4 	movi	r8,3
 5090320:	003f6b06 	br	50900d0 <__alt_data_end+0xfffc1ed0>
 5090324:	01400434 	movhi	r5,16
 5090328:	000d883a 	mov	r6,zero
 509032c:	297fffc4 	addi	r5,r5,-1
 5090330:	04ffffc4 	movi	r19,-1
 5090334:	0101ffc4 	movi	r4,2047
 5090338:	003fa406 	br	50901cc <__alt_data_end+0xfffc1fcc>
 509033c:	043f0084 	movi	r16,-1022
 5090340:	8521c83a 	sub	r16,r16,r20
 5090344:	00800e04 	movi	r2,56
 5090348:	1401200e 	bge	r2,r16,50907cc <__divdf3+0x778>
 509034c:	9180004c 	andi	r6,r18,1
 5090350:	0009883a 	mov	r4,zero
 5090354:	000b883a 	mov	r5,zero
 5090358:	0027883a 	mov	r19,zero
 509035c:	003f9b06 	br	50901cc <__alt_data_end+0xfffc1fcc>
 5090360:	8880022c 	andhi	r2,r17,8
 5090364:	1000c726 	beq	r2,zero,5090684 <__divdf3+0x630>
 5090368:	8080022c 	andhi	r2,r16,8
 509036c:	1000c51e 	bne	r2,zero,5090684 <__divdf3+0x630>
 5090370:	00800434 	movhi	r2,16
 5090374:	81400234 	orhi	r5,r16,8
 5090378:	10bfffc4 	addi	r2,r2,-1
 509037c:	b80d883a 	mov	r6,r23
 5090380:	288a703a 	and	r5,r5,r2
 5090384:	a827883a 	mov	r19,r21
 5090388:	003fea06 	br	5090334 <__alt_data_end+0xfffc2134>
 509038c:	8440ea36 	bltu	r16,r17,5090738 <__divdf3+0x6e4>
 5090390:	8c00e826 	beq	r17,r16,5090734 <__divdf3+0x6e0>
 5090394:	a53fffc4 	addi	r20,r20,-1
 5090398:	882d883a 	mov	r22,r17
 509039c:	000d883a 	mov	r6,zero
 50903a0:	a804d63a 	srli	r2,r21,24
 50903a4:	8020923a 	slli	r16,r16,8
 50903a8:	b009883a 	mov	r4,r22
 50903ac:	d9800315 	stw	r6,12(sp)
 50903b0:	1420b03a 	or	r16,r2,r16
 50903b4:	802ed43a 	srli	r23,r16,16
 50903b8:	873fffcc 	andi	fp,r16,65535
 50903bc:	a82a923a 	slli	r21,r21,8
 50903c0:	b80b883a 	mov	r5,r23
 50903c4:	50827c00 	call	50827c0 <__udivsi3>
 50903c8:	b009883a 	mov	r4,r22
 50903cc:	b80b883a 	mov	r5,r23
 50903d0:	1023883a 	mov	r17,r2
 50903d4:	50827c80 	call	50827c8 <__umodsi3>
 50903d8:	1004943a 	slli	r2,r2,16
 50903dc:	9808d43a 	srli	r4,r19,16
 50903e0:	8f2d383a 	mul	r22,r17,fp
 50903e4:	d9800317 	ldw	r6,12(sp)
 50903e8:	1106b03a 	or	r3,r2,r4
 50903ec:	1d80062e 	bgeu	r3,r22,5090408 <__divdf3+0x3b4>
 50903f0:	1c07883a 	add	r3,r3,r16
 50903f4:	88bfffc4 	addi	r2,r17,-1
 50903f8:	1c00dc36 	bltu	r3,r16,509076c <__divdf3+0x718>
 50903fc:	1d80db2e 	bgeu	r3,r22,509076c <__divdf3+0x718>
 5090400:	8c7fff84 	addi	r17,r17,-2
 5090404:	1c07883a 	add	r3,r3,r16
 5090408:	1dadc83a 	sub	r22,r3,r22
 509040c:	b009883a 	mov	r4,r22
 5090410:	b80b883a 	mov	r5,r23
 5090414:	d9800315 	stw	r6,12(sp)
 5090418:	50827c00 	call	50827c0 <__udivsi3>
 509041c:	b009883a 	mov	r4,r22
 5090420:	b80b883a 	mov	r5,r23
 5090424:	d8800015 	stw	r2,0(sp)
 5090428:	50827c80 	call	50827c8 <__umodsi3>
 509042c:	da400017 	ldw	r9,0(sp)
 5090430:	1004943a 	slli	r2,r2,16
 5090434:	9cffffcc 	andi	r19,r19,65535
 5090438:	4f07383a 	mul	r3,r9,fp
 509043c:	14c8b03a 	or	r4,r2,r19
 5090440:	d9800317 	ldw	r6,12(sp)
 5090444:	20c0062e 	bgeu	r4,r3,5090460 <__divdf3+0x40c>
 5090448:	2409883a 	add	r4,r4,r16
 509044c:	48bfffc4 	addi	r2,r9,-1
 5090450:	2400c436 	bltu	r4,r16,5090764 <__divdf3+0x710>
 5090454:	20c0c32e 	bgeu	r4,r3,5090764 <__divdf3+0x710>
 5090458:	4a7fff84 	addi	r9,r9,-2
 509045c:	2409883a 	add	r4,r4,r16
 5090460:	8822943a 	slli	r17,r17,16
 5090464:	a80ed43a 	srli	r7,r21,16
 5090468:	aa3fffcc 	andi	r8,r21,65535
 509046c:	4c62b03a 	or	r17,r9,r17
 5090470:	8816d43a 	srli	r11,r17,16
 5090474:	897fffcc 	andi	r5,r17,65535
 5090478:	2a15383a 	mul	r10,r5,r8
 509047c:	5a19383a 	mul	r12,r11,r8
 5090480:	29cb383a 	mul	r5,r5,r7
 5090484:	5012d43a 	srli	r9,r10,16
 5090488:	20c5c83a 	sub	r2,r4,r3
 509048c:	614b883a 	add	r5,r12,r5
 5090490:	2a4b883a 	add	r5,r5,r9
 5090494:	59c7383a 	mul	r3,r11,r7
 5090498:	2b00022e 	bgeu	r5,r12,50904a4 <__divdf3+0x450>
 509049c:	01000074 	movhi	r4,1
 50904a0:	1907883a 	add	r3,r3,r4
 50904a4:	2808d43a 	srli	r4,r5,16
 50904a8:	280a943a 	slli	r5,r5,16
 50904ac:	54ffffcc 	andi	r19,r10,65535
 50904b0:	1907883a 	add	r3,r3,r4
 50904b4:	2ccb883a 	add	r5,r5,r19
 50904b8:	10c09336 	bltu	r2,r3,5090708 <__divdf3+0x6b4>
 50904bc:	10c0ad26 	beq	r2,r3,5090774 <__divdf3+0x720>
 50904c0:	10c7c83a 	sub	r3,r2,r3
 50904c4:	3167c83a 	sub	r19,r6,r5
 50904c8:	34ed803a 	cmpltu	r22,r6,r19
 50904cc:	1dadc83a 	sub	r22,r3,r22
 50904d0:	b400b226 	beq	r22,r16,509079c <__divdf3+0x748>
 50904d4:	b009883a 	mov	r4,r22
 50904d8:	b80b883a 	mov	r5,r23
 50904dc:	d9c00115 	stw	r7,4(sp)
 50904e0:	da000215 	stw	r8,8(sp)
 50904e4:	50827c00 	call	50827c0 <__udivsi3>
 50904e8:	b009883a 	mov	r4,r22
 50904ec:	b80b883a 	mov	r5,r23
 50904f0:	d8800315 	stw	r2,12(sp)
 50904f4:	50827c80 	call	50827c8 <__umodsi3>
 50904f8:	d9800317 	ldw	r6,12(sp)
 50904fc:	1004943a 	slli	r2,r2,16
 5090500:	9808d43a 	srli	r4,r19,16
 5090504:	372d383a 	mul	r22,r6,fp
 5090508:	d9c00117 	ldw	r7,4(sp)
 509050c:	1106b03a 	or	r3,r2,r4
 5090510:	da000217 	ldw	r8,8(sp)
 5090514:	1d80062e 	bgeu	r3,r22,5090530 <__divdf3+0x4dc>
 5090518:	1c07883a 	add	r3,r3,r16
 509051c:	30bfffc4 	addi	r2,r6,-1
 5090520:	1c00a036 	bltu	r3,r16,50907a4 <__divdf3+0x750>
 5090524:	1d809f2e 	bgeu	r3,r22,50907a4 <__divdf3+0x750>
 5090528:	31bfff84 	addi	r6,r6,-2
 509052c:	1c07883a 	add	r3,r3,r16
 5090530:	1dadc83a 	sub	r22,r3,r22
 5090534:	b009883a 	mov	r4,r22
 5090538:	b80b883a 	mov	r5,r23
 509053c:	d9800315 	stw	r6,12(sp)
 5090540:	d9c00115 	stw	r7,4(sp)
 5090544:	da000215 	stw	r8,8(sp)
 5090548:	50827c00 	call	50827c0 <__udivsi3>
 509054c:	b009883a 	mov	r4,r22
 5090550:	b80b883a 	mov	r5,r23
 5090554:	d8800015 	stw	r2,0(sp)
 5090558:	50827c80 	call	50827c8 <__umodsi3>
 509055c:	da400017 	ldw	r9,0(sp)
 5090560:	1004943a 	slli	r2,r2,16
 5090564:	993fffcc 	andi	r4,r19,65535
 5090568:	4f39383a 	mul	fp,r9,fp
 509056c:	1106b03a 	or	r3,r2,r4
 5090570:	d9800317 	ldw	r6,12(sp)
 5090574:	d9c00117 	ldw	r7,4(sp)
 5090578:	da000217 	ldw	r8,8(sp)
 509057c:	1f00062e 	bgeu	r3,fp,5090598 <__divdf3+0x544>
 5090580:	1c07883a 	add	r3,r3,r16
 5090584:	48bfffc4 	addi	r2,r9,-1
 5090588:	1c008836 	bltu	r3,r16,50907ac <__divdf3+0x758>
 509058c:	1f00872e 	bgeu	r3,fp,50907ac <__divdf3+0x758>
 5090590:	4a7fff84 	addi	r9,r9,-2
 5090594:	1c07883a 	add	r3,r3,r16
 5090598:	3008943a 	slli	r4,r6,16
 509059c:	1f07c83a 	sub	r3,r3,fp
 50905a0:	4926b03a 	or	r19,r9,r4
 50905a4:	993fffcc 	andi	r4,r19,65535
 50905a8:	980cd43a 	srli	r6,r19,16
 50905ac:	220b383a 	mul	r5,r4,r8
 50905b0:	21c5383a 	mul	r2,r4,r7
 50905b4:	3211383a 	mul	r8,r6,r8
 50905b8:	2808d43a 	srli	r4,r5,16
 50905bc:	31cf383a 	mul	r7,r6,r7
 50905c0:	4085883a 	add	r2,r8,r2
 50905c4:	1105883a 	add	r2,r2,r4
 50905c8:	1200022e 	bgeu	r2,r8,50905d4 <__divdf3+0x580>
 50905cc:	01000074 	movhi	r4,1
 50905d0:	390f883a 	add	r7,r7,r4
 50905d4:	1008d43a 	srli	r4,r2,16
 50905d8:	1004943a 	slli	r2,r2,16
 50905dc:	297fffcc 	andi	r5,r5,65535
 50905e0:	390f883a 	add	r7,r7,r4
 50905e4:	1145883a 	add	r2,r2,r5
 50905e8:	19c06536 	bltu	r3,r7,5090780 <__divdf3+0x72c>
 50905ec:	19c09f26 	beq	r3,r7,509086c <__divdf3+0x818>
 50905f0:	9cc00054 	ori	r19,r19,1
 50905f4:	a100ffc4 	addi	r4,r20,1023
 50905f8:	013f500e 	bge	zero,r4,509033c <__alt_data_end+0xfffc213c>
 50905fc:	988001cc 	andi	r2,r19,7
 5090600:	10000726 	beq	r2,zero,5090620 <__divdf3+0x5cc>
 5090604:	98c003cc 	andi	r3,r19,15
 5090608:	00800104 	movi	r2,4
 509060c:	18800426 	beq	r3,r2,5090620 <__divdf3+0x5cc>
 5090610:	9885883a 	add	r2,r19,r2
 5090614:	14e1803a 	cmpltu	r16,r2,r19
 5090618:	8c23883a 	add	r17,r17,r16
 509061c:	1027883a 	mov	r19,r2
 5090620:	8880402c 	andhi	r2,r17,256
 5090624:	10000426 	beq	r2,zero,5090638 <__divdf3+0x5e4>
 5090628:	00bfc034 	movhi	r2,65280
 509062c:	10bfffc4 	addi	r2,r2,-1
 5090630:	a1010004 	addi	r4,r20,1024
 5090634:	88a2703a 	and	r17,r17,r2
 5090638:	0081ff84 	movi	r2,2046
 509063c:	113edf16 	blt	r2,r4,50901bc <__alt_data_end+0xfffc1fbc>
 5090640:	9826d0fa 	srli	r19,r19,3
 5090644:	8804977a 	slli	r2,r17,29
 5090648:	8820927a 	slli	r16,r17,9
 509064c:	2101ffcc 	andi	r4,r4,2047
 5090650:	14e6b03a 	or	r19,r2,r19
 5090654:	800ad33a 	srli	r5,r16,12
 5090658:	9180004c 	andi	r6,r18,1
 509065c:	003edb06 	br	50901cc <__alt_data_end+0xfffc1fcc>
 5090660:	008000c4 	movi	r2,3
 5090664:	4080a826 	beq	r8,r2,5090908 <__divdf3+0x8b4>
 5090668:	00800044 	movi	r2,1
 509066c:	4080551e 	bne	r8,r2,50907c4 <__divdf3+0x770>
 5090670:	e00d883a 	mov	r6,fp
 5090674:	0009883a 	mov	r4,zero
 5090678:	000b883a 	mov	r5,zero
 509067c:	0027883a 	mov	r19,zero
 5090680:	003ed206 	br	50901cc <__alt_data_end+0xfffc1fcc>
 5090684:	00800434 	movhi	r2,16
 5090688:	89400234 	orhi	r5,r17,8
 509068c:	10bfffc4 	addi	r2,r2,-1
 5090690:	b00d883a 	mov	r6,r22
 5090694:	288a703a 	and	r5,r5,r2
 5090698:	003f2606 	br	5090334 <__alt_data_end+0xfffc2134>
 509069c:	d9800315 	stw	r6,12(sp)
 50906a0:	d9c00115 	stw	r7,4(sp)
 50906a4:	5091d540 	call	5091d54 <__clzsi2>
 50906a8:	10c00804 	addi	r3,r2,32
 50906ac:	010009c4 	movi	r4,39
 50906b0:	d9800317 	ldw	r6,12(sp)
 50906b4:	d9c00117 	ldw	r7,4(sp)
 50906b8:	20fee30e 	bge	r4,r3,5090248 <__alt_data_end+0xfffc2048>
 50906bc:	117ffe04 	addi	r5,r2,-8
 50906c0:	9162983a 	sll	r17,r18,r5
 50906c4:	0027883a 	mov	r19,zero
 50906c8:	003ee606 	br	5090264 <__alt_data_end+0xfffc2064>
 50906cc:	3009883a 	mov	r4,r6
 50906d0:	d9800315 	stw	r6,12(sp)
 50906d4:	da000215 	stw	r8,8(sp)
 50906d8:	da400015 	stw	r9,0(sp)
 50906dc:	5091d540 	call	5091d54 <__clzsi2>
 50906e0:	10c00804 	addi	r3,r2,32
 50906e4:	010009c4 	movi	r4,39
 50906e8:	d9800317 	ldw	r6,12(sp)
 50906ec:	da000217 	ldw	r8,8(sp)
 50906f0:	da400017 	ldw	r9,0(sp)
 50906f4:	20fef20e 	bge	r4,r3,50902c0 <__alt_data_end+0xfffc20c0>
 50906f8:	10bffe04 	addi	r2,r2,-8
 50906fc:	a8a0983a 	sll	r16,r21,r2
 5090700:	002b883a 	mov	r21,zero
 5090704:	003ef506 	br	50902dc <__alt_data_end+0xfffc20dc>
 5090708:	354d883a 	add	r6,r6,r21
 509070c:	3549803a 	cmpltu	r4,r6,r21
 5090710:	2409883a 	add	r4,r4,r16
 5090714:	2089883a 	add	r4,r4,r2
 5090718:	88bfffc4 	addi	r2,r17,-1
 509071c:	81000c2e 	bgeu	r16,r4,5090750 <__divdf3+0x6fc>
 5090720:	20c04436 	bltu	r4,r3,5090834 <__divdf3+0x7e0>
 5090724:	19006f26 	beq	r3,r4,50908e4 <__divdf3+0x890>
 5090728:	20c7c83a 	sub	r3,r4,r3
 509072c:	1023883a 	mov	r17,r2
 5090730:	003f6406 	br	50904c4 <__alt_data_end+0xfffc22c4>
 5090734:	9d7f1736 	bltu	r19,r21,5090394 <__alt_data_end+0xfffc2194>
 5090738:	9806d07a 	srli	r3,r19,1
 509073c:	880497fa 	slli	r2,r17,31
 5090740:	980c97fa 	slli	r6,r19,31
 5090744:	882cd07a 	srli	r22,r17,1
 5090748:	18a6b03a 	or	r19,r3,r2
 509074c:	003f1406 	br	50903a0 <__alt_data_end+0xfffc21a0>
 5090750:	243ff51e 	bne	r4,r16,5090728 <__alt_data_end+0xfffc2528>
 5090754:	357ff22e 	bgeu	r6,r21,5090720 <__alt_data_end+0xfffc2520>
 5090758:	80c7c83a 	sub	r3,r16,r3
 509075c:	1023883a 	mov	r17,r2
 5090760:	003f5806 	br	50904c4 <__alt_data_end+0xfffc22c4>
 5090764:	1013883a 	mov	r9,r2
 5090768:	003f3d06 	br	5090460 <__alt_data_end+0xfffc2260>
 509076c:	1023883a 	mov	r17,r2
 5090770:	003f2506 	br	5090408 <__alt_data_end+0xfffc2208>
 5090774:	317fe436 	bltu	r6,r5,5090708 <__alt_data_end+0xfffc2508>
 5090778:	0007883a 	mov	r3,zero
 509077c:	003f5106 	br	50904c4 <__alt_data_end+0xfffc22c4>
 5090780:	1c07883a 	add	r3,r3,r16
 5090784:	993fffc4 	addi	r4,r19,-1
 5090788:	1c000a2e 	bgeu	r3,r16,50907b4 <__divdf3+0x760>
 509078c:	2027883a 	mov	r19,r4
 5090790:	19ff971e 	bne	r3,r7,50905f0 <__alt_data_end+0xfffc23f0>
 5090794:	a8bf961e 	bne	r21,r2,50905f0 <__alt_data_end+0xfffc23f0>
 5090798:	003f9606 	br	50905f4 <__alt_data_end+0xfffc23f4>
 509079c:	04ffffc4 	movi	r19,-1
 50907a0:	003f9406 	br	50905f4 <__alt_data_end+0xfffc23f4>
 50907a4:	100d883a 	mov	r6,r2
 50907a8:	003f6106 	br	5090530 <__alt_data_end+0xfffc2330>
 50907ac:	1013883a 	mov	r9,r2
 50907b0:	003f7906 	br	5090598 <__alt_data_end+0xfffc2398>
 50907b4:	19c02636 	bltu	r3,r7,5090850 <__divdf3+0x7fc>
 50907b8:	38c04d26 	beq	r7,r3,50908f0 <__divdf3+0x89c>
 50907bc:	2027883a 	mov	r19,r4
 50907c0:	003f8b06 	br	50905f0 <__alt_data_end+0xfffc23f0>
 50907c4:	e025883a 	mov	r18,fp
 50907c8:	003f8a06 	br	50905f4 <__alt_data_end+0xfffc23f4>
 50907cc:	008007c4 	movi	r2,31
 50907d0:	14002a16 	blt	r2,r16,509087c <__divdf3+0x828>
 50907d4:	a5010784 	addi	r20,r20,1054
 50907d8:	8d04983a 	sll	r2,r17,r20
 50907dc:	9c06d83a 	srl	r3,r19,r16
 50907e0:	9d28983a 	sll	r20,r19,r20
 50907e4:	8c20d83a 	srl	r16,r17,r16
 50907e8:	1886b03a 	or	r3,r3,r2
 50907ec:	a004c03a 	cmpne	r2,r20,zero
 50907f0:	1884b03a 	or	r2,r3,r2
 50907f4:	10c001cc 	andi	r3,r2,7
 50907f8:	18000726 	beq	r3,zero,5090818 <__divdf3+0x7c4>
 50907fc:	110003cc 	andi	r4,r2,15
 5090800:	00c00104 	movi	r3,4
 5090804:	20c00426 	beq	r4,r3,5090818 <__divdf3+0x7c4>
 5090808:	10c00104 	addi	r3,r2,4
 509080c:	1885803a 	cmpltu	r2,r3,r2
 5090810:	80a1883a 	add	r16,r16,r2
 5090814:	1805883a 	mov	r2,r3
 5090818:	80c0202c 	andhi	r3,r16,128
 509081c:	18002d26 	beq	r3,zero,50908d4 <__divdf3+0x880>
 5090820:	9180004c 	andi	r6,r18,1
 5090824:	01000044 	movi	r4,1
 5090828:	000b883a 	mov	r5,zero
 509082c:	0027883a 	mov	r19,zero
 5090830:	003e6606 	br	50901cc <__alt_data_end+0xfffc1fcc>
 5090834:	354d883a 	add	r6,r6,r21
 5090838:	356d803a 	cmpltu	r22,r6,r21
 509083c:	b42d883a 	add	r22,r22,r16
 5090840:	b12d883a 	add	r22,r22,r4
 5090844:	8c7fff84 	addi	r17,r17,-2
 5090848:	b0c7c83a 	sub	r3,r22,r3
 509084c:	003f1d06 	br	50904c4 <__alt_data_end+0xfffc22c4>
 5090850:	ad4b883a 	add	r5,r21,r21
 5090854:	2d6b803a 	cmpltu	r21,r5,r21
 5090858:	ac2b883a 	add	r21,r21,r16
 509085c:	1d47883a 	add	r3,r3,r21
 5090860:	993fff84 	addi	r4,r19,-2
 5090864:	282b883a 	mov	r21,r5
 5090868:	003fc806 	br	509078c <__alt_data_end+0xfffc258c>
 509086c:	103fc41e 	bne	r2,zero,5090780 <__alt_data_end+0xfffc2580>
 5090870:	002b883a 	mov	r21,zero
 5090874:	a8bf5e1e 	bne	r21,r2,50905f0 <__alt_data_end+0xfffc23f0>
 5090878:	003f5e06 	br	50905f4 <__alt_data_end+0xfffc23f4>
 509087c:	00bef884 	movi	r2,-1054
 5090880:	1505c83a 	sub	r2,r2,r20
 5090884:	00c00804 	movi	r3,32
 5090888:	8884d83a 	srl	r2,r17,r2
 509088c:	80c01c26 	beq	r16,r3,5090900 <__divdf3+0x8ac>
 5090890:	a0c10f84 	addi	r3,r20,1086
 5090894:	88c6983a 	sll	r3,r17,r3
 5090898:	1cc6b03a 	or	r3,r3,r19
 509089c:	1806c03a 	cmpne	r3,r3,zero
 50908a0:	1884b03a 	or	r2,r3,r2
 50908a4:	140001cc 	andi	r16,r2,7
 50908a8:	8000061e 	bne	r16,zero,50908c4 <__divdf3+0x870>
 50908ac:	000b883a 	mov	r5,zero
 50908b0:	1004d0fa 	srli	r2,r2,3
 50908b4:	9180004c 	andi	r6,r18,1
 50908b8:	0009883a 	mov	r4,zero
 50908bc:	1426b03a 	or	r19,r2,r16
 50908c0:	003e4206 	br	50901cc <__alt_data_end+0xfffc1fcc>
 50908c4:	110003cc 	andi	r4,r2,15
 50908c8:	00c00104 	movi	r3,4
 50908cc:	0021883a 	mov	r16,zero
 50908d0:	20ffcd1e 	bne	r4,r3,5090808 <__alt_data_end+0xfffc2608>
 50908d4:	800a927a 	slli	r5,r16,9
 50908d8:	8020977a 	slli	r16,r16,29
 50908dc:	280ad33a 	srli	r5,r5,12
 50908e0:	003ff306 	br	50908b0 <__alt_data_end+0xfffc26b0>
 50908e4:	317fd336 	bltu	r6,r5,5090834 <__alt_data_end+0xfffc2634>
 50908e8:	1023883a 	mov	r17,r2
 50908ec:	003fa206 	br	5090778 <__alt_data_end+0xfffc2578>
 50908f0:	a8bfd736 	bltu	r21,r2,5090850 <__alt_data_end+0xfffc2650>
 50908f4:	2027883a 	mov	r19,r4
 50908f8:	a8bf3d1e 	bne	r21,r2,50905f0 <__alt_data_end+0xfffc23f0>
 50908fc:	003f3d06 	br	50905f4 <__alt_data_end+0xfffc23f4>
 5090900:	0007883a 	mov	r3,zero
 5090904:	003fe406 	br	5090898 <__alt_data_end+0xfffc2698>
 5090908:	00800434 	movhi	r2,16
 509090c:	89400234 	orhi	r5,r17,8
 5090910:	10bfffc4 	addi	r2,r2,-1
 5090914:	e00d883a 	mov	r6,fp
 5090918:	288a703a 	and	r5,r5,r2
 509091c:	003e8506 	br	5090334 <__alt_data_end+0xfffc2134>

05090920 <__eqdf2>:
 5090920:	2804d53a 	srli	r2,r5,20
 5090924:	3806d53a 	srli	r3,r7,20
 5090928:	02000434 	movhi	r8,16
 509092c:	423fffc4 	addi	r8,r8,-1
 5090930:	1081ffcc 	andi	r2,r2,2047
 5090934:	0241ffc4 	movi	r9,2047
 5090938:	2a14703a 	and	r10,r5,r8
 509093c:	18c1ffcc 	andi	r3,r3,2047
 5090940:	3a10703a 	and	r8,r7,r8
 5090944:	280ad7fa 	srli	r5,r5,31
 5090948:	380ed7fa 	srli	r7,r7,31
 509094c:	12400f26 	beq	r2,r9,509098c <__eqdf2+0x6c>
 5090950:	0241ffc4 	movi	r9,2047
 5090954:	1a400326 	beq	r3,r9,5090964 <__eqdf2+0x44>
 5090958:	10c00526 	beq	r2,r3,5090970 <__eqdf2+0x50>
 509095c:	00800044 	movi	r2,1
 5090960:	f800283a 	ret
 5090964:	4192b03a 	or	r9,r8,r6
 5090968:	483ffc1e 	bne	r9,zero,509095c <__alt_data_end+0xfffc275c>
 509096c:	10fffb1e 	bne	r2,r3,509095c <__alt_data_end+0xfffc275c>
 5090970:	523ffa1e 	bne	r10,r8,509095c <__alt_data_end+0xfffc275c>
 5090974:	21bff91e 	bne	r4,r6,509095c <__alt_data_end+0xfffc275c>
 5090978:	29c00826 	beq	r5,r7,509099c <__eqdf2+0x7c>
 509097c:	103ff71e 	bne	r2,zero,509095c <__alt_data_end+0xfffc275c>
 5090980:	5104b03a 	or	r2,r10,r4
 5090984:	1004c03a 	cmpne	r2,r2,zero
 5090988:	f800283a 	ret
 509098c:	5112b03a 	or	r9,r10,r4
 5090990:	483fef26 	beq	r9,zero,5090950 <__alt_data_end+0xfffc2750>
 5090994:	00800044 	movi	r2,1
 5090998:	f800283a 	ret
 509099c:	0005883a 	mov	r2,zero
 50909a0:	f800283a 	ret

050909a4 <__gedf2>:
 50909a4:	2804d53a 	srli	r2,r5,20
 50909a8:	3806d53a 	srli	r3,r7,20
 50909ac:	02000434 	movhi	r8,16
 50909b0:	423fffc4 	addi	r8,r8,-1
 50909b4:	0241ffc4 	movi	r9,2047
 50909b8:	1081ffcc 	andi	r2,r2,2047
 50909bc:	2a14703a 	and	r10,r5,r8
 50909c0:	1a46703a 	and	r3,r3,r9
 50909c4:	3a10703a 	and	r8,r7,r8
 50909c8:	280ad7fa 	srli	r5,r5,31
 50909cc:	380ed7fa 	srli	r7,r7,31
 50909d0:	12400b26 	beq	r2,r9,5090a00 <__gedf2+0x5c>
 50909d4:	1a401626 	beq	r3,r9,5090a30 <__gedf2+0x8c>
 50909d8:	10000c1e 	bne	r2,zero,5090a0c <__gedf2+0x68>
 50909dc:	5112b03a 	or	r9,r10,r4
 50909e0:	4813003a 	cmpeq	r9,r9,zero
 50909e4:	4817883a 	mov	r11,r9
 50909e8:	18000c1e 	bne	r3,zero,5090a1c <__gedf2+0x78>
 50909ec:	4198b03a 	or	r12,r8,r6
 50909f0:	60000a1e 	bne	r12,zero,5090a1c <__gedf2+0x78>
 50909f4:	48001326 	beq	r9,zero,5090a44 <__gedf2+0xa0>
 50909f8:	0005883a 	mov	r2,zero
 50909fc:	f800283a 	ret
 5090a00:	5112b03a 	or	r9,r10,r4
 5090a04:	4800191e 	bne	r9,zero,5090a6c <__gedf2+0xc8>
 5090a08:	18800926 	beq	r3,r2,5090a30 <__gedf2+0x8c>
 5090a0c:	18000b1e 	bne	r3,zero,5090a3c <__gedf2+0x98>
 5090a10:	4192b03a 	or	r9,r8,r6
 5090a14:	0017883a 	mov	r11,zero
 5090a18:	48000a26 	beq	r9,zero,5090a44 <__gedf2+0xa0>
 5090a1c:	39c03fcc 	andi	r7,r7,255
 5090a20:	58000726 	beq	r11,zero,5090a40 <__gedf2+0x9c>
 5090a24:	3800081e 	bne	r7,zero,5090a48 <__gedf2+0xa4>
 5090a28:	00bfffc4 	movi	r2,-1
 5090a2c:	f800283a 	ret
 5090a30:	4192b03a 	or	r9,r8,r6
 5090a34:	48000d1e 	bne	r9,zero,5090a6c <__gedf2+0xc8>
 5090a38:	103fe826 	beq	r2,zero,50909dc <__alt_data_end+0xfffc27dc>
 5090a3c:	39c03fcc 	andi	r7,r7,255
 5090a40:	29c00326 	beq	r5,r7,5090a50 <__gedf2+0xac>
 5090a44:	283ff81e 	bne	r5,zero,5090a28 <__alt_data_end+0xfffc2828>
 5090a48:	00800044 	movi	r2,1
 5090a4c:	f800283a 	ret
 5090a50:	18bffc16 	blt	r3,r2,5090a44 <__alt_data_end+0xfffc2844>
 5090a54:	10c00316 	blt	r2,r3,5090a64 <__gedf2+0xc0>
 5090a58:	42bffa36 	bltu	r8,r10,5090a44 <__alt_data_end+0xfffc2844>
 5090a5c:	52000526 	beq	r10,r8,5090a74 <__gedf2+0xd0>
 5090a60:	523fe52e 	bgeu	r10,r8,50909f8 <__alt_data_end+0xfffc27f8>
 5090a64:	283ff026 	beq	r5,zero,5090a28 <__alt_data_end+0xfffc2828>
 5090a68:	003ff706 	br	5090a48 <__alt_data_end+0xfffc2848>
 5090a6c:	00bfff84 	movi	r2,-2
 5090a70:	f800283a 	ret
 5090a74:	313ff336 	bltu	r6,r4,5090a44 <__alt_data_end+0xfffc2844>
 5090a78:	21bfdf2e 	bgeu	r4,r6,50909f8 <__alt_data_end+0xfffc27f8>
 5090a7c:	283fea26 	beq	r5,zero,5090a28 <__alt_data_end+0xfffc2828>
 5090a80:	003ff106 	br	5090a48 <__alt_data_end+0xfffc2848>

05090a84 <__ledf2>:
 5090a84:	2804d53a 	srli	r2,r5,20
 5090a88:	3810d53a 	srli	r8,r7,20
 5090a8c:	00c00434 	movhi	r3,16
 5090a90:	18ffffc4 	addi	r3,r3,-1
 5090a94:	0241ffc4 	movi	r9,2047
 5090a98:	1081ffcc 	andi	r2,r2,2047
 5090a9c:	28d4703a 	and	r10,r5,r3
 5090aa0:	4250703a 	and	r8,r8,r9
 5090aa4:	38c6703a 	and	r3,r7,r3
 5090aa8:	280ad7fa 	srli	r5,r5,31
 5090aac:	380ed7fa 	srli	r7,r7,31
 5090ab0:	12400b26 	beq	r2,r9,5090ae0 <__ledf2+0x5c>
 5090ab4:	42401926 	beq	r8,r9,5090b1c <__ledf2+0x98>
 5090ab8:	10000c1e 	bne	r2,zero,5090aec <__ledf2+0x68>
 5090abc:	5112b03a 	or	r9,r10,r4
 5090ac0:	4813003a 	cmpeq	r9,r9,zero
 5090ac4:	4817883a 	mov	r11,r9
 5090ac8:	40000f26 	beq	r8,zero,5090b08 <__ledf2+0x84>
 5090acc:	39c03fcc 	andi	r7,r7,255
 5090ad0:	58001826 	beq	r11,zero,5090b34 <__ledf2+0xb0>
 5090ad4:	38000a1e 	bne	r7,zero,5090b00 <__ledf2+0x7c>
 5090ad8:	00bfffc4 	movi	r2,-1
 5090adc:	f800283a 	ret
 5090ae0:	5112b03a 	or	r9,r10,r4
 5090ae4:	48000f1e 	bne	r9,zero,5090b24 <__ledf2+0xa0>
 5090ae8:	40800c26 	beq	r8,r2,5090b1c <__ledf2+0x98>
 5090aec:	4000101e 	bne	r8,zero,5090b30 <__ledf2+0xac>
 5090af0:	1992b03a 	or	r9,r3,r6
 5090af4:	0017883a 	mov	r11,zero
 5090af8:	483ff41e 	bne	r9,zero,5090acc <__alt_data_end+0xfffc28cc>
 5090afc:	283ff61e 	bne	r5,zero,5090ad8 <__alt_data_end+0xfffc28d8>
 5090b00:	00800044 	movi	r2,1
 5090b04:	f800283a 	ret
 5090b08:	1998b03a 	or	r12,r3,r6
 5090b0c:	603fef1e 	bne	r12,zero,5090acc <__alt_data_end+0xfffc28cc>
 5090b10:	483ffa26 	beq	r9,zero,5090afc <__alt_data_end+0xfffc28fc>
 5090b14:	0005883a 	mov	r2,zero
 5090b18:	f800283a 	ret
 5090b1c:	1992b03a 	or	r9,r3,r6
 5090b20:	48000226 	beq	r9,zero,5090b2c <__ledf2+0xa8>
 5090b24:	00800084 	movi	r2,2
 5090b28:	f800283a 	ret
 5090b2c:	103fe326 	beq	r2,zero,5090abc <__alt_data_end+0xfffc28bc>
 5090b30:	39c03fcc 	andi	r7,r7,255
 5090b34:	29fff11e 	bne	r5,r7,5090afc <__alt_data_end+0xfffc28fc>
 5090b38:	40bff016 	blt	r8,r2,5090afc <__alt_data_end+0xfffc28fc>
 5090b3c:	12000316 	blt	r2,r8,5090b4c <__ledf2+0xc8>
 5090b40:	1abfee36 	bltu	r3,r10,5090afc <__alt_data_end+0xfffc28fc>
 5090b44:	50c00326 	beq	r10,r3,5090b54 <__ledf2+0xd0>
 5090b48:	50fff22e 	bgeu	r10,r3,5090b14 <__alt_data_end+0xfffc2914>
 5090b4c:	283fe226 	beq	r5,zero,5090ad8 <__alt_data_end+0xfffc28d8>
 5090b50:	003feb06 	br	5090b00 <__alt_data_end+0xfffc2900>
 5090b54:	313fe936 	bltu	r6,r4,5090afc <__alt_data_end+0xfffc28fc>
 5090b58:	21bfee2e 	bgeu	r4,r6,5090b14 <__alt_data_end+0xfffc2914>
 5090b5c:	283fde26 	beq	r5,zero,5090ad8 <__alt_data_end+0xfffc28d8>
 5090b60:	003fe706 	br	5090b00 <__alt_data_end+0xfffc2900>

05090b64 <__muldf3>:
 5090b64:	defff204 	addi	sp,sp,-56
 5090b68:	2804d53a 	srli	r2,r5,20
 5090b6c:	dd800a15 	stw	r22,40(sp)
 5090b70:	282cd7fa 	srli	r22,r5,31
 5090b74:	dc000415 	stw	r16,16(sp)
 5090b78:	04000434 	movhi	r16,16
 5090b7c:	df000c15 	stw	fp,48(sp)
 5090b80:	dd000815 	stw	r20,32(sp)
 5090b84:	dcc00715 	stw	r19,28(sp)
 5090b88:	dc800615 	stw	r18,24(sp)
 5090b8c:	dc400515 	stw	r17,20(sp)
 5090b90:	843fffc4 	addi	r16,r16,-1
 5090b94:	dfc00d15 	stw	ra,52(sp)
 5090b98:	ddc00b15 	stw	r23,44(sp)
 5090b9c:	dd400915 	stw	r21,36(sp)
 5090ba0:	1501ffcc 	andi	r20,r2,2047
 5090ba4:	2023883a 	mov	r17,r4
 5090ba8:	2025883a 	mov	r18,r4
 5090bac:	2c20703a 	and	r16,r5,r16
 5090bb0:	b027883a 	mov	r19,r22
 5090bb4:	b7003fcc 	andi	fp,r22,255
 5090bb8:	a0005926 	beq	r20,zero,5090d20 <__muldf3+0x1bc>
 5090bbc:	0081ffc4 	movi	r2,2047
 5090bc0:	a0803426 	beq	r20,r2,5090c94 <__muldf3+0x130>
 5090bc4:	84000434 	orhi	r16,r16,16
 5090bc8:	2004d77a 	srli	r2,r4,29
 5090bcc:	802090fa 	slli	r16,r16,3
 5090bd0:	202490fa 	slli	r18,r4,3
 5090bd4:	a53f0044 	addi	r20,r20,-1023
 5090bd8:	80a0b03a 	or	r16,r16,r2
 5090bdc:	002b883a 	mov	r21,zero
 5090be0:	0015883a 	mov	r10,zero
 5090be4:	3812d53a 	srli	r9,r7,20
 5090be8:	3806d7fa 	srli	r3,r7,31
 5090bec:	02000434 	movhi	r8,16
 5090bf0:	423fffc4 	addi	r8,r8,-1
 5090bf4:	4941ffcc 	andi	r5,r9,2047
 5090bf8:	302f883a 	mov	r23,r6
 5090bfc:	3a22703a 	and	r17,r7,r8
 5090c00:	1ac03fcc 	andi	r11,r3,255
 5090c04:	28006226 	beq	r5,zero,5090d90 <__muldf3+0x22c>
 5090c08:	0081ffc4 	movi	r2,2047
 5090c0c:	28805a26 	beq	r5,r2,5090d78 <__muldf3+0x214>
 5090c10:	8a000434 	orhi	r8,r17,16
 5090c14:	3004d77a 	srli	r2,r6,29
 5090c18:	401090fa 	slli	r8,r8,3
 5090c1c:	302e90fa 	slli	r23,r6,3
 5090c20:	297f0044 	addi	r5,r5,-1023
 5090c24:	40a2b03a 	or	r17,r8,r2
 5090c28:	0013883a 	mov	r9,zero
 5090c2c:	4d4cb03a 	or	r6,r9,r21
 5090c30:	300c90ba 	slli	r6,r6,2
 5090c34:	02014274 	movhi	r8,1289
 5090c38:	42031504 	addi	r8,r8,3156
 5090c3c:	320d883a 	add	r6,r6,r8
 5090c40:	31800017 	ldw	r6,0(r6)
 5090c44:	a14b883a 	add	r5,r20,r5
 5090c48:	1dacf03a 	xor	r22,r3,r22
 5090c4c:	2b000044 	addi	r12,r5,1
 5090c50:	3000683a 	jmp	r6
 5090c54:	05090e90 	cmplti	r20,zero,9274
 5090c58:	05090e7c 	xorhi	r20,zero,9273
 5090c5c:	05090e7c 	xorhi	r20,zero,9273
 5090c60:	05090e68 	cmpgeui	r20,zero,9273
 5090c64:	05090cb0 	cmpltui	r20,zero,9266
 5090c68:	05090cb0 	cmpltui	r20,zero,9266
 5090c6c:	05090e50 	cmplti	r20,zero,9273
 5090c70:	05090e68 	cmpgeui	r20,zero,9273
 5090c74:	05090cb0 	cmpltui	r20,zero,9266
 5090c78:	05090e50 	cmplti	r20,zero,9273
 5090c7c:	05090cb0 	cmpltui	r20,zero,9266
 5090c80:	05090e68 	cmpgeui	r20,zero,9273
 5090c84:	05090cb4 	movhi	r20,9266
 5090c88:	05090cb4 	movhi	r20,9266
 5090c8c:	05090cb4 	movhi	r20,9266
 5090c90:	0509108c 	andi	r20,zero,9282
 5090c94:	8104b03a 	or	r2,r16,r4
 5090c98:	10006a1e 	bne	r2,zero,5090e44 <__muldf3+0x2e0>
 5090c9c:	05400204 	movi	r21,8
 5090ca0:	0021883a 	mov	r16,zero
 5090ca4:	0025883a 	mov	r18,zero
 5090ca8:	02800084 	movi	r10,2
 5090cac:	003fcd06 	br	5090be4 <__alt_data_end+0xfffc29e4>
 5090cb0:	b039883a 	mov	fp,r22
 5090cb4:	00800084 	movi	r2,2
 5090cb8:	50804e1e 	bne	r10,r2,5090df4 <__muldf3+0x290>
 5090cbc:	e4c0004c 	andi	r19,fp,1
 5090cc0:	0101ffc4 	movi	r4,2047
 5090cc4:	0021883a 	mov	r16,zero
 5090cc8:	0025883a 	mov	r18,zero
 5090ccc:	2008953a 	slli	r4,r4,20
 5090cd0:	98c03fcc 	andi	r3,r19,255
 5090cd4:	01400434 	movhi	r5,16
 5090cd8:	297fffc4 	addi	r5,r5,-1
 5090cdc:	180697fa 	slli	r3,r3,31
 5090ce0:	8160703a 	and	r16,r16,r5
 5090ce4:	8120b03a 	or	r16,r16,r4
 5090ce8:	80c6b03a 	or	r3,r16,r3
 5090cec:	9005883a 	mov	r2,r18
 5090cf0:	dfc00d17 	ldw	ra,52(sp)
 5090cf4:	df000c17 	ldw	fp,48(sp)
 5090cf8:	ddc00b17 	ldw	r23,44(sp)
 5090cfc:	dd800a17 	ldw	r22,40(sp)
 5090d00:	dd400917 	ldw	r21,36(sp)
 5090d04:	dd000817 	ldw	r20,32(sp)
 5090d08:	dcc00717 	ldw	r19,28(sp)
 5090d0c:	dc800617 	ldw	r18,24(sp)
 5090d10:	dc400517 	ldw	r17,20(sp)
 5090d14:	dc000417 	ldw	r16,16(sp)
 5090d18:	dec00e04 	addi	sp,sp,56
 5090d1c:	f800283a 	ret
 5090d20:	8104b03a 	or	r2,r16,r4
 5090d24:	10004226 	beq	r2,zero,5090e30 <__muldf3+0x2cc>
 5090d28:	8000f926 	beq	r16,zero,5091110 <__muldf3+0x5ac>
 5090d2c:	8009883a 	mov	r4,r16
 5090d30:	d9800315 	stw	r6,12(sp)
 5090d34:	d9c00015 	stw	r7,0(sp)
 5090d38:	5091d540 	call	5091d54 <__clzsi2>
 5090d3c:	d9800317 	ldw	r6,12(sp)
 5090d40:	d9c00017 	ldw	r7,0(sp)
 5090d44:	1007883a 	mov	r3,r2
 5090d48:	01000a04 	movi	r4,40
 5090d4c:	18bffe04 	addi	r2,r3,-8
 5090d50:	20c9c83a 	sub	r4,r4,r3
 5090d54:	80a0983a 	sll	r16,r16,r2
 5090d58:	8908d83a 	srl	r4,r17,r4
 5090d5c:	88a4983a 	sll	r18,r17,r2
 5090d60:	2420b03a 	or	r16,r4,r16
 5090d64:	017f0344 	movi	r5,-1011
 5090d68:	28e9c83a 	sub	r20,r5,r3
 5090d6c:	002b883a 	mov	r21,zero
 5090d70:	0015883a 	mov	r10,zero
 5090d74:	003f9b06 	br	5090be4 <__alt_data_end+0xfffc29e4>
 5090d78:	8984b03a 	or	r2,r17,r6
 5090d7c:	10002a1e 	bne	r2,zero,5090e28 <__muldf3+0x2c4>
 5090d80:	0023883a 	mov	r17,zero
 5090d84:	002f883a 	mov	r23,zero
 5090d88:	02400084 	movi	r9,2
 5090d8c:	003fa706 	br	5090c2c <__alt_data_end+0xfffc2a2c>
 5090d90:	8984b03a 	or	r2,r17,r6
 5090d94:	10002026 	beq	r2,zero,5090e18 <__muldf3+0x2b4>
 5090d98:	8800cc26 	beq	r17,zero,50910cc <__muldf3+0x568>
 5090d9c:	8809883a 	mov	r4,r17
 5090da0:	d8c00215 	stw	r3,8(sp)
 5090da4:	d9800315 	stw	r6,12(sp)
 5090da8:	da800015 	stw	r10,0(sp)
 5090dac:	dac00115 	stw	r11,4(sp)
 5090db0:	5091d540 	call	5091d54 <__clzsi2>
 5090db4:	d8c00217 	ldw	r3,8(sp)
 5090db8:	d9800317 	ldw	r6,12(sp)
 5090dbc:	da800017 	ldw	r10,0(sp)
 5090dc0:	dac00117 	ldw	r11,4(sp)
 5090dc4:	1009883a 	mov	r4,r2
 5090dc8:	01400a04 	movi	r5,40
 5090dcc:	25fffe04 	addi	r23,r4,-8
 5090dd0:	290bc83a 	sub	r5,r5,r4
 5090dd4:	8dd0983a 	sll	r8,r17,r23
 5090dd8:	314ad83a 	srl	r5,r6,r5
 5090ddc:	35ee983a 	sll	r23,r6,r23
 5090de0:	2a22b03a 	or	r17,r5,r8
 5090de4:	017f0344 	movi	r5,-1011
 5090de8:	290bc83a 	sub	r5,r5,r4
 5090dec:	0013883a 	mov	r9,zero
 5090df0:	003f8e06 	br	5090c2c <__alt_data_end+0xfffc2a2c>
 5090df4:	008000c4 	movi	r2,3
 5090df8:	50811d26 	beq	r10,r2,5091270 <__muldf3+0x70c>
 5090dfc:	00800044 	movi	r2,1
 5090e00:	5080e01e 	bne	r10,r2,5091184 <__muldf3+0x620>
 5090e04:	e0a6703a 	and	r19,fp,r2
 5090e08:	0009883a 	mov	r4,zero
 5090e0c:	0021883a 	mov	r16,zero
 5090e10:	0025883a 	mov	r18,zero
 5090e14:	003fad06 	br	5090ccc <__alt_data_end+0xfffc2acc>
 5090e18:	0023883a 	mov	r17,zero
 5090e1c:	002f883a 	mov	r23,zero
 5090e20:	02400044 	movi	r9,1
 5090e24:	003f8106 	br	5090c2c <__alt_data_end+0xfffc2a2c>
 5090e28:	024000c4 	movi	r9,3
 5090e2c:	003f7f06 	br	5090c2c <__alt_data_end+0xfffc2a2c>
 5090e30:	05400104 	movi	r21,4
 5090e34:	0021883a 	mov	r16,zero
 5090e38:	0025883a 	mov	r18,zero
 5090e3c:	02800044 	movi	r10,1
 5090e40:	003f6806 	br	5090be4 <__alt_data_end+0xfffc29e4>
 5090e44:	05400304 	movi	r21,12
 5090e48:	028000c4 	movi	r10,3
 5090e4c:	003f6506 	br	5090be4 <__alt_data_end+0xfffc29e4>
 5090e50:	04000434 	movhi	r16,16
 5090e54:	0027883a 	mov	r19,zero
 5090e58:	843fffc4 	addi	r16,r16,-1
 5090e5c:	04bfffc4 	movi	r18,-1
 5090e60:	0101ffc4 	movi	r4,2047
 5090e64:	003f9906 	br	5090ccc <__alt_data_end+0xfffc2acc>
 5090e68:	8821883a 	mov	r16,r17
 5090e6c:	b825883a 	mov	r18,r23
 5090e70:	5839883a 	mov	fp,r11
 5090e74:	4815883a 	mov	r10,r9
 5090e78:	003f8e06 	br	5090cb4 <__alt_data_end+0xfffc2ab4>
 5090e7c:	8821883a 	mov	r16,r17
 5090e80:	b825883a 	mov	r18,r23
 5090e84:	b039883a 	mov	fp,r22
 5090e88:	4815883a 	mov	r10,r9
 5090e8c:	003f8906 	br	5090cb4 <__alt_data_end+0xfffc2ab4>
 5090e90:	b80cd43a 	srli	r6,r23,16
 5090e94:	9006d43a 	srli	r3,r18,16
 5090e98:	90bfffcc 	andi	r2,r18,65535
 5090e9c:	bdffffcc 	andi	r23,r23,65535
 5090ea0:	b891383a 	mul	r8,r23,r2
 5090ea4:	b8c9383a 	mul	r4,r23,r3
 5090ea8:	309b383a 	mul	r13,r6,r2
 5090eac:	400ed43a 	srli	r7,r8,16
 5090eb0:	30df383a 	mul	r15,r6,r3
 5090eb4:	235b883a 	add	r13,r4,r13
 5090eb8:	69db883a 	add	r13,r13,r7
 5090ebc:	6900022e 	bgeu	r13,r4,5090ec8 <__muldf3+0x364>
 5090ec0:	01000074 	movhi	r4,1
 5090ec4:	791f883a 	add	r15,r15,r4
 5090ec8:	8828d43a 	srli	r20,r17,16
 5090ecc:	8c7fffcc 	andi	r17,r17,65535
 5090ed0:	888f383a 	mul	r7,r17,r2
 5090ed4:	88d3383a 	mul	r9,r17,r3
 5090ed8:	a0a5383a 	mul	r18,r20,r2
 5090edc:	3816d43a 	srli	r11,r7,16
 5090ee0:	6814943a 	slli	r10,r13,16
 5090ee4:	4ca5883a 	add	r18,r9,r18
 5090ee8:	423fffcc 	andi	r8,r8,65535
 5090eec:	92e5883a 	add	r18,r18,r11
 5090ef0:	6808d43a 	srli	r4,r13,16
 5090ef4:	5215883a 	add	r10,r10,r8
 5090ef8:	a0c7383a 	mul	r3,r20,r3
 5090efc:	9240022e 	bgeu	r18,r9,5090f08 <__muldf3+0x3a4>
 5090f00:	00800074 	movhi	r2,1
 5090f04:	1887883a 	add	r3,r3,r2
 5090f08:	802ad43a 	srli	r21,r16,16
 5090f0c:	80bfffcc 	andi	r2,r16,65535
 5090f10:	b893383a 	mul	r9,r23,r2
 5090f14:	3091383a 	mul	r8,r6,r2
 5090f18:	bd6f383a 	mul	r23,r23,r21
 5090f1c:	9026943a 	slli	r19,r18,16
 5090f20:	481ad43a 	srli	r13,r9,16
 5090f24:	9024d43a 	srli	r18,r18,16
 5090f28:	39ffffcc 	andi	r7,r7,65535
 5090f2c:	ba11883a 	add	r8,r23,r8
 5090f30:	99e7883a 	add	r19,r19,r7
 5090f34:	4351883a 	add	r8,r8,r13
 5090f38:	1c97883a 	add	r11,r3,r18
 5090f3c:	354d383a 	mul	r6,r6,r21
 5090f40:	9925883a 	add	r18,r19,r4
 5090f44:	45c0022e 	bgeu	r8,r23,5090f50 <__muldf3+0x3ec>
 5090f48:	00c00074 	movhi	r3,1
 5090f4c:	30cd883a 	add	r6,r6,r3
 5090f50:	8889383a 	mul	r4,r17,r2
 5090f54:	8d63383a 	mul	r17,r17,r21
 5090f58:	a085383a 	mul	r2,r20,r2
 5090f5c:	200ed43a 	srli	r7,r4,16
 5090f60:	401cd43a 	srli	r14,r8,16
 5090f64:	401a943a 	slli	r13,r8,16
 5090f68:	8885883a 	add	r2,r17,r2
 5090f6c:	4a3fffcc 	andi	r8,r9,65535
 5090f70:	11c5883a 	add	r2,r2,r7
 5090f74:	339d883a 	add	r14,r6,r14
 5090f78:	6a11883a 	add	r8,r13,r8
 5090f7c:	a561383a 	mul	r16,r20,r21
 5090f80:	1440022e 	bgeu	r2,r17,5090f8c <__muldf3+0x428>
 5090f84:	00c00074 	movhi	r3,1
 5090f88:	80e1883a 	add	r16,r16,r3
 5090f8c:	1006943a 	slli	r3,r2,16
 5090f90:	213fffcc 	andi	r4,r4,65535
 5090f94:	93db883a 	add	r13,r18,r15
 5090f98:	1909883a 	add	r4,r3,r4
 5090f9c:	22c7883a 	add	r3,r4,r11
 5090fa0:	6cd3803a 	cmpltu	r9,r13,r19
 5090fa4:	6a09883a 	add	r4,r13,r8
 5090fa8:	1a5b883a 	add	r13,r3,r9
 5090fac:	2211803a 	cmpltu	r8,r4,r8
 5090fb0:	734d883a 	add	r6,r14,r13
 5090fb4:	100ed43a 	srli	r7,r2,16
 5090fb8:	6a53803a 	cmpltu	r9,r13,r9
 5090fbc:	3205883a 	add	r2,r6,r8
 5090fc0:	1ac7803a 	cmpltu	r3,r3,r11
 5090fc4:	1211803a 	cmpltu	r8,r2,r8
 5090fc8:	48c6b03a 	or	r3,r9,r3
 5090fcc:	338d803a 	cmpltu	r6,r6,r14
 5090fd0:	19c7883a 	add	r3,r3,r7
 5090fd4:	418cb03a 	or	r6,r8,r6
 5090fd8:	1987883a 	add	r3,r3,r6
 5090fdc:	2024927a 	slli	r18,r4,9
 5090fe0:	1c07883a 	add	r3,r3,r16
 5090fe4:	1806927a 	slli	r3,r3,9
 5090fe8:	1020d5fa 	srli	r16,r2,23
 5090fec:	2008d5fa 	srli	r4,r4,23
 5090ff0:	9294b03a 	or	r10,r18,r10
 5090ff4:	1004927a 	slli	r2,r2,9
 5090ff8:	5024c03a 	cmpne	r18,r10,zero
 5090ffc:	1c20b03a 	or	r16,r3,r16
 5091000:	9108b03a 	or	r4,r18,r4
 5091004:	80c0402c 	andhi	r3,r16,256
 5091008:	20a4b03a 	or	r18,r4,r2
 509100c:	18000726 	beq	r3,zero,509102c <__muldf3+0x4c8>
 5091010:	9006d07a 	srli	r3,r18,1
 5091014:	800897fa 	slli	r4,r16,31
 5091018:	9080004c 	andi	r2,r18,1
 509101c:	8020d07a 	srli	r16,r16,1
 5091020:	10c4b03a 	or	r2,r2,r3
 5091024:	1124b03a 	or	r18,r2,r4
 5091028:	600b883a 	mov	r5,r12
 509102c:	2900ffc4 	addi	r4,r5,1023
 5091030:	01004b0e 	bge	zero,r4,5091160 <__muldf3+0x5fc>
 5091034:	908001cc 	andi	r2,r18,7
 5091038:	10000726 	beq	r2,zero,5091058 <__muldf3+0x4f4>
 509103c:	90c003cc 	andi	r3,r18,15
 5091040:	00800104 	movi	r2,4
 5091044:	18800426 	beq	r3,r2,5091058 <__muldf3+0x4f4>
 5091048:	9087883a 	add	r3,r18,r2
 509104c:	1c85803a 	cmpltu	r2,r3,r18
 5091050:	80a1883a 	add	r16,r16,r2
 5091054:	1825883a 	mov	r18,r3
 5091058:	8080402c 	andhi	r2,r16,256
 509105c:	10000426 	beq	r2,zero,5091070 <__muldf3+0x50c>
 5091060:	00bfc034 	movhi	r2,65280
 5091064:	10bfffc4 	addi	r2,r2,-1
 5091068:	29010004 	addi	r4,r5,1024
 509106c:	80a0703a 	and	r16,r16,r2
 5091070:	0081ff84 	movi	r2,2046
 5091074:	1100320e 	bge	r2,r4,5091140 <__muldf3+0x5dc>
 5091078:	b4c0004c 	andi	r19,r22,1
 509107c:	0101ffc4 	movi	r4,2047
 5091080:	0021883a 	mov	r16,zero
 5091084:	0025883a 	mov	r18,zero
 5091088:	003f1006 	br	5090ccc <__alt_data_end+0xfffc2acc>
 509108c:	8080022c 	andhi	r2,r16,8
 5091090:	10000926 	beq	r2,zero,50910b8 <__muldf3+0x554>
 5091094:	8880022c 	andhi	r2,r17,8
 5091098:	1000071e 	bne	r2,zero,50910b8 <__muldf3+0x554>
 509109c:	00800434 	movhi	r2,16
 50910a0:	8c000234 	orhi	r16,r17,8
 50910a4:	10bfffc4 	addi	r2,r2,-1
 50910a8:	1827883a 	mov	r19,r3
 50910ac:	80a0703a 	and	r16,r16,r2
 50910b0:	b825883a 	mov	r18,r23
 50910b4:	003f6a06 	br	5090e60 <__alt_data_end+0xfffc2c60>
 50910b8:	00800434 	movhi	r2,16
 50910bc:	84000234 	orhi	r16,r16,8
 50910c0:	10bfffc4 	addi	r2,r2,-1
 50910c4:	80a0703a 	and	r16,r16,r2
 50910c8:	003f6506 	br	5090e60 <__alt_data_end+0xfffc2c60>
 50910cc:	3009883a 	mov	r4,r6
 50910d0:	d8c00215 	stw	r3,8(sp)
 50910d4:	d9800315 	stw	r6,12(sp)
 50910d8:	da800015 	stw	r10,0(sp)
 50910dc:	dac00115 	stw	r11,4(sp)
 50910e0:	5091d540 	call	5091d54 <__clzsi2>
 50910e4:	11000804 	addi	r4,r2,32
 50910e8:	014009c4 	movi	r5,39
 50910ec:	d8c00217 	ldw	r3,8(sp)
 50910f0:	d9800317 	ldw	r6,12(sp)
 50910f4:	da800017 	ldw	r10,0(sp)
 50910f8:	dac00117 	ldw	r11,4(sp)
 50910fc:	293f320e 	bge	r5,r4,5090dc8 <__alt_data_end+0xfffc2bc8>
 5091100:	10bffe04 	addi	r2,r2,-8
 5091104:	b8a2983a 	sll	r17,r23,r2
 5091108:	002f883a 	mov	r23,zero
 509110c:	003f3506 	br	5090de4 <__alt_data_end+0xfffc2be4>
 5091110:	d9800315 	stw	r6,12(sp)
 5091114:	d9c00015 	stw	r7,0(sp)
 5091118:	5091d540 	call	5091d54 <__clzsi2>
 509111c:	10c00804 	addi	r3,r2,32
 5091120:	010009c4 	movi	r4,39
 5091124:	d9800317 	ldw	r6,12(sp)
 5091128:	d9c00017 	ldw	r7,0(sp)
 509112c:	20ff060e 	bge	r4,r3,5090d48 <__alt_data_end+0xfffc2b48>
 5091130:	10bffe04 	addi	r2,r2,-8
 5091134:	88a0983a 	sll	r16,r17,r2
 5091138:	0025883a 	mov	r18,zero
 509113c:	003f0906 	br	5090d64 <__alt_data_end+0xfffc2b64>
 5091140:	9004d0fa 	srli	r2,r18,3
 5091144:	8024977a 	slli	r18,r16,29
 5091148:	8020927a 	slli	r16,r16,9
 509114c:	2101ffcc 	andi	r4,r4,2047
 5091150:	90a4b03a 	or	r18,r18,r2
 5091154:	8020d33a 	srli	r16,r16,12
 5091158:	b4c0004c 	andi	r19,r22,1
 509115c:	003edb06 	br	5090ccc <__alt_data_end+0xfffc2acc>
 5091160:	00ff0084 	movi	r3,-1022
 5091164:	1947c83a 	sub	r3,r3,r5
 5091168:	00800e04 	movi	r2,56
 509116c:	10c0080e 	bge	r2,r3,5091190 <__muldf3+0x62c>
 5091170:	b4c0004c 	andi	r19,r22,1
 5091174:	0009883a 	mov	r4,zero
 5091178:	0021883a 	mov	r16,zero
 509117c:	0025883a 	mov	r18,zero
 5091180:	003ed206 	br	5090ccc <__alt_data_end+0xfffc2acc>
 5091184:	600b883a 	mov	r5,r12
 5091188:	e02d883a 	mov	r22,fp
 509118c:	003fa706 	br	509102c <__alt_data_end+0xfffc2e2c>
 5091190:	008007c4 	movi	r2,31
 5091194:	10c01816 	blt	r2,r3,50911f8 <__muldf3+0x694>
 5091198:	29410784 	addi	r5,r5,1054
 509119c:	8144983a 	sll	r2,r16,r5
 50911a0:	90c8d83a 	srl	r4,r18,r3
 50911a4:	914a983a 	sll	r5,r18,r5
 50911a8:	80c6d83a 	srl	r3,r16,r3
 50911ac:	2088b03a 	or	r4,r4,r2
 50911b0:	2804c03a 	cmpne	r2,r5,zero
 50911b4:	2084b03a 	or	r2,r4,r2
 50911b8:	110001cc 	andi	r4,r2,7
 50911bc:	20000726 	beq	r4,zero,50911dc <__muldf3+0x678>
 50911c0:	114003cc 	andi	r5,r2,15
 50911c4:	01000104 	movi	r4,4
 50911c8:	29000426 	beq	r5,r4,50911dc <__muldf3+0x678>
 50911cc:	11000104 	addi	r4,r2,4
 50911d0:	2085803a 	cmpltu	r2,r4,r2
 50911d4:	1887883a 	add	r3,r3,r2
 50911d8:	2005883a 	mov	r2,r4
 50911dc:	1900202c 	andhi	r4,r3,128
 50911e0:	20001826 	beq	r4,zero,5091244 <__muldf3+0x6e0>
 50911e4:	b4c0004c 	andi	r19,r22,1
 50911e8:	01000044 	movi	r4,1
 50911ec:	0021883a 	mov	r16,zero
 50911f0:	0025883a 	mov	r18,zero
 50911f4:	003eb506 	br	5090ccc <__alt_data_end+0xfffc2acc>
 50911f8:	00bef884 	movi	r2,-1054
 50911fc:	1145c83a 	sub	r2,r2,r5
 5091200:	8088d83a 	srl	r4,r16,r2
 5091204:	00800804 	movi	r2,32
 5091208:	18801726 	beq	r3,r2,5091268 <__muldf3+0x704>
 509120c:	28810f84 	addi	r2,r5,1086
 5091210:	8084983a 	sll	r2,r16,r2
 5091214:	1484b03a 	or	r2,r2,r18
 5091218:	1004c03a 	cmpne	r2,r2,zero
 509121c:	1104b03a 	or	r2,r2,r4
 5091220:	10c001cc 	andi	r3,r2,7
 5091224:	18000b1e 	bne	r3,zero,5091254 <__muldf3+0x6f0>
 5091228:	0021883a 	mov	r16,zero
 509122c:	1004d0fa 	srli	r2,r2,3
 5091230:	b4c0004c 	andi	r19,r22,1
 5091234:	0009883a 	mov	r4,zero
 5091238:	10e4b03a 	or	r18,r2,r3
 509123c:	003ea306 	br	5090ccc <__alt_data_end+0xfffc2acc>
 5091240:	0007883a 	mov	r3,zero
 5091244:	1820927a 	slli	r16,r3,9
 5091248:	1806977a 	slli	r3,r3,29
 509124c:	8020d33a 	srli	r16,r16,12
 5091250:	003ff606 	br	509122c <__alt_data_end+0xfffc302c>
 5091254:	110003cc 	andi	r4,r2,15
 5091258:	00c00104 	movi	r3,4
 509125c:	20fff826 	beq	r4,r3,5091240 <__alt_data_end+0xfffc3040>
 5091260:	0007883a 	mov	r3,zero
 5091264:	003fd906 	br	50911cc <__alt_data_end+0xfffc2fcc>
 5091268:	0005883a 	mov	r2,zero
 509126c:	003fe906 	br	5091214 <__alt_data_end+0xfffc3014>
 5091270:	00800434 	movhi	r2,16
 5091274:	84000234 	orhi	r16,r16,8
 5091278:	10bfffc4 	addi	r2,r2,-1
 509127c:	e4c0004c 	andi	r19,fp,1
 5091280:	80a0703a 	and	r16,r16,r2
 5091284:	003ef606 	br	5090e60 <__alt_data_end+0xfffc2c60>

05091288 <__subdf3>:
 5091288:	00c00434 	movhi	r3,16
 509128c:	18ffffc4 	addi	r3,r3,-1
 5091290:	defffb04 	addi	sp,sp,-20
 5091294:	28d2703a 	and	r9,r5,r3
 5091298:	3814d53a 	srli	r10,r7,20
 509129c:	38c6703a 	and	r3,r7,r3
 50912a0:	3004d77a 	srli	r2,r6,29
 50912a4:	dc800215 	stw	r18,8(sp)
 50912a8:	dc000015 	stw	r16,0(sp)
 50912ac:	2824d7fa 	srli	r18,r5,31
 50912b0:	2820d53a 	srli	r16,r5,20
 50912b4:	481290fa 	slli	r9,r9,3
 50912b8:	200ad77a 	srli	r5,r4,29
 50912bc:	180690fa 	slli	r3,r3,3
 50912c0:	dc400115 	stw	r17,4(sp)
 50912c4:	dfc00415 	stw	ra,16(sp)
 50912c8:	202290fa 	slli	r17,r4,3
 50912cc:	dcc00315 	stw	r19,12(sp)
 50912d0:	5281ffcc 	andi	r10,r10,2047
 50912d4:	0101ffc4 	movi	r4,2047
 50912d8:	9011883a 	mov	r8,r18
 50912dc:	8401ffcc 	andi	r16,r16,2047
 50912e0:	94803fcc 	andi	r18,r18,255
 50912e4:	494ab03a 	or	r5,r9,r5
 50912e8:	380ed7fa 	srli	r7,r7,31
 50912ec:	1886b03a 	or	r3,r3,r2
 50912f0:	300c90fa 	slli	r6,r6,3
 50912f4:	51009026 	beq	r10,r4,5091538 <__subdf3+0x2b0>
 50912f8:	39c0005c 	xori	r7,r7,1
 50912fc:	8285c83a 	sub	r2,r16,r10
 5091300:	91c06f26 	beq	r18,r7,50914c0 <__subdf3+0x238>
 5091304:	0080b10e 	bge	zero,r2,50915cc <__subdf3+0x344>
 5091308:	50002a1e 	bne	r10,zero,50913b4 <__subdf3+0x12c>
 509130c:	1988b03a 	or	r4,r3,r6
 5091310:	2000941e 	bne	r4,zero,5091564 <__subdf3+0x2dc>
 5091314:	888001cc 	andi	r2,r17,7
 5091318:	10005b26 	beq	r2,zero,5091488 <__subdf3+0x200>
 509131c:	88c003cc 	andi	r3,r17,15
 5091320:	00800104 	movi	r2,4
 5091324:	18805826 	beq	r3,r2,5091488 <__subdf3+0x200>
 5091328:	88c00104 	addi	r3,r17,4
 509132c:	1c63803a 	cmpltu	r17,r3,r17
 5091330:	2c4b883a 	add	r5,r5,r17
 5091334:	2880202c 	andhi	r2,r5,128
 5091338:	9200004c 	andi	r8,r18,1
 509133c:	1823883a 	mov	r17,r3
 5091340:	10005426 	beq	r2,zero,5091494 <__subdf3+0x20c>
 5091344:	84000044 	addi	r16,r16,1
 5091348:	0081ffc4 	movi	r2,2047
 509134c:	8080bf26 	beq	r16,r2,509164c <__subdf3+0x3c4>
 5091350:	013fe034 	movhi	r4,65408
 5091354:	213fffc4 	addi	r4,r4,-1
 5091358:	290a703a 	and	r5,r5,r4
 509135c:	2804977a 	slli	r2,r5,29
 5091360:	280a927a 	slli	r5,r5,9
 5091364:	8822d0fa 	srli	r17,r17,3
 5091368:	8401ffcc 	andi	r16,r16,2047
 509136c:	2808d33a 	srli	r4,r5,12
 5091370:	1444b03a 	or	r2,r2,r17
 5091374:	8401ffcc 	andi	r16,r16,2047
 5091378:	800a953a 	slli	r5,r16,20
 509137c:	40c03fcc 	andi	r3,r8,255
 5091380:	04000434 	movhi	r16,16
 5091384:	180697fa 	slli	r3,r3,31
 5091388:	843fffc4 	addi	r16,r16,-1
 509138c:	2420703a 	and	r16,r4,r16
 5091390:	8160b03a 	or	r16,r16,r5
 5091394:	80c6b03a 	or	r3,r16,r3
 5091398:	dfc00417 	ldw	ra,16(sp)
 509139c:	dcc00317 	ldw	r19,12(sp)
 50913a0:	dc800217 	ldw	r18,8(sp)
 50913a4:	dc400117 	ldw	r17,4(sp)
 50913a8:	dc000017 	ldw	r16,0(sp)
 50913ac:	dec00504 	addi	sp,sp,20
 50913b0:	f800283a 	ret
 50913b4:	0101ffc4 	movi	r4,2047
 50913b8:	813fd626 	beq	r16,r4,5091314 <__alt_data_end+0xfffc3114>
 50913bc:	18c02034 	orhi	r3,r3,128
 50913c0:	01000e04 	movi	r4,56
 50913c4:	2080a416 	blt	r4,r2,5091658 <__subdf3+0x3d0>
 50913c8:	010007c4 	movi	r4,31
 50913cc:	2080c716 	blt	r4,r2,50916ec <__subdf3+0x464>
 50913d0:	01000804 	movi	r4,32
 50913d4:	2089c83a 	sub	r4,r4,r2
 50913d8:	1910983a 	sll	r8,r3,r4
 50913dc:	308ed83a 	srl	r7,r6,r2
 50913e0:	3108983a 	sll	r4,r6,r4
 50913e4:	1884d83a 	srl	r2,r3,r2
 50913e8:	41ccb03a 	or	r6,r8,r7
 50913ec:	2008c03a 	cmpne	r4,r4,zero
 50913f0:	310cb03a 	or	r6,r6,r4
 50913f4:	898dc83a 	sub	r6,r17,r6
 50913f8:	89a3803a 	cmpltu	r17,r17,r6
 50913fc:	288bc83a 	sub	r5,r5,r2
 5091400:	2c4bc83a 	sub	r5,r5,r17
 5091404:	3023883a 	mov	r17,r6
 5091408:	2880202c 	andhi	r2,r5,128
 509140c:	10006b26 	beq	r2,zero,50915bc <__subdf3+0x334>
 5091410:	04c02034 	movhi	r19,128
 5091414:	9cffffc4 	addi	r19,r19,-1
 5091418:	2ce6703a 	and	r19,r5,r19
 509141c:	98007c26 	beq	r19,zero,5091610 <__subdf3+0x388>
 5091420:	9809883a 	mov	r4,r19
 5091424:	5091d540 	call	5091d54 <__clzsi2>
 5091428:	10fffe04 	addi	r3,r2,-8
 509142c:	010007c4 	movi	r4,31
 5091430:	20c07d16 	blt	r4,r3,5091628 <__subdf3+0x3a0>
 5091434:	01400a04 	movi	r5,40
 5091438:	2885c83a 	sub	r2,r5,r2
 509143c:	888ad83a 	srl	r5,r17,r2
 5091440:	98e6983a 	sll	r19,r19,r3
 5091444:	88e2983a 	sll	r17,r17,r3
 5091448:	2ce6b03a 	or	r19,r5,r19
 509144c:	1c007a16 	blt	r3,r16,5091638 <__subdf3+0x3b0>
 5091450:	1c21c83a 	sub	r16,r3,r16
 5091454:	81400044 	addi	r5,r16,1
 5091458:	00c007c4 	movi	r3,31
 509145c:	19409616 	blt	r3,r5,50916b8 <__subdf3+0x430>
 5091460:	1c21c83a 	sub	r16,r3,r16
 5091464:	8c08983a 	sll	r4,r17,r16
 5091468:	8946d83a 	srl	r3,r17,r5
 509146c:	9c20983a 	sll	r16,r19,r16
 5091470:	2008c03a 	cmpne	r4,r4,zero
 5091474:	994ad83a 	srl	r5,r19,r5
 5091478:	1c06b03a 	or	r3,r3,r16
 509147c:	1922b03a 	or	r17,r3,r4
 5091480:	0021883a 	mov	r16,zero
 5091484:	003fa306 	br	5091314 <__alt_data_end+0xfffc3114>
 5091488:	2880202c 	andhi	r2,r5,128
 509148c:	9200004c 	andi	r8,r18,1
 5091490:	103fac1e 	bne	r2,zero,5091344 <__alt_data_end+0xfffc3144>
 5091494:	2804977a 	slli	r2,r5,29
 5091498:	8822d0fa 	srli	r17,r17,3
 509149c:	00c1ffc4 	movi	r3,2047
 50914a0:	280ad0fa 	srli	r5,r5,3
 50914a4:	1444b03a 	or	r2,r2,r17
 50914a8:	80c02726 	beq	r16,r3,5091548 <__subdf3+0x2c0>
 50914ac:	01000434 	movhi	r4,16
 50914b0:	213fffc4 	addi	r4,r4,-1
 50914b4:	80e0703a 	and	r16,r16,r3
 50914b8:	2908703a 	and	r4,r5,r4
 50914bc:	003fad06 	br	5091374 <__alt_data_end+0xfffc3174>
 50914c0:	0080690e 	bge	zero,r2,5091668 <__subdf3+0x3e0>
 50914c4:	50002f26 	beq	r10,zero,5091584 <__subdf3+0x2fc>
 50914c8:	0101ffc4 	movi	r4,2047
 50914cc:	813f9126 	beq	r16,r4,5091314 <__alt_data_end+0xfffc3114>
 50914d0:	18c02034 	orhi	r3,r3,128
 50914d4:	01000e04 	movi	r4,56
 50914d8:	2080b00e 	bge	r4,r2,509179c <__subdf3+0x514>
 50914dc:	198cb03a 	or	r6,r3,r6
 50914e0:	300ec03a 	cmpne	r7,r6,zero
 50914e4:	0005883a 	mov	r2,zero
 50914e8:	3c4f883a 	add	r7,r7,r17
 50914ec:	3c63803a 	cmpltu	r17,r7,r17
 50914f0:	114b883a 	add	r5,r2,r5
 50914f4:	2c4b883a 	add	r5,r5,r17
 50914f8:	3823883a 	mov	r17,r7
 50914fc:	2880202c 	andhi	r2,r5,128
 5091500:	10002e26 	beq	r2,zero,50915bc <__subdf3+0x334>
 5091504:	84000044 	addi	r16,r16,1
 5091508:	0081ffc4 	movi	r2,2047
 509150c:	8080de26 	beq	r16,r2,5091888 <__subdf3+0x600>
 5091510:	00bfe034 	movhi	r2,65408
 5091514:	10bfffc4 	addi	r2,r2,-1
 5091518:	288a703a 	and	r5,r5,r2
 509151c:	880cd07a 	srli	r6,r17,1
 5091520:	280897fa 	slli	r4,r5,31
 5091524:	88c0004c 	andi	r3,r17,1
 5091528:	30e2b03a 	or	r17,r6,r3
 509152c:	280ad07a 	srli	r5,r5,1
 5091530:	8922b03a 	or	r17,r17,r4
 5091534:	003f7706 	br	5091314 <__alt_data_end+0xfffc3114>
 5091538:	1984b03a 	or	r2,r3,r6
 509153c:	103f6e26 	beq	r2,zero,50912f8 <__alt_data_end+0xfffc30f8>
 5091540:	39c03fcc 	andi	r7,r7,255
 5091544:	003f6d06 	br	50912fc <__alt_data_end+0xfffc30fc>
 5091548:	1146b03a 	or	r3,r2,r5
 509154c:	18003f26 	beq	r3,zero,509164c <__subdf3+0x3c4>
 5091550:	00c00434 	movhi	r3,16
 5091554:	29000234 	orhi	r4,r5,8
 5091558:	18ffffc4 	addi	r3,r3,-1
 509155c:	20c8703a 	and	r4,r4,r3
 5091560:	003f8406 	br	5091374 <__alt_data_end+0xfffc3174>
 5091564:	10bfffc4 	addi	r2,r2,-1
 5091568:	1000501e 	bne	r2,zero,50916ac <__subdf3+0x424>
 509156c:	898fc83a 	sub	r7,r17,r6
 5091570:	89e3803a 	cmpltu	r17,r17,r7
 5091574:	28cbc83a 	sub	r5,r5,r3
 5091578:	2c4bc83a 	sub	r5,r5,r17
 509157c:	3823883a 	mov	r17,r7
 5091580:	003fa106 	br	5091408 <__alt_data_end+0xfffc3208>
 5091584:	1988b03a 	or	r4,r3,r6
 5091588:	203f6226 	beq	r4,zero,5091314 <__alt_data_end+0xfffc3114>
 509158c:	10bfffc4 	addi	r2,r2,-1
 5091590:	10009b1e 	bne	r2,zero,5091800 <__subdf3+0x578>
 5091594:	344d883a 	add	r6,r6,r17
 5091598:	3463803a 	cmpltu	r17,r6,r17
 509159c:	194b883a 	add	r5,r3,r5
 50915a0:	2c4b883a 	add	r5,r5,r17
 50915a4:	3023883a 	mov	r17,r6
 50915a8:	003fd406 	br	50914fc <__alt_data_end+0xfffc32fc>
 50915ac:	1106b03a 	or	r3,r2,r4
 50915b0:	1800b426 	beq	r3,zero,5091884 <__subdf3+0x5fc>
 50915b4:	100b883a 	mov	r5,r2
 50915b8:	2023883a 	mov	r17,r4
 50915bc:	888001cc 	andi	r2,r17,7
 50915c0:	103f561e 	bne	r2,zero,509131c <__alt_data_end+0xfffc311c>
 50915c4:	9200004c 	andi	r8,r18,1
 50915c8:	003fb206 	br	5091494 <__alt_data_end+0xfffc3294>
 50915cc:	1000531e 	bne	r2,zero,509171c <__subdf3+0x494>
 50915d0:	80800044 	addi	r2,r16,1
 50915d4:	1081ffcc 	andi	r2,r2,2047
 50915d8:	01000044 	movi	r4,1
 50915dc:	2080a00e 	bge	r4,r2,5091860 <__subdf3+0x5d8>
 50915e0:	8985c83a 	sub	r2,r17,r6
 50915e4:	8889803a 	cmpltu	r4,r17,r2
 50915e8:	28e7c83a 	sub	r19,r5,r3
 50915ec:	9927c83a 	sub	r19,r19,r4
 50915f0:	9900202c 	andhi	r4,r19,128
 50915f4:	20006226 	beq	r4,zero,5091780 <__subdf3+0x4f8>
 50915f8:	3463c83a 	sub	r17,r6,r17
 50915fc:	194bc83a 	sub	r5,r3,r5
 5091600:	344d803a 	cmpltu	r6,r6,r17
 5091604:	29a7c83a 	sub	r19,r5,r6
 5091608:	3825883a 	mov	r18,r7
 509160c:	983f841e 	bne	r19,zero,5091420 <__alt_data_end+0xfffc3220>
 5091610:	8809883a 	mov	r4,r17
 5091614:	5091d540 	call	5091d54 <__clzsi2>
 5091618:	10800804 	addi	r2,r2,32
 509161c:	10fffe04 	addi	r3,r2,-8
 5091620:	010007c4 	movi	r4,31
 5091624:	20ff830e 	bge	r4,r3,5091434 <__alt_data_end+0xfffc3234>
 5091628:	14fff604 	addi	r19,r2,-40
 509162c:	8ce6983a 	sll	r19,r17,r19
 5091630:	0023883a 	mov	r17,zero
 5091634:	1c3f860e 	bge	r3,r16,5091450 <__alt_data_end+0xfffc3250>
 5091638:	017fe034 	movhi	r5,65408
 509163c:	297fffc4 	addi	r5,r5,-1
 5091640:	80e1c83a 	sub	r16,r16,r3
 5091644:	994a703a 	and	r5,r19,r5
 5091648:	003f3206 	br	5091314 <__alt_data_end+0xfffc3114>
 509164c:	0009883a 	mov	r4,zero
 5091650:	0005883a 	mov	r2,zero
 5091654:	003f4706 	br	5091374 <__alt_data_end+0xfffc3174>
 5091658:	198cb03a 	or	r6,r3,r6
 509165c:	300cc03a 	cmpne	r6,r6,zero
 5091660:	0005883a 	mov	r2,zero
 5091664:	003f6306 	br	50913f4 <__alt_data_end+0xfffc31f4>
 5091668:	10009d1e 	bne	r2,zero,50918e0 <__subdf3+0x658>
 509166c:	81c00044 	addi	r7,r16,1
 5091670:	3881ffcc 	andi	r2,r7,2047
 5091674:	02400044 	movi	r9,1
 5091678:	4880680e 	bge	r9,r2,509181c <__subdf3+0x594>
 509167c:	0081ffc4 	movi	r2,2047
 5091680:	3880ae26 	beq	r7,r2,509193c <__subdf3+0x6b4>
 5091684:	344d883a 	add	r6,r6,r17
 5091688:	3463803a 	cmpltu	r17,r6,r17
 509168c:	194b883a 	add	r5,r3,r5
 5091690:	2c4b883a 	add	r5,r5,r17
 5091694:	282297fa 	slli	r17,r5,31
 5091698:	300cd07a 	srli	r6,r6,1
 509169c:	280ad07a 	srli	r5,r5,1
 50916a0:	3821883a 	mov	r16,r7
 50916a4:	89a2b03a 	or	r17,r17,r6
 50916a8:	003f1a06 	br	5091314 <__alt_data_end+0xfffc3114>
 50916ac:	0101ffc4 	movi	r4,2047
 50916b0:	813f431e 	bne	r16,r4,50913c0 <__alt_data_end+0xfffc31c0>
 50916b4:	003f1706 	br	5091314 <__alt_data_end+0xfffc3114>
 50916b8:	80bff844 	addi	r2,r16,-31
 50916bc:	00c00804 	movi	r3,32
 50916c0:	9884d83a 	srl	r2,r19,r2
 50916c4:	28c05126 	beq	r5,r3,509180c <__subdf3+0x584>
 50916c8:	00c00fc4 	movi	r3,63
 50916cc:	1c21c83a 	sub	r16,r3,r16
 50916d0:	9c26983a 	sll	r19,r19,r16
 50916d4:	9c62b03a 	or	r17,r19,r17
 50916d8:	8822c03a 	cmpne	r17,r17,zero
 50916dc:	88a2b03a 	or	r17,r17,r2
 50916e0:	000b883a 	mov	r5,zero
 50916e4:	0021883a 	mov	r16,zero
 50916e8:	003fb406 	br	50915bc <__alt_data_end+0xfffc33bc>
 50916ec:	113ff804 	addi	r4,r2,-32
 50916f0:	01c00804 	movi	r7,32
 50916f4:	1908d83a 	srl	r4,r3,r4
 50916f8:	11c04626 	beq	r2,r7,5091814 <__subdf3+0x58c>
 50916fc:	01c01004 	movi	r7,64
 5091700:	3885c83a 	sub	r2,r7,r2
 5091704:	1884983a 	sll	r2,r3,r2
 5091708:	118cb03a 	or	r6,r2,r6
 509170c:	300cc03a 	cmpne	r6,r6,zero
 5091710:	310cb03a 	or	r6,r6,r4
 5091714:	0005883a 	mov	r2,zero
 5091718:	003f3606 	br	50913f4 <__alt_data_end+0xfffc31f4>
 509171c:	80002b26 	beq	r16,zero,50917cc <__subdf3+0x544>
 5091720:	0101ffc4 	movi	r4,2047
 5091724:	51006926 	beq	r10,r4,50918cc <__subdf3+0x644>
 5091728:	0085c83a 	sub	r2,zero,r2
 509172c:	29402034 	orhi	r5,r5,128
 5091730:	01000e04 	movi	r4,56
 5091734:	20807d16 	blt	r4,r2,509192c <__subdf3+0x6a4>
 5091738:	010007c4 	movi	r4,31
 509173c:	2080d916 	blt	r4,r2,5091aa4 <__subdf3+0x81c>
 5091740:	01000804 	movi	r4,32
 5091744:	2089c83a 	sub	r4,r4,r2
 5091748:	2912983a 	sll	r9,r5,r4
 509174c:	8890d83a 	srl	r8,r17,r2
 5091750:	8908983a 	sll	r4,r17,r4
 5091754:	2884d83a 	srl	r2,r5,r2
 5091758:	4a22b03a 	or	r17,r9,r8
 509175c:	2008c03a 	cmpne	r4,r4,zero
 5091760:	8922b03a 	or	r17,r17,r4
 5091764:	3463c83a 	sub	r17,r6,r17
 5091768:	1885c83a 	sub	r2,r3,r2
 509176c:	344d803a 	cmpltu	r6,r6,r17
 5091770:	118bc83a 	sub	r5,r2,r6
 5091774:	5021883a 	mov	r16,r10
 5091778:	3825883a 	mov	r18,r7
 509177c:	003f2206 	br	5091408 <__alt_data_end+0xfffc3208>
 5091780:	9886b03a 	or	r3,r19,r2
 5091784:	18001c1e 	bne	r3,zero,50917f8 <__subdf3+0x570>
 5091788:	0011883a 	mov	r8,zero
 509178c:	000b883a 	mov	r5,zero
 5091790:	0023883a 	mov	r17,zero
 5091794:	0021883a 	mov	r16,zero
 5091798:	003f3e06 	br	5091494 <__alt_data_end+0xfffc3294>
 509179c:	010007c4 	movi	r4,31
 50917a0:	20803c16 	blt	r4,r2,5091894 <__subdf3+0x60c>
 50917a4:	01000804 	movi	r4,32
 50917a8:	2089c83a 	sub	r4,r4,r2
 50917ac:	1912983a 	sll	r9,r3,r4
 50917b0:	308ed83a 	srl	r7,r6,r2
 50917b4:	3108983a 	sll	r4,r6,r4
 50917b8:	1884d83a 	srl	r2,r3,r2
 50917bc:	49ceb03a 	or	r7,r9,r7
 50917c0:	2008c03a 	cmpne	r4,r4,zero
 50917c4:	390eb03a 	or	r7,r7,r4
 50917c8:	003f4706 	br	50914e8 <__alt_data_end+0xfffc32e8>
 50917cc:	2c48b03a 	or	r4,r5,r17
 50917d0:	20003e26 	beq	r4,zero,50918cc <__subdf3+0x644>
 50917d4:	0084303a 	nor	r2,zero,r2
 50917d8:	10003a1e 	bne	r2,zero,50918c4 <__subdf3+0x63c>
 50917dc:	3463c83a 	sub	r17,r6,r17
 50917e0:	194bc83a 	sub	r5,r3,r5
 50917e4:	344d803a 	cmpltu	r6,r6,r17
 50917e8:	298bc83a 	sub	r5,r5,r6
 50917ec:	5021883a 	mov	r16,r10
 50917f0:	3825883a 	mov	r18,r7
 50917f4:	003f0406 	br	5091408 <__alt_data_end+0xfffc3208>
 50917f8:	1023883a 	mov	r17,r2
 50917fc:	003f0706 	br	509141c <__alt_data_end+0xfffc321c>
 5091800:	0101ffc4 	movi	r4,2047
 5091804:	813f331e 	bne	r16,r4,50914d4 <__alt_data_end+0xfffc32d4>
 5091808:	003ec206 	br	5091314 <__alt_data_end+0xfffc3114>
 509180c:	0027883a 	mov	r19,zero
 5091810:	003fb006 	br	50916d4 <__alt_data_end+0xfffc34d4>
 5091814:	0005883a 	mov	r2,zero
 5091818:	003fbb06 	br	5091708 <__alt_data_end+0xfffc3508>
 509181c:	2c44b03a 	or	r2,r5,r17
 5091820:	80008b1e 	bne	r16,zero,5091a50 <__subdf3+0x7c8>
 5091824:	1000b526 	beq	r2,zero,5091afc <__subdf3+0x874>
 5091828:	1984b03a 	or	r2,r3,r6
 509182c:	103eb926 	beq	r2,zero,5091314 <__alt_data_end+0xfffc3114>
 5091830:	3449883a 	add	r4,r6,r17
 5091834:	2463803a 	cmpltu	r17,r4,r17
 5091838:	194b883a 	add	r5,r3,r5
 509183c:	2c4b883a 	add	r5,r5,r17
 5091840:	2880202c 	andhi	r2,r5,128
 5091844:	2023883a 	mov	r17,r4
 5091848:	103f5c26 	beq	r2,zero,50915bc <__alt_data_end+0xfffc33bc>
 509184c:	00bfe034 	movhi	r2,65408
 5091850:	10bfffc4 	addi	r2,r2,-1
 5091854:	4821883a 	mov	r16,r9
 5091858:	288a703a 	and	r5,r5,r2
 509185c:	003ead06 	br	5091314 <__alt_data_end+0xfffc3114>
 5091860:	2c44b03a 	or	r2,r5,r17
 5091864:	8000291e 	bne	r16,zero,509190c <__subdf3+0x684>
 5091868:	10004f1e 	bne	r2,zero,50919a8 <__subdf3+0x720>
 509186c:	1984b03a 	or	r2,r3,r6
 5091870:	10000426 	beq	r2,zero,5091884 <__subdf3+0x5fc>
 5091874:	180b883a 	mov	r5,r3
 5091878:	3023883a 	mov	r17,r6
 509187c:	3825883a 	mov	r18,r7
 5091880:	003ea406 	br	5091314 <__alt_data_end+0xfffc3114>
 5091884:	0011883a 	mov	r8,zero
 5091888:	000b883a 	mov	r5,zero
 509188c:	0023883a 	mov	r17,zero
 5091890:	003f0006 	br	5091494 <__alt_data_end+0xfffc3294>
 5091894:	11fff804 	addi	r7,r2,-32
 5091898:	19c8d83a 	srl	r4,r3,r7
 509189c:	01c00804 	movi	r7,32
 50918a0:	11c07e26 	beq	r2,r7,5091a9c <__subdf3+0x814>
 50918a4:	01c01004 	movi	r7,64
 50918a8:	3885c83a 	sub	r2,r7,r2
 50918ac:	1884983a 	sll	r2,r3,r2
 50918b0:	118cb03a 	or	r6,r2,r6
 50918b4:	300ec03a 	cmpne	r7,r6,zero
 50918b8:	390eb03a 	or	r7,r7,r4
 50918bc:	0005883a 	mov	r2,zero
 50918c0:	003f0906 	br	50914e8 <__alt_data_end+0xfffc32e8>
 50918c4:	0101ffc4 	movi	r4,2047
 50918c8:	513f991e 	bne	r10,r4,5091730 <__alt_data_end+0xfffc3530>
 50918cc:	180b883a 	mov	r5,r3
 50918d0:	3023883a 	mov	r17,r6
 50918d4:	5021883a 	mov	r16,r10
 50918d8:	3825883a 	mov	r18,r7
 50918dc:	003e8d06 	br	5091314 <__alt_data_end+0xfffc3114>
 50918e0:	80001a1e 	bne	r16,zero,509194c <__subdf3+0x6c4>
 50918e4:	2c48b03a 	or	r4,r5,r17
 50918e8:	20005526 	beq	r4,zero,5091a40 <__subdf3+0x7b8>
 50918ec:	0084303a 	nor	r2,zero,r2
 50918f0:	1000511e 	bne	r2,zero,5091a38 <__subdf3+0x7b0>
 50918f4:	89a3883a 	add	r17,r17,r6
 50918f8:	194b883a 	add	r5,r3,r5
 50918fc:	898d803a 	cmpltu	r6,r17,r6
 5091900:	298b883a 	add	r5,r5,r6
 5091904:	5021883a 	mov	r16,r10
 5091908:	003efc06 	br	50914fc <__alt_data_end+0xfffc32fc>
 509190c:	1000341e 	bne	r2,zero,50919e0 <__subdf3+0x758>
 5091910:	1984b03a 	or	r2,r3,r6
 5091914:	10006f26 	beq	r2,zero,5091ad4 <__subdf3+0x84c>
 5091918:	180b883a 	mov	r5,r3
 509191c:	3023883a 	mov	r17,r6
 5091920:	3825883a 	mov	r18,r7
 5091924:	0401ffc4 	movi	r16,2047
 5091928:	003e7a06 	br	5091314 <__alt_data_end+0xfffc3114>
 509192c:	2c62b03a 	or	r17,r5,r17
 5091930:	8822c03a 	cmpne	r17,r17,zero
 5091934:	0005883a 	mov	r2,zero
 5091938:	003f8a06 	br	5091764 <__alt_data_end+0xfffc3564>
 509193c:	3821883a 	mov	r16,r7
 5091940:	000b883a 	mov	r5,zero
 5091944:	0023883a 	mov	r17,zero
 5091948:	003ed206 	br	5091494 <__alt_data_end+0xfffc3294>
 509194c:	0101ffc4 	movi	r4,2047
 5091950:	51003b26 	beq	r10,r4,5091a40 <__subdf3+0x7b8>
 5091954:	0085c83a 	sub	r2,zero,r2
 5091958:	29402034 	orhi	r5,r5,128
 509195c:	01000e04 	movi	r4,56
 5091960:	20806216 	blt	r4,r2,5091aec <__subdf3+0x864>
 5091964:	010007c4 	movi	r4,31
 5091968:	20806b16 	blt	r4,r2,5091b18 <__subdf3+0x890>
 509196c:	01000804 	movi	r4,32
 5091970:	2089c83a 	sub	r4,r4,r2
 5091974:	2912983a 	sll	r9,r5,r4
 5091978:	888ed83a 	srl	r7,r17,r2
 509197c:	8908983a 	sll	r4,r17,r4
 5091980:	2884d83a 	srl	r2,r5,r2
 5091984:	49e2b03a 	or	r17,r9,r7
 5091988:	2008c03a 	cmpne	r4,r4,zero
 509198c:	8922b03a 	or	r17,r17,r4
 5091990:	89a3883a 	add	r17,r17,r6
 5091994:	10c5883a 	add	r2,r2,r3
 5091998:	898d803a 	cmpltu	r6,r17,r6
 509199c:	118b883a 	add	r5,r2,r6
 50919a0:	5021883a 	mov	r16,r10
 50919a4:	003ed506 	br	50914fc <__alt_data_end+0xfffc32fc>
 50919a8:	1984b03a 	or	r2,r3,r6
 50919ac:	103e5926 	beq	r2,zero,5091314 <__alt_data_end+0xfffc3114>
 50919b0:	8989c83a 	sub	r4,r17,r6
 50919b4:	8911803a 	cmpltu	r8,r17,r4
 50919b8:	28c5c83a 	sub	r2,r5,r3
 50919bc:	1205c83a 	sub	r2,r2,r8
 50919c0:	1200202c 	andhi	r8,r2,128
 50919c4:	403ef926 	beq	r8,zero,50915ac <__alt_data_end+0xfffc33ac>
 50919c8:	3463c83a 	sub	r17,r6,r17
 50919cc:	194bc83a 	sub	r5,r3,r5
 50919d0:	344d803a 	cmpltu	r6,r6,r17
 50919d4:	298bc83a 	sub	r5,r5,r6
 50919d8:	3825883a 	mov	r18,r7
 50919dc:	003e4d06 	br	5091314 <__alt_data_end+0xfffc3114>
 50919e0:	1984b03a 	or	r2,r3,r6
 50919e4:	10002b26 	beq	r2,zero,5091a94 <__subdf3+0x80c>
 50919e8:	2808d0fa 	srli	r4,r5,3
 50919ec:	8822d0fa 	srli	r17,r17,3
 50919f0:	280a977a 	slli	r5,r5,29
 50919f4:	2080022c 	andhi	r2,r4,8
 50919f8:	2c62b03a 	or	r17,r5,r17
 50919fc:	10000826 	beq	r2,zero,5091a20 <__subdf3+0x798>
 5091a00:	1810d0fa 	srli	r8,r3,3
 5091a04:	4080022c 	andhi	r2,r8,8
 5091a08:	1000051e 	bne	r2,zero,5091a20 <__subdf3+0x798>
 5091a0c:	300cd0fa 	srli	r6,r6,3
 5091a10:	1804977a 	slli	r2,r3,29
 5091a14:	4009883a 	mov	r4,r8
 5091a18:	3825883a 	mov	r18,r7
 5091a1c:	11a2b03a 	or	r17,r2,r6
 5091a20:	880ad77a 	srli	r5,r17,29
 5091a24:	200890fa 	slli	r4,r4,3
 5091a28:	882290fa 	slli	r17,r17,3
 5091a2c:	0401ffc4 	movi	r16,2047
 5091a30:	290ab03a 	or	r5,r5,r4
 5091a34:	003e3706 	br	5091314 <__alt_data_end+0xfffc3114>
 5091a38:	0101ffc4 	movi	r4,2047
 5091a3c:	513fc71e 	bne	r10,r4,509195c <__alt_data_end+0xfffc375c>
 5091a40:	180b883a 	mov	r5,r3
 5091a44:	3023883a 	mov	r17,r6
 5091a48:	5021883a 	mov	r16,r10
 5091a4c:	003e3106 	br	5091314 <__alt_data_end+0xfffc3114>
 5091a50:	10002d26 	beq	r2,zero,5091b08 <__subdf3+0x880>
 5091a54:	1984b03a 	or	r2,r3,r6
 5091a58:	10000e26 	beq	r2,zero,5091a94 <__subdf3+0x80c>
 5091a5c:	2808d0fa 	srli	r4,r5,3
 5091a60:	8822d0fa 	srli	r17,r17,3
 5091a64:	280a977a 	slli	r5,r5,29
 5091a68:	2080022c 	andhi	r2,r4,8
 5091a6c:	2c62b03a 	or	r17,r5,r17
 5091a70:	103feb26 	beq	r2,zero,5091a20 <__alt_data_end+0xfffc3820>
 5091a74:	180ed0fa 	srli	r7,r3,3
 5091a78:	3880022c 	andhi	r2,r7,8
 5091a7c:	103fe81e 	bne	r2,zero,5091a20 <__alt_data_end+0xfffc3820>
 5091a80:	300cd0fa 	srli	r6,r6,3
 5091a84:	1804977a 	slli	r2,r3,29
 5091a88:	3809883a 	mov	r4,r7
 5091a8c:	11a2b03a 	or	r17,r2,r6
 5091a90:	003fe306 	br	5091a20 <__alt_data_end+0xfffc3820>
 5091a94:	0401ffc4 	movi	r16,2047
 5091a98:	003e1e06 	br	5091314 <__alt_data_end+0xfffc3114>
 5091a9c:	0005883a 	mov	r2,zero
 5091aa0:	003f8306 	br	50918b0 <__alt_data_end+0xfffc36b0>
 5091aa4:	113ff804 	addi	r4,r2,-32
 5091aa8:	02000804 	movi	r8,32
 5091aac:	2908d83a 	srl	r4,r5,r4
 5091ab0:	12002526 	beq	r2,r8,5091b48 <__subdf3+0x8c0>
 5091ab4:	02001004 	movi	r8,64
 5091ab8:	4085c83a 	sub	r2,r8,r2
 5091abc:	288a983a 	sll	r5,r5,r2
 5091ac0:	2c62b03a 	or	r17,r5,r17
 5091ac4:	8822c03a 	cmpne	r17,r17,zero
 5091ac8:	8922b03a 	or	r17,r17,r4
 5091acc:	0005883a 	mov	r2,zero
 5091ad0:	003f2406 	br	5091764 <__alt_data_end+0xfffc3564>
 5091ad4:	01402034 	movhi	r5,128
 5091ad8:	0011883a 	mov	r8,zero
 5091adc:	297fffc4 	addi	r5,r5,-1
 5091ae0:	047ffe04 	movi	r17,-8
 5091ae4:	0401ffc4 	movi	r16,2047
 5091ae8:	003e6a06 	br	5091494 <__alt_data_end+0xfffc3294>
 5091aec:	2c62b03a 	or	r17,r5,r17
 5091af0:	8822c03a 	cmpne	r17,r17,zero
 5091af4:	0005883a 	mov	r2,zero
 5091af8:	003fa506 	br	5091990 <__alt_data_end+0xfffc3790>
 5091afc:	180b883a 	mov	r5,r3
 5091b00:	3023883a 	mov	r17,r6
 5091b04:	003e0306 	br	5091314 <__alt_data_end+0xfffc3114>
 5091b08:	180b883a 	mov	r5,r3
 5091b0c:	3023883a 	mov	r17,r6
 5091b10:	0401ffc4 	movi	r16,2047
 5091b14:	003dff06 	br	5091314 <__alt_data_end+0xfffc3114>
 5091b18:	113ff804 	addi	r4,r2,-32
 5091b1c:	01c00804 	movi	r7,32
 5091b20:	2908d83a 	srl	r4,r5,r4
 5091b24:	11c00a26 	beq	r2,r7,5091b50 <__subdf3+0x8c8>
 5091b28:	01c01004 	movi	r7,64
 5091b2c:	3885c83a 	sub	r2,r7,r2
 5091b30:	288a983a 	sll	r5,r5,r2
 5091b34:	2c62b03a 	or	r17,r5,r17
 5091b38:	8822c03a 	cmpne	r17,r17,zero
 5091b3c:	8922b03a 	or	r17,r17,r4
 5091b40:	0005883a 	mov	r2,zero
 5091b44:	003f9206 	br	5091990 <__alt_data_end+0xfffc3790>
 5091b48:	000b883a 	mov	r5,zero
 5091b4c:	003fdc06 	br	5091ac0 <__alt_data_end+0xfffc38c0>
 5091b50:	000b883a 	mov	r5,zero
 5091b54:	003ff706 	br	5091b34 <__alt_data_end+0xfffc3934>

05091b58 <__fixdfsi>:
 5091b58:	2806d53a 	srli	r3,r5,20
 5091b5c:	00800434 	movhi	r2,16
 5091b60:	10bfffc4 	addi	r2,r2,-1
 5091b64:	18c1ffcc 	andi	r3,r3,2047
 5091b68:	0180ff84 	movi	r6,1022
 5091b6c:	2884703a 	and	r2,r5,r2
 5091b70:	280ad7fa 	srli	r5,r5,31
 5091b74:	30c0130e 	bge	r6,r3,5091bc4 <__fixdfsi+0x6c>
 5091b78:	01810744 	movi	r6,1053
 5091b7c:	30c00d16 	blt	r6,r3,5091bb4 <__fixdfsi+0x5c>
 5091b80:	01810cc4 	movi	r6,1075
 5091b84:	30cdc83a 	sub	r6,r6,r3
 5091b88:	01c007c4 	movi	r7,31
 5091b8c:	10800434 	orhi	r2,r2,16
 5091b90:	39800e0e 	bge	r7,r6,5091bcc <__fixdfsi+0x74>
 5091b94:	010104c4 	movi	r4,1043
 5091b98:	20c7c83a 	sub	r3,r4,r3
 5091b9c:	10c6d83a 	srl	r3,r2,r3
 5091ba0:	29403fcc 	andi	r5,r5,255
 5091ba4:	0145c83a 	sub	r2,zero,r5
 5091ba8:	1884f03a 	xor	r2,r3,r2
 5091bac:	1145883a 	add	r2,r2,r5
 5091bb0:	f800283a 	ret
 5091bb4:	00a00034 	movhi	r2,32768
 5091bb8:	10bfffc4 	addi	r2,r2,-1
 5091bbc:	2885883a 	add	r2,r5,r2
 5091bc0:	f800283a 	ret
 5091bc4:	0005883a 	mov	r2,zero
 5091bc8:	f800283a 	ret
 5091bcc:	18fefb44 	addi	r3,r3,-1043
 5091bd0:	2188d83a 	srl	r4,r4,r6
 5091bd4:	10c6983a 	sll	r3,r2,r3
 5091bd8:	20c6b03a 	or	r3,r4,r3
 5091bdc:	003ff006 	br	5091ba0 <__alt_data_end+0xfffc39a0>

05091be0 <__floatsidf>:
 5091be0:	defffd04 	addi	sp,sp,-12
 5091be4:	dc400115 	stw	r17,4(sp)
 5091be8:	dfc00215 	stw	ra,8(sp)
 5091bec:	dc000015 	stw	r16,0(sp)
 5091bf0:	2023883a 	mov	r17,r4
 5091bf4:	20001426 	beq	r4,zero,5091c48 <__floatsidf+0x68>
 5091bf8:	2020d7fa 	srli	r16,r4,31
 5091bfc:	80000126 	beq	r16,zero,5091c04 <__floatsidf+0x24>
 5091c00:	0123c83a 	sub	r17,zero,r4
 5091c04:	8809883a 	mov	r4,r17
 5091c08:	5091d540 	call	5091d54 <__clzsi2>
 5091c0c:	01410784 	movi	r5,1054
 5091c10:	00c00284 	movi	r3,10
 5091c14:	288bc83a 	sub	r5,r5,r2
 5091c18:	18801c16 	blt	r3,r2,5091c8c <__floatsidf+0xac>
 5091c1c:	00c002c4 	movi	r3,11
 5091c20:	1887c83a 	sub	r3,r3,r2
 5091c24:	88c8d83a 	srl	r4,r17,r3
 5091c28:	00c00434 	movhi	r3,16
 5091c2c:	18ffffc4 	addi	r3,r3,-1
 5091c30:	10800544 	addi	r2,r2,21
 5091c34:	20c8703a 	and	r4,r4,r3
 5091c38:	8884983a 	sll	r2,r17,r2
 5091c3c:	28c1ffcc 	andi	r3,r5,2047
 5091c40:	800d883a 	mov	r6,r16
 5091c44:	00000406 	br	5091c58 <__floatsidf+0x78>
 5091c48:	000d883a 	mov	r6,zero
 5091c4c:	0007883a 	mov	r3,zero
 5091c50:	0009883a 	mov	r4,zero
 5091c54:	0005883a 	mov	r2,zero
 5091c58:	180a953a 	slli	r5,r3,20
 5091c5c:	31803fcc 	andi	r6,r6,255
 5091c60:	00c00434 	movhi	r3,16
 5091c64:	300c97fa 	slli	r6,r6,31
 5091c68:	18ffffc4 	addi	r3,r3,-1
 5091c6c:	20c6703a 	and	r3,r4,r3
 5091c70:	1946b03a 	or	r3,r3,r5
 5091c74:	1986b03a 	or	r3,r3,r6
 5091c78:	dfc00217 	ldw	ra,8(sp)
 5091c7c:	dc400117 	ldw	r17,4(sp)
 5091c80:	dc000017 	ldw	r16,0(sp)
 5091c84:	dec00304 	addi	sp,sp,12
 5091c88:	f800283a 	ret
 5091c8c:	10fffd44 	addi	r3,r2,-11
 5091c90:	88c8983a 	sll	r4,r17,r3
 5091c94:	00800434 	movhi	r2,16
 5091c98:	10bfffc4 	addi	r2,r2,-1
 5091c9c:	2088703a 	and	r4,r4,r2
 5091ca0:	28c1ffcc 	andi	r3,r5,2047
 5091ca4:	800d883a 	mov	r6,r16
 5091ca8:	0005883a 	mov	r2,zero
 5091cac:	003fea06 	br	5091c58 <__alt_data_end+0xfffc3a58>

05091cb0 <__floatunsidf>:
 5091cb0:	defffe04 	addi	sp,sp,-8
 5091cb4:	dc000015 	stw	r16,0(sp)
 5091cb8:	dfc00115 	stw	ra,4(sp)
 5091cbc:	2021883a 	mov	r16,r4
 5091cc0:	20001026 	beq	r4,zero,5091d04 <__floatunsidf+0x54>
 5091cc4:	5091d540 	call	5091d54 <__clzsi2>
 5091cc8:	01410784 	movi	r5,1054
 5091ccc:	100d883a 	mov	r6,r2
 5091cd0:	288bc83a 	sub	r5,r5,r2
 5091cd4:	00800284 	movi	r2,10
 5091cd8:	11801616 	blt	r2,r6,5091d34 <__floatunsidf+0x84>
 5091cdc:	008002c4 	movi	r2,11
 5091ce0:	1185c83a 	sub	r2,r2,r6
 5091ce4:	8084d83a 	srl	r2,r16,r2
 5091ce8:	00c00434 	movhi	r3,16
 5091cec:	31c00544 	addi	r7,r6,21
 5091cf0:	18ffffc4 	addi	r3,r3,-1
 5091cf4:	81e0983a 	sll	r16,r16,r7
 5091cf8:	10cc703a 	and	r6,r2,r3
 5091cfc:	2941ffcc 	andi	r5,r5,2047
 5091d00:	00000206 	br	5091d0c <__floatunsidf+0x5c>
 5091d04:	000b883a 	mov	r5,zero
 5091d08:	000d883a 	mov	r6,zero
 5091d0c:	280a953a 	slli	r5,r5,20
 5091d10:	00c00434 	movhi	r3,16
 5091d14:	18ffffc4 	addi	r3,r3,-1
 5091d18:	30c6703a 	and	r3,r6,r3
 5091d1c:	8005883a 	mov	r2,r16
 5091d20:	1946b03a 	or	r3,r3,r5
 5091d24:	dfc00117 	ldw	ra,4(sp)
 5091d28:	dc000017 	ldw	r16,0(sp)
 5091d2c:	dec00204 	addi	sp,sp,8
 5091d30:	f800283a 	ret
 5091d34:	31bffd44 	addi	r6,r6,-11
 5091d38:	818c983a 	sll	r6,r16,r6
 5091d3c:	00800434 	movhi	r2,16
 5091d40:	10bfffc4 	addi	r2,r2,-1
 5091d44:	2941ffcc 	andi	r5,r5,2047
 5091d48:	0021883a 	mov	r16,zero
 5091d4c:	308c703a 	and	r6,r6,r2
 5091d50:	003fee06 	br	5091d0c <__alt_data_end+0xfffc3b0c>

05091d54 <__clzsi2>:
 5091d54:	00bfffd4 	movui	r2,65535
 5091d58:	11000b36 	bltu	r2,r4,5091d88 <__clzsi2+0x34>
 5091d5c:	00803fc4 	movi	r2,255
 5091d60:	1100122e 	bgeu	r2,r4,5091dac <__clzsi2+0x58>
 5091d64:	00c00204 	movi	r3,8
 5091d68:	01400604 	movi	r5,24
 5091d6c:	20c8d83a 	srl	r4,r4,r3
 5091d70:	00814274 	movhi	r2,1289
 5091d74:	10955b04 	addi	r2,r2,21868
 5091d78:	1109883a 	add	r4,r2,r4
 5091d7c:	20800003 	ldbu	r2,0(r4)
 5091d80:	2885c83a 	sub	r2,r5,r2
 5091d84:	f800283a 	ret
 5091d88:	00804034 	movhi	r2,256
 5091d8c:	10bfffc4 	addi	r2,r2,-1
 5091d90:	11000336 	bltu	r2,r4,5091da0 <__clzsi2+0x4c>
 5091d94:	00c00404 	movi	r3,16
 5091d98:	180b883a 	mov	r5,r3
 5091d9c:	003ff306 	br	5091d6c <__alt_data_end+0xfffc3b6c>
 5091da0:	00c00604 	movi	r3,24
 5091da4:	01400204 	movi	r5,8
 5091da8:	003ff006 	br	5091d6c <__alt_data_end+0xfffc3b6c>
 5091dac:	0007883a 	mov	r3,zero
 5091db0:	01400804 	movi	r5,32
 5091db4:	003fed06 	br	5091d6c <__alt_data_end+0xfffc3b6c>

05091db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091db8:	defffe04 	addi	sp,sp,-8
 5091dbc:	dfc00115 	stw	ra,4(sp)
 5091dc0:	df000015 	stw	fp,0(sp)
 5091dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091dc8:	00814274 	movhi	r2,1289
 5091dcc:	109c6004 	addi	r2,r2,29056
 5091dd0:	10800017 	ldw	r2,0(r2)
 5091dd4:	10000526 	beq	r2,zero,5091dec <alt_get_errno+0x34>
 5091dd8:	00814274 	movhi	r2,1289
 5091ddc:	109c6004 	addi	r2,r2,29056
 5091de0:	10800017 	ldw	r2,0(r2)
 5091de4:	103ee83a 	callr	r2
 5091de8:	00000206 	br	5091df4 <alt_get_errno+0x3c>
 5091dec:	008142b4 	movhi	r2,1290
 5091df0:	10a32d04 	addi	r2,r2,-29516
}
 5091df4:	e037883a 	mov	sp,fp
 5091df8:	dfc00117 	ldw	ra,4(sp)
 5091dfc:	df000017 	ldw	fp,0(sp)
 5091e00:	dec00204 	addi	sp,sp,8
 5091e04:	f800283a 	ret

05091e08 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 5091e08:	defffb04 	addi	sp,sp,-20
 5091e0c:	dfc00415 	stw	ra,16(sp)
 5091e10:	df000315 	stw	fp,12(sp)
 5091e14:	df000304 	addi	fp,sp,12
 5091e18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 5091e1c:	e0bfff17 	ldw	r2,-4(fp)
 5091e20:	10000616 	blt	r2,zero,5091e3c <close+0x34>
 5091e24:	e0bfff17 	ldw	r2,-4(fp)
 5091e28:	10c00324 	muli	r3,r2,12
 5091e2c:	00814274 	movhi	r2,1289
 5091e30:	1097dd04 	addi	r2,r2,24436
 5091e34:	1885883a 	add	r2,r3,r2
 5091e38:	00000106 	br	5091e40 <close+0x38>
 5091e3c:	0005883a 	mov	r2,zero
 5091e40:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 5091e44:	e0bffd17 	ldw	r2,-12(fp)
 5091e48:	10001926 	beq	r2,zero,5091eb0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 5091e4c:	e0bffd17 	ldw	r2,-12(fp)
 5091e50:	10800017 	ldw	r2,0(r2)
 5091e54:	10800417 	ldw	r2,16(r2)
 5091e58:	10000626 	beq	r2,zero,5091e74 <close+0x6c>
 5091e5c:	e0bffd17 	ldw	r2,-12(fp)
 5091e60:	10800017 	ldw	r2,0(r2)
 5091e64:	10800417 	ldw	r2,16(r2)
 5091e68:	e13ffd17 	ldw	r4,-12(fp)
 5091e6c:	103ee83a 	callr	r2
 5091e70:	00000106 	br	5091e78 <close+0x70>
 5091e74:	0005883a 	mov	r2,zero
 5091e78:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 5091e7c:	e13fff17 	ldw	r4,-4(fp)
 5091e80:	50926b40 	call	50926b4 <alt_release_fd>
    if (rval < 0)
 5091e84:	e0bffe17 	ldw	r2,-8(fp)
 5091e88:	1000070e 	bge	r2,zero,5091ea8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 5091e8c:	5091db80 	call	5091db8 <alt_get_errno>
 5091e90:	1007883a 	mov	r3,r2
 5091e94:	e0bffe17 	ldw	r2,-8(fp)
 5091e98:	0085c83a 	sub	r2,zero,r2
 5091e9c:	18800015 	stw	r2,0(r3)
      return -1;
 5091ea0:	00bfffc4 	movi	r2,-1
 5091ea4:	00000706 	br	5091ec4 <close+0xbc>
    }
    return 0;
 5091ea8:	0005883a 	mov	r2,zero
 5091eac:	00000506 	br	5091ec4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5091eb0:	5091db80 	call	5091db8 <alt_get_errno>
 5091eb4:	1007883a 	mov	r3,r2
 5091eb8:	00801444 	movi	r2,81
 5091ebc:	18800015 	stw	r2,0(r3)
    return -1;
 5091ec0:	00bfffc4 	movi	r2,-1
  }
}
 5091ec4:	e037883a 	mov	sp,fp
 5091ec8:	dfc00117 	ldw	ra,4(sp)
 5091ecc:	df000017 	ldw	fp,0(sp)
 5091ed0:	dec00204 	addi	sp,sp,8
 5091ed4:	f800283a 	ret

05091ed8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5091ed8:	defffc04 	addi	sp,sp,-16
 5091edc:	df000315 	stw	fp,12(sp)
 5091ee0:	df000304 	addi	fp,sp,12
 5091ee4:	e13ffd15 	stw	r4,-12(fp)
 5091ee8:	e17ffe15 	stw	r5,-8(fp)
 5091eec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 5091ef0:	e0bfff17 	ldw	r2,-4(fp)
}
 5091ef4:	e037883a 	mov	sp,fp
 5091ef8:	df000017 	ldw	fp,0(sp)
 5091efc:	dec00104 	addi	sp,sp,4
 5091f00:	f800283a 	ret

05091f04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5091f04:	defffe04 	addi	sp,sp,-8
 5091f08:	dfc00115 	stw	ra,4(sp)
 5091f0c:	df000015 	stw	fp,0(sp)
 5091f10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5091f14:	00814274 	movhi	r2,1289
 5091f18:	109c6004 	addi	r2,r2,29056
 5091f1c:	10800017 	ldw	r2,0(r2)
 5091f20:	10000526 	beq	r2,zero,5091f38 <alt_get_errno+0x34>
 5091f24:	00814274 	movhi	r2,1289
 5091f28:	109c6004 	addi	r2,r2,29056
 5091f2c:	10800017 	ldw	r2,0(r2)
 5091f30:	103ee83a 	callr	r2
 5091f34:	00000206 	br	5091f40 <alt_get_errno+0x3c>
 5091f38:	008142b4 	movhi	r2,1290
 5091f3c:	10a32d04 	addi	r2,r2,-29516
}
 5091f40:	e037883a 	mov	sp,fp
 5091f44:	dfc00117 	ldw	ra,4(sp)
 5091f48:	df000017 	ldw	fp,0(sp)
 5091f4c:	dec00204 	addi	sp,sp,8
 5091f50:	f800283a 	ret

05091f54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 5091f54:	defffb04 	addi	sp,sp,-20
 5091f58:	dfc00415 	stw	ra,16(sp)
 5091f5c:	df000315 	stw	fp,12(sp)
 5091f60:	df000304 	addi	fp,sp,12
 5091f64:	e13ffe15 	stw	r4,-8(fp)
 5091f68:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5091f6c:	e0bffe17 	ldw	r2,-8(fp)
 5091f70:	10000616 	blt	r2,zero,5091f8c <fstat+0x38>
 5091f74:	e0bffe17 	ldw	r2,-8(fp)
 5091f78:	10c00324 	muli	r3,r2,12
 5091f7c:	00814274 	movhi	r2,1289
 5091f80:	1097dd04 	addi	r2,r2,24436
 5091f84:	1885883a 	add	r2,r3,r2
 5091f88:	00000106 	br	5091f90 <fstat+0x3c>
 5091f8c:	0005883a 	mov	r2,zero
 5091f90:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 5091f94:	e0bffd17 	ldw	r2,-12(fp)
 5091f98:	10001026 	beq	r2,zero,5091fdc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 5091f9c:	e0bffd17 	ldw	r2,-12(fp)
 5091fa0:	10800017 	ldw	r2,0(r2)
 5091fa4:	10800817 	ldw	r2,32(r2)
 5091fa8:	10000726 	beq	r2,zero,5091fc8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 5091fac:	e0bffd17 	ldw	r2,-12(fp)
 5091fb0:	10800017 	ldw	r2,0(r2)
 5091fb4:	10800817 	ldw	r2,32(r2)
 5091fb8:	e13ffd17 	ldw	r4,-12(fp)
 5091fbc:	e17fff17 	ldw	r5,-4(fp)
 5091fc0:	103ee83a 	callr	r2
 5091fc4:	00000a06 	br	5091ff0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 5091fc8:	e0bfff17 	ldw	r2,-4(fp)
 5091fcc:	00c80004 	movi	r3,8192
 5091fd0:	10c00115 	stw	r3,4(r2)
      return 0;
 5091fd4:	0005883a 	mov	r2,zero
 5091fd8:	00000506 	br	5091ff0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5091fdc:	5091f040 	call	5091f04 <alt_get_errno>
 5091fe0:	1007883a 	mov	r3,r2
 5091fe4:	00801444 	movi	r2,81
 5091fe8:	18800015 	stw	r2,0(r3)
    return -1;
 5091fec:	00bfffc4 	movi	r2,-1
  }
}
 5091ff0:	e037883a 	mov	sp,fp
 5091ff4:	dfc00117 	ldw	ra,4(sp)
 5091ff8:	df000017 	ldw	fp,0(sp)
 5091ffc:	dec00204 	addi	sp,sp,8
 5092000:	f800283a 	ret

05092004 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 5092004:	defff004 	addi	sp,sp,-64
 5092008:	df000f15 	stw	fp,60(sp)
 509200c:	df000f04 	addi	fp,sp,60
 5092010:	e13ffd15 	stw	r4,-12(fp)
 5092014:	e17ffe15 	stw	r5,-8(fp)
 5092018:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 509201c:	00bffa84 	movi	r2,-22
 5092020:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 5092024:	e0bffd17 	ldw	r2,-12(fp)
 5092028:	10800828 	cmpgeui	r2,r2,32
 509202c:	10005c1e 	bne	r2,zero,50921a0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092030:	0005303a 	rdctl	r2,status
 5092034:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5092038:	e0fff317 	ldw	r3,-52(fp)
 509203c:	00bfff84 	movi	r2,-2
 5092040:	1884703a 	and	r2,r3,r2
 5092044:	1001703a 	wrctl	status,r2
  
  return context;
 5092048:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 509204c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 5092050:	008142b4 	movhi	r2,1290
 5092054:	10a34804 	addi	r2,r2,-29408
 5092058:	e0fffd17 	ldw	r3,-12(fp)
 509205c:	180690fa 	slli	r3,r3,3
 5092060:	10c5883a 	add	r2,r2,r3
 5092064:	e0ffff17 	ldw	r3,-4(fp)
 5092068:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 509206c:	008142b4 	movhi	r2,1290
 5092070:	10a34804 	addi	r2,r2,-29408
 5092074:	e0fffd17 	ldw	r3,-12(fp)
 5092078:	180690fa 	slli	r3,r3,3
 509207c:	10c5883a 	add	r2,r2,r3
 5092080:	10800104 	addi	r2,r2,4
 5092084:	e0fffe17 	ldw	r3,-8(fp)
 5092088:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 509208c:	e0bfff17 	ldw	r2,-4(fp)
 5092090:	10001f26 	beq	r2,zero,5092110 <alt_irq_register+0x10c>
 5092094:	e0bffd17 	ldw	r2,-12(fp)
 5092098:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 509209c:	0005303a 	rdctl	r2,status
 50920a0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50920a4:	e0fff517 	ldw	r3,-44(fp)
 50920a8:	00bfff84 	movi	r2,-2
 50920ac:	1884703a 	and	r2,r3,r2
 50920b0:	1001703a 	wrctl	status,r2
  
  return context;
 50920b4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 50920b8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 50920bc:	e0bff417 	ldw	r2,-48(fp)
 50920c0:	00c00044 	movi	r3,1
 50920c4:	1884983a 	sll	r2,r3,r2
 50920c8:	1007883a 	mov	r3,r2
 50920cc:	008142b4 	movhi	r2,1290
 50920d0:	10a32e04 	addi	r2,r2,-29512
 50920d4:	10800017 	ldw	r2,0(r2)
 50920d8:	1886b03a 	or	r3,r3,r2
 50920dc:	008142b4 	movhi	r2,1290
 50920e0:	10a32e04 	addi	r2,r2,-29512
 50920e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 50920e8:	008142b4 	movhi	r2,1290
 50920ec:	10a32e04 	addi	r2,r2,-29512
 50920f0:	10800017 	ldw	r2,0(r2)
 50920f4:	100170fa 	wrctl	ienable,r2
 50920f8:	e0bff617 	ldw	r2,-40(fp)
 50920fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5092100:	e0bff717 	ldw	r2,-36(fp)
 5092104:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5092108:	0005883a 	mov	r2,zero
 509210c:	00001f06 	br	509218c <alt_irq_register+0x188>
 5092110:	e0bffd17 	ldw	r2,-12(fp)
 5092114:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092118:	0005303a 	rdctl	r2,status
 509211c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5092120:	e0fff917 	ldw	r3,-28(fp)
 5092124:	00bfff84 	movi	r2,-2
 5092128:	1884703a 	and	r2,r3,r2
 509212c:	1001703a 	wrctl	status,r2
  
  return context;
 5092130:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5092134:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 5092138:	e0bff817 	ldw	r2,-32(fp)
 509213c:	00c00044 	movi	r3,1
 5092140:	1884983a 	sll	r2,r3,r2
 5092144:	0084303a 	nor	r2,zero,r2
 5092148:	1007883a 	mov	r3,r2
 509214c:	008142b4 	movhi	r2,1290
 5092150:	10a32e04 	addi	r2,r2,-29512
 5092154:	10800017 	ldw	r2,0(r2)
 5092158:	1886703a 	and	r3,r3,r2
 509215c:	008142b4 	movhi	r2,1290
 5092160:	10a32e04 	addi	r2,r2,-29512
 5092164:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5092168:	008142b4 	movhi	r2,1290
 509216c:	10a32e04 	addi	r2,r2,-29512
 5092170:	10800017 	ldw	r2,0(r2)
 5092174:	100170fa 	wrctl	ienable,r2
 5092178:	e0bffa17 	ldw	r2,-24(fp)
 509217c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5092180:	e0bffb17 	ldw	r2,-20(fp)
 5092184:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5092188:	0005883a 	mov	r2,zero
 509218c:	e0bff115 	stw	r2,-60(fp)
 5092190:	e0bff217 	ldw	r2,-56(fp)
 5092194:	e0bffc15 	stw	r2,-16(fp)
 5092198:	e0bffc17 	ldw	r2,-16(fp)
 509219c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 50921a0:	e0bff117 	ldw	r2,-60(fp)
}
 50921a4:	e037883a 	mov	sp,fp
 50921a8:	df000017 	ldw	fp,0(sp)
 50921ac:	dec00104 	addi	sp,sp,4
 50921b0:	f800283a 	ret

050921b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50921b4:	defffe04 	addi	sp,sp,-8
 50921b8:	dfc00115 	stw	ra,4(sp)
 50921bc:	df000015 	stw	fp,0(sp)
 50921c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50921c4:	00814274 	movhi	r2,1289
 50921c8:	109c6004 	addi	r2,r2,29056
 50921cc:	10800017 	ldw	r2,0(r2)
 50921d0:	10000526 	beq	r2,zero,50921e8 <alt_get_errno+0x34>
 50921d4:	00814274 	movhi	r2,1289
 50921d8:	109c6004 	addi	r2,r2,29056
 50921dc:	10800017 	ldw	r2,0(r2)
 50921e0:	103ee83a 	callr	r2
 50921e4:	00000206 	br	50921f0 <alt_get_errno+0x3c>
 50921e8:	008142b4 	movhi	r2,1290
 50921ec:	10a32d04 	addi	r2,r2,-29516
}
 50921f0:	e037883a 	mov	sp,fp
 50921f4:	dfc00117 	ldw	ra,4(sp)
 50921f8:	df000017 	ldw	fp,0(sp)
 50921fc:	dec00204 	addi	sp,sp,8
 5092200:	f800283a 	ret

05092204 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 5092204:	deffed04 	addi	sp,sp,-76
 5092208:	dfc01215 	stw	ra,72(sp)
 509220c:	df001115 	stw	fp,68(sp)
 5092210:	df001104 	addi	fp,sp,68
 5092214:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5092218:	e0bfff17 	ldw	r2,-4(fp)
 509221c:	10000616 	blt	r2,zero,5092238 <isatty+0x34>
 5092220:	e0bfff17 	ldw	r2,-4(fp)
 5092224:	10c00324 	muli	r3,r2,12
 5092228:	00814274 	movhi	r2,1289
 509222c:	1097dd04 	addi	r2,r2,24436
 5092230:	1885883a 	add	r2,r3,r2
 5092234:	00000106 	br	509223c <isatty+0x38>
 5092238:	0005883a 	mov	r2,zero
 509223c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 5092240:	e0bfef17 	ldw	r2,-68(fp)
 5092244:	10000e26 	beq	r2,zero,5092280 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 5092248:	e0bfef17 	ldw	r2,-68(fp)
 509224c:	10800017 	ldw	r2,0(r2)
 5092250:	10800817 	ldw	r2,32(r2)
 5092254:	1000021e 	bne	r2,zero,5092260 <isatty+0x5c>
    {
      return 1;
 5092258:	00800044 	movi	r2,1
 509225c:	00000d06 	br	5092294 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 5092260:	e0bff004 	addi	r2,fp,-64
 5092264:	e13fff17 	ldw	r4,-4(fp)
 5092268:	100b883a 	mov	r5,r2
 509226c:	5091f540 	call	5091f54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 5092270:	e0bff117 	ldw	r2,-60(fp)
 5092274:	10880020 	cmpeqi	r2,r2,8192
 5092278:	10803fcc 	andi	r2,r2,255
 509227c:	00000506 	br	5092294 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5092280:	50921b40 	call	50921b4 <alt_get_errno>
 5092284:	1007883a 	mov	r3,r2
 5092288:	00801444 	movi	r2,81
 509228c:	18800015 	stw	r2,0(r3)
    return 0;
 5092290:	0005883a 	mov	r2,zero
  }
}
 5092294:	e037883a 	mov	sp,fp
 5092298:	dfc00117 	ldw	ra,4(sp)
 509229c:	df000017 	ldw	fp,0(sp)
 50922a0:	dec00204 	addi	sp,sp,8
 50922a4:	f800283a 	ret

050922a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 50922a8:	defffc04 	addi	sp,sp,-16
 50922ac:	df000315 	stw	fp,12(sp)
 50922b0:	df000304 	addi	fp,sp,12
 50922b4:	e13ffd15 	stw	r4,-12(fp)
 50922b8:	e17ffe15 	stw	r5,-8(fp)
 50922bc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 50922c0:	e0fffe17 	ldw	r3,-8(fp)
 50922c4:	e0bffd17 	ldw	r2,-12(fp)
 50922c8:	18800c26 	beq	r3,r2,50922fc <alt_load_section+0x54>
  {
    while( to != end )
 50922cc:	00000806 	br	50922f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 50922d0:	e0bffe17 	ldw	r2,-8(fp)
 50922d4:	10c00104 	addi	r3,r2,4
 50922d8:	e0fffe15 	stw	r3,-8(fp)
 50922dc:	e0fffd17 	ldw	r3,-12(fp)
 50922e0:	19000104 	addi	r4,r3,4
 50922e4:	e13ffd15 	stw	r4,-12(fp)
 50922e8:	18c00017 	ldw	r3,0(r3)
 50922ec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 50922f0:	e0fffe17 	ldw	r3,-8(fp)
 50922f4:	e0bfff17 	ldw	r2,-4(fp)
 50922f8:	18bff51e 	bne	r3,r2,50922d0 <__alt_data_end+0xfffc40d0>
    {
      *to++ = *from++;
    }
  }
}
 50922fc:	e037883a 	mov	sp,fp
 5092300:	df000017 	ldw	fp,0(sp)
 5092304:	dec00104 	addi	sp,sp,4
 5092308:	f800283a 	ret

0509230c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 509230c:	defffe04 	addi	sp,sp,-8
 5092310:	dfc00115 	stw	ra,4(sp)
 5092314:	df000015 	stw	fp,0(sp)
 5092318:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 509231c:	01014274 	movhi	r4,1289
 5092320:	211c6504 	addi	r4,r4,29076
 5092324:	01414274 	movhi	r5,1289
 5092328:	2955a604 	addi	r5,r5,22168
 509232c:	01814274 	movhi	r6,1289
 5092330:	319c6504 	addi	r6,r6,29076
 5092334:	50922a80 	call	50922a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 5092338:	01014234 	movhi	r4,1288
 509233c:	21000804 	addi	r4,r4,32
 5092340:	01414234 	movhi	r5,1288
 5092344:	29400804 	addi	r5,r5,32
 5092348:	01814234 	movhi	r6,1288
 509234c:	31806f04 	addi	r6,r6,444
 5092350:	50922a80 	call	50922a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 5092354:	01014274 	movhi	r4,1289
 5092358:	21123204 	addi	r4,r4,18632
 509235c:	01414274 	movhi	r5,1289
 5092360:	29523204 	addi	r5,r5,18632
 5092364:	01814274 	movhi	r6,1289
 5092368:	3195a604 	addi	r6,r6,22168
 509236c:	50922a80 	call	50922a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 5092370:	50937e80 	call	50937e8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 5092374:	50939d80 	call	50939d8 <alt_icache_flush_all>
}
 5092378:	e037883a 	mov	sp,fp
 509237c:	dfc00117 	ldw	ra,4(sp)
 5092380:	df000017 	ldw	fp,0(sp)
 5092384:	dec00204 	addi	sp,sp,8
 5092388:	f800283a 	ret

0509238c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 509238c:	defffe04 	addi	sp,sp,-8
 5092390:	dfc00115 	stw	ra,4(sp)
 5092394:	df000015 	stw	fp,0(sp)
 5092398:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 509239c:	00814274 	movhi	r2,1289
 50923a0:	109c6004 	addi	r2,r2,29056
 50923a4:	10800017 	ldw	r2,0(r2)
 50923a8:	10000526 	beq	r2,zero,50923c0 <alt_get_errno+0x34>
 50923ac:	00814274 	movhi	r2,1289
 50923b0:	109c6004 	addi	r2,r2,29056
 50923b4:	10800017 	ldw	r2,0(r2)
 50923b8:	103ee83a 	callr	r2
 50923bc:	00000206 	br	50923c8 <alt_get_errno+0x3c>
 50923c0:	008142b4 	movhi	r2,1290
 50923c4:	10a32d04 	addi	r2,r2,-29516
}
 50923c8:	e037883a 	mov	sp,fp
 50923cc:	dfc00117 	ldw	ra,4(sp)
 50923d0:	df000017 	ldw	fp,0(sp)
 50923d4:	dec00204 	addi	sp,sp,8
 50923d8:	f800283a 	ret

050923dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 50923dc:	defff904 	addi	sp,sp,-28
 50923e0:	dfc00615 	stw	ra,24(sp)
 50923e4:	df000515 	stw	fp,20(sp)
 50923e8:	df000504 	addi	fp,sp,20
 50923ec:	e13ffd15 	stw	r4,-12(fp)
 50923f0:	e17ffe15 	stw	r5,-8(fp)
 50923f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 50923f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50923fc:	e0bffd17 	ldw	r2,-12(fp)
 5092400:	10000616 	blt	r2,zero,509241c <lseek+0x40>
 5092404:	e0bffd17 	ldw	r2,-12(fp)
 5092408:	10c00324 	muli	r3,r2,12
 509240c:	00814274 	movhi	r2,1289
 5092410:	1097dd04 	addi	r2,r2,24436
 5092414:	1885883a 	add	r2,r3,r2
 5092418:	00000106 	br	5092420 <lseek+0x44>
 509241c:	0005883a 	mov	r2,zero
 5092420:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 5092424:	e0bffc17 	ldw	r2,-16(fp)
 5092428:	10001026 	beq	r2,zero,509246c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 509242c:	e0bffc17 	ldw	r2,-16(fp)
 5092430:	10800017 	ldw	r2,0(r2)
 5092434:	10800717 	ldw	r2,28(r2)
 5092438:	10000926 	beq	r2,zero,5092460 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 509243c:	e0bffc17 	ldw	r2,-16(fp)
 5092440:	10800017 	ldw	r2,0(r2)
 5092444:	10800717 	ldw	r2,28(r2)
 5092448:	e13ffc17 	ldw	r4,-16(fp)
 509244c:	e17ffe17 	ldw	r5,-8(fp)
 5092450:	e1bfff17 	ldw	r6,-4(fp)
 5092454:	103ee83a 	callr	r2
 5092458:	e0bffb15 	stw	r2,-20(fp)
 509245c:	00000506 	br	5092474 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 5092460:	00bfde84 	movi	r2,-134
 5092464:	e0bffb15 	stw	r2,-20(fp)
 5092468:	00000206 	br	5092474 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 509246c:	00bfebc4 	movi	r2,-81
 5092470:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 5092474:	e0bffb17 	ldw	r2,-20(fp)
 5092478:	1000070e 	bge	r2,zero,5092498 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 509247c:	509238c0 	call	509238c <alt_get_errno>
 5092480:	1007883a 	mov	r3,r2
 5092484:	e0bffb17 	ldw	r2,-20(fp)
 5092488:	0085c83a 	sub	r2,zero,r2
 509248c:	18800015 	stw	r2,0(r3)
    rc = -1;
 5092490:	00bfffc4 	movi	r2,-1
 5092494:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 5092498:	e0bffb17 	ldw	r2,-20(fp)
}
 509249c:	e037883a 	mov	sp,fp
 50924a0:	dfc00117 	ldw	ra,4(sp)
 50924a4:	df000017 	ldw	fp,0(sp)
 50924a8:	dec00204 	addi	sp,sp,8
 50924ac:	f800283a 	ret

050924b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 50924b0:	defffd04 	addi	sp,sp,-12
 50924b4:	dfc00215 	stw	ra,8(sp)
 50924b8:	df000115 	stw	fp,4(sp)
 50924bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 50924c0:	0009883a 	mov	r4,zero
 50924c4:	50929740 	call	5092974 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 50924c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 50924cc:	50929a80 	call	50929a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 50924d0:	01014274 	movhi	r4,1289
 50924d4:	21159e04 	addi	r4,r4,22136
 50924d8:	01414274 	movhi	r5,1289
 50924dc:	29559e04 	addi	r5,r5,22136
 50924e0:	01814274 	movhi	r6,1289
 50924e4:	31959e04 	addi	r6,r6,22136
 50924e8:	5093d980 	call	5093d98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 50924ec:	50939200 	call	5093920 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 50924f0:	01014274 	movhi	r4,1289
 50924f4:	210e5f04 	addi	r4,r4,14716
 50924f8:	50945240 	call	5094524 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 50924fc:	d126da17 	ldw	r4,-25752(gp)
 5092500:	d0e6db17 	ldw	r3,-25748(gp)
 5092504:	d0a6dc17 	ldw	r2,-25744(gp)
 5092508:	180b883a 	mov	r5,r3
 509250c:	100d883a 	mov	r6,r2
 5092510:	508224c0 	call	508224c <main>
 5092514:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 5092518:	01000044 	movi	r4,1
 509251c:	5091e080 	call	5091e08 <close>
  exit (result);
 5092520:	e13fff17 	ldw	r4,-4(fp)
 5092524:	50945380 	call	5094538 <exit>

05092528 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 5092528:	defffe04 	addi	sp,sp,-8
 509252c:	df000115 	stw	fp,4(sp)
 5092530:	df000104 	addi	fp,sp,4
 5092534:	e13fff15 	stw	r4,-4(fp)
}
 5092538:	e037883a 	mov	sp,fp
 509253c:	df000017 	ldw	fp,0(sp)
 5092540:	dec00104 	addi	sp,sp,4
 5092544:	f800283a 	ret

05092548 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 5092548:	defffe04 	addi	sp,sp,-8
 509254c:	df000115 	stw	fp,4(sp)
 5092550:	df000104 	addi	fp,sp,4
 5092554:	e13fff15 	stw	r4,-4(fp)
}
 5092558:	e037883a 	mov	sp,fp
 509255c:	df000017 	ldw	fp,0(sp)
 5092560:	dec00104 	addi	sp,sp,4
 5092564:	f800283a 	ret

05092568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5092568:	defffe04 	addi	sp,sp,-8
 509256c:	dfc00115 	stw	ra,4(sp)
 5092570:	df000015 	stw	fp,0(sp)
 5092574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5092578:	00814274 	movhi	r2,1289
 509257c:	109c6004 	addi	r2,r2,29056
 5092580:	10800017 	ldw	r2,0(r2)
 5092584:	10000526 	beq	r2,zero,509259c <alt_get_errno+0x34>
 5092588:	00814274 	movhi	r2,1289
 509258c:	109c6004 	addi	r2,r2,29056
 5092590:	10800017 	ldw	r2,0(r2)
 5092594:	103ee83a 	callr	r2
 5092598:	00000206 	br	50925a4 <alt_get_errno+0x3c>
 509259c:	008142b4 	movhi	r2,1290
 50925a0:	10a32d04 	addi	r2,r2,-29516
}
 50925a4:	e037883a 	mov	sp,fp
 50925a8:	dfc00117 	ldw	ra,4(sp)
 50925ac:	df000017 	ldw	fp,0(sp)
 50925b0:	dec00204 	addi	sp,sp,8
 50925b4:	f800283a 	ret

050925b8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 50925b8:	defff904 	addi	sp,sp,-28
 50925bc:	dfc00615 	stw	ra,24(sp)
 50925c0:	df000515 	stw	fp,20(sp)
 50925c4:	df000504 	addi	fp,sp,20
 50925c8:	e13ffd15 	stw	r4,-12(fp)
 50925cc:	e17ffe15 	stw	r5,-8(fp)
 50925d0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50925d4:	e0bffd17 	ldw	r2,-12(fp)
 50925d8:	10000616 	blt	r2,zero,50925f4 <read+0x3c>
 50925dc:	e0bffd17 	ldw	r2,-12(fp)
 50925e0:	10c00324 	muli	r3,r2,12
 50925e4:	00814274 	movhi	r2,1289
 50925e8:	1097dd04 	addi	r2,r2,24436
 50925ec:	1885883a 	add	r2,r3,r2
 50925f0:	00000106 	br	50925f8 <read+0x40>
 50925f4:	0005883a 	mov	r2,zero
 50925f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 50925fc:	e0bffb17 	ldw	r2,-20(fp)
 5092600:	10002226 	beq	r2,zero,509268c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5092604:	e0bffb17 	ldw	r2,-20(fp)
 5092608:	10800217 	ldw	r2,8(r2)
 509260c:	108000cc 	andi	r2,r2,3
 5092610:	10800060 	cmpeqi	r2,r2,1
 5092614:	1000181e 	bne	r2,zero,5092678 <read+0xc0>
        (fd->dev->read))
 5092618:	e0bffb17 	ldw	r2,-20(fp)
 509261c:	10800017 	ldw	r2,0(r2)
 5092620:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 5092624:	10001426 	beq	r2,zero,5092678 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 5092628:	e0bffb17 	ldw	r2,-20(fp)
 509262c:	10800017 	ldw	r2,0(r2)
 5092630:	10800517 	ldw	r2,20(r2)
 5092634:	e0ffff17 	ldw	r3,-4(fp)
 5092638:	e13ffb17 	ldw	r4,-20(fp)
 509263c:	e17ffe17 	ldw	r5,-8(fp)
 5092640:	180d883a 	mov	r6,r3
 5092644:	103ee83a 	callr	r2
 5092648:	e0bffc15 	stw	r2,-16(fp)
 509264c:	e0bffc17 	ldw	r2,-16(fp)
 5092650:	1000070e 	bge	r2,zero,5092670 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 5092654:	50925680 	call	5092568 <alt_get_errno>
 5092658:	1007883a 	mov	r3,r2
 509265c:	e0bffc17 	ldw	r2,-16(fp)
 5092660:	0085c83a 	sub	r2,zero,r2
 5092664:	18800015 	stw	r2,0(r3)
          return -1;
 5092668:	00bfffc4 	movi	r2,-1
 509266c:	00000c06 	br	50926a0 <read+0xe8>
        }
        return rval;
 5092670:	e0bffc17 	ldw	r2,-16(fp)
 5092674:	00000a06 	br	50926a0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 5092678:	50925680 	call	5092568 <alt_get_errno>
 509267c:	1007883a 	mov	r3,r2
 5092680:	00800344 	movi	r2,13
 5092684:	18800015 	stw	r2,0(r3)
 5092688:	00000406 	br	509269c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 509268c:	50925680 	call	5092568 <alt_get_errno>
 5092690:	1007883a 	mov	r3,r2
 5092694:	00801444 	movi	r2,81
 5092698:	18800015 	stw	r2,0(r3)
  }
  return -1;
 509269c:	00bfffc4 	movi	r2,-1
}
 50926a0:	e037883a 	mov	sp,fp
 50926a4:	dfc00117 	ldw	ra,4(sp)
 50926a8:	df000017 	ldw	fp,0(sp)
 50926ac:	dec00204 	addi	sp,sp,8
 50926b0:	f800283a 	ret

050926b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 50926b4:	defffe04 	addi	sp,sp,-8
 50926b8:	df000115 	stw	fp,4(sp)
 50926bc:	df000104 	addi	fp,sp,4
 50926c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 50926c4:	e0bfff17 	ldw	r2,-4(fp)
 50926c8:	108000d0 	cmplti	r2,r2,3
 50926cc:	10000d1e 	bne	r2,zero,5092704 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 50926d0:	00814274 	movhi	r2,1289
 50926d4:	1097dd04 	addi	r2,r2,24436
 50926d8:	e0ffff17 	ldw	r3,-4(fp)
 50926dc:	18c00324 	muli	r3,r3,12
 50926e0:	10c5883a 	add	r2,r2,r3
 50926e4:	10800204 	addi	r2,r2,8
 50926e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 50926ec:	00814274 	movhi	r2,1289
 50926f0:	1097dd04 	addi	r2,r2,24436
 50926f4:	e0ffff17 	ldw	r3,-4(fp)
 50926f8:	18c00324 	muli	r3,r3,12
 50926fc:	10c5883a 	add	r2,r2,r3
 5092700:	10000015 	stw	zero,0(r2)
  }
}
 5092704:	e037883a 	mov	sp,fp
 5092708:	df000017 	ldw	fp,0(sp)
 509270c:	dec00104 	addi	sp,sp,4
 5092710:	f800283a 	ret

05092714 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 5092714:	defff904 	addi	sp,sp,-28
 5092718:	df000615 	stw	fp,24(sp)
 509271c:	df000604 	addi	fp,sp,24
 5092720:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5092724:	0005303a 	rdctl	r2,status
 5092728:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 509272c:	e0fffc17 	ldw	r3,-16(fp)
 5092730:	00bfff84 	movi	r2,-2
 5092734:	1884703a 	and	r2,r3,r2
 5092738:	1001703a 	wrctl	status,r2
  
  return context;
 509273c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5092740:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 5092744:	d0a00d17 	ldw	r2,-32716(gp)
 5092748:	10c000c4 	addi	r3,r2,3
 509274c:	00bfff04 	movi	r2,-4
 5092750:	1884703a 	and	r2,r3,r2
 5092754:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 5092758:	d0e00d17 	ldw	r3,-32716(gp)
 509275c:	e0bfff17 	ldw	r2,-4(fp)
 5092760:	1887883a 	add	r3,r3,r2
 5092764:	00814374 	movhi	r2,1293
 5092768:	10b88004 	addi	r2,r2,-7680
 509276c:	10c0062e 	bgeu	r2,r3,5092788 <sbrk+0x74>
 5092770:	e0bffa17 	ldw	r2,-24(fp)
 5092774:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5092778:	e0bffd17 	ldw	r2,-12(fp)
 509277c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5092780:	00bfffc4 	movi	r2,-1
 5092784:	00000b06 	br	50927b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 5092788:	d0a00d17 	ldw	r2,-32716(gp)
 509278c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 5092790:	d0e00d17 	ldw	r3,-32716(gp)
 5092794:	e0bfff17 	ldw	r2,-4(fp)
 5092798:	1885883a 	add	r2,r3,r2
 509279c:	d0a00d15 	stw	r2,-32716(gp)
 50927a0:	e0bffa17 	ldw	r2,-24(fp)
 50927a4:	e0bffe15 	stw	r2,-8(fp)
 50927a8:	e0bffe17 	ldw	r2,-8(fp)
 50927ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 50927b0:	e0bffb17 	ldw	r2,-20(fp)
} 
 50927b4:	e037883a 	mov	sp,fp
 50927b8:	df000017 	ldw	fp,0(sp)
 50927bc:	dec00104 	addi	sp,sp,4
 50927c0:	f800283a 	ret

050927c4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 50927c4:	defffd04 	addi	sp,sp,-12
 50927c8:	dfc00215 	stw	ra,8(sp)
 50927cc:	df000115 	stw	fp,4(sp)
 50927d0:	df000104 	addi	fp,sp,4
 50927d4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 50927d8:	e13fff17 	ldw	r4,-4(fp)
 50927dc:	50936900 	call	5093690 <alt_busy_sleep>
}
 50927e0:	e037883a 	mov	sp,fp
 50927e4:	dfc00117 	ldw	ra,4(sp)
 50927e8:	df000017 	ldw	fp,0(sp)
 50927ec:	dec00204 	addi	sp,sp,8
 50927f0:	f800283a 	ret

050927f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50927f4:	defffe04 	addi	sp,sp,-8
 50927f8:	dfc00115 	stw	ra,4(sp)
 50927fc:	df000015 	stw	fp,0(sp)
 5092800:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5092804:	00814274 	movhi	r2,1289
 5092808:	109c6004 	addi	r2,r2,29056
 509280c:	10800017 	ldw	r2,0(r2)
 5092810:	10000526 	beq	r2,zero,5092828 <alt_get_errno+0x34>
 5092814:	00814274 	movhi	r2,1289
 5092818:	109c6004 	addi	r2,r2,29056
 509281c:	10800017 	ldw	r2,0(r2)
 5092820:	103ee83a 	callr	r2
 5092824:	00000206 	br	5092830 <alt_get_errno+0x3c>
 5092828:	008142b4 	movhi	r2,1290
 509282c:	10a32d04 	addi	r2,r2,-29516
}
 5092830:	e037883a 	mov	sp,fp
 5092834:	dfc00117 	ldw	ra,4(sp)
 5092838:	df000017 	ldw	fp,0(sp)
 509283c:	dec00204 	addi	sp,sp,8
 5092840:	f800283a 	ret

05092844 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 5092844:	defff904 	addi	sp,sp,-28
 5092848:	dfc00615 	stw	ra,24(sp)
 509284c:	df000515 	stw	fp,20(sp)
 5092850:	df000504 	addi	fp,sp,20
 5092854:	e13ffd15 	stw	r4,-12(fp)
 5092858:	e17ffe15 	stw	r5,-8(fp)
 509285c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5092860:	e0bffd17 	ldw	r2,-12(fp)
 5092864:	10000616 	blt	r2,zero,5092880 <write+0x3c>
 5092868:	e0bffd17 	ldw	r2,-12(fp)
 509286c:	10c00324 	muli	r3,r2,12
 5092870:	00814274 	movhi	r2,1289
 5092874:	1097dd04 	addi	r2,r2,24436
 5092878:	1885883a 	add	r2,r3,r2
 509287c:	00000106 	br	5092884 <write+0x40>
 5092880:	0005883a 	mov	r2,zero
 5092884:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 5092888:	e0bffb17 	ldw	r2,-20(fp)
 509288c:	10002126 	beq	r2,zero,5092914 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5092890:	e0bffb17 	ldw	r2,-20(fp)
 5092894:	10800217 	ldw	r2,8(r2)
 5092898:	108000cc 	andi	r2,r2,3
 509289c:	10001826 	beq	r2,zero,5092900 <write+0xbc>
 50928a0:	e0bffb17 	ldw	r2,-20(fp)
 50928a4:	10800017 	ldw	r2,0(r2)
 50928a8:	10800617 	ldw	r2,24(r2)
 50928ac:	10001426 	beq	r2,zero,5092900 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 50928b0:	e0bffb17 	ldw	r2,-20(fp)
 50928b4:	10800017 	ldw	r2,0(r2)
 50928b8:	10800617 	ldw	r2,24(r2)
 50928bc:	e0ffff17 	ldw	r3,-4(fp)
 50928c0:	e13ffb17 	ldw	r4,-20(fp)
 50928c4:	e17ffe17 	ldw	r5,-8(fp)
 50928c8:	180d883a 	mov	r6,r3
 50928cc:	103ee83a 	callr	r2
 50928d0:	e0bffc15 	stw	r2,-16(fp)
 50928d4:	e0bffc17 	ldw	r2,-16(fp)
 50928d8:	1000070e 	bge	r2,zero,50928f8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 50928dc:	50927f40 	call	50927f4 <alt_get_errno>
 50928e0:	1007883a 	mov	r3,r2
 50928e4:	e0bffc17 	ldw	r2,-16(fp)
 50928e8:	0085c83a 	sub	r2,zero,r2
 50928ec:	18800015 	stw	r2,0(r3)
        return -1;
 50928f0:	00bfffc4 	movi	r2,-1
 50928f4:	00000c06 	br	5092928 <write+0xe4>
      }
      return rval;
 50928f8:	e0bffc17 	ldw	r2,-16(fp)
 50928fc:	00000a06 	br	5092928 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5092900:	50927f40 	call	50927f4 <alt_get_errno>
 5092904:	1007883a 	mov	r3,r2
 5092908:	00800344 	movi	r2,13
 509290c:	18800015 	stw	r2,0(r3)
 5092910:	00000406 	br	5092924 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 5092914:	50927f40 	call	50927f4 <alt_get_errno>
 5092918:	1007883a 	mov	r3,r2
 509291c:	00801444 	movi	r2,81
 5092920:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5092924:	00bfffc4 	movi	r2,-1
}
 5092928:	e037883a 	mov	sp,fp
 509292c:	dfc00117 	ldw	ra,4(sp)
 5092930:	df000017 	ldw	fp,0(sp)
 5092934:	dec00204 	addi	sp,sp,8
 5092938:	f800283a 	ret

0509293c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 509293c:	defffd04 	addi	sp,sp,-12
 5092940:	dfc00215 	stw	ra,8(sp)
 5092944:	df000115 	stw	fp,4(sp)
 5092948:	df000104 	addi	fp,sp,4
 509294c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 5092950:	e13fff17 	ldw	r4,-4(fp)
 5092954:	01414274 	movhi	r5,1289
 5092958:	295c5d04 	addi	r5,r5,29044
 509295c:	509387c0 	call	509387c <alt_dev_llist_insert>
}
 5092960:	e037883a 	mov	sp,fp
 5092964:	dfc00117 	ldw	ra,4(sp)
 5092968:	df000017 	ldw	fp,0(sp)
 509296c:	dec00204 	addi	sp,sp,8
 5092970:	f800283a 	ret

05092974 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5092974:	defffd04 	addi	sp,sp,-12
 5092978:	dfc00215 	stw	ra,8(sp)
 509297c:	df000115 	stw	fp,4(sp)
 5092980:	df000104 	addi	fp,sp,4
 5092984:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 5092988:	50942200 	call	5094220 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 509298c:	00800044 	movi	r2,1
 5092990:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5092994:	e037883a 	mov	sp,fp
 5092998:	dfc00117 	ldw	ra,4(sp)
 509299c:	df000017 	ldw	fp,0(sp)
 50929a0:	dec00204 	addi	sp,sp,8
 50929a4:	f800283a 	ret

050929a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 50929a8:	defffe04 	addi	sp,sp,-8
 50929ac:	dfc00115 	stw	ra,4(sp)
 50929b0:	df000015 	stw	fp,0(sp)
 50929b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 50929b8:	01014434 	movhi	r4,1296
 50929bc:	21040004 	addi	r4,r4,4096
 50929c0:	000b883a 	mov	r5,zero
 50929c4:	018000c4 	movi	r6,3
 50929c8:	01c0fa04 	movi	r7,1000
 50929cc:	50934c80 	call	50934c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 50929d0:	01014274 	movhi	r4,1289
 50929d4:	21184704 	addi	r4,r4,24860
 50929d8:	000b883a 	mov	r5,zero
 50929dc:	000d883a 	mov	r6,zero
 50929e0:	5092b6c0 	call	5092b6c <altera_avalon_jtag_uart_init>
 50929e4:	01014274 	movhi	r4,1289
 50929e8:	21183d04 	addi	r4,r4,24820
 50929ec:	509293c0 	call	509293c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 50929f0:	0001883a 	nop
}
 50929f4:	e037883a 	mov	sp,fp
 50929f8:	dfc00117 	ldw	ra,4(sp)
 50929fc:	df000017 	ldw	fp,0(sp)
 5092a00:	dec00204 	addi	sp,sp,8
 5092a04:	f800283a 	ret

05092a08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 5092a08:	defffa04 	addi	sp,sp,-24
 5092a0c:	dfc00515 	stw	ra,20(sp)
 5092a10:	df000415 	stw	fp,16(sp)
 5092a14:	df000404 	addi	fp,sp,16
 5092a18:	e13ffd15 	stw	r4,-12(fp)
 5092a1c:	e17ffe15 	stw	r5,-8(fp)
 5092a20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5092a24:	e0bffd17 	ldw	r2,-12(fp)
 5092a28:	10800017 	ldw	r2,0(r2)
 5092a2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5092a30:	e0bffc17 	ldw	r2,-16(fp)
 5092a34:	10c00a04 	addi	r3,r2,40
 5092a38:	e0bffd17 	ldw	r2,-12(fp)
 5092a3c:	10800217 	ldw	r2,8(r2)
 5092a40:	1809883a 	mov	r4,r3
 5092a44:	e17ffe17 	ldw	r5,-8(fp)
 5092a48:	e1bfff17 	ldw	r6,-4(fp)
 5092a4c:	100f883a 	mov	r7,r2
 5092a50:	50930300 	call	5093030 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5092a54:	e037883a 	mov	sp,fp
 5092a58:	dfc00117 	ldw	ra,4(sp)
 5092a5c:	df000017 	ldw	fp,0(sp)
 5092a60:	dec00204 	addi	sp,sp,8
 5092a64:	f800283a 	ret

05092a68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 5092a68:	defffa04 	addi	sp,sp,-24
 5092a6c:	dfc00515 	stw	ra,20(sp)
 5092a70:	df000415 	stw	fp,16(sp)
 5092a74:	df000404 	addi	fp,sp,16
 5092a78:	e13ffd15 	stw	r4,-12(fp)
 5092a7c:	e17ffe15 	stw	r5,-8(fp)
 5092a80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5092a84:	e0bffd17 	ldw	r2,-12(fp)
 5092a88:	10800017 	ldw	r2,0(r2)
 5092a8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5092a90:	e0bffc17 	ldw	r2,-16(fp)
 5092a94:	10c00a04 	addi	r3,r2,40
 5092a98:	e0bffd17 	ldw	r2,-12(fp)
 5092a9c:	10800217 	ldw	r2,8(r2)
 5092aa0:	1809883a 	mov	r4,r3
 5092aa4:	e17ffe17 	ldw	r5,-8(fp)
 5092aa8:	e1bfff17 	ldw	r6,-4(fp)
 5092aac:	100f883a 	mov	r7,r2
 5092ab0:	509323c0 	call	509323c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5092ab4:	e037883a 	mov	sp,fp
 5092ab8:	dfc00117 	ldw	ra,4(sp)
 5092abc:	df000017 	ldw	fp,0(sp)
 5092ac0:	dec00204 	addi	sp,sp,8
 5092ac4:	f800283a 	ret

05092ac8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 5092ac8:	defffc04 	addi	sp,sp,-16
 5092acc:	dfc00315 	stw	ra,12(sp)
 5092ad0:	df000215 	stw	fp,8(sp)
 5092ad4:	df000204 	addi	fp,sp,8
 5092ad8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5092adc:	e0bfff17 	ldw	r2,-4(fp)
 5092ae0:	10800017 	ldw	r2,0(r2)
 5092ae4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 5092ae8:	e0bffe17 	ldw	r2,-8(fp)
 5092aec:	10c00a04 	addi	r3,r2,40
 5092af0:	e0bfff17 	ldw	r2,-4(fp)
 5092af4:	10800217 	ldw	r2,8(r2)
 5092af8:	1809883a 	mov	r4,r3
 5092afc:	100b883a 	mov	r5,r2
 5092b00:	5092edc0 	call	5092edc <altera_avalon_jtag_uart_close>
}
 5092b04:	e037883a 	mov	sp,fp
 5092b08:	dfc00117 	ldw	ra,4(sp)
 5092b0c:	df000017 	ldw	fp,0(sp)
 5092b10:	dec00204 	addi	sp,sp,8
 5092b14:	f800283a 	ret

05092b18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 5092b18:	defffa04 	addi	sp,sp,-24
 5092b1c:	dfc00515 	stw	ra,20(sp)
 5092b20:	df000415 	stw	fp,16(sp)
 5092b24:	df000404 	addi	fp,sp,16
 5092b28:	e13ffd15 	stw	r4,-12(fp)
 5092b2c:	e17ffe15 	stw	r5,-8(fp)
 5092b30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5092b34:	e0bffd17 	ldw	r2,-12(fp)
 5092b38:	10800017 	ldw	r2,0(r2)
 5092b3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5092b40:	e0bffc17 	ldw	r2,-16(fp)
 5092b44:	10800a04 	addi	r2,r2,40
 5092b48:	1009883a 	mov	r4,r2
 5092b4c:	e17ffe17 	ldw	r5,-8(fp)
 5092b50:	e1bfff17 	ldw	r6,-4(fp)
 5092b54:	5092f440 	call	5092f44 <altera_avalon_jtag_uart_ioctl>
}
 5092b58:	e037883a 	mov	sp,fp
 5092b5c:	dfc00117 	ldw	ra,4(sp)
 5092b60:	df000017 	ldw	fp,0(sp)
 5092b64:	dec00204 	addi	sp,sp,8
 5092b68:	f800283a 	ret

05092b6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5092b6c:	defffa04 	addi	sp,sp,-24
 5092b70:	dfc00515 	stw	ra,20(sp)
 5092b74:	df000415 	stw	fp,16(sp)
 5092b78:	df000404 	addi	fp,sp,16
 5092b7c:	e13ffd15 	stw	r4,-12(fp)
 5092b80:	e17ffe15 	stw	r5,-8(fp)
 5092b84:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5092b88:	e0bffd17 	ldw	r2,-12(fp)
 5092b8c:	00c00044 	movi	r3,1
 5092b90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5092b94:	e0bffd17 	ldw	r2,-12(fp)
 5092b98:	10800017 	ldw	r2,0(r2)
 5092b9c:	10800104 	addi	r2,r2,4
 5092ba0:	1007883a 	mov	r3,r2
 5092ba4:	e0bffd17 	ldw	r2,-12(fp)
 5092ba8:	10800817 	ldw	r2,32(r2)
 5092bac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 5092bb0:	e0fffe17 	ldw	r3,-8(fp)
 5092bb4:	e0bfff17 	ldw	r2,-4(fp)
 5092bb8:	d8000015 	stw	zero,0(sp)
 5092bbc:	1809883a 	mov	r4,r3
 5092bc0:	100b883a 	mov	r5,r2
 5092bc4:	01814274 	movhi	r6,1289
 5092bc8:	318b0c04 	addi	r6,r6,11312
 5092bcc:	e1fffd17 	ldw	r7,-12(fp)
 5092bd0:	5093a080 	call	5093a08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5092bd4:	e0bffd17 	ldw	r2,-12(fp)
 5092bd8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5092bdc:	e0bffd17 	ldw	r2,-12(fp)
 5092be0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5092be4:	008142b4 	movhi	r2,1290
 5092be8:	10a33204 	addi	r2,r2,-29496
 5092bec:	10800017 	ldw	r2,0(r2)
 5092bf0:	1809883a 	mov	r4,r3
 5092bf4:	100b883a 	mov	r5,r2
 5092bf8:	01814274 	movhi	r6,1289
 5092bfc:	318b8d04 	addi	r6,r6,11828
 5092c00:	e1fffd17 	ldw	r7,-12(fp)
 5092c04:	50935500 	call	5093550 <alt_alarm_start>
 5092c08:	1000040e 	bge	r2,zero,5092c1c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 5092c0c:	e0fffd17 	ldw	r3,-12(fp)
 5092c10:	00a00034 	movhi	r2,32768
 5092c14:	10bfffc4 	addi	r2,r2,-1
 5092c18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 5092c1c:	e037883a 	mov	sp,fp
 5092c20:	dfc00117 	ldw	ra,4(sp)
 5092c24:	df000017 	ldw	fp,0(sp)
 5092c28:	dec00204 	addi	sp,sp,8
 5092c2c:	f800283a 	ret

05092c30 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 5092c30:	defff804 	addi	sp,sp,-32
 5092c34:	df000715 	stw	fp,28(sp)
 5092c38:	df000704 	addi	fp,sp,28
 5092c3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 5092c40:	e0bfff17 	ldw	r2,-4(fp)
 5092c44:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 5092c48:	e0bffb17 	ldw	r2,-20(fp)
 5092c4c:	10800017 	ldw	r2,0(r2)
 5092c50:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5092c54:	e0bffc17 	ldw	r2,-16(fp)
 5092c58:	10800104 	addi	r2,r2,4
 5092c5c:	10800037 	ldwio	r2,0(r2)
 5092c60:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 5092c64:	e0bffd17 	ldw	r2,-12(fp)
 5092c68:	1080c00c 	andi	r2,r2,768
 5092c6c:	1000011e 	bne	r2,zero,5092c74 <altera_avalon_jtag_uart_irq+0x44>
      break;
 5092c70:	00006c06 	br	5092e24 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 5092c74:	e0bffd17 	ldw	r2,-12(fp)
 5092c78:	1080400c 	andi	r2,r2,256
 5092c7c:	10003426 	beq	r2,zero,5092d50 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 5092c80:	00800074 	movhi	r2,1
 5092c84:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092c88:	e0bffb17 	ldw	r2,-20(fp)
 5092c8c:	10800a17 	ldw	r2,40(r2)
 5092c90:	10800044 	addi	r2,r2,1
 5092c94:	1081ffcc 	andi	r2,r2,2047
 5092c98:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 5092c9c:	e0bffb17 	ldw	r2,-20(fp)
 5092ca0:	10c00b17 	ldw	r3,44(r2)
 5092ca4:	e0bffe17 	ldw	r2,-8(fp)
 5092ca8:	1880011e 	bne	r3,r2,5092cb0 <altera_avalon_jtag_uart_irq+0x80>
          break;
 5092cac:	00001606 	br	5092d08 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5092cb0:	e0bffc17 	ldw	r2,-16(fp)
 5092cb4:	10800037 	ldwio	r2,0(r2)
 5092cb8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5092cbc:	e0bff917 	ldw	r2,-28(fp)
 5092cc0:	10a0000c 	andi	r2,r2,32768
 5092cc4:	1000011e 	bne	r2,zero,5092ccc <altera_avalon_jtag_uart_irq+0x9c>
          break;
 5092cc8:	00000f06 	br	5092d08 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5092ccc:	e0bffb17 	ldw	r2,-20(fp)
 5092cd0:	10800a17 	ldw	r2,40(r2)
 5092cd4:	e0fff917 	ldw	r3,-28(fp)
 5092cd8:	1809883a 	mov	r4,r3
 5092cdc:	e0fffb17 	ldw	r3,-20(fp)
 5092ce0:	1885883a 	add	r2,r3,r2
 5092ce4:	10800e04 	addi	r2,r2,56
 5092ce8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092cec:	e0bffb17 	ldw	r2,-20(fp)
 5092cf0:	10800a17 	ldw	r2,40(r2)
 5092cf4:	10800044 	addi	r2,r2,1
 5092cf8:	10c1ffcc 	andi	r3,r2,2047
 5092cfc:	e0bffb17 	ldw	r2,-20(fp)
 5092d00:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 5092d04:	003fe006 	br	5092c88 <__alt_data_end+0xfffc4a88>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 5092d08:	e0bff917 	ldw	r2,-28(fp)
 5092d0c:	10bfffec 	andhi	r2,r2,65535
 5092d10:	10000f26 	beq	r2,zero,5092d50 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5092d14:	e0bffb17 	ldw	r2,-20(fp)
 5092d18:	10c00817 	ldw	r3,32(r2)
 5092d1c:	00bfff84 	movi	r2,-2
 5092d20:	1886703a 	and	r3,r3,r2
 5092d24:	e0bffb17 	ldw	r2,-20(fp)
 5092d28:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 5092d2c:	e0bffc17 	ldw	r2,-16(fp)
 5092d30:	10800104 	addi	r2,r2,4
 5092d34:	1007883a 	mov	r3,r2
 5092d38:	e0bffb17 	ldw	r2,-20(fp)
 5092d3c:	10800817 	ldw	r2,32(r2)
 5092d40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5092d44:	e0bffc17 	ldw	r2,-16(fp)
 5092d48:	10800104 	addi	r2,r2,4
 5092d4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 5092d50:	e0bffd17 	ldw	r2,-12(fp)
 5092d54:	1080800c 	andi	r2,r2,512
 5092d58:	10003126 	beq	r2,zero,5092e20 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 5092d5c:	e0bffd17 	ldw	r2,-12(fp)
 5092d60:	1004d43a 	srli	r2,r2,16
 5092d64:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 5092d68:	00001406 	br	5092dbc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 5092d6c:	e0bffc17 	ldw	r2,-16(fp)
 5092d70:	e0fffb17 	ldw	r3,-20(fp)
 5092d74:	18c00d17 	ldw	r3,52(r3)
 5092d78:	e13ffb17 	ldw	r4,-20(fp)
 5092d7c:	20c7883a 	add	r3,r4,r3
 5092d80:	18c20e04 	addi	r3,r3,2104
 5092d84:	18c00003 	ldbu	r3,0(r3)
 5092d88:	18c03fcc 	andi	r3,r3,255
 5092d8c:	18c0201c 	xori	r3,r3,128
 5092d90:	18ffe004 	addi	r3,r3,-128
 5092d94:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5092d98:	e0bffb17 	ldw	r2,-20(fp)
 5092d9c:	10800d17 	ldw	r2,52(r2)
 5092da0:	10800044 	addi	r2,r2,1
 5092da4:	10c1ffcc 	andi	r3,r2,2047
 5092da8:	e0bffb17 	ldw	r2,-20(fp)
 5092dac:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5092db0:	e0bffa17 	ldw	r2,-24(fp)
 5092db4:	10bfffc4 	addi	r2,r2,-1
 5092db8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 5092dbc:	e0bffa17 	ldw	r2,-24(fp)
 5092dc0:	10000526 	beq	r2,zero,5092dd8 <altera_avalon_jtag_uart_irq+0x1a8>
 5092dc4:	e0bffb17 	ldw	r2,-20(fp)
 5092dc8:	10c00d17 	ldw	r3,52(r2)
 5092dcc:	e0bffb17 	ldw	r2,-20(fp)
 5092dd0:	10800c17 	ldw	r2,48(r2)
 5092dd4:	18bfe51e 	bne	r3,r2,5092d6c <__alt_data_end+0xfffc4b6c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 5092dd8:	e0bffa17 	ldw	r2,-24(fp)
 5092ddc:	10001026 	beq	r2,zero,5092e20 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5092de0:	e0bffb17 	ldw	r2,-20(fp)
 5092de4:	10c00817 	ldw	r3,32(r2)
 5092de8:	00bfff44 	movi	r2,-3
 5092dec:	1886703a 	and	r3,r3,r2
 5092df0:	e0bffb17 	ldw	r2,-20(fp)
 5092df4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5092df8:	e0bffb17 	ldw	r2,-20(fp)
 5092dfc:	10800017 	ldw	r2,0(r2)
 5092e00:	10800104 	addi	r2,r2,4
 5092e04:	1007883a 	mov	r3,r2
 5092e08:	e0bffb17 	ldw	r2,-20(fp)
 5092e0c:	10800817 	ldw	r2,32(r2)
 5092e10:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5092e14:	e0bffc17 	ldw	r2,-16(fp)
 5092e18:	10800104 	addi	r2,r2,4
 5092e1c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 5092e20:	003f8c06 	br	5092c54 <__alt_data_end+0xfffc4a54>
}
 5092e24:	e037883a 	mov	sp,fp
 5092e28:	df000017 	ldw	fp,0(sp)
 5092e2c:	dec00104 	addi	sp,sp,4
 5092e30:	f800283a 	ret

05092e34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 5092e34:	defff804 	addi	sp,sp,-32
 5092e38:	df000715 	stw	fp,28(sp)
 5092e3c:	df000704 	addi	fp,sp,28
 5092e40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 5092e44:	e0bffb17 	ldw	r2,-20(fp)
 5092e48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 5092e4c:	e0bff917 	ldw	r2,-28(fp)
 5092e50:	10800017 	ldw	r2,0(r2)
 5092e54:	10800104 	addi	r2,r2,4
 5092e58:	10800037 	ldwio	r2,0(r2)
 5092e5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 5092e60:	e0bffa17 	ldw	r2,-24(fp)
 5092e64:	1081000c 	andi	r2,r2,1024
 5092e68:	10000b26 	beq	r2,zero,5092e98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 5092e6c:	e0bff917 	ldw	r2,-28(fp)
 5092e70:	10800017 	ldw	r2,0(r2)
 5092e74:	10800104 	addi	r2,r2,4
 5092e78:	1007883a 	mov	r3,r2
 5092e7c:	e0bff917 	ldw	r2,-28(fp)
 5092e80:	10800817 	ldw	r2,32(r2)
 5092e84:	10810014 	ori	r2,r2,1024
 5092e88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 5092e8c:	e0bff917 	ldw	r2,-28(fp)
 5092e90:	10000915 	stw	zero,36(r2)
 5092e94:	00000a06 	br	5092ec0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5092e98:	e0bff917 	ldw	r2,-28(fp)
 5092e9c:	10c00917 	ldw	r3,36(r2)
 5092ea0:	00a00034 	movhi	r2,32768
 5092ea4:	10bfff04 	addi	r2,r2,-4
 5092ea8:	10c00536 	bltu	r2,r3,5092ec0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 5092eac:	e0bff917 	ldw	r2,-28(fp)
 5092eb0:	10800917 	ldw	r2,36(r2)
 5092eb4:	10c00044 	addi	r3,r2,1
 5092eb8:	e0bff917 	ldw	r2,-28(fp)
 5092ebc:	10c00915 	stw	r3,36(r2)
 5092ec0:	008142b4 	movhi	r2,1290
 5092ec4:	10a33204 	addi	r2,r2,-29496
 5092ec8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 5092ecc:	e037883a 	mov	sp,fp
 5092ed0:	df000017 	ldw	fp,0(sp)
 5092ed4:	dec00104 	addi	sp,sp,4
 5092ed8:	f800283a 	ret

05092edc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 5092edc:	defffd04 	addi	sp,sp,-12
 5092ee0:	df000215 	stw	fp,8(sp)
 5092ee4:	df000204 	addi	fp,sp,8
 5092ee8:	e13ffe15 	stw	r4,-8(fp)
 5092eec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5092ef0:	00000506 	br	5092f08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 5092ef4:	e0bfff17 	ldw	r2,-4(fp)
 5092ef8:	1090000c 	andi	r2,r2,16384
 5092efc:	10000226 	beq	r2,zero,5092f08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 5092f00:	00bffd44 	movi	r2,-11
 5092f04:	00000b06 	br	5092f34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5092f08:	e0bffe17 	ldw	r2,-8(fp)
 5092f0c:	10c00d17 	ldw	r3,52(r2)
 5092f10:	e0bffe17 	ldw	r2,-8(fp)
 5092f14:	10800c17 	ldw	r2,48(r2)
 5092f18:	18800526 	beq	r3,r2,5092f30 <altera_avalon_jtag_uart_close+0x54>
 5092f1c:	e0bffe17 	ldw	r2,-8(fp)
 5092f20:	10c00917 	ldw	r3,36(r2)
 5092f24:	e0bffe17 	ldw	r2,-8(fp)
 5092f28:	10800117 	ldw	r2,4(r2)
 5092f2c:	18bff136 	bltu	r3,r2,5092ef4 <__alt_data_end+0xfffc4cf4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 5092f30:	0005883a 	mov	r2,zero
}
 5092f34:	e037883a 	mov	sp,fp
 5092f38:	df000017 	ldw	fp,0(sp)
 5092f3c:	dec00104 	addi	sp,sp,4
 5092f40:	f800283a 	ret

05092f44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 5092f44:	defffa04 	addi	sp,sp,-24
 5092f48:	df000515 	stw	fp,20(sp)
 5092f4c:	df000504 	addi	fp,sp,20
 5092f50:	e13ffd15 	stw	r4,-12(fp)
 5092f54:	e17ffe15 	stw	r5,-8(fp)
 5092f58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 5092f5c:	00bff9c4 	movi	r2,-25
 5092f60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 5092f64:	e0bffe17 	ldw	r2,-8(fp)
 5092f68:	10da8060 	cmpeqi	r3,r2,27137
 5092f6c:	1800031e 	bne	r3,zero,5092f7c <altera_avalon_jtag_uart_ioctl+0x38>
 5092f70:	109a80a0 	cmpeqi	r2,r2,27138
 5092f74:	1000191e 	bne	r2,zero,5092fdc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 5092f78:	00002806 	br	509301c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 5092f7c:	e0bffd17 	ldw	r2,-12(fp)
 5092f80:	10c00117 	ldw	r3,4(r2)
 5092f84:	00a00034 	movhi	r2,32768
 5092f88:	10bfffc4 	addi	r2,r2,-1
 5092f8c:	18801226 	beq	r3,r2,5092fd8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 5092f90:	e0bfff17 	ldw	r2,-4(fp)
 5092f94:	10800017 	ldw	r2,0(r2)
 5092f98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 5092f9c:	e0bffc17 	ldw	r2,-16(fp)
 5092fa0:	10800090 	cmplti	r2,r2,2
 5092fa4:	1000061e 	bne	r2,zero,5092fc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 5092fa8:	e0fffc17 	ldw	r3,-16(fp)
 5092fac:	00a00034 	movhi	r2,32768
 5092fb0:	10bfffc4 	addi	r2,r2,-1
 5092fb4:	18800226 	beq	r3,r2,5092fc0 <altera_avalon_jtag_uart_ioctl+0x7c>
 5092fb8:	e0bffc17 	ldw	r2,-16(fp)
 5092fbc:	00000206 	br	5092fc8 <altera_avalon_jtag_uart_ioctl+0x84>
 5092fc0:	00a00034 	movhi	r2,32768
 5092fc4:	10bfff84 	addi	r2,r2,-2
 5092fc8:	e0fffd17 	ldw	r3,-12(fp)
 5092fcc:	18800115 	stw	r2,4(r3)
      rc = 0;
 5092fd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 5092fd4:	00001106 	br	509301c <altera_avalon_jtag_uart_ioctl+0xd8>
 5092fd8:	00001006 	br	509301c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 5092fdc:	e0bffd17 	ldw	r2,-12(fp)
 5092fe0:	10c00117 	ldw	r3,4(r2)
 5092fe4:	00a00034 	movhi	r2,32768
 5092fe8:	10bfffc4 	addi	r2,r2,-1
 5092fec:	18800a26 	beq	r3,r2,5093018 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 5092ff0:	e0bffd17 	ldw	r2,-12(fp)
 5092ff4:	10c00917 	ldw	r3,36(r2)
 5092ff8:	e0bffd17 	ldw	r2,-12(fp)
 5092ffc:	10800117 	ldw	r2,4(r2)
 5093000:	1885803a 	cmpltu	r2,r3,r2
 5093004:	10c03fcc 	andi	r3,r2,255
 5093008:	e0bfff17 	ldw	r2,-4(fp)
 509300c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 5093010:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 5093014:	00000006 	br	5093018 <altera_avalon_jtag_uart_ioctl+0xd4>
 5093018:	0001883a 	nop

  default:
    break;
  }

  return rc;
 509301c:	e0bffb17 	ldw	r2,-20(fp)
}
 5093020:	e037883a 	mov	sp,fp
 5093024:	df000017 	ldw	fp,0(sp)
 5093028:	dec00104 	addi	sp,sp,4
 509302c:	f800283a 	ret

05093030 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 5093030:	defff304 	addi	sp,sp,-52
 5093034:	dfc00c15 	stw	ra,48(sp)
 5093038:	df000b15 	stw	fp,44(sp)
 509303c:	df000b04 	addi	fp,sp,44
 5093040:	e13ffc15 	stw	r4,-16(fp)
 5093044:	e17ffd15 	stw	r5,-12(fp)
 5093048:	e1bffe15 	stw	r6,-8(fp)
 509304c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 5093050:	e0bffd17 	ldw	r2,-12(fp)
 5093054:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5093058:	00004906 	br	5093180 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 509305c:	e0bffc17 	ldw	r2,-16(fp)
 5093060:	10800a17 	ldw	r2,40(r2)
 5093064:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 5093068:	e0bffc17 	ldw	r2,-16(fp)
 509306c:	10800b17 	ldw	r2,44(r2)
 5093070:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 5093074:	e0fff717 	ldw	r3,-36(fp)
 5093078:	e0bff817 	ldw	r2,-32(fp)
 509307c:	18800536 	bltu	r3,r2,5093094 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 5093080:	e0fff717 	ldw	r3,-36(fp)
 5093084:	e0bff817 	ldw	r2,-32(fp)
 5093088:	1885c83a 	sub	r2,r3,r2
 509308c:	e0bff615 	stw	r2,-40(fp)
 5093090:	00000406 	br	50930a4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 5093094:	00c20004 	movi	r3,2048
 5093098:	e0bff817 	ldw	r2,-32(fp)
 509309c:	1885c83a 	sub	r2,r3,r2
 50930a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 50930a4:	e0bff617 	ldw	r2,-40(fp)
 50930a8:	1000011e 	bne	r2,zero,50930b0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 50930ac:	00001d06 	br	5093124 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 50930b0:	e0fffe17 	ldw	r3,-8(fp)
 50930b4:	e0bff617 	ldw	r2,-40(fp)
 50930b8:	1880022e 	bgeu	r3,r2,50930c4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 50930bc:	e0bffe17 	ldw	r2,-8(fp)
 50930c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 50930c4:	e0bff817 	ldw	r2,-32(fp)
 50930c8:	10800e04 	addi	r2,r2,56
 50930cc:	e0fffc17 	ldw	r3,-16(fp)
 50930d0:	1885883a 	add	r2,r3,r2
 50930d4:	e13ff517 	ldw	r4,-44(fp)
 50930d8:	100b883a 	mov	r5,r2
 50930dc:	e1bff617 	ldw	r6,-40(fp)
 50930e0:	508a0e00 	call	508a0e0 <memcpy>
      ptr   += n;
 50930e4:	e0fff517 	ldw	r3,-44(fp)
 50930e8:	e0bff617 	ldw	r2,-40(fp)
 50930ec:	1885883a 	add	r2,r3,r2
 50930f0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 50930f4:	e0fffe17 	ldw	r3,-8(fp)
 50930f8:	e0bff617 	ldw	r2,-40(fp)
 50930fc:	1885c83a 	sub	r2,r3,r2
 5093100:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5093104:	e0fff817 	ldw	r3,-32(fp)
 5093108:	e0bff617 	ldw	r2,-40(fp)
 509310c:	1885883a 	add	r2,r3,r2
 5093110:	10c1ffcc 	andi	r3,r2,2047
 5093114:	e0bffc17 	ldw	r2,-16(fp)
 5093118:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 509311c:	e0bffe17 	ldw	r2,-8(fp)
 5093120:	00bfce16 	blt	zero,r2,509305c <__alt_data_end+0xfffc4e5c>

    /* If we read any data then return it */
    if (ptr != buffer)
 5093124:	e0fff517 	ldw	r3,-44(fp)
 5093128:	e0bffd17 	ldw	r2,-12(fp)
 509312c:	18800126 	beq	r3,r2,5093134 <altera_avalon_jtag_uart_read+0x104>
      break;
 5093130:	00001506 	br	5093188 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 5093134:	e0bfff17 	ldw	r2,-4(fp)
 5093138:	1090000c 	andi	r2,r2,16384
 509313c:	10000126 	beq	r2,zero,5093144 <altera_avalon_jtag_uart_read+0x114>
      break;
 5093140:	00001106 	br	5093188 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 5093144:	0001883a 	nop
 5093148:	e0bffc17 	ldw	r2,-16(fp)
 509314c:	10c00a17 	ldw	r3,40(r2)
 5093150:	e0bff717 	ldw	r2,-36(fp)
 5093154:	1880051e 	bne	r3,r2,509316c <altera_avalon_jtag_uart_read+0x13c>
 5093158:	e0bffc17 	ldw	r2,-16(fp)
 509315c:	10c00917 	ldw	r3,36(r2)
 5093160:	e0bffc17 	ldw	r2,-16(fp)
 5093164:	10800117 	ldw	r2,4(r2)
 5093168:	18bff736 	bltu	r3,r2,5093148 <__alt_data_end+0xfffc4f48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 509316c:	e0bffc17 	ldw	r2,-16(fp)
 5093170:	10c00a17 	ldw	r3,40(r2)
 5093174:	e0bff717 	ldw	r2,-36(fp)
 5093178:	1880011e 	bne	r3,r2,5093180 <altera_avalon_jtag_uart_read+0x150>
      break;
 509317c:	00000206 	br	5093188 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5093180:	e0bffe17 	ldw	r2,-8(fp)
 5093184:	00bfb516 	blt	zero,r2,509305c <__alt_data_end+0xfffc4e5c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 5093188:	e0fff517 	ldw	r3,-44(fp)
 509318c:	e0bffd17 	ldw	r2,-12(fp)
 5093190:	18801826 	beq	r3,r2,50931f4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093194:	0005303a 	rdctl	r2,status
 5093198:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 509319c:	e0fffa17 	ldw	r3,-24(fp)
 50931a0:	00bfff84 	movi	r2,-2
 50931a4:	1884703a 	and	r2,r3,r2
 50931a8:	1001703a 	wrctl	status,r2
  
  return context;
 50931ac:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 50931b0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 50931b4:	e0bffc17 	ldw	r2,-16(fp)
 50931b8:	10800817 	ldw	r2,32(r2)
 50931bc:	10c00054 	ori	r3,r2,1
 50931c0:	e0bffc17 	ldw	r2,-16(fp)
 50931c4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 50931c8:	e0bffc17 	ldw	r2,-16(fp)
 50931cc:	10800017 	ldw	r2,0(r2)
 50931d0:	10800104 	addi	r2,r2,4
 50931d4:	1007883a 	mov	r3,r2
 50931d8:	e0bffc17 	ldw	r2,-16(fp)
 50931dc:	10800817 	ldw	r2,32(r2)
 50931e0:	18800035 	stwio	r2,0(r3)
 50931e4:	e0bff917 	ldw	r2,-28(fp)
 50931e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50931ec:	e0bffb17 	ldw	r2,-20(fp)
 50931f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 50931f4:	e0fff517 	ldw	r3,-44(fp)
 50931f8:	e0bffd17 	ldw	r2,-12(fp)
 50931fc:	18800426 	beq	r3,r2,5093210 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 5093200:	e0fff517 	ldw	r3,-44(fp)
 5093204:	e0bffd17 	ldw	r2,-12(fp)
 5093208:	1885c83a 	sub	r2,r3,r2
 509320c:	00000606 	br	5093228 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 5093210:	e0bfff17 	ldw	r2,-4(fp)
 5093214:	1090000c 	andi	r2,r2,16384
 5093218:	10000226 	beq	r2,zero,5093224 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 509321c:	00bffd44 	movi	r2,-11
 5093220:	00000106 	br	5093228 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 5093224:	00bffec4 	movi	r2,-5
}
 5093228:	e037883a 	mov	sp,fp
 509322c:	dfc00117 	ldw	ra,4(sp)
 5093230:	df000017 	ldw	fp,0(sp)
 5093234:	dec00204 	addi	sp,sp,8
 5093238:	f800283a 	ret

0509323c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 509323c:	defff304 	addi	sp,sp,-52
 5093240:	dfc00c15 	stw	ra,48(sp)
 5093244:	df000b15 	stw	fp,44(sp)
 5093248:	df000b04 	addi	fp,sp,44
 509324c:	e13ffc15 	stw	r4,-16(fp)
 5093250:	e17ffd15 	stw	r5,-12(fp)
 5093254:	e1bffe15 	stw	r6,-8(fp)
 5093258:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 509325c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 5093260:	e0bffd17 	ldw	r2,-12(fp)
 5093264:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5093268:	00003806 	br	509334c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 509326c:	e0bffc17 	ldw	r2,-16(fp)
 5093270:	10800c17 	ldw	r2,48(r2)
 5093274:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 5093278:	e0bffc17 	ldw	r2,-16(fp)
 509327c:	10800d17 	ldw	r2,52(r2)
 5093280:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 5093284:	e0fff817 	ldw	r3,-32(fp)
 5093288:	e0bff517 	ldw	r2,-44(fp)
 509328c:	1880062e 	bgeu	r3,r2,50932a8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5093290:	e0fff517 	ldw	r3,-44(fp)
 5093294:	e0bff817 	ldw	r2,-32(fp)
 5093298:	1885c83a 	sub	r2,r3,r2
 509329c:	10bfffc4 	addi	r2,r2,-1
 50932a0:	e0bff615 	stw	r2,-40(fp)
 50932a4:	00000b06 	br	50932d4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 50932a8:	e0bff517 	ldw	r2,-44(fp)
 50932ac:	10000526 	beq	r2,zero,50932c4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 50932b0:	00c20004 	movi	r3,2048
 50932b4:	e0bff817 	ldw	r2,-32(fp)
 50932b8:	1885c83a 	sub	r2,r3,r2
 50932bc:	e0bff615 	stw	r2,-40(fp)
 50932c0:	00000406 	br	50932d4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 50932c4:	00c1ffc4 	movi	r3,2047
 50932c8:	e0bff817 	ldw	r2,-32(fp)
 50932cc:	1885c83a 	sub	r2,r3,r2
 50932d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 50932d4:	e0bff617 	ldw	r2,-40(fp)
 50932d8:	1000011e 	bne	r2,zero,50932e0 <altera_avalon_jtag_uart_write+0xa4>
        break;
 50932dc:	00001d06 	br	5093354 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 50932e0:	e0fffe17 	ldw	r3,-8(fp)
 50932e4:	e0bff617 	ldw	r2,-40(fp)
 50932e8:	1880022e 	bgeu	r3,r2,50932f4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 50932ec:	e0bffe17 	ldw	r2,-8(fp)
 50932f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 50932f4:	e0bff817 	ldw	r2,-32(fp)
 50932f8:	10820e04 	addi	r2,r2,2104
 50932fc:	e0fffc17 	ldw	r3,-16(fp)
 5093300:	1885883a 	add	r2,r3,r2
 5093304:	1009883a 	mov	r4,r2
 5093308:	e17ffd17 	ldw	r5,-12(fp)
 509330c:	e1bff617 	ldw	r6,-40(fp)
 5093310:	508a0e00 	call	508a0e0 <memcpy>
      ptr   += n;
 5093314:	e0fffd17 	ldw	r3,-12(fp)
 5093318:	e0bff617 	ldw	r2,-40(fp)
 509331c:	1885883a 	add	r2,r3,r2
 5093320:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 5093324:	e0fffe17 	ldw	r3,-8(fp)
 5093328:	e0bff617 	ldw	r2,-40(fp)
 509332c:	1885c83a 	sub	r2,r3,r2
 5093330:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5093334:	e0fff817 	ldw	r3,-32(fp)
 5093338:	e0bff617 	ldw	r2,-40(fp)
 509333c:	1885883a 	add	r2,r3,r2
 5093340:	10c1ffcc 	andi	r3,r2,2047
 5093344:	e0bffc17 	ldw	r2,-16(fp)
 5093348:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 509334c:	e0bffe17 	ldw	r2,-8(fp)
 5093350:	00bfc616 	blt	zero,r2,509326c <__alt_data_end+0xfffc506c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093354:	0005303a 	rdctl	r2,status
 5093358:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 509335c:	e0fffa17 	ldw	r3,-24(fp)
 5093360:	00bfff84 	movi	r2,-2
 5093364:	1884703a 	and	r2,r3,r2
 5093368:	1001703a 	wrctl	status,r2
  
  return context;
 509336c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 5093370:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5093374:	e0bffc17 	ldw	r2,-16(fp)
 5093378:	10800817 	ldw	r2,32(r2)
 509337c:	10c00094 	ori	r3,r2,2
 5093380:	e0bffc17 	ldw	r2,-16(fp)
 5093384:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5093388:	e0bffc17 	ldw	r2,-16(fp)
 509338c:	10800017 	ldw	r2,0(r2)
 5093390:	10800104 	addi	r2,r2,4
 5093394:	1007883a 	mov	r3,r2
 5093398:	e0bffc17 	ldw	r2,-16(fp)
 509339c:	10800817 	ldw	r2,32(r2)
 50933a0:	18800035 	stwio	r2,0(r3)
 50933a4:	e0bff917 	ldw	r2,-28(fp)
 50933a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50933ac:	e0bffb17 	ldw	r2,-20(fp)
 50933b0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 50933b4:	e0bffe17 	ldw	r2,-8(fp)
 50933b8:	0080120e 	bge	zero,r2,5093404 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 50933bc:	e0bfff17 	ldw	r2,-4(fp)
 50933c0:	1090000c 	andi	r2,r2,16384
 50933c4:	10000126 	beq	r2,zero,50933cc <altera_avalon_jtag_uart_write+0x190>
        break;
 50933c8:	00001006 	br	509340c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 50933cc:	0001883a 	nop
 50933d0:	e0bffc17 	ldw	r2,-16(fp)
 50933d4:	10c00d17 	ldw	r3,52(r2)
 50933d8:	e0bff517 	ldw	r2,-44(fp)
 50933dc:	1880051e 	bne	r3,r2,50933f4 <altera_avalon_jtag_uart_write+0x1b8>
 50933e0:	e0bffc17 	ldw	r2,-16(fp)
 50933e4:	10c00917 	ldw	r3,36(r2)
 50933e8:	e0bffc17 	ldw	r2,-16(fp)
 50933ec:	10800117 	ldw	r2,4(r2)
 50933f0:	18bff736 	bltu	r3,r2,50933d0 <__alt_data_end+0xfffc51d0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 50933f4:	e0bffc17 	ldw	r2,-16(fp)
 50933f8:	10800917 	ldw	r2,36(r2)
 50933fc:	10000126 	beq	r2,zero,5093404 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 5093400:	00000206 	br	509340c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 5093404:	e0bffe17 	ldw	r2,-8(fp)
 5093408:	00bf9716 	blt	zero,r2,5093268 <__alt_data_end+0xfffc5068>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 509340c:	e0fffd17 	ldw	r3,-12(fp)
 5093410:	e0bff717 	ldw	r2,-36(fp)
 5093414:	18800426 	beq	r3,r2,5093428 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 5093418:	e0fffd17 	ldw	r3,-12(fp)
 509341c:	e0bff717 	ldw	r2,-36(fp)
 5093420:	1885c83a 	sub	r2,r3,r2
 5093424:	00000606 	br	5093440 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 5093428:	e0bfff17 	ldw	r2,-4(fp)
 509342c:	1090000c 	andi	r2,r2,16384
 5093430:	10000226 	beq	r2,zero,509343c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 5093434:	00bffd44 	movi	r2,-11
 5093438:	00000106 	br	5093440 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 509343c:	00bffec4 	movi	r2,-5
}
 5093440:	e037883a 	mov	sp,fp
 5093444:	dfc00117 	ldw	ra,4(sp)
 5093448:	df000017 	ldw	fp,0(sp)
 509344c:	dec00204 	addi	sp,sp,8
 5093450:	f800283a 	ret

05093454 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 5093454:	defffa04 	addi	sp,sp,-24
 5093458:	dfc00515 	stw	ra,20(sp)
 509345c:	df000415 	stw	fp,16(sp)
 5093460:	df000404 	addi	fp,sp,16
 5093464:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 5093468:	0007883a 	mov	r3,zero
 509346c:	e0bfff17 	ldw	r2,-4(fp)
 5093470:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 5093474:	e0bfff17 	ldw	r2,-4(fp)
 5093478:	10800104 	addi	r2,r2,4
 509347c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093480:	0005303a 	rdctl	r2,status
 5093484:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093488:	e0fffd17 	ldw	r3,-12(fp)
 509348c:	00bfff84 	movi	r2,-2
 5093490:	1884703a 	and	r2,r3,r2
 5093494:	1001703a 	wrctl	status,r2
  
  return context;
 5093498:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 509349c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 50934a0:	509411c0 	call	509411c <alt_tick>
 50934a4:	e0bffc17 	ldw	r2,-16(fp)
 50934a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50934ac:	e0bffe17 	ldw	r2,-8(fp)
 50934b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 50934b4:	e037883a 	mov	sp,fp
 50934b8:	dfc00117 	ldw	ra,4(sp)
 50934bc:	df000017 	ldw	fp,0(sp)
 50934c0:	dec00204 	addi	sp,sp,8
 50934c4:	f800283a 	ret

050934c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 50934c8:	defff804 	addi	sp,sp,-32
 50934cc:	dfc00715 	stw	ra,28(sp)
 50934d0:	df000615 	stw	fp,24(sp)
 50934d4:	df000604 	addi	fp,sp,24
 50934d8:	e13ffc15 	stw	r4,-16(fp)
 50934dc:	e17ffd15 	stw	r5,-12(fp)
 50934e0:	e1bffe15 	stw	r6,-8(fp)
 50934e4:	e1ffff15 	stw	r7,-4(fp)
 50934e8:	e0bfff17 	ldw	r2,-4(fp)
 50934ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 50934f0:	008142b4 	movhi	r2,1290
 50934f4:	10a33204 	addi	r2,r2,-29496
 50934f8:	10800017 	ldw	r2,0(r2)
 50934fc:	1000041e 	bne	r2,zero,5093510 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 5093500:	008142b4 	movhi	r2,1290
 5093504:	10a33204 	addi	r2,r2,-29496
 5093508:	e0fffb17 	ldw	r3,-20(fp)
 509350c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 5093510:	e0bffc17 	ldw	r2,-16(fp)
 5093514:	10800104 	addi	r2,r2,4
 5093518:	00c001c4 	movi	r3,7
 509351c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 5093520:	d8000015 	stw	zero,0(sp)
 5093524:	e13ffd17 	ldw	r4,-12(fp)
 5093528:	e17ffe17 	ldw	r5,-8(fp)
 509352c:	01814274 	movhi	r6,1289
 5093530:	318d1504 	addi	r6,r6,13396
 5093534:	e1fffc17 	ldw	r7,-16(fp)
 5093538:	5093a080 	call	5093a08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 509353c:	e037883a 	mov	sp,fp
 5093540:	dfc00117 	ldw	ra,4(sp)
 5093544:	df000017 	ldw	fp,0(sp)
 5093548:	dec00204 	addi	sp,sp,8
 509354c:	f800283a 	ret

05093550 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 5093550:	defff504 	addi	sp,sp,-44
 5093554:	df000a15 	stw	fp,40(sp)
 5093558:	df000a04 	addi	fp,sp,40
 509355c:	e13ffc15 	stw	r4,-16(fp)
 5093560:	e17ffd15 	stw	r5,-12(fp)
 5093564:	e1bffe15 	stw	r6,-8(fp)
 5093568:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 509356c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5093570:	008142b4 	movhi	r2,1290
 5093574:	10a33204 	addi	r2,r2,-29496
 5093578:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 509357c:	10003f26 	beq	r2,zero,509367c <alt_alarm_start+0x12c>
  {
    if (alarm)
 5093580:	e0bffc17 	ldw	r2,-16(fp)
 5093584:	10003b26 	beq	r2,zero,5093674 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 5093588:	e0bffc17 	ldw	r2,-16(fp)
 509358c:	e0fffe17 	ldw	r3,-8(fp)
 5093590:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 5093594:	e0bffc17 	ldw	r2,-16(fp)
 5093598:	e0ffff17 	ldw	r3,-4(fp)
 509359c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50935a0:	0005303a 	rdctl	r2,status
 50935a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50935a8:	e0fff817 	ldw	r3,-32(fp)
 50935ac:	00bfff84 	movi	r2,-2
 50935b0:	1884703a 	and	r2,r3,r2
 50935b4:	1001703a 	wrctl	status,r2
  
  return context;
 50935b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 50935bc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 50935c0:	008142b4 	movhi	r2,1290
 50935c4:	10a33304 	addi	r2,r2,-29492
 50935c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 50935cc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 50935d0:	e0fffd17 	ldw	r3,-12(fp)
 50935d4:	e0bff617 	ldw	r2,-40(fp)
 50935d8:	1885883a 	add	r2,r3,r2
 50935dc:	10c00044 	addi	r3,r2,1
 50935e0:	e0bffc17 	ldw	r2,-16(fp)
 50935e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 50935e8:	e0bffc17 	ldw	r2,-16(fp)
 50935ec:	10c00217 	ldw	r3,8(r2)
 50935f0:	e0bff617 	ldw	r2,-40(fp)
 50935f4:	1880042e 	bgeu	r3,r2,5093608 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 50935f8:	e0bffc17 	ldw	r2,-16(fp)
 50935fc:	00c00044 	movi	r3,1
 5093600:	10c00405 	stb	r3,16(r2)
 5093604:	00000206 	br	5093610 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 5093608:	e0bffc17 	ldw	r2,-16(fp)
 509360c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 5093610:	e0fffc17 	ldw	r3,-16(fp)
 5093614:	00814274 	movhi	r2,1289
 5093618:	109c6304 	addi	r2,r2,29068
 509361c:	e0bff915 	stw	r2,-28(fp)
 5093620:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5093624:	e0bffa17 	ldw	r2,-24(fp)
 5093628:	e0fff917 	ldw	r3,-28(fp)
 509362c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 5093630:	e0bff917 	ldw	r2,-28(fp)
 5093634:	10c00017 	ldw	r3,0(r2)
 5093638:	e0bffa17 	ldw	r2,-24(fp)
 509363c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 5093640:	e0bff917 	ldw	r2,-28(fp)
 5093644:	10800017 	ldw	r2,0(r2)
 5093648:	e0fffa17 	ldw	r3,-24(fp)
 509364c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 5093650:	e0bff917 	ldw	r2,-28(fp)
 5093654:	e0fffa17 	ldw	r3,-24(fp)
 5093658:	10c00015 	stw	r3,0(r2)
 509365c:	e0bff717 	ldw	r2,-36(fp)
 5093660:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5093664:	e0bffb17 	ldw	r2,-20(fp)
 5093668:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 509366c:	0005883a 	mov	r2,zero
 5093670:	00000306 	br	5093680 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 5093674:	00bffa84 	movi	r2,-22
 5093678:	00000106 	br	5093680 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 509367c:	00bfde84 	movi	r2,-134
  }
}
 5093680:	e037883a 	mov	sp,fp
 5093684:	df000017 	ldw	fp,0(sp)
 5093688:	dec00104 	addi	sp,sp,4
 509368c:	f800283a 	ret

05093690 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5093690:	defffa04 	addi	sp,sp,-24
 5093694:	dfc00515 	stw	ra,20(sp)
 5093698:	df000415 	stw	fp,16(sp)
 509369c:	df000404 	addi	fp,sp,16
 50936a0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 50936a4:	008000c4 	movi	r2,3
 50936a8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 50936ac:	e0fffd17 	ldw	r3,-12(fp)
 50936b0:	008003f4 	movhi	r2,15
 50936b4:	10909004 	addi	r2,r2,16960
 50936b8:	1885383a 	mul	r2,r3,r2
 50936bc:	01017db4 	movhi	r4,1526
 50936c0:	21384004 	addi	r4,r4,-7936
 50936c4:	100b883a 	mov	r5,r2
 50936c8:	50827c00 	call	50827c0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 50936cc:	01200034 	movhi	r4,32768
 50936d0:	213fffc4 	addi	r4,r4,-1
 50936d4:	100b883a 	mov	r5,r2
 50936d8:	50827c00 	call	50827c0 <__udivsi3>
 50936dc:	e13fff17 	ldw	r4,-4(fp)
 50936e0:	100b883a 	mov	r5,r2
 50936e4:	50827c00 	call	50827c0 <__udivsi3>
 50936e8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 50936ec:	e0bffe17 	ldw	r2,-8(fp)
 50936f0:	10002a26 	beq	r2,zero,509379c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 50936f4:	e03ffc15 	stw	zero,-16(fp)
 50936f8:	00001706 	br	5093758 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 50936fc:	00a00034 	movhi	r2,32768
 5093700:	10bfffc4 	addi	r2,r2,-1
 5093704:	10bfffc4 	addi	r2,r2,-1
 5093708:	103ffe1e 	bne	r2,zero,5093704 <__alt_data_end+0xfffc5504>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 509370c:	e0fffd17 	ldw	r3,-12(fp)
 5093710:	008003f4 	movhi	r2,15
 5093714:	10909004 	addi	r2,r2,16960
 5093718:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 509371c:	01017db4 	movhi	r4,1526
 5093720:	21384004 	addi	r4,r4,-7936
 5093724:	100b883a 	mov	r5,r2
 5093728:	50827c00 	call	50827c0 <__udivsi3>
 509372c:	01200034 	movhi	r4,32768
 5093730:	213fffc4 	addi	r4,r4,-1
 5093734:	100b883a 	mov	r5,r2
 5093738:	50827c00 	call	50827c0 <__udivsi3>
 509373c:	1007883a 	mov	r3,r2
 5093740:	e0bfff17 	ldw	r2,-4(fp)
 5093744:	10c5c83a 	sub	r2,r2,r3
 5093748:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 509374c:	e0bffc17 	ldw	r2,-16(fp)
 5093750:	10800044 	addi	r2,r2,1
 5093754:	e0bffc15 	stw	r2,-16(fp)
 5093758:	e0fffc17 	ldw	r3,-16(fp)
 509375c:	e0bffe17 	ldw	r2,-8(fp)
 5093760:	18bfe616 	blt	r3,r2,50936fc <__alt_data_end+0xfffc54fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 5093764:	e0fffd17 	ldw	r3,-12(fp)
 5093768:	008003f4 	movhi	r2,15
 509376c:	10909004 	addi	r2,r2,16960
 5093770:	1885383a 	mul	r2,r3,r2
 5093774:	01017db4 	movhi	r4,1526
 5093778:	21384004 	addi	r4,r4,-7936
 509377c:	100b883a 	mov	r5,r2
 5093780:	50827c00 	call	50827c0 <__udivsi3>
 5093784:	1007883a 	mov	r3,r2
 5093788:	e0bfff17 	ldw	r2,-4(fp)
 509378c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 5093790:	10bfffc4 	addi	r2,r2,-1
 5093794:	103ffe1e 	bne	r2,zero,5093790 <__alt_data_end+0xfffc5590>
 5093798:	00000d06 	br	50937d0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 509379c:	e0fffd17 	ldw	r3,-12(fp)
 50937a0:	008003f4 	movhi	r2,15
 50937a4:	10909004 	addi	r2,r2,16960
 50937a8:	1885383a 	mul	r2,r3,r2
 50937ac:	01017db4 	movhi	r4,1526
 50937b0:	21384004 	addi	r4,r4,-7936
 50937b4:	100b883a 	mov	r5,r2
 50937b8:	50827c00 	call	50827c0 <__udivsi3>
 50937bc:	1007883a 	mov	r3,r2
 50937c0:	e0bfff17 	ldw	r2,-4(fp)
 50937c4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 50937c8:	10bfffc4 	addi	r2,r2,-1
 50937cc:	00bffe16 	blt	zero,r2,50937c8 <__alt_data_end+0xfffc55c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 50937d0:	0005883a 	mov	r2,zero
}
 50937d4:	e037883a 	mov	sp,fp
 50937d8:	dfc00117 	ldw	ra,4(sp)
 50937dc:	df000017 	ldw	fp,0(sp)
 50937e0:	dec00204 	addi	sp,sp,8
 50937e4:	f800283a 	ret

050937e8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 50937e8:	defffe04 	addi	sp,sp,-8
 50937ec:	df000115 	stw	fp,4(sp)
 50937f0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 50937f4:	e03fff15 	stw	zero,-4(fp)
 50937f8:	00000506 	br	5093810 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 50937fc:	e0bfff17 	ldw	r2,-4(fp)
 5093800:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 5093804:	e0bfff17 	ldw	r2,-4(fp)
 5093808:	10800804 	addi	r2,r2,32
 509380c:	e0bfff15 	stw	r2,-4(fp)
 5093810:	e0bfff17 	ldw	r2,-4(fp)
 5093814:	10820030 	cmpltui	r2,r2,2048
 5093818:	103ff81e 	bne	r2,zero,50937fc <__alt_data_end+0xfffc55fc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 509381c:	e037883a 	mov	sp,fp
 5093820:	df000017 	ldw	fp,0(sp)
 5093824:	dec00104 	addi	sp,sp,4
 5093828:	f800283a 	ret

0509382c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 509382c:	defffe04 	addi	sp,sp,-8
 5093830:	dfc00115 	stw	ra,4(sp)
 5093834:	df000015 	stw	fp,0(sp)
 5093838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 509383c:	00814274 	movhi	r2,1289
 5093840:	109c6004 	addi	r2,r2,29056
 5093844:	10800017 	ldw	r2,0(r2)
 5093848:	10000526 	beq	r2,zero,5093860 <alt_get_errno+0x34>
 509384c:	00814274 	movhi	r2,1289
 5093850:	109c6004 	addi	r2,r2,29056
 5093854:	10800017 	ldw	r2,0(r2)
 5093858:	103ee83a 	callr	r2
 509385c:	00000206 	br	5093868 <alt_get_errno+0x3c>
 5093860:	008142b4 	movhi	r2,1290
 5093864:	10a32d04 	addi	r2,r2,-29516
}
 5093868:	e037883a 	mov	sp,fp
 509386c:	dfc00117 	ldw	ra,4(sp)
 5093870:	df000017 	ldw	fp,0(sp)
 5093874:	dec00204 	addi	sp,sp,8
 5093878:	f800283a 	ret

0509387c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 509387c:	defffa04 	addi	sp,sp,-24
 5093880:	dfc00515 	stw	ra,20(sp)
 5093884:	df000415 	stw	fp,16(sp)
 5093888:	df000404 	addi	fp,sp,16
 509388c:	e13ffe15 	stw	r4,-8(fp)
 5093890:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 5093894:	e0bffe17 	ldw	r2,-8(fp)
 5093898:	10000326 	beq	r2,zero,50938a8 <alt_dev_llist_insert+0x2c>
 509389c:	e0bffe17 	ldw	r2,-8(fp)
 50938a0:	10800217 	ldw	r2,8(r2)
 50938a4:	1000061e 	bne	r2,zero,50938c0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 50938a8:	509382c0 	call	509382c <alt_get_errno>
 50938ac:	1007883a 	mov	r3,r2
 50938b0:	00800584 	movi	r2,22
 50938b4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 50938b8:	00bffa84 	movi	r2,-22
 50938bc:	00001306 	br	509390c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 50938c0:	e0bffe17 	ldw	r2,-8(fp)
 50938c4:	e0ffff17 	ldw	r3,-4(fp)
 50938c8:	e0fffc15 	stw	r3,-16(fp)
 50938cc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 50938d0:	e0bffd17 	ldw	r2,-12(fp)
 50938d4:	e0fffc17 	ldw	r3,-16(fp)
 50938d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 50938dc:	e0bffc17 	ldw	r2,-16(fp)
 50938e0:	10c00017 	ldw	r3,0(r2)
 50938e4:	e0bffd17 	ldw	r2,-12(fp)
 50938e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 50938ec:	e0bffc17 	ldw	r2,-16(fp)
 50938f0:	10800017 	ldw	r2,0(r2)
 50938f4:	e0fffd17 	ldw	r3,-12(fp)
 50938f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 50938fc:	e0bffc17 	ldw	r2,-16(fp)
 5093900:	e0fffd17 	ldw	r3,-12(fp)
 5093904:	10c00015 	stw	r3,0(r2)

  return 0;  
 5093908:	0005883a 	mov	r2,zero
}
 509390c:	e037883a 	mov	sp,fp
 5093910:	dfc00117 	ldw	ra,4(sp)
 5093914:	df000017 	ldw	fp,0(sp)
 5093918:	dec00204 	addi	sp,sp,8
 509391c:	f800283a 	ret

05093920 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 5093920:	defffd04 	addi	sp,sp,-12
 5093924:	dfc00215 	stw	ra,8(sp)
 5093928:	df000115 	stw	fp,4(sp)
 509392c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5093930:	00814274 	movhi	r2,1289
 5093934:	10923104 	addi	r2,r2,18628
 5093938:	e0bfff15 	stw	r2,-4(fp)
 509393c:	00000606 	br	5093958 <_do_ctors+0x38>
        (*ctor) (); 
 5093940:	e0bfff17 	ldw	r2,-4(fp)
 5093944:	10800017 	ldw	r2,0(r2)
 5093948:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 509394c:	e0bfff17 	ldw	r2,-4(fp)
 5093950:	10bfff04 	addi	r2,r2,-4
 5093954:	e0bfff15 	stw	r2,-4(fp)
 5093958:	e0ffff17 	ldw	r3,-4(fp)
 509395c:	00814274 	movhi	r2,1289
 5093960:	10923204 	addi	r2,r2,18632
 5093964:	18bff62e 	bgeu	r3,r2,5093940 <__alt_data_end+0xfffc5740>
        (*ctor) (); 
}
 5093968:	e037883a 	mov	sp,fp
 509396c:	dfc00117 	ldw	ra,4(sp)
 5093970:	df000017 	ldw	fp,0(sp)
 5093974:	dec00204 	addi	sp,sp,8
 5093978:	f800283a 	ret

0509397c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 509397c:	defffd04 	addi	sp,sp,-12
 5093980:	dfc00215 	stw	ra,8(sp)
 5093984:	df000115 	stw	fp,4(sp)
 5093988:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 509398c:	00814274 	movhi	r2,1289
 5093990:	10923104 	addi	r2,r2,18628
 5093994:	e0bfff15 	stw	r2,-4(fp)
 5093998:	00000606 	br	50939b4 <_do_dtors+0x38>
        (*dtor) (); 
 509399c:	e0bfff17 	ldw	r2,-4(fp)
 50939a0:	10800017 	ldw	r2,0(r2)
 50939a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50939a8:	e0bfff17 	ldw	r2,-4(fp)
 50939ac:	10bfff04 	addi	r2,r2,-4
 50939b0:	e0bfff15 	stw	r2,-4(fp)
 50939b4:	e0ffff17 	ldw	r3,-4(fp)
 50939b8:	00814274 	movhi	r2,1289
 50939bc:	10923204 	addi	r2,r2,18632
 50939c0:	18bff62e 	bgeu	r3,r2,509399c <__alt_data_end+0xfffc579c>
        (*dtor) (); 
}
 50939c4:	e037883a 	mov	sp,fp
 50939c8:	dfc00117 	ldw	ra,4(sp)
 50939cc:	df000017 	ldw	fp,0(sp)
 50939d0:	dec00204 	addi	sp,sp,8
 50939d4:	f800283a 	ret

050939d8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 50939d8:	defffe04 	addi	sp,sp,-8
 50939dc:	dfc00115 	stw	ra,4(sp)
 50939e0:	df000015 	stw	fp,0(sp)
 50939e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 50939e8:	0009883a 	mov	r4,zero
 50939ec:	01440004 	movi	r5,4096
 50939f0:	50944980 	call	5094498 <alt_icache_flush>
#endif
}
 50939f4:	e037883a 	mov	sp,fp
 50939f8:	dfc00117 	ldw	ra,4(sp)
 50939fc:	df000017 	ldw	fp,0(sp)
 5093a00:	dec00204 	addi	sp,sp,8
 5093a04:	f800283a 	ret

05093a08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5093a08:	defff904 	addi	sp,sp,-28
 5093a0c:	dfc00615 	stw	ra,24(sp)
 5093a10:	df000515 	stw	fp,20(sp)
 5093a14:	df000504 	addi	fp,sp,20
 5093a18:	e13ffc15 	stw	r4,-16(fp)
 5093a1c:	e17ffd15 	stw	r5,-12(fp)
 5093a20:	e1bffe15 	stw	r6,-8(fp)
 5093a24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 5093a28:	e0800217 	ldw	r2,8(fp)
 5093a2c:	d8800015 	stw	r2,0(sp)
 5093a30:	e13ffc17 	ldw	r4,-16(fp)
 5093a34:	e17ffd17 	ldw	r5,-12(fp)
 5093a38:	e1bffe17 	ldw	r6,-8(fp)
 5093a3c:	e1ffff17 	ldw	r7,-4(fp)
 5093a40:	5093be80 	call	5093be8 <alt_iic_isr_register>
}  
 5093a44:	e037883a 	mov	sp,fp
 5093a48:	dfc00117 	ldw	ra,4(sp)
 5093a4c:	df000017 	ldw	fp,0(sp)
 5093a50:	dec00204 	addi	sp,sp,8
 5093a54:	f800283a 	ret

05093a58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 5093a58:	defff904 	addi	sp,sp,-28
 5093a5c:	df000615 	stw	fp,24(sp)
 5093a60:	df000604 	addi	fp,sp,24
 5093a64:	e13ffe15 	stw	r4,-8(fp)
 5093a68:	e17fff15 	stw	r5,-4(fp)
 5093a6c:	e0bfff17 	ldw	r2,-4(fp)
 5093a70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093a74:	0005303a 	rdctl	r2,status
 5093a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093a7c:	e0fffb17 	ldw	r3,-20(fp)
 5093a80:	00bfff84 	movi	r2,-2
 5093a84:	1884703a 	and	r2,r3,r2
 5093a88:	1001703a 	wrctl	status,r2
  
  return context;
 5093a8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5093a90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 5093a94:	e0bffa17 	ldw	r2,-24(fp)
 5093a98:	00c00044 	movi	r3,1
 5093a9c:	1884983a 	sll	r2,r3,r2
 5093aa0:	1007883a 	mov	r3,r2
 5093aa4:	008142b4 	movhi	r2,1290
 5093aa8:	10a32e04 	addi	r2,r2,-29512
 5093aac:	10800017 	ldw	r2,0(r2)
 5093ab0:	1886b03a 	or	r3,r3,r2
 5093ab4:	008142b4 	movhi	r2,1290
 5093ab8:	10a32e04 	addi	r2,r2,-29512
 5093abc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5093ac0:	008142b4 	movhi	r2,1290
 5093ac4:	10a32e04 	addi	r2,r2,-29512
 5093ac8:	10800017 	ldw	r2,0(r2)
 5093acc:	100170fa 	wrctl	ienable,r2
 5093ad0:	e0bffc17 	ldw	r2,-16(fp)
 5093ad4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5093ad8:	e0bffd17 	ldw	r2,-12(fp)
 5093adc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5093ae0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 5093ae4:	0001883a 	nop
}
 5093ae8:	e037883a 	mov	sp,fp
 5093aec:	df000017 	ldw	fp,0(sp)
 5093af0:	dec00104 	addi	sp,sp,4
 5093af4:	f800283a 	ret

05093af8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 5093af8:	defff904 	addi	sp,sp,-28
 5093afc:	df000615 	stw	fp,24(sp)
 5093b00:	df000604 	addi	fp,sp,24
 5093b04:	e13ffe15 	stw	r4,-8(fp)
 5093b08:	e17fff15 	stw	r5,-4(fp)
 5093b0c:	e0bfff17 	ldw	r2,-4(fp)
 5093b10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093b14:	0005303a 	rdctl	r2,status
 5093b18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093b1c:	e0fffb17 	ldw	r3,-20(fp)
 5093b20:	00bfff84 	movi	r2,-2
 5093b24:	1884703a 	and	r2,r3,r2
 5093b28:	1001703a 	wrctl	status,r2
  
  return context;
 5093b2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5093b30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 5093b34:	e0bffa17 	ldw	r2,-24(fp)
 5093b38:	00c00044 	movi	r3,1
 5093b3c:	1884983a 	sll	r2,r3,r2
 5093b40:	0084303a 	nor	r2,zero,r2
 5093b44:	1007883a 	mov	r3,r2
 5093b48:	008142b4 	movhi	r2,1290
 5093b4c:	10a32e04 	addi	r2,r2,-29512
 5093b50:	10800017 	ldw	r2,0(r2)
 5093b54:	1886703a 	and	r3,r3,r2
 5093b58:	008142b4 	movhi	r2,1290
 5093b5c:	10a32e04 	addi	r2,r2,-29512
 5093b60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5093b64:	008142b4 	movhi	r2,1290
 5093b68:	10a32e04 	addi	r2,r2,-29512
 5093b6c:	10800017 	ldw	r2,0(r2)
 5093b70:	100170fa 	wrctl	ienable,r2
 5093b74:	e0bffc17 	ldw	r2,-16(fp)
 5093b78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5093b7c:	e0bffd17 	ldw	r2,-12(fp)
 5093b80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5093b84:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 5093b88:	0001883a 	nop
}
 5093b8c:	e037883a 	mov	sp,fp
 5093b90:	df000017 	ldw	fp,0(sp)
 5093b94:	dec00104 	addi	sp,sp,4
 5093b98:	f800283a 	ret

05093b9c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5093b9c:	defffc04 	addi	sp,sp,-16
 5093ba0:	df000315 	stw	fp,12(sp)
 5093ba4:	df000304 	addi	fp,sp,12
 5093ba8:	e13ffe15 	stw	r4,-8(fp)
 5093bac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5093bb0:	000530fa 	rdctl	r2,ienable
 5093bb4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 5093bb8:	e0bfff17 	ldw	r2,-4(fp)
 5093bbc:	00c00044 	movi	r3,1
 5093bc0:	1884983a 	sll	r2,r3,r2
 5093bc4:	1007883a 	mov	r3,r2
 5093bc8:	e0bffd17 	ldw	r2,-12(fp)
 5093bcc:	1884703a 	and	r2,r3,r2
 5093bd0:	1004c03a 	cmpne	r2,r2,zero
 5093bd4:	10803fcc 	andi	r2,r2,255
}
 5093bd8:	e037883a 	mov	sp,fp
 5093bdc:	df000017 	ldw	fp,0(sp)
 5093be0:	dec00104 	addi	sp,sp,4
 5093be4:	f800283a 	ret

05093be8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5093be8:	defff504 	addi	sp,sp,-44
 5093bec:	dfc00a15 	stw	ra,40(sp)
 5093bf0:	df000915 	stw	fp,36(sp)
 5093bf4:	df000904 	addi	fp,sp,36
 5093bf8:	e13ffc15 	stw	r4,-16(fp)
 5093bfc:	e17ffd15 	stw	r5,-12(fp)
 5093c00:	e1bffe15 	stw	r6,-8(fp)
 5093c04:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 5093c08:	00bffa84 	movi	r2,-22
 5093c0c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 5093c10:	e0bffd17 	ldw	r2,-12(fp)
 5093c14:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 5093c18:	e0bff817 	ldw	r2,-32(fp)
 5093c1c:	10800808 	cmpgei	r2,r2,32
 5093c20:	1000271e 	bne	r2,zero,5093cc0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5093c24:	0005303a 	rdctl	r2,status
 5093c28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5093c2c:	e0fffa17 	ldw	r3,-24(fp)
 5093c30:	00bfff84 	movi	r2,-2
 5093c34:	1884703a 	and	r2,r3,r2
 5093c38:	1001703a 	wrctl	status,r2
  
  return context;
 5093c3c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 5093c40:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 5093c44:	008142b4 	movhi	r2,1290
 5093c48:	10a34804 	addi	r2,r2,-29408
 5093c4c:	e0fff817 	ldw	r3,-32(fp)
 5093c50:	180690fa 	slli	r3,r3,3
 5093c54:	10c5883a 	add	r2,r2,r3
 5093c58:	e0fffe17 	ldw	r3,-8(fp)
 5093c5c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 5093c60:	008142b4 	movhi	r2,1290
 5093c64:	10a34804 	addi	r2,r2,-29408
 5093c68:	e0fff817 	ldw	r3,-32(fp)
 5093c6c:	180690fa 	slli	r3,r3,3
 5093c70:	10c5883a 	add	r2,r2,r3
 5093c74:	10800104 	addi	r2,r2,4
 5093c78:	e0ffff17 	ldw	r3,-4(fp)
 5093c7c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5093c80:	e0bffe17 	ldw	r2,-8(fp)
 5093c84:	10000526 	beq	r2,zero,5093c9c <alt_iic_isr_register+0xb4>
 5093c88:	e0bff817 	ldw	r2,-32(fp)
 5093c8c:	e13ffc17 	ldw	r4,-16(fp)
 5093c90:	100b883a 	mov	r5,r2
 5093c94:	5093a580 	call	5093a58 <alt_ic_irq_enable>
 5093c98:	00000406 	br	5093cac <alt_iic_isr_register+0xc4>
 5093c9c:	e0bff817 	ldw	r2,-32(fp)
 5093ca0:	e13ffc17 	ldw	r4,-16(fp)
 5093ca4:	100b883a 	mov	r5,r2
 5093ca8:	5093af80 	call	5093af8 <alt_ic_irq_disable>
 5093cac:	e0bff715 	stw	r2,-36(fp)
 5093cb0:	e0bff917 	ldw	r2,-28(fp)
 5093cb4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5093cb8:	e0bffb17 	ldw	r2,-20(fp)
 5093cbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 5093cc0:	e0bff717 	ldw	r2,-36(fp)
}
 5093cc4:	e037883a 	mov	sp,fp
 5093cc8:	dfc00117 	ldw	ra,4(sp)
 5093ccc:	df000017 	ldw	fp,0(sp)
 5093cd0:	dec00204 	addi	sp,sp,8
 5093cd4:	f800283a 	ret

05093cd8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5093cd8:	defff904 	addi	sp,sp,-28
 5093cdc:	dfc00615 	stw	ra,24(sp)
 5093ce0:	df000515 	stw	fp,20(sp)
 5093ce4:	df000504 	addi	fp,sp,20
 5093ce8:	e13ffc15 	stw	r4,-16(fp)
 5093cec:	e17ffd15 	stw	r5,-12(fp)
 5093cf0:	e1bffe15 	stw	r6,-8(fp)
 5093cf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 5093cf8:	e13ffd17 	ldw	r4,-12(fp)
 5093cfc:	e17ffe17 	ldw	r5,-8(fp)
 5093d00:	e1bfff17 	ldw	r6,-4(fp)
 5093d04:	5093f2c0 	call	5093f2c <open>
 5093d08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 5093d0c:	e0bffb17 	ldw	r2,-20(fp)
 5093d10:	10001c16 	blt	r2,zero,5093d84 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 5093d14:	00814274 	movhi	r2,1289
 5093d18:	1097dd04 	addi	r2,r2,24436
 5093d1c:	e0fffb17 	ldw	r3,-20(fp)
 5093d20:	18c00324 	muli	r3,r3,12
 5093d24:	10c5883a 	add	r2,r2,r3
 5093d28:	10c00017 	ldw	r3,0(r2)
 5093d2c:	e0bffc17 	ldw	r2,-16(fp)
 5093d30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5093d34:	00814274 	movhi	r2,1289
 5093d38:	1097dd04 	addi	r2,r2,24436
 5093d3c:	e0fffb17 	ldw	r3,-20(fp)
 5093d40:	18c00324 	muli	r3,r3,12
 5093d44:	10c5883a 	add	r2,r2,r3
 5093d48:	10800104 	addi	r2,r2,4
 5093d4c:	10c00017 	ldw	r3,0(r2)
 5093d50:	e0bffc17 	ldw	r2,-16(fp)
 5093d54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5093d58:	00814274 	movhi	r2,1289
 5093d5c:	1097dd04 	addi	r2,r2,24436
 5093d60:	e0fffb17 	ldw	r3,-20(fp)
 5093d64:	18c00324 	muli	r3,r3,12
 5093d68:	10c5883a 	add	r2,r2,r3
 5093d6c:	10800204 	addi	r2,r2,8
 5093d70:	10c00017 	ldw	r3,0(r2)
 5093d74:	e0bffc17 	ldw	r2,-16(fp)
 5093d78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5093d7c:	e13ffb17 	ldw	r4,-20(fp)
 5093d80:	50926b40 	call	50926b4 <alt_release_fd>
  }
} 
 5093d84:	e037883a 	mov	sp,fp
 5093d88:	dfc00117 	ldw	ra,4(sp)
 5093d8c:	df000017 	ldw	fp,0(sp)
 5093d90:	dec00204 	addi	sp,sp,8
 5093d94:	f800283a 	ret

05093d98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5093d98:	defffb04 	addi	sp,sp,-20
 5093d9c:	dfc00415 	stw	ra,16(sp)
 5093da0:	df000315 	stw	fp,12(sp)
 5093da4:	df000304 	addi	fp,sp,12
 5093da8:	e13ffd15 	stw	r4,-12(fp)
 5093dac:	e17ffe15 	stw	r5,-8(fp)
 5093db0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 5093db4:	01014274 	movhi	r4,1289
 5093db8:	2117e004 	addi	r4,r4,24448
 5093dbc:	e17ffd17 	ldw	r5,-12(fp)
 5093dc0:	01800044 	movi	r6,1
 5093dc4:	01c07fc4 	movi	r7,511
 5093dc8:	5093cd80 	call	5093cd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 5093dcc:	01014274 	movhi	r4,1289
 5093dd0:	2117dd04 	addi	r4,r4,24436
 5093dd4:	e17ffe17 	ldw	r5,-8(fp)
 5093dd8:	000d883a 	mov	r6,zero
 5093ddc:	01c07fc4 	movi	r7,511
 5093de0:	5093cd80 	call	5093cd8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5093de4:	01014274 	movhi	r4,1289
 5093de8:	2117e304 	addi	r4,r4,24460
 5093dec:	e17fff17 	ldw	r5,-4(fp)
 5093df0:	01800044 	movi	r6,1
 5093df4:	01c07fc4 	movi	r7,511
 5093df8:	5093cd80 	call	5093cd8 <alt_open_fd>
}  
 5093dfc:	e037883a 	mov	sp,fp
 5093e00:	dfc00117 	ldw	ra,4(sp)
 5093e04:	df000017 	ldw	fp,0(sp)
 5093e08:	dec00204 	addi	sp,sp,8
 5093e0c:	f800283a 	ret

05093e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5093e10:	defffe04 	addi	sp,sp,-8
 5093e14:	dfc00115 	stw	ra,4(sp)
 5093e18:	df000015 	stw	fp,0(sp)
 5093e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5093e20:	00814274 	movhi	r2,1289
 5093e24:	109c6004 	addi	r2,r2,29056
 5093e28:	10800017 	ldw	r2,0(r2)
 5093e2c:	10000526 	beq	r2,zero,5093e44 <alt_get_errno+0x34>
 5093e30:	00814274 	movhi	r2,1289
 5093e34:	109c6004 	addi	r2,r2,29056
 5093e38:	10800017 	ldw	r2,0(r2)
 5093e3c:	103ee83a 	callr	r2
 5093e40:	00000206 	br	5093e4c <alt_get_errno+0x3c>
 5093e44:	008142b4 	movhi	r2,1290
 5093e48:	10a32d04 	addi	r2,r2,-29516
}
 5093e4c:	e037883a 	mov	sp,fp
 5093e50:	dfc00117 	ldw	ra,4(sp)
 5093e54:	df000017 	ldw	fp,0(sp)
 5093e58:	dec00204 	addi	sp,sp,8
 5093e5c:	f800283a 	ret

05093e60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 5093e60:	defffd04 	addi	sp,sp,-12
 5093e64:	df000215 	stw	fp,8(sp)
 5093e68:	df000204 	addi	fp,sp,8
 5093e6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 5093e70:	e0bfff17 	ldw	r2,-4(fp)
 5093e74:	10800217 	ldw	r2,8(r2)
 5093e78:	10d00034 	orhi	r3,r2,16384
 5093e7c:	e0bfff17 	ldw	r2,-4(fp)
 5093e80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5093e84:	e03ffe15 	stw	zero,-8(fp)
 5093e88:	00001d06 	br	5093f00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5093e8c:	00814274 	movhi	r2,1289
 5093e90:	1097dd04 	addi	r2,r2,24436
 5093e94:	e0fffe17 	ldw	r3,-8(fp)
 5093e98:	18c00324 	muli	r3,r3,12
 5093e9c:	10c5883a 	add	r2,r2,r3
 5093ea0:	10c00017 	ldw	r3,0(r2)
 5093ea4:	e0bfff17 	ldw	r2,-4(fp)
 5093ea8:	10800017 	ldw	r2,0(r2)
 5093eac:	1880111e 	bne	r3,r2,5093ef4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5093eb0:	00814274 	movhi	r2,1289
 5093eb4:	1097dd04 	addi	r2,r2,24436
 5093eb8:	e0fffe17 	ldw	r3,-8(fp)
 5093ebc:	18c00324 	muli	r3,r3,12
 5093ec0:	10c5883a 	add	r2,r2,r3
 5093ec4:	10800204 	addi	r2,r2,8
 5093ec8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5093ecc:	1000090e 	bge	r2,zero,5093ef4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 5093ed0:	e0bffe17 	ldw	r2,-8(fp)
 5093ed4:	10c00324 	muli	r3,r2,12
 5093ed8:	00814274 	movhi	r2,1289
 5093edc:	1097dd04 	addi	r2,r2,24436
 5093ee0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5093ee4:	e0bfff17 	ldw	r2,-4(fp)
 5093ee8:	18800226 	beq	r3,r2,5093ef4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5093eec:	00bffcc4 	movi	r2,-13
 5093ef0:	00000a06 	br	5093f1c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5093ef4:	e0bffe17 	ldw	r2,-8(fp)
 5093ef8:	10800044 	addi	r2,r2,1
 5093efc:	e0bffe15 	stw	r2,-8(fp)
 5093f00:	00814274 	movhi	r2,1289
 5093f04:	109c5f04 	addi	r2,r2,29052
 5093f08:	10800017 	ldw	r2,0(r2)
 5093f0c:	1007883a 	mov	r3,r2
 5093f10:	e0bffe17 	ldw	r2,-8(fp)
 5093f14:	18bfdd2e 	bgeu	r3,r2,5093e8c <__alt_data_end+0xfffc5c8c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5093f18:	0005883a 	mov	r2,zero
}
 5093f1c:	e037883a 	mov	sp,fp
 5093f20:	df000017 	ldw	fp,0(sp)
 5093f24:	dec00104 	addi	sp,sp,4
 5093f28:	f800283a 	ret

05093f2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5093f2c:	defff604 	addi	sp,sp,-40
 5093f30:	dfc00915 	stw	ra,36(sp)
 5093f34:	df000815 	stw	fp,32(sp)
 5093f38:	df000804 	addi	fp,sp,32
 5093f3c:	e13ffd15 	stw	r4,-12(fp)
 5093f40:	e17ffe15 	stw	r5,-8(fp)
 5093f44:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5093f48:	00bfffc4 	movi	r2,-1
 5093f4c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 5093f50:	00bffb44 	movi	r2,-19
 5093f54:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 5093f58:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5093f5c:	e13ffd17 	ldw	r4,-12(fp)
 5093f60:	01414274 	movhi	r5,1289
 5093f64:	295c5d04 	addi	r5,r5,29044
 5093f68:	50942400 	call	5094240 <alt_find_dev>
 5093f6c:	e0bff815 	stw	r2,-32(fp)
 5093f70:	e0bff817 	ldw	r2,-32(fp)
 5093f74:	1000051e 	bne	r2,zero,5093f8c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5093f78:	e13ffd17 	ldw	r4,-12(fp)
 5093f7c:	50942d00 	call	50942d0 <alt_find_file>
 5093f80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 5093f84:	00800044 	movi	r2,1
 5093f88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5093f8c:	e0bff817 	ldw	r2,-32(fp)
 5093f90:	10002926 	beq	r2,zero,5094038 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 5093f94:	e13ff817 	ldw	r4,-32(fp)
 5093f98:	50943e40 	call	50943e4 <alt_get_fd>
 5093f9c:	e0bff915 	stw	r2,-28(fp)
 5093fa0:	e0bff917 	ldw	r2,-28(fp)
 5093fa4:	1000030e 	bge	r2,zero,5093fb4 <open+0x88>
    {
      status = index;
 5093fa8:	e0bff917 	ldw	r2,-28(fp)
 5093fac:	e0bffa15 	stw	r2,-24(fp)
 5093fb0:	00002306 	br	5094040 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 5093fb4:	e0bff917 	ldw	r2,-28(fp)
 5093fb8:	10c00324 	muli	r3,r2,12
 5093fbc:	00814274 	movhi	r2,1289
 5093fc0:	1097dd04 	addi	r2,r2,24436
 5093fc4:	1885883a 	add	r2,r3,r2
 5093fc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5093fcc:	e0fffe17 	ldw	r3,-8(fp)
 5093fd0:	00900034 	movhi	r2,16384
 5093fd4:	10bfffc4 	addi	r2,r2,-1
 5093fd8:	1886703a 	and	r3,r3,r2
 5093fdc:	e0bffc17 	ldw	r2,-16(fp)
 5093fe0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 5093fe4:	e0bffb17 	ldw	r2,-20(fp)
 5093fe8:	1000051e 	bne	r2,zero,5094000 <open+0xd4>
 5093fec:	e13ffc17 	ldw	r4,-16(fp)
 5093ff0:	5093e600 	call	5093e60 <alt_file_locked>
 5093ff4:	e0bffa15 	stw	r2,-24(fp)
 5093ff8:	e0bffa17 	ldw	r2,-24(fp)
 5093ffc:	10001016 	blt	r2,zero,5094040 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 5094000:	e0bff817 	ldw	r2,-32(fp)
 5094004:	10800317 	ldw	r2,12(r2)
 5094008:	10000826 	beq	r2,zero,509402c <open+0x100>
 509400c:	e0bff817 	ldw	r2,-32(fp)
 5094010:	10800317 	ldw	r2,12(r2)
 5094014:	e13ffc17 	ldw	r4,-16(fp)
 5094018:	e17ffd17 	ldw	r5,-12(fp)
 509401c:	e1bffe17 	ldw	r6,-8(fp)
 5094020:	e1ffff17 	ldw	r7,-4(fp)
 5094024:	103ee83a 	callr	r2
 5094028:	00000106 	br	5094030 <open+0x104>
 509402c:	0005883a 	mov	r2,zero
 5094030:	e0bffa15 	stw	r2,-24(fp)
 5094034:	00000206 	br	5094040 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 5094038:	00bffb44 	movi	r2,-19
 509403c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5094040:	e0bffa17 	ldw	r2,-24(fp)
 5094044:	1000090e 	bge	r2,zero,509406c <open+0x140>
  {
    alt_release_fd (index);  
 5094048:	e13ff917 	ldw	r4,-28(fp)
 509404c:	50926b40 	call	50926b4 <alt_release_fd>
    ALT_ERRNO = -status;
 5094050:	5093e100 	call	5093e10 <alt_get_errno>
 5094054:	1007883a 	mov	r3,r2
 5094058:	e0bffa17 	ldw	r2,-24(fp)
 509405c:	0085c83a 	sub	r2,zero,r2
 5094060:	18800015 	stw	r2,0(r3)
    return -1;
 5094064:	00bfffc4 	movi	r2,-1
 5094068:	00000106 	br	5094070 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 509406c:	e0bff917 	ldw	r2,-28(fp)
}
 5094070:	e037883a 	mov	sp,fp
 5094074:	dfc00117 	ldw	ra,4(sp)
 5094078:	df000017 	ldw	fp,0(sp)
 509407c:	dec00204 	addi	sp,sp,8
 5094080:	f800283a 	ret

05094084 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 5094084:	defffa04 	addi	sp,sp,-24
 5094088:	df000515 	stw	fp,20(sp)
 509408c:	df000504 	addi	fp,sp,20
 5094090:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5094094:	0005303a 	rdctl	r2,status
 5094098:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 509409c:	e0fffc17 	ldw	r3,-16(fp)
 50940a0:	00bfff84 	movi	r2,-2
 50940a4:	1884703a 	and	r2,r3,r2
 50940a8:	1001703a 	wrctl	status,r2
  
  return context;
 50940ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 50940b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 50940b4:	e0bfff17 	ldw	r2,-4(fp)
 50940b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 50940bc:	e0bffd17 	ldw	r2,-12(fp)
 50940c0:	10800017 	ldw	r2,0(r2)
 50940c4:	e0fffd17 	ldw	r3,-12(fp)
 50940c8:	18c00117 	ldw	r3,4(r3)
 50940cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 50940d0:	e0bffd17 	ldw	r2,-12(fp)
 50940d4:	10800117 	ldw	r2,4(r2)
 50940d8:	e0fffd17 	ldw	r3,-12(fp)
 50940dc:	18c00017 	ldw	r3,0(r3)
 50940e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 50940e4:	e0bffd17 	ldw	r2,-12(fp)
 50940e8:	e0fffd17 	ldw	r3,-12(fp)
 50940ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 50940f0:	e0bffd17 	ldw	r2,-12(fp)
 50940f4:	e0fffd17 	ldw	r3,-12(fp)
 50940f8:	10c00015 	stw	r3,0(r2)
 50940fc:	e0bffb17 	ldw	r2,-20(fp)
 5094100:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5094104:	e0bffe17 	ldw	r2,-8(fp)
 5094108:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 509410c:	e037883a 	mov	sp,fp
 5094110:	df000017 	ldw	fp,0(sp)
 5094114:	dec00104 	addi	sp,sp,4
 5094118:	f800283a 	ret

0509411c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 509411c:	defffb04 	addi	sp,sp,-20
 5094120:	dfc00415 	stw	ra,16(sp)
 5094124:	df000315 	stw	fp,12(sp)
 5094128:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 509412c:	d0a00e17 	ldw	r2,-32712(gp)
 5094130:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 5094134:	d0a6de17 	ldw	r2,-25736(gp)
 5094138:	10800044 	addi	r2,r2,1
 509413c:	d0a6de15 	stw	r2,-25736(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5094140:	00002e06 	br	50941fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 5094144:	e0bffd17 	ldw	r2,-12(fp)
 5094148:	10800017 	ldw	r2,0(r2)
 509414c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 5094150:	e0bffd17 	ldw	r2,-12(fp)
 5094154:	10800403 	ldbu	r2,16(r2)
 5094158:	10803fcc 	andi	r2,r2,255
 509415c:	10000426 	beq	r2,zero,5094170 <alt_tick+0x54>
 5094160:	d0a6de17 	ldw	r2,-25736(gp)
 5094164:	1000021e 	bne	r2,zero,5094170 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 5094168:	e0bffd17 	ldw	r2,-12(fp)
 509416c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 5094170:	e0bffd17 	ldw	r2,-12(fp)
 5094174:	10800217 	ldw	r2,8(r2)
 5094178:	d0e6de17 	ldw	r3,-25736(gp)
 509417c:	18801d36 	bltu	r3,r2,50941f4 <alt_tick+0xd8>
 5094180:	e0bffd17 	ldw	r2,-12(fp)
 5094184:	10800403 	ldbu	r2,16(r2)
 5094188:	10803fcc 	andi	r2,r2,255
 509418c:	1000191e 	bne	r2,zero,50941f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 5094190:	e0bffd17 	ldw	r2,-12(fp)
 5094194:	10800317 	ldw	r2,12(r2)
 5094198:	e0fffd17 	ldw	r3,-12(fp)
 509419c:	18c00517 	ldw	r3,20(r3)
 50941a0:	1809883a 	mov	r4,r3
 50941a4:	103ee83a 	callr	r2
 50941a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 50941ac:	e0bfff17 	ldw	r2,-4(fp)
 50941b0:	1000031e 	bne	r2,zero,50941c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 50941b4:	e13ffd17 	ldw	r4,-12(fp)
 50941b8:	50940840 	call	5094084 <alt_alarm_stop>
 50941bc:	00000d06 	br	50941f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 50941c0:	e0bffd17 	ldw	r2,-12(fp)
 50941c4:	10c00217 	ldw	r3,8(r2)
 50941c8:	e0bfff17 	ldw	r2,-4(fp)
 50941cc:	1887883a 	add	r3,r3,r2
 50941d0:	e0bffd17 	ldw	r2,-12(fp)
 50941d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 50941d8:	e0bffd17 	ldw	r2,-12(fp)
 50941dc:	10c00217 	ldw	r3,8(r2)
 50941e0:	d0a6de17 	ldw	r2,-25736(gp)
 50941e4:	1880032e 	bgeu	r3,r2,50941f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 50941e8:	e0bffd17 	ldw	r2,-12(fp)
 50941ec:	00c00044 	movi	r3,1
 50941f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 50941f4:	e0bffe17 	ldw	r2,-8(fp)
 50941f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 50941fc:	e0fffd17 	ldw	r3,-12(fp)
 5094200:	d0a00e04 	addi	r2,gp,-32712
 5094204:	18bfcf1e 	bne	r3,r2,5094144 <__alt_data_end+0xfffc5f44>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5094208:	0001883a 	nop
}
 509420c:	e037883a 	mov	sp,fp
 5094210:	dfc00117 	ldw	ra,4(sp)
 5094214:	df000017 	ldw	fp,0(sp)
 5094218:	dec00204 	addi	sp,sp,8
 509421c:	f800283a 	ret

05094220 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 5094220:	deffff04 	addi	sp,sp,-4
 5094224:	df000015 	stw	fp,0(sp)
 5094228:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 509422c:	000170fa 	wrctl	ienable,zero
}
 5094230:	e037883a 	mov	sp,fp
 5094234:	df000017 	ldw	fp,0(sp)
 5094238:	dec00104 	addi	sp,sp,4
 509423c:	f800283a 	ret

05094240 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5094240:	defffa04 	addi	sp,sp,-24
 5094244:	dfc00515 	stw	ra,20(sp)
 5094248:	df000415 	stw	fp,16(sp)
 509424c:	df000404 	addi	fp,sp,16
 5094250:	e13ffe15 	stw	r4,-8(fp)
 5094254:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5094258:	e0bfff17 	ldw	r2,-4(fp)
 509425c:	10800017 	ldw	r2,0(r2)
 5094260:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5094264:	e13ffe17 	ldw	r4,-8(fp)
 5094268:	50829c80 	call	50829c8 <strlen>
 509426c:	10800044 	addi	r2,r2,1
 5094270:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5094274:	00000d06 	br	50942ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 5094278:	e0bffc17 	ldw	r2,-16(fp)
 509427c:	10c00217 	ldw	r3,8(r2)
 5094280:	e0bffd17 	ldw	r2,-12(fp)
 5094284:	1809883a 	mov	r4,r3
 5094288:	e17ffe17 	ldw	r5,-8(fp)
 509428c:	100d883a 	mov	r6,r2
 5094290:	50945700 	call	5094570 <memcmp>
 5094294:	1000021e 	bne	r2,zero,50942a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 5094298:	e0bffc17 	ldw	r2,-16(fp)
 509429c:	00000706 	br	50942bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 50942a0:	e0bffc17 	ldw	r2,-16(fp)
 50942a4:	10800017 	ldw	r2,0(r2)
 50942a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50942ac:	e0fffc17 	ldw	r3,-16(fp)
 50942b0:	e0bfff17 	ldw	r2,-4(fp)
 50942b4:	18bff01e 	bne	r3,r2,5094278 <__alt_data_end+0xfffc6078>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 50942b8:	0005883a 	mov	r2,zero
}
 50942bc:	e037883a 	mov	sp,fp
 50942c0:	dfc00117 	ldw	ra,4(sp)
 50942c4:	df000017 	ldw	fp,0(sp)
 50942c8:	dec00204 	addi	sp,sp,8
 50942cc:	f800283a 	ret

050942d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 50942d0:	defffb04 	addi	sp,sp,-20
 50942d4:	dfc00415 	stw	ra,16(sp)
 50942d8:	df000315 	stw	fp,12(sp)
 50942dc:	df000304 	addi	fp,sp,12
 50942e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 50942e4:	00814274 	movhi	r2,1289
 50942e8:	109c5b04 	addi	r2,r2,29036
 50942ec:	10800017 	ldw	r2,0(r2)
 50942f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50942f4:	00003106 	br	50943bc <alt_find_file+0xec>
  {
    len = strlen(next->name);
 50942f8:	e0bffd17 	ldw	r2,-12(fp)
 50942fc:	10800217 	ldw	r2,8(r2)
 5094300:	1009883a 	mov	r4,r2
 5094304:	50829c80 	call	50829c8 <strlen>
 5094308:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 509430c:	e0bffd17 	ldw	r2,-12(fp)
 5094310:	10c00217 	ldw	r3,8(r2)
 5094314:	e0bffe17 	ldw	r2,-8(fp)
 5094318:	10bfffc4 	addi	r2,r2,-1
 509431c:	1885883a 	add	r2,r3,r2
 5094320:	10800003 	ldbu	r2,0(r2)
 5094324:	10803fcc 	andi	r2,r2,255
 5094328:	1080201c 	xori	r2,r2,128
 509432c:	10bfe004 	addi	r2,r2,-128
 5094330:	10800bd8 	cmpnei	r2,r2,47
 5094334:	1000031e 	bne	r2,zero,5094344 <alt_find_file+0x74>
    {
      len -= 1;
 5094338:	e0bffe17 	ldw	r2,-8(fp)
 509433c:	10bfffc4 	addi	r2,r2,-1
 5094340:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 5094344:	e0bffe17 	ldw	r2,-8(fp)
 5094348:	e0ffff17 	ldw	r3,-4(fp)
 509434c:	1885883a 	add	r2,r3,r2
 5094350:	10800003 	ldbu	r2,0(r2)
 5094354:	10803fcc 	andi	r2,r2,255
 5094358:	1080201c 	xori	r2,r2,128
 509435c:	10bfe004 	addi	r2,r2,-128
 5094360:	10800be0 	cmpeqi	r2,r2,47
 5094364:	1000081e 	bne	r2,zero,5094388 <alt_find_file+0xb8>
 5094368:	e0bffe17 	ldw	r2,-8(fp)
 509436c:	e0ffff17 	ldw	r3,-4(fp)
 5094370:	1885883a 	add	r2,r3,r2
 5094374:	10800003 	ldbu	r2,0(r2)
 5094378:	10803fcc 	andi	r2,r2,255
 509437c:	1080201c 	xori	r2,r2,128
 5094380:	10bfe004 	addi	r2,r2,-128
 5094384:	10000a1e 	bne	r2,zero,50943b0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 5094388:	e0bffd17 	ldw	r2,-12(fp)
 509438c:	10c00217 	ldw	r3,8(r2)
 5094390:	e0bffe17 	ldw	r2,-8(fp)
 5094394:	1809883a 	mov	r4,r3
 5094398:	e17fff17 	ldw	r5,-4(fp)
 509439c:	100d883a 	mov	r6,r2
 50943a0:	50945700 	call	5094570 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 50943a4:	1000021e 	bne	r2,zero,50943b0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 50943a8:	e0bffd17 	ldw	r2,-12(fp)
 50943ac:	00000806 	br	50943d0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 50943b0:	e0bffd17 	ldw	r2,-12(fp)
 50943b4:	10800017 	ldw	r2,0(r2)
 50943b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50943bc:	e0fffd17 	ldw	r3,-12(fp)
 50943c0:	00814274 	movhi	r2,1289
 50943c4:	109c5b04 	addi	r2,r2,29036
 50943c8:	18bfcb1e 	bne	r3,r2,50942f8 <__alt_data_end+0xfffc60f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 50943cc:	0005883a 	mov	r2,zero
}
 50943d0:	e037883a 	mov	sp,fp
 50943d4:	dfc00117 	ldw	ra,4(sp)
 50943d8:	df000017 	ldw	fp,0(sp)
 50943dc:	dec00204 	addi	sp,sp,8
 50943e0:	f800283a 	ret

050943e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 50943e4:	defffc04 	addi	sp,sp,-16
 50943e8:	df000315 	stw	fp,12(sp)
 50943ec:	df000304 	addi	fp,sp,12
 50943f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 50943f4:	00bffa04 	movi	r2,-24
 50943f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 50943fc:	e03ffd15 	stw	zero,-12(fp)
 5094400:	00001d06 	br	5094478 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 5094404:	00814274 	movhi	r2,1289
 5094408:	1097dd04 	addi	r2,r2,24436
 509440c:	e0fffd17 	ldw	r3,-12(fp)
 5094410:	18c00324 	muli	r3,r3,12
 5094414:	10c5883a 	add	r2,r2,r3
 5094418:	10800017 	ldw	r2,0(r2)
 509441c:	1000131e 	bne	r2,zero,509446c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 5094420:	00814274 	movhi	r2,1289
 5094424:	1097dd04 	addi	r2,r2,24436
 5094428:	e0fffd17 	ldw	r3,-12(fp)
 509442c:	18c00324 	muli	r3,r3,12
 5094430:	10c5883a 	add	r2,r2,r3
 5094434:	e0ffff17 	ldw	r3,-4(fp)
 5094438:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 509443c:	00814274 	movhi	r2,1289
 5094440:	109c5f04 	addi	r2,r2,29052
 5094444:	10c00017 	ldw	r3,0(r2)
 5094448:	e0bffd17 	ldw	r2,-12(fp)
 509444c:	1880040e 	bge	r3,r2,5094460 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 5094450:	00814274 	movhi	r2,1289
 5094454:	109c5f04 	addi	r2,r2,29052
 5094458:	e0fffd17 	ldw	r3,-12(fp)
 509445c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 5094460:	e0bffd17 	ldw	r2,-12(fp)
 5094464:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 5094468:	00000606 	br	5094484 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 509446c:	e0bffd17 	ldw	r2,-12(fp)
 5094470:	10800044 	addi	r2,r2,1
 5094474:	e0bffd15 	stw	r2,-12(fp)
 5094478:	e0bffd17 	ldw	r2,-12(fp)
 509447c:	10800810 	cmplti	r2,r2,32
 5094480:	103fe01e 	bne	r2,zero,5094404 <__alt_data_end+0xfffc6204>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5094484:	e0bffe17 	ldw	r2,-8(fp)
}
 5094488:	e037883a 	mov	sp,fp
 509448c:	df000017 	ldw	fp,0(sp)
 5094490:	dec00104 	addi	sp,sp,4
 5094494:	f800283a 	ret

05094498 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 5094498:	defffb04 	addi	sp,sp,-20
 509449c:	df000415 	stw	fp,16(sp)
 50944a0:	df000404 	addi	fp,sp,16
 50944a4:	e13ffe15 	stw	r4,-8(fp)
 50944a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 50944ac:	e0bfff17 	ldw	r2,-4(fp)
 50944b0:	10840070 	cmpltui	r2,r2,4097
 50944b4:	1000021e 	bne	r2,zero,50944c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 50944b8:	00840004 	movi	r2,4096
 50944bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 50944c0:	e0fffe17 	ldw	r3,-8(fp)
 50944c4:	e0bfff17 	ldw	r2,-4(fp)
 50944c8:	1885883a 	add	r2,r3,r2
 50944cc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 50944d0:	e0bffe17 	ldw	r2,-8(fp)
 50944d4:	e0bffc15 	stw	r2,-16(fp)
 50944d8:	00000506 	br	50944f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 50944dc:	e0bffc17 	ldw	r2,-16(fp)
 50944e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 50944e4:	e0bffc17 	ldw	r2,-16(fp)
 50944e8:	10800804 	addi	r2,r2,32
 50944ec:	e0bffc15 	stw	r2,-16(fp)
 50944f0:	e0fffc17 	ldw	r3,-16(fp)
 50944f4:	e0bffd17 	ldw	r2,-12(fp)
 50944f8:	18bff836 	bltu	r3,r2,50944dc <__alt_data_end+0xfffc62dc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 50944fc:	e0bffe17 	ldw	r2,-8(fp)
 5094500:	108007cc 	andi	r2,r2,31
 5094504:	10000226 	beq	r2,zero,5094510 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 5094508:	e0bffc17 	ldw	r2,-16(fp)
 509450c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 5094510:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 5094514:	e037883a 	mov	sp,fp
 5094518:	df000017 	ldw	fp,0(sp)
 509451c:	dec00104 	addi	sp,sp,4
 5094520:	f800283a 	ret

05094524 <atexit>:
 5094524:	200b883a 	mov	r5,r4
 5094528:	000d883a 	mov	r6,zero
 509452c:	0009883a 	mov	r4,zero
 5094530:	000f883a 	mov	r7,zero
 5094534:	50945ec1 	jmpi	50945ec <__register_exitproc>

05094538 <exit>:
 5094538:	defffe04 	addi	sp,sp,-8
 509453c:	000b883a 	mov	r5,zero
 5094540:	dc000015 	stw	r16,0(sp)
 5094544:	dfc00115 	stw	ra,4(sp)
 5094548:	2021883a 	mov	r16,r4
 509454c:	50947000 	call	5094700 <__call_exitprocs>
 5094550:	00814274 	movhi	r2,1289
 5094554:	109c5504 	addi	r2,r2,29012
 5094558:	11000017 	ldw	r4,0(r2)
 509455c:	20800f17 	ldw	r2,60(r4)
 5094560:	10000126 	beq	r2,zero,5094568 <exit+0x30>
 5094564:	103ee83a 	callr	r2
 5094568:	8009883a 	mov	r4,r16
 509456c:	50948940 	call	5094894 <_exit>

05094570 <memcmp>:
 5094570:	01c000c4 	movi	r7,3
 5094574:	3980192e 	bgeu	r7,r6,50945dc <memcmp+0x6c>
 5094578:	2144b03a 	or	r2,r4,r5
 509457c:	11c4703a 	and	r2,r2,r7
 5094580:	10000f26 	beq	r2,zero,50945c0 <memcmp+0x50>
 5094584:	20800003 	ldbu	r2,0(r4)
 5094588:	28c00003 	ldbu	r3,0(r5)
 509458c:	10c0151e 	bne	r2,r3,50945e4 <memcmp+0x74>
 5094590:	31bfff84 	addi	r6,r6,-2
 5094594:	01ffffc4 	movi	r7,-1
 5094598:	00000406 	br	50945ac <memcmp+0x3c>
 509459c:	20800003 	ldbu	r2,0(r4)
 50945a0:	28c00003 	ldbu	r3,0(r5)
 50945a4:	31bfffc4 	addi	r6,r6,-1
 50945a8:	10c00e1e 	bne	r2,r3,50945e4 <memcmp+0x74>
 50945ac:	21000044 	addi	r4,r4,1
 50945b0:	29400044 	addi	r5,r5,1
 50945b4:	31fff91e 	bne	r6,r7,509459c <__alt_data_end+0xfffc639c>
 50945b8:	0005883a 	mov	r2,zero
 50945bc:	f800283a 	ret
 50945c0:	20c00017 	ldw	r3,0(r4)
 50945c4:	28800017 	ldw	r2,0(r5)
 50945c8:	1880041e 	bne	r3,r2,50945dc <memcmp+0x6c>
 50945cc:	31bfff04 	addi	r6,r6,-4
 50945d0:	21000104 	addi	r4,r4,4
 50945d4:	29400104 	addi	r5,r5,4
 50945d8:	39bff936 	bltu	r7,r6,50945c0 <__alt_data_end+0xfffc63c0>
 50945dc:	303fe91e 	bne	r6,zero,5094584 <__alt_data_end+0xfffc6384>
 50945e0:	003ff506 	br	50945b8 <__alt_data_end+0xfffc63b8>
 50945e4:	10c5c83a 	sub	r2,r2,r3
 50945e8:	f800283a 	ret

050945ec <__register_exitproc>:
 50945ec:	00814274 	movhi	r2,1289
 50945f0:	defffa04 	addi	sp,sp,-24
 50945f4:	109c5504 	addi	r2,r2,29012
 50945f8:	dc000315 	stw	r16,12(sp)
 50945fc:	14000017 	ldw	r16,0(r2)
 5094600:	dc400415 	stw	r17,16(sp)
 5094604:	dfc00515 	stw	ra,20(sp)
 5094608:	80805217 	ldw	r2,328(r16)
 509460c:	2023883a 	mov	r17,r4
 5094610:	10003626 	beq	r2,zero,50946ec <__register_exitproc+0x100>
 5094614:	10c00117 	ldw	r3,4(r2)
 5094618:	010007c4 	movi	r4,31
 509461c:	20c00e16 	blt	r4,r3,5094658 <__register_exitproc+0x6c>
 5094620:	1a400044 	addi	r9,r3,1
 5094624:	8800211e 	bne	r17,zero,50946ac <__register_exitproc+0xc0>
 5094628:	18c00084 	addi	r3,r3,2
 509462c:	18c7883a 	add	r3,r3,r3
 5094630:	18c7883a 	add	r3,r3,r3
 5094634:	12400115 	stw	r9,4(r2)
 5094638:	10c7883a 	add	r3,r2,r3
 509463c:	19400015 	stw	r5,0(r3)
 5094640:	0005883a 	mov	r2,zero
 5094644:	dfc00517 	ldw	ra,20(sp)
 5094648:	dc400417 	ldw	r17,16(sp)
 509464c:	dc000317 	ldw	r16,12(sp)
 5094650:	dec00604 	addi	sp,sp,24
 5094654:	f800283a 	ret
 5094658:	00800034 	movhi	r2,0
 509465c:	10800004 	addi	r2,r2,0
 5094660:	10002526 	beq	r2,zero,50946f8 <__register_exitproc+0x10c>
 5094664:	01006404 	movi	r4,400
 5094668:	d9400015 	stw	r5,0(sp)
 509466c:	d9800115 	stw	r6,4(sp)
 5094670:	d9c00215 	stw	r7,8(sp)
 5094674:	00000000 	call	0 <__alt_mem_sdram>
 5094678:	d9400017 	ldw	r5,0(sp)
 509467c:	d9800117 	ldw	r6,4(sp)
 5094680:	d9c00217 	ldw	r7,8(sp)
 5094684:	10001c26 	beq	r2,zero,50946f8 <__register_exitproc+0x10c>
 5094688:	80c05217 	ldw	r3,328(r16)
 509468c:	10000115 	stw	zero,4(r2)
 5094690:	02400044 	movi	r9,1
 5094694:	10c00015 	stw	r3,0(r2)
 5094698:	80805215 	stw	r2,328(r16)
 509469c:	10006215 	stw	zero,392(r2)
 50946a0:	10006315 	stw	zero,396(r2)
 50946a4:	0007883a 	mov	r3,zero
 50946a8:	883fdf26 	beq	r17,zero,5094628 <__alt_data_end+0xfffc6428>
 50946ac:	18d1883a 	add	r8,r3,r3
 50946b0:	4211883a 	add	r8,r8,r8
 50946b4:	1211883a 	add	r8,r2,r8
 50946b8:	41802215 	stw	r6,136(r8)
 50946bc:	01000044 	movi	r4,1
 50946c0:	11806217 	ldw	r6,392(r2)
 50946c4:	20c8983a 	sll	r4,r4,r3
 50946c8:	310cb03a 	or	r6,r6,r4
 50946cc:	11806215 	stw	r6,392(r2)
 50946d0:	41c04215 	stw	r7,264(r8)
 50946d4:	01800084 	movi	r6,2
 50946d8:	89bfd31e 	bne	r17,r6,5094628 <__alt_data_end+0xfffc6428>
 50946dc:	11806317 	ldw	r6,396(r2)
 50946e0:	3108b03a 	or	r4,r6,r4
 50946e4:	11006315 	stw	r4,396(r2)
 50946e8:	003fcf06 	br	5094628 <__alt_data_end+0xfffc6428>
 50946ec:	80805304 	addi	r2,r16,332
 50946f0:	80805215 	stw	r2,328(r16)
 50946f4:	003fc706 	br	5094614 <__alt_data_end+0xfffc6414>
 50946f8:	00bfffc4 	movi	r2,-1
 50946fc:	003fd106 	br	5094644 <__alt_data_end+0xfffc6444>

05094700 <__call_exitprocs>:
 5094700:	00814274 	movhi	r2,1289
 5094704:	109c5504 	addi	r2,r2,29012
 5094708:	10800017 	ldw	r2,0(r2)
 509470c:	defff404 	addi	sp,sp,-48
 5094710:	dd800815 	stw	r22,32(sp)
 5094714:	d8800015 	stw	r2,0(sp)
 5094718:	10805204 	addi	r2,r2,328
 509471c:	dd000615 	stw	r20,24(sp)
 5094720:	dc800415 	stw	r18,16(sp)
 5094724:	dfc00b15 	stw	ra,44(sp)
 5094728:	df000a15 	stw	fp,40(sp)
 509472c:	ddc00915 	stw	r23,36(sp)
 5094730:	dd400715 	stw	r21,28(sp)
 5094734:	dcc00515 	stw	r19,20(sp)
 5094738:	dc400315 	stw	r17,12(sp)
 509473c:	dc000215 	stw	r16,8(sp)
 5094740:	2025883a 	mov	r18,r4
 5094744:	2829883a 	mov	r20,r5
 5094748:	d8800115 	stw	r2,4(sp)
 509474c:	05bfffc4 	movi	r22,-1
 5094750:	d8800017 	ldw	r2,0(sp)
 5094754:	14c05217 	ldw	r19,328(r2)
 5094758:	98001d26 	beq	r19,zero,50947d0 <__call_exitprocs+0xd0>
 509475c:	dd400117 	ldw	r21,4(sp)
 5094760:	98800117 	ldw	r2,4(r19)
 5094764:	173fffc4 	addi	fp,r2,-1
 5094768:	e0000d16 	blt	fp,zero,50947a0 <__call_exitprocs+0xa0>
 509476c:	14000044 	addi	r16,r2,1
 5094770:	8421883a 	add	r16,r16,r16
 5094774:	8421883a 	add	r16,r16,r16
 5094778:	84402004 	addi	r17,r16,128
 509477c:	9c63883a 	add	r17,r19,r17
 5094780:	9c21883a 	add	r16,r19,r16
 5094784:	a0001e26 	beq	r20,zero,5094800 <__call_exitprocs+0x100>
 5094788:	80804017 	ldw	r2,256(r16)
 509478c:	15001c26 	beq	r2,r20,5094800 <__call_exitprocs+0x100>
 5094790:	e73fffc4 	addi	fp,fp,-1
 5094794:	843fff04 	addi	r16,r16,-4
 5094798:	8c7fff04 	addi	r17,r17,-4
 509479c:	e5bff91e 	bne	fp,r22,5094784 <__alt_data_end+0xfffc6584>
 50947a0:	00800034 	movhi	r2,0
 50947a4:	10800004 	addi	r2,r2,0
 50947a8:	10000926 	beq	r2,zero,50947d0 <__call_exitprocs+0xd0>
 50947ac:	98800117 	ldw	r2,4(r19)
 50947b0:	1000311e 	bne	r2,zero,5094878 <__call_exitprocs+0x178>
 50947b4:	98800017 	ldw	r2,0(r19)
 50947b8:	10003426 	beq	r2,zero,509488c <__call_exitprocs+0x18c>
 50947bc:	9809883a 	mov	r4,r19
 50947c0:	a8800015 	stw	r2,0(r21)
 50947c4:	00000000 	call	0 <__alt_mem_sdram>
 50947c8:	acc00017 	ldw	r19,0(r21)
 50947cc:	983fe41e 	bne	r19,zero,5094760 <__alt_data_end+0xfffc6560>
 50947d0:	dfc00b17 	ldw	ra,44(sp)
 50947d4:	df000a17 	ldw	fp,40(sp)
 50947d8:	ddc00917 	ldw	r23,36(sp)
 50947dc:	dd800817 	ldw	r22,32(sp)
 50947e0:	dd400717 	ldw	r21,28(sp)
 50947e4:	dd000617 	ldw	r20,24(sp)
 50947e8:	dcc00517 	ldw	r19,20(sp)
 50947ec:	dc800417 	ldw	r18,16(sp)
 50947f0:	dc400317 	ldw	r17,12(sp)
 50947f4:	dc000217 	ldw	r16,8(sp)
 50947f8:	dec00c04 	addi	sp,sp,48
 50947fc:	f800283a 	ret
 5094800:	98800117 	ldw	r2,4(r19)
 5094804:	80c00017 	ldw	r3,0(r16)
 5094808:	10bfffc4 	addi	r2,r2,-1
 509480c:	17001526 	beq	r2,fp,5094864 <__call_exitprocs+0x164>
 5094810:	80000015 	stw	zero,0(r16)
 5094814:	183fde26 	beq	r3,zero,5094790 <__alt_data_end+0xfffc6590>
 5094818:	00800044 	movi	r2,1
 509481c:	1708983a 	sll	r4,r2,fp
 5094820:	98806217 	ldw	r2,392(r19)
 5094824:	9dc00117 	ldw	r23,4(r19)
 5094828:	2084703a 	and	r2,r4,r2
 509482c:	1000061e 	bne	r2,zero,5094848 <__call_exitprocs+0x148>
 5094830:	183ee83a 	callr	r3
 5094834:	98800117 	ldw	r2,4(r19)
 5094838:	15ffc51e 	bne	r2,r23,5094750 <__alt_data_end+0xfffc6550>
 509483c:	a8800017 	ldw	r2,0(r21)
 5094840:	14ffd326 	beq	r2,r19,5094790 <__alt_data_end+0xfffc6590>
 5094844:	003fc206 	br	5094750 <__alt_data_end+0xfffc6550>
 5094848:	98806317 	ldw	r2,396(r19)
 509484c:	2084703a 	and	r2,r4,r2
 5094850:	1000061e 	bne	r2,zero,509486c <__call_exitprocs+0x16c>
 5094854:	89400017 	ldw	r5,0(r17)
 5094858:	9009883a 	mov	r4,r18
 509485c:	183ee83a 	callr	r3
 5094860:	003ff406 	br	5094834 <__alt_data_end+0xfffc6634>
 5094864:	9f000115 	stw	fp,4(r19)
 5094868:	003fea06 	br	5094814 <__alt_data_end+0xfffc6614>
 509486c:	89000017 	ldw	r4,0(r17)
 5094870:	183ee83a 	callr	r3
 5094874:	003fef06 	br	5094834 <__alt_data_end+0xfffc6634>
 5094878:	98800017 	ldw	r2,0(r19)
 509487c:	982b883a 	mov	r21,r19
 5094880:	1027883a 	mov	r19,r2
 5094884:	983fb61e 	bne	r19,zero,5094760 <__alt_data_end+0xfffc6560>
 5094888:	003fd106 	br	50947d0 <__alt_data_end+0xfffc65d0>
 509488c:	0005883a 	mov	r2,zero
 5094890:	003ffa06 	br	509487c <__alt_data_end+0xfffc667c>

05094894 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5094894:	defffd04 	addi	sp,sp,-12
 5094898:	df000215 	stw	fp,8(sp)
 509489c:	df000204 	addi	fp,sp,8
 50948a0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 50948a4:	0001883a 	nop
 50948a8:	e0bfff17 	ldw	r2,-4(fp)
 50948ac:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 50948b0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 50948b4:	10000226 	beq	r2,zero,50948c0 <_exit+0x2c>
    ALT_SIM_FAIL();
 50948b8:	002af070 	cmpltui	zero,zero,43969
 50948bc:	00000106 	br	50948c4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 50948c0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 50948c4:	003fff06 	br	50948c4 <__alt_data_end+0xfffc66c4>
