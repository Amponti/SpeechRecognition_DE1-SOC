// Generated by FIR Compiler
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
// ************************************************************
// Copyright (C) 1991-2005 Altera Corporation
// Any megafunction design, and related net list (encrypted or decrypted),
// support information, device programming or simulation file, and any other
// associated documentation or information provided by Altera or a partner
// under Altera's Megafunction Partnership Program may be used only to
// program PLD devices (but not masked PLD devices) from Altera.  Any other
// use of such megafunction design, net list, support information, device
// programming or simulation file, or any other related documentation or
// information is prohibited for any other purpose, including, but not
// limited to modification, reverse engineering, de-compiling, or use with
// any other silicon devices, unless such use is explicitly licensed under
// a separate agreement with Altera or a megafunction partner.  Title to
// the intellectual property, including patents, copyrights, trademarks,
// trade secrets, or maskworks, embodied in any such megafunction design,
// net list, support information, device programming or simulation file, or
// any other related documentation or information provided by Altera or a
// megafunction partner, remains with Altera, the megafunction partner, or
// their respective licensors.  No other licenses, including any licenses
// needed under any third party's intellectual property, are provided herein.
// 00
// altera message_off 10036
(* altera_attribute = "-name MESSAGE_DISABLE 15400; -name MESSAGE_DISABLE 14130; -name MESSAGE_DISABLE 10036; -name MESSAGE_DISABLE 12020; -name MESSAGE_DISABLE 12030; -name MESSAGE_DISABLE 12010; -name MESSAGE_DISABLE 12110; -name MESSAGE_DISABLE 14320; -name MESSAGE_DISABLE 13410" *)
module LowPass_40Hz_st (clk, 
              rst, 
              data_in, 
              clk_en, 
              rdy_to_ld, 
              done, 
              fir_result); 
parameter DATA_WIDTH  = 12;
parameter COEF_WIDTH  = 16;
parameter ACCUM_WIDTH = 30;

parameter MSB_RM = 1;
parameter LSB_RM = 17;
parameter WIDTH_SAT = ACCUM_WIDTH-LSB_RM;
input clk, rst;
input [DATA_WIDTH-1:0] data_in;
input clk_en;
output rdy_to_ld;
wire rdy_to_ld;
wire rdy_int;
wire data_ld;
output done;
wire done;
wire done_int;
output [ACCUM_WIDTH-MSB_RM-LSB_RM-1:0] fir_result;
wire tdl_ld;
wire sa_rst;
wire sa_inv;
wire pre_rdy;
wire sym_rst;
wire addr_low;
assign addr_low = 1'b0;
wire ser_eab_0_n;
wire ser_eab_1_n;
wire [DATA_WIDTH : 0]data_ee;
assign data_ee = {data_in[DATA_WIDTH -1],data_in}; 
wire ser_dat_0_n;
par_ld_ser_tdl_nc Utdl_0_a(.clk(clk), .clk_en(clk_en), .rst(rst), .data_in(data_ee), .tdl_ld(pre_rdy),.data_out(ser_eab_0_n) );
defparam Utdl_0_a.WIDTH = 13;
wire ser_dat_1_n;
wire ser_dat_2_n;
wire ser_dat_3_n;
wire ser_dat_4_n;
wire ser_dat_5_n;
wire ser_dat_6_n;
wire ser_dat_7_n;
wire ser_dat_8_n;
wire ser_dat_9_n;
wire ser_dat_10_n;
wire ser_dat_11_n;
wire ser_dat_12_n;
wire ser_dat_13_n;
wire ser_dat_14_n;
wire [15:0]tdl_data_0_n;
lc_tdl_strat_cen Utdl_0_n (
  .clk(clk),
  .clk_en(clk_en),
  .data_ld(data_ld),
  .rst(rst),
  .data_in(ser_eab_0_n),
  .data_out(tdl_data_0_n),
  .ntdl(ser_eab_1_n) 
);
defparam Utdl_0_n.CORE_WIDTH = 16;
defparam Utdl_0_n.DEPTH = 13;
defparam Utdl_0_n.DEPTH_ADDR = 4;
defparam Utdl_0_n.WIDTH = 13;
sym_add_ser_cen sym_0_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(ser_eab_0_n),.b_in(tdl_data_0_n[13]),.data_out(ser_dat_0_n));
defparam sym_0_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_1_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[0]),.b_in(tdl_data_0_n[12]),.data_out(ser_dat_1_n));
defparam sym_1_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_2_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[1]),.b_in(tdl_data_0_n[11]),.data_out(ser_dat_2_n));
defparam sym_2_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_3_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[2]),.b_in(tdl_data_0_n[10]),.data_out(ser_dat_3_n));
defparam sym_3_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_4_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[3]),.b_in(tdl_data_0_n[9]),.data_out(ser_dat_4_n));
defparam sym_4_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_5_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[4]),.b_in(tdl_data_0_n[8]),.data_out(ser_dat_5_n));
defparam sym_5_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_6_n(.gclk_en(clk_en), .rst(sym_rst), .clk(clk),.a_in(tdl_data_0_n[5]),.b_in(tdl_data_0_n[7]),.data_out(ser_dat_6_n));
defparam sym_6_n.DATA_WIDTH = 1;
sym_add_ser_cen sym_7_n(.gclk_en(clk_en), .clk(clk), .rst(sym_rst),.a_in(tdl_data_0_n[6]),.b_in(1'b0),.data_out(ser_dat_7_n));
defparam sym_7_n.DATA_WIDTH = 1;
// --- ROM LUTs ---- 
wire [17:0] lut_val_0_n;
rom_lut_r_cen Ur0_n (.clk(clk),.gclk_en(clk_en),.addr_in( {ser_dat_4_n,ser_dat_3_n,ser_dat_2_n,ser_dat_1_n } ), .data_out( lut_val_0_n[14:0]) ) ;
defparam Ur0_n.DATA_WIDTH = 15;
defparam Ur0_n.C0 = 15'd                   0;
defparam Ur0_n.C1 = 15'd                   7;
defparam Ur0_n.C2 = 15'd                 327;
defparam Ur0_n.C3 = 15'd                 334;
defparam Ur0_n.C4 = 15'd                2455;
defparam Ur0_n.C5 = 15'd                2462;
defparam Ur0_n.C6 = 15'd                2782;
defparam Ur0_n.C7 = 15'd                2789;
defparam Ur0_n.C8 = 15'd                9239;
defparam Ur0_n.C9 = 15'd                9246;
defparam Ur0_n.CA = 15'd                9566;
defparam Ur0_n.CB = 15'd                9573;
defparam Ur0_n.CC = 15'd               11694;
defparam Ur0_n.CD = 15'd               11701;
defparam Ur0_n.CE = 15'd               12021;
defparam Ur0_n.CF = 15'd               12028;
assign lut_val_0_n[17] = lut_val_0_n[14];
assign lut_val_0_n[16] = lut_val_0_n[14];
assign lut_val_0_n[15] = lut_val_0_n[14];
wire [17:0] lut_val_1_n;
rom_lut_r_cen Ur1_n (.clk(clk),.gclk_en(clk_en),.addr_in( {addr_low,ser_dat_7_n,ser_dat_6_n,ser_dat_5_n } ), .data_out( lut_val_1_n[17:0]) ) ;
defparam Ur1_n.DATA_WIDTH = 18;
defparam Ur1_n.C0 = 18'd                   0;
defparam Ur1_n.C1 = 18'd               21883;
defparam Ur1_n.C2 = 18'd               35751;
defparam Ur1_n.C3 = 18'd               57634;
defparam Ur1_n.C4 = 18'd               41943;
defparam Ur1_n.C5 = 18'd               63826;
defparam Ur1_n.C6 = 18'd               77694;
defparam Ur1_n.C7 = 18'd               99577;
defparam Ur1_n.C8 = 18'd                   0;
defparam Ur1_n.C9 = 18'd               21883;
defparam Ur1_n.CA = 18'd               35751;
defparam Ur1_n.CB = 18'd               57634;
defparam Ur1_n.CC = 18'd               41943;
defparam Ur1_n.CD = 18'd               63826;
defparam Ur1_n.CE = 18'd               77694;
defparam Ur1_n.CF = 18'd               99577;
wire [18:0] tree_l_0_n_0_n;
sadd_lpm_cen Uaddl_0_n_0_n (.clk(clk),  .gclk_en(clk_en), .ain(lut_val_0_n), .bin(lut_val_1_n), .res(tree_l_0_n_0_n) );
defparam Uaddl_0_n_0_n.IN_WIDTH = 18;
defparam Uaddl_0_n_0_n.PIPE_DEPTH = 1;

wire [18:0] mac_res;
assign mac_res=tree_l_0_n_0_n;
wire [18:0] atree_res;
mac_tl Umtl (.clk(clk), 
             .data_in(mac_res),
             .data_out(atree_res));
defparam Umtl.DATA_WIDTH = 19;

// ---- Adder Tree Complete ---- 


wire [11:0] shft;
wire [19:0] accum;
scale_accum_cen Usa (.gclk_en(clk_en),  .clk(clk), .rst(sa_rst), .inv(sa_inv), .ain(atree_res), .accum_out(accum) );
defparam Usa.WIDTH_A = 19;


ser_shft_cen Usershft(.gclk_en(clk_en),  .clk(clk), .rst(1'b0), .ain(accum[0]), .shft_out(shft) );
defparam Usershft.SHIFT_WIDTH = 12;


wire    [31:0] fir_int_res;
scale_shft_comb_cen Usscx (.gclk_en(clk_en), .clk(clk), .ce(done_int), .accum(accum), .shft(shft), .res(fir_int_res) );
defparam Usscx.WIDTH_ACCM = 20;
defparam Usscx.WIDTH_SHFT = 12;
defparam Usscx.WIDTH_RES = 32;

// ---- Limiting Precision ---- 
wire [29:0]fir_int_res_fill;
assign fir_int_res_fill =  fir_int_res[29 :0];
parameter TOT_WIDTH = ACCUM_WIDTH;
assign fir_result = fir_int_res_fill[TOT_WIDTH-MSB_RM-1:LSB_RM];


assign rdy_to_ld = rdy_int;
ser_ctrl_cen Usc (.rst(rst), .clk(clk), .clk_en(clk_en), 
              .pre_rdy(pre_rdy), .data_ld(data_ld),
              .sa_rst_out(sa_rst), .ser_inv_out(sa_inv), 
              .rdy_to_ld(rdy_int), .sym_rst(sym_rst), 
              .tdl_ld(tdl_ld), .done_int(done_int), .done(done) ); 

defparam Usc.REG_LEN =13; 
defparam Usc.PIPE_DLY =5; 
defparam Usc.RST_DLY =8; 
defparam Usc.INV_DLY =9; 
defparam Usc.DONE_DLY =7; 
defparam Usc.DONE_HLD =3; 
defparam Usc.DONE_CNT_BIT =2; 
defparam Usc.CH_WIDTH =0; 
defparam Usc.NUM_CH =1; 

endmodule
